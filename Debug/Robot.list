
Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ecec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f88  0801ee80  0801ee80  0002ee80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fe08  0801fe08  00030218  2**0
                  CONTENTS
  4 .ARM          00000008  0801fe08  0801fe08  0002fe08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fe10  0801fe10  00030218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fe10  0801fe10  0002fe10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801fe14  0801fe14  0002fe14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0801fe18  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008764  20000218  08020030  00030218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000897c  08020030  0003897c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0007d590  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000a55b  00000000  00000000  000ad7d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00004b38  00000000  00000000  000b7d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00004748  00000000  00000000  000bc870  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036fa2  00000000  00000000  000c0fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00038b6e  00000000  00000000  000f7f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00132a4e  00000000  00000000  00130ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00263516  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00014f80  00000000  00000000  00263594  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801ee64 	.word	0x0801ee64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	0801ee64 	.word	0x0801ee64

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <UART_write>:
DWORD fre_clust;
uint32_t total, free_space;


void UART_write (char *string)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff f93d 	bl	80001d0 <strlen>
 8000f56:	4603      	mov	r3, r0
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	4803      	ldr	r0, [pc, #12]	; (8000f70 <UART_write+0x28>)
 8000f62:	f010 fd1b 	bl	801199c <HAL_UART_Transmit>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	2000591c 	.word	0x2000591c

08000f74 <Mount_USB>:



void Mount_USB (void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	490a      	ldr	r1, [pc, #40]	; (8000fa4 <Mount_USB+0x30>)
 8000f7c:	480a      	ldr	r0, [pc, #40]	; (8000fa8 <Mount_USB+0x34>)
 8000f7e:	f017 fa4f 	bl	8018420 <f_mount>
 8000f82:	4603      	mov	r3, r0
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <Mount_USB+0x38>)
 8000f88:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) UART_write ("ERROR!!! in mounting USB ...\n\n");
 8000f8a:	4b08      	ldr	r3, [pc, #32]	; (8000fac <Mount_USB+0x38>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <Mount_USB+0x26>
 8000f92:	4807      	ldr	r0, [pc, #28]	; (8000fb0 <Mount_USB+0x3c>)
 8000f94:	f7ff ffd8 	bl	8000f48 <UART_write>
	else UART_write("USB mounted successfully...\n");
}
 8000f98:	e002      	b.n	8000fa0 <Mount_USB+0x2c>
	else UART_write("USB mounted successfully...\n");
 8000f9a:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <Mount_USB+0x40>)
 8000f9c:	f7ff ffd4 	bl	8000f48 <UART_write>
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20003960 	.word	0x20003960
 8000fa8:	20006f38 	.word	0x20006f38
 8000fac:	20004a18 	.word	0x20004a18
 8000fb0:	0801ee80 	.word	0x0801ee80
 8000fb4:	0801eea0 	.word	0x0801eea0

08000fb8 <Unmount_USB>:

void Unmount_USB (void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	fresult = f_mount(NULL, USBHPath, 1);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	490a      	ldr	r1, [pc, #40]	; (8000fe8 <Unmount_USB+0x30>)
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f017 fa2d 	bl	8018420 <f_mount>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <Unmount_USB+0x34>)
 8000fcc:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) UART_write ("USB UNMOUNTED successfully...\n\n\n");
 8000fce:	4b07      	ldr	r3, [pc, #28]	; (8000fec <Unmount_USB+0x34>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d103      	bne.n	8000fde <Unmount_USB+0x26>
 8000fd6:	4806      	ldr	r0, [pc, #24]	; (8000ff0 <Unmount_USB+0x38>)
 8000fd8:	f7ff ffb6 	bl	8000f48 <UART_write>
	else UART_write("ERROR!!! in UNMOUNTING USB \n\n\n");
}
 8000fdc:	e002      	b.n	8000fe4 <Unmount_USB+0x2c>
	else UART_write("ERROR!!! in UNMOUNTING USB \n\n\n");
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <Unmount_USB+0x3c>)
 8000fe0:	f7ff ffb2 	bl	8000f48 <UART_write>
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20003960 	.word	0x20003960
 8000fec:	20004a18 	.word	0x20004a18
 8000ff0:	0801eec0 	.word	0x0801eec0
 8000ff4:	0801eee4 	.word	0x0801eee4

08000ff8 <USB_Write>:




// USB Write function
bool USB_Write(char text[100]) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]

	/*Copy parameter to USB buffer*/
	sprintf(USBbuffer, text); //'text'cannot be larger than 100 characters, otherwise buffer overflow for the sprintf() function
 8001000:	6879      	ldr	r1, [r7, #4]
 8001002:	482b      	ldr	r0, [pc, #172]	; (80010b0 <USB_Write+0xb8>)
 8001004:	f01b febc 	bl	801cd80 <siprintf>

//-----------------------------------------------------------------------------------------------------------------

	/*Open and Append file for writing to .csv*/
	if (f_open(&myFile, "CubeIDE.csv", FA_OPEN_APPEND | FA_WRITE) != FR_OK) {
 8001008:	2232      	movs	r2, #50	; 0x32
 800100a:	492a      	ldr	r1, [pc, #168]	; (80010b4 <USB_Write+0xbc>)
 800100c:	482a      	ldr	r0, [pc, #168]	; (80010b8 <USB_Write+0xc0>)
 800100e:	f017 fa6b 	bl	80184e8 <f_open>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <USB_Write+0x24>

		return 0;
 8001018:	2300      	movs	r3, #0
 800101a:	e044      	b.n	80010a6 <USB_Write+0xae>

	}

	//Write to text file
	res = f_write(&myFile, (const void*) USBbuffer, strlen(USBbuffer),
 800101c:	4824      	ldr	r0, [pc, #144]	; (80010b0 <USB_Write+0xb8>)
 800101e:	f7ff f8d7 	bl	80001d0 <strlen>
 8001022:	4602      	mov	r2, r0
 8001024:	4b25      	ldr	r3, [pc, #148]	; (80010bc <USB_Write+0xc4>)
 8001026:	4922      	ldr	r1, [pc, #136]	; (80010b0 <USB_Write+0xb8>)
 8001028:	4823      	ldr	r0, [pc, #140]	; (80010b8 <USB_Write+0xc0>)
 800102a:	f017 fc30 	bl	801888e <f_write>
 800102e:	4603      	mov	r3, r0
 8001030:	461a      	mov	r2, r3
 8001032:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <USB_Write+0xc8>)
 8001034:	701a      	strb	r2, [r3, #0]
			&byteswritten);

	//HAL_UART_Transmit(&huart2, (uint8_t*) "\r\nText appended to .csv file!\r\n", 31,HAL_MAX_DELAY);
	if ((res != FR_OK) || (byteswritten == 0)) {
 8001036:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <USB_Write+0xc8>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d103      	bne.n	8001046 <USB_Write+0x4e>
 800103e:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <USB_Write+0xc4>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <USB_Write+0x52>

		return 0;
 8001046:	2300      	movs	r3, #0
 8001048:	e02d      	b.n	80010a6 <USB_Write+0xae>
	}

	f_close(&myFile);
 800104a:	481b      	ldr	r0, [pc, #108]	; (80010b8 <USB_Write+0xc0>)
 800104c:	f017 fe6b 	bl	8018d26 <f_close>

//-----------------------------------------------------------------------------------------------------------------

	/*Open and Append file for writing to .txt*/
	if (f_open(&myFile, "CubeIDE.txt", FA_OPEN_APPEND | FA_WRITE) != FR_OK) {
 8001050:	2232      	movs	r2, #50	; 0x32
 8001052:	491c      	ldr	r1, [pc, #112]	; (80010c4 <USB_Write+0xcc>)
 8001054:	4818      	ldr	r0, [pc, #96]	; (80010b8 <USB_Write+0xc0>)
 8001056:	f017 fa47 	bl	80184e8 <f_open>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d004      	beq.n	800106a <USB_Write+0x72>
		UART_Write("f_open != FR_OK\r\n");
 8001060:	4819      	ldr	r0, [pc, #100]	; (80010c8 <USB_Write+0xd0>)
 8001062:	f000 fd6b 	bl	8001b3c <UART_Write>
		return 0;
 8001066:	2300      	movs	r3, #0
 8001068:	e01d      	b.n	80010a6 <USB_Write+0xae>
	}

	//Write to text file
	res = f_write(&myFile, (const void*) USBbuffer, strlen(USBbuffer),
 800106a:	4811      	ldr	r0, [pc, #68]	; (80010b0 <USB_Write+0xb8>)
 800106c:	f7ff f8b0 	bl	80001d0 <strlen>
 8001070:	4602      	mov	r2, r0
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <USB_Write+0xc4>)
 8001074:	490e      	ldr	r1, [pc, #56]	; (80010b0 <USB_Write+0xb8>)
 8001076:	4810      	ldr	r0, [pc, #64]	; (80010b8 <USB_Write+0xc0>)
 8001078:	f017 fc09 	bl	801888e <f_write>
 800107c:	4603      	mov	r3, r0
 800107e:	461a      	mov	r2, r3
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <USB_Write+0xc8>)
 8001082:	701a      	strb	r2, [r3, #0]
			&byteswritten);

	//HAL_UART_Transmit(&huart2, (uint8_t*) "Text appended to .txt file!\r\n", 29,HAL_MAX_DELAY);
	if ((res != FR_OK) || (byteswritten == 0)) {
 8001084:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <USB_Write+0xc8>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d103      	bne.n	8001094 <USB_Write+0x9c>
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <USB_Write+0xc4>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d104      	bne.n	800109e <USB_Write+0xa6>
		UART_Write("res != FR_OK\r\n");
 8001094:	480d      	ldr	r0, [pc, #52]	; (80010cc <USB_Write+0xd4>)
 8001096:	f000 fd51 	bl	8001b3c <UART_Write>
		return 0;
 800109a:	2300      	movs	r3, #0
 800109c:	e003      	b.n	80010a6 <USB_Write+0xae>
	}

	f_close(&myFile);
 800109e:	4806      	ldr	r0, [pc, #24]	; (80010b8 <USB_Write+0xc0>)
 80010a0:	f017 fe41 	bl	8018d26 <f_close>

	return 1; //Success
 80010a4:	2301      	movs	r3, #1

}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200049a8 	.word	0x200049a8
 80010b4:	0801f32c 	.word	0x0801f32c
 80010b8:	20002930 	.word	0x20002930
 80010bc:	20003964 	.word	0x20003964
 80010c0:	20004a38 	.word	0x20004a38
 80010c4:	0801f338 	.word	0x0801f338
 80010c8:	0801f344 	.word	0x0801f344
 80010cc:	0801f358 	.word	0x0801f358

080010d0 <HAL_RTC_AlarmAEventCallback>:
void GNSS_Process(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	UART_Write("RTC_AlarmAEventCallback\r\n");
 80010d8:	4803      	ldr	r0, [pc, #12]	; (80010e8 <HAL_RTC_AlarmAEventCallback+0x18>)
 80010da:	f000 fd2f 	bl	8001b3c <UART_Write>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	0801f3cc 	.word	0x0801f3cc

080010ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f0:	f008 fe0c 	bl	8009d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f4:	f000 f8a2 	bl	800123c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f8:	f000 fc80 	bl	80019fc <MX_GPIO_Init>
  MX_DMA_Init();
 80010fc:	f000 fc3c 	bl	8001978 <MX_DMA_Init>
  MX_ADC1_Init();
 8001100:	f000 f946 	bl	8001390 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001104:	f000 fb6c 	bl	80017e0 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001108:	f000 fb10 	bl	800172c <MX_TIM3_Init>
  MX_ADC2_Init();
 800110c:	f000 f9b6 	bl	800147c <MX_ADC2_Init>
  MX_TIM2_Init();
 8001110:	f000 faa8 	bl	8001664 <MX_TIM2_Init>
  MX_TIM7_Init();
 8001114:	f000 fbc8 	bl	80018a8 <MX_TIM7_Init>
  MX_FATFS_Init();
 8001118:	f011 ff22 	bl	8012f60 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 800111c:	f000 fbfc 	bl	8001918 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8001120:	f000 fa10 	bl	8001544 <MX_RTC_Init>
  MX_MEMS_Init();
 8001124:	f012 f844 	bl	80131b0 <MX_MEMS_Init>
  /* USER CODE BEGIN 2 */

//Timer for MEMS_Process(); GNSS_Process();
HAL_TIM_Base_Start_IT(&htim7);
 8001128:	482a      	ldr	r0, [pc, #168]	; (80011d4 <main+0xe8>)
 800112a:	f00f fb87 	bl	801083c <HAL_TIM_Base_Start_IT>

//Start ADC for x-axis (arms) of joystick
HAL_ADC_Start_DMA(&hadc1, adcDataX, 1);
 800112e:	2201      	movs	r2, #1
 8001130:	4929      	ldr	r1, [pc, #164]	; (80011d8 <main+0xec>)
 8001132:	482a      	ldr	r0, [pc, #168]	; (80011dc <main+0xf0>)
 8001134:	f009 fa30 	bl	800a598 <HAL_ADC_Start_DMA>

//Control speed of motor arms
HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001138:	2100      	movs	r1, #0
 800113a:	4829      	ldr	r0, [pc, #164]	; (80011e0 <main+0xf4>)
 800113c:	f00f fc46 	bl	80109cc <HAL_TIM_PWM_Start>

//Start ADC for y-axis (wheels) of joystick
HAL_ADC_Start_DMA(&hadc2, adcDataY, 1);
 8001140:	2201      	movs	r2, #1
 8001142:	4928      	ldr	r1, [pc, #160]	; (80011e4 <main+0xf8>)
 8001144:	4828      	ldr	r0, [pc, #160]	; (80011e8 <main+0xfc>)
 8001146:	f009 fa27 	bl	800a598 <HAL_ADC_Start_DMA>

//Control speed of right motor wheel
HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800114a:	2100      	movs	r1, #0
 800114c:	4827      	ldr	r0, [pc, #156]	; (80011ec <main+0x100>)
 800114e:	f00f fc3d 	bl	80109cc <HAL_TIM_PWM_Start>
//Control speed of left motor wheel
HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001152:	2104      	movs	r1, #4
 8001154:	4825      	ldr	r0, [pc, #148]	; (80011ec <main+0x100>)
 8001156:	f00f fc39 	bl	80109cc <HAL_TIM_PWM_Start>

//Control speed of motor hips
HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800115a:	2100      	movs	r1, #0
 800115c:	4824      	ldr	r0, [pc, #144]	; (80011f0 <main+0x104>)
 800115e:	f00f fc35 	bl	80109cc <HAL_TIM_PWM_Start>

//Control speed of motor rockets
HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001162:	210c      	movs	r1, #12
 8001164:	4822      	ldr	r0, [pc, #136]	; (80011f0 <main+0x104>)
 8001166:	f00f fc31 	bl	80109cc <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800116a:	f017 feb5 	bl	8018ed8 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of usbTask */
  usbTaskHandle = osThreadNew(writeToUsbTask, NULL, &usbTask_attributes);
 800116e:	4a21      	ldr	r2, [pc, #132]	; (80011f4 <main+0x108>)
 8001170:	2100      	movs	r1, #0
 8001172:	4821      	ldr	r0, [pc, #132]	; (80011f8 <main+0x10c>)
 8001174:	f017 ff1a 	bl	8018fac <osThreadNew>
 8001178:	4602      	mov	r2, r0
 800117a:	4b20      	ldr	r3, [pc, #128]	; (80011fc <main+0x110>)
 800117c:	601a      	str	r2, [r3, #0]

  /* creation of robotArms */
  robotArmsHandle = osThreadNew(moveRobotArms, NULL, &robotArms_attributes);
 800117e:	4a20      	ldr	r2, [pc, #128]	; (8001200 <main+0x114>)
 8001180:	2100      	movs	r1, #0
 8001182:	4820      	ldr	r0, [pc, #128]	; (8001204 <main+0x118>)
 8001184:	f017 ff12 	bl	8018fac <osThreadNew>
 8001188:	4602      	mov	r2, r0
 800118a:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <main+0x11c>)
 800118c:	601a      	str	r2, [r3, #0]

  /* creation of robotWheels */
  robotWheelsHandle = osThreadNew(moveRobotWheels, NULL, &robotWheels_attributes);
 800118e:	4a1f      	ldr	r2, [pc, #124]	; (800120c <main+0x120>)
 8001190:	2100      	movs	r1, #0
 8001192:	481f      	ldr	r0, [pc, #124]	; (8001210 <main+0x124>)
 8001194:	f017 ff0a 	bl	8018fac <osThreadNew>
 8001198:	4602      	mov	r2, r0
 800119a:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <main+0x128>)
 800119c:	601a      	str	r2, [r3, #0]

  /* creation of robotRockets */
  robotRocketsHandle = osThreadNew(moveRobotRockets, NULL, &robotRockets_attributes);
 800119e:	4a1e      	ldr	r2, [pc, #120]	; (8001218 <main+0x12c>)
 80011a0:	2100      	movs	r1, #0
 80011a2:	481e      	ldr	r0, [pc, #120]	; (800121c <main+0x130>)
 80011a4:	f017 ff02 	bl	8018fac <osThreadNew>
 80011a8:	4602      	mov	r2, r0
 80011aa:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <main+0x134>)
 80011ac:	601a      	str	r2, [r3, #0]

  /* creation of robotHips */
  robotHipsHandle = osThreadNew(moveRobotHips, NULL, &robotHips_attributes);
 80011ae:	4a1d      	ldr	r2, [pc, #116]	; (8001224 <main+0x138>)
 80011b0:	2100      	movs	r1, #0
 80011b2:	481d      	ldr	r0, [pc, #116]	; (8001228 <main+0x13c>)
 80011b4:	f017 fefa 	bl	8018fac <osThreadNew>
 80011b8:	4602      	mov	r2, r0
 80011ba:	4b1c      	ldr	r3, [pc, #112]	; (800122c <main+0x140>)
 80011bc:	601a      	str	r2, [r3, #0]

  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80011be:	4a1c      	ldr	r2, [pc, #112]	; (8001230 <main+0x144>)
 80011c0:	2100      	movs	r1, #0
 80011c2:	481c      	ldr	r0, [pc, #112]	; (8001234 <main+0x148>)
 80011c4:	f017 fef2 	bl	8018fac <osThreadNew>
 80011c8:	4602      	mov	r2, r0
 80011ca:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <main+0x14c>)
 80011cc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80011ce:	f017 feb7 	bl	8018f40 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80011d2:	e7fe      	b.n	80011d2 <main+0xe6>
 80011d4:	20005dcc 	.word	0x20005dcc
 80011d8:	20004f88 	.word	0x20004f88
 80011dc:	200057ac 	.word	0x200057ac
 80011e0:	20004f8c 	.word	0x20004f8c
 80011e4:	20004f84 	.word	0x20004f84
 80011e8:	20004af4 	.word	0x20004af4
 80011ec:	20004a88 	.word	0x20004a88
 80011f0:	20005884 	.word	0x20005884
 80011f4:	0801fb74 	.word	0x0801fb74
 80011f8:	08001cf9 	.word	0x08001cf9
 80011fc:	20004ba4 	.word	0x20004ba4
 8001200:	0801fb98 	.word	0x0801fb98
 8001204:	08001e05 	.word	0x08001e05
 8001208:	200058d0 	.word	0x200058d0
 800120c:	0801fbbc 	.word	0x0801fbbc
 8001210:	08001ea9 	.word	0x08001ea9
 8001214:	20005e1c 	.word	0x20005e1c
 8001218:	0801fbe0 	.word	0x0801fbe0
 800121c:	08002055 	.word	0x08002055
 8001220:	20005880 	.word	0x20005880
 8001224:	0801fc04 	.word	0x0801fc04
 8001228:	080020b5 	.word	0x080020b5
 800122c:	20004ba8 	.word	0x20004ba8
 8001230:	0801fc28 	.word	0x0801fc28
 8001234:	0800211d 	.word	0x0800211d
 8001238:	20004a84 	.word	0x20004a84

0800123c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b0b8      	sub	sp, #224	; 0xe0
 8001240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001242:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001246:	2244      	movs	r2, #68	; 0x44
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f01b fc8b 	bl	801cb66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001250:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001260:	463b      	mov	r3, r7
 8001262:	2288      	movs	r2, #136	; 0x88
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f01b fc7d 	bl	801cb66 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800126c:	f00d fa88 	bl	800e780 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001270:	4b45      	ldr	r3, [pc, #276]	; (8001388 <SystemClock_Config+0x14c>)
 8001272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001276:	4a44      	ldr	r2, [pc, #272]	; (8001388 <SystemClock_Config+0x14c>)
 8001278:	f023 0318 	bic.w	r3, r3, #24
 800127c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8001280:	231c      	movs	r3, #28
 8001282:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001286:	2301      	movs	r3, #1
 8001288:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800128c:	2301      	movs	r3, #1
 800128e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001292:	2301      	movs	r3, #1
 8001294:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800129e:	2360      	movs	r3, #96	; 0x60
 80012a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a4:	2302      	movs	r3, #2
 80012a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80012aa:	2301      	movs	r3, #1
 80012ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012b0:	2301      	movs	r3, #1
 80012b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 16;
 80012b6:	2310      	movs	r3, #16
 80012b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012bc:	2307      	movs	r3, #7
 80012be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012c2:	2302      	movs	r3, #2
 80012c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012c8:	2302      	movs	r3, #2
 80012ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012d2:	4618      	mov	r0, r3
 80012d4:	f00d fad8 	bl	800e888 <HAL_RCC_OscConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80012de:	f000 ff87 	bl	80021f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e2:	230f      	movs	r3, #15
 80012e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012e8:	2303      	movs	r3, #3
 80012ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ee:	2300      	movs	r3, #0
 80012f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012fa:	2300      	movs	r3, #0
 80012fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001300:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001304:	2101      	movs	r1, #1
 8001306:	4618      	mov	r0, r3
 8001308:	f00d fea4 	bl	800f054 <HAL_RCC_ClockConfig>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8001312:	f000 ff6d 	bl	80021f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8001316:	4b1d      	ldr	r3, [pc, #116]	; (800138c <SystemClock_Config+0x150>)
 8001318:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800131a:	2300      	movs	r3, #0
 800131c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800131e:	2300      	movs	r3, #0
 8001320:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001322:	2300      	movs	r3, #0
 8001324:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001326:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800132a:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800132c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001330:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001334:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001338:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800133a:	2301      	movs	r3, #1
 800133c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800133e:	2301      	movs	r3, #1
 8001340:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001342:	2318      	movs	r3, #24
 8001344:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001346:	2307      	movs	r3, #7
 8001348:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800134a:	2302      	movs	r3, #2
 800134c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800134e:	2302      	movs	r3, #2
 8001350:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001352:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8001356:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001358:	463b      	mov	r3, r7
 800135a:	4618      	mov	r0, r3
 800135c:	f00e f8b0 	bl	800f4c0 <HAL_RCCEx_PeriphCLKConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0x12e>
  {
    Error_Handler();
 8001366:	f000 ff43 	bl	80021f0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800136a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800136e:	f00d fa25 	bl	800e7bc <HAL_PWREx_ControlVoltageScaling>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <SystemClock_Config+0x140>
  {
    Error_Handler();
 8001378:	f000 ff3a 	bl	80021f0 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800137c:	f00e fb86 	bl	800fa8c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001380:	bf00      	nop
 8001382:	37e0      	adds	r7, #224	; 0xe0
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40021000 	.word	0x40021000
 800138c:	00026046 	.word	0x00026046

08001390 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
 80013b0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80013b2:	4b2f      	ldr	r3, [pc, #188]	; (8001470 <MX_ADC1_Init+0xe0>)
 80013b4:	4a2f      	ldr	r2, [pc, #188]	; (8001474 <MX_ADC1_Init+0xe4>)
 80013b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013b8:	4b2d      	ldr	r3, [pc, #180]	; (8001470 <MX_ADC1_Init+0xe0>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80013be:	4b2c      	ldr	r3, [pc, #176]	; (8001470 <MX_ADC1_Init+0xe0>)
 80013c0:	2210      	movs	r2, #16
 80013c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013c4:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <MX_ADC1_Init+0xe0>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013ca:	4b29      	ldr	r3, [pc, #164]	; (8001470 <MX_ADC1_Init+0xe0>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013d0:	4b27      	ldr	r3, [pc, #156]	; (8001470 <MX_ADC1_Init+0xe0>)
 80013d2:	2204      	movs	r2, #4
 80013d4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013d6:	4b26      	ldr	r3, [pc, #152]	; (8001470 <MX_ADC1_Init+0xe0>)
 80013d8:	2200      	movs	r2, #0
 80013da:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013dc:	4b24      	ldr	r3, [pc, #144]	; (8001470 <MX_ADC1_Init+0xe0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80013e2:	4b23      	ldr	r3, [pc, #140]	; (8001470 <MX_ADC1_Init+0xe0>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013e8:	4b21      	ldr	r3, [pc, #132]	; (8001470 <MX_ADC1_Init+0xe0>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013f0:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <MX_ADC1_Init+0xe0>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013f6:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <MX_ADC1_Init+0xe0>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80013fc:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <MX_ADC1_Init+0xe0>)
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001404:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <MX_ADC1_Init+0xe0>)
 8001406:	2200      	movs	r2, #0
 8001408:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800140a:	4b19      	ldr	r3, [pc, #100]	; (8001470 <MX_ADC1_Init+0xe0>)
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001412:	4817      	ldr	r0, [pc, #92]	; (8001470 <MX_ADC1_Init+0xe0>)
 8001414:	f008 feb2 	bl	800a17c <HAL_ADC_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800141e:	f000 fee7 	bl	80021f0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	4619      	mov	r1, r3
 800142c:	4810      	ldr	r0, [pc, #64]	; (8001470 <MX_ADC1_Init+0xe0>)
 800142e:	f009 fe87 	bl	800b140 <HAL_ADCEx_MultiModeConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001438:	f000 feda 	bl	80021f0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800143c:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <MX_ADC1_Init+0xe8>)
 800143e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001440:	2306      	movs	r3, #6
 8001442:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001448:	237f      	movs	r3, #127	; 0x7f
 800144a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800144c:	2304      	movs	r3, #4
 800144e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	4619      	mov	r1, r3
 8001458:	4805      	ldr	r0, [pc, #20]	; (8001470 <MX_ADC1_Init+0xe0>)
 800145a:	f009 f96f 	bl	800a73c <HAL_ADC_ConfigChannel>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001464:	f000 fec4 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001468:	bf00      	nop
 800146a:	3728      	adds	r7, #40	; 0x28
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	200057ac 	.word	0x200057ac
 8001474:	50040000 	.word	0x50040000
 8001478:	14f00020 	.word	0x14f00020

0800147c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001482:	463b      	mov	r3, r7
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
 8001490:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001492:	4b29      	ldr	r3, [pc, #164]	; (8001538 <MX_ADC2_Init+0xbc>)
 8001494:	4a29      	ldr	r2, [pc, #164]	; (800153c <MX_ADC2_Init+0xc0>)
 8001496:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001498:	4b27      	ldr	r3, [pc, #156]	; (8001538 <MX_ADC2_Init+0xbc>)
 800149a:	2200      	movs	r2, #0
 800149c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 800149e:	4b26      	ldr	r3, [pc, #152]	; (8001538 <MX_ADC2_Init+0xbc>)
 80014a0:	2210      	movs	r2, #16
 80014a2:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014a4:	4b24      	ldr	r3, [pc, #144]	; (8001538 <MX_ADC2_Init+0xbc>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014aa:	4b23      	ldr	r3, [pc, #140]	; (8001538 <MX_ADC2_Init+0xbc>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014b0:	4b21      	ldr	r3, [pc, #132]	; (8001538 <MX_ADC2_Init+0xbc>)
 80014b2:	2204      	movs	r2, #4
 80014b4:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80014b6:	4b20      	ldr	r3, [pc, #128]	; (8001538 <MX_ADC2_Init+0xbc>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80014bc:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <MX_ADC2_Init+0xbc>)
 80014be:	2200      	movs	r2, #0
 80014c0:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80014c2:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <MX_ADC2_Init+0xbc>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80014c8:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <MX_ADC2_Init+0xbc>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014d0:	4b19      	ldr	r3, [pc, #100]	; (8001538 <MX_ADC2_Init+0xbc>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014d6:	4b18      	ldr	r3, [pc, #96]	; (8001538 <MX_ADC2_Init+0xbc>)
 80014d8:	2200      	movs	r2, #0
 80014da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80014dc:	4b16      	ldr	r3, [pc, #88]	; (8001538 <MX_ADC2_Init+0xbc>)
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014e4:	4b14      	ldr	r3, [pc, #80]	; (8001538 <MX_ADC2_Init+0xbc>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <MX_ADC2_Init+0xbc>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80014f2:	4811      	ldr	r0, [pc, #68]	; (8001538 <MX_ADC2_Init+0xbc>)
 80014f4:	f008 fe42 	bl	800a17c <HAL_ADC_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 80014fe:	f000 fe77 	bl	80021f0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001502:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <MX_ADC2_Init+0xc4>)
 8001504:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001506:	2306      	movs	r3, #6
 8001508:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800150e:	237f      	movs	r3, #127	; 0x7f
 8001510:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001512:	2304      	movs	r3, #4
 8001514:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800151a:	463b      	mov	r3, r7
 800151c:	4619      	mov	r1, r3
 800151e:	4806      	ldr	r0, [pc, #24]	; (8001538 <MX_ADC2_Init+0xbc>)
 8001520:	f009 f90c 	bl	800a73c <HAL_ADC_ConfigChannel>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 800152a:	f000 fe61 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20004af4 	.word	0x20004af4
 800153c:	50040100 	.word	0x50040100
 8001540:	19200040 	.word	0x19200040

08001544 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b092      	sub	sp, #72	; 0x48
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800154a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
 8001558:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800155a:	2300      	movs	r3, #0
 800155c:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	222c      	movs	r2, #44	; 0x2c
 8001562:	2100      	movs	r1, #0
 8001564:	4618      	mov	r0, r3
 8001566:	f01b fafe 	bl	801cb66 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800156a:	4b3c      	ldr	r3, [pc, #240]	; (800165c <MX_RTC_Init+0x118>)
 800156c:	4a3c      	ldr	r2, [pc, #240]	; (8001660 <MX_RTC_Init+0x11c>)
 800156e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001570:	4b3a      	ldr	r3, [pc, #232]	; (800165c <MX_RTC_Init+0x118>)
 8001572:	2200      	movs	r2, #0
 8001574:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001576:	4b39      	ldr	r3, [pc, #228]	; (800165c <MX_RTC_Init+0x118>)
 8001578:	227f      	movs	r2, #127	; 0x7f
 800157a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800157c:	4b37      	ldr	r3, [pc, #220]	; (800165c <MX_RTC_Init+0x118>)
 800157e:	22ff      	movs	r2, #255	; 0xff
 8001580:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001582:	4b36      	ldr	r3, [pc, #216]	; (800165c <MX_RTC_Init+0x118>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001588:	4b34      	ldr	r3, [pc, #208]	; (800165c <MX_RTC_Init+0x118>)
 800158a:	2200      	movs	r2, #0
 800158c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800158e:	4b33      	ldr	r3, [pc, #204]	; (800165c <MX_RTC_Init+0x118>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001594:	4b31      	ldr	r3, [pc, #196]	; (800165c <MX_RTC_Init+0x118>)
 8001596:	2200      	movs	r2, #0
 8001598:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800159a:	4830      	ldr	r0, [pc, #192]	; (800165c <MX_RTC_Init+0x118>)
 800159c:	f00e fc50 	bl	800fe40 <HAL_RTC_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80015a6:	f000 fe23 	bl	80021f0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 14;
 80015aa:	230e      	movs	r3, #14
 80015ac:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 15;
 80015b0:	230f      	movs	r3, #15
 80015b2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80015bc:	2300      	movs	r3, #0
 80015be:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80015c0:	2300      	movs	r3, #0
 80015c2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80015c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015c8:	2200      	movs	r2, #0
 80015ca:	4619      	mov	r1, r3
 80015cc:	4823      	ldr	r0, [pc, #140]	; (800165c <MX_RTC_Init+0x118>)
 80015ce:	f00e fcb2 	bl	800ff36 <HAL_RTC_SetTime>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80015d8:	f000 fe0a 	bl	80021f0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80015dc:	2306      	movs	r3, #6
 80015de:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 80015e2:	2301      	movs	r3, #1
 80015e4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 1;
 80015e8:	2301      	movs	r3, #1
 80015ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 21;
 80015ee:	2315      	movs	r3, #21
 80015f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80015f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015f8:	2200      	movs	r2, #0
 80015fa:	4619      	mov	r1, r3
 80015fc:	4817      	ldr	r0, [pc, #92]	; (800165c <MX_RTC_Init+0x118>)
 80015fe:	f00e fd93 	bl	8010128 <HAL_RTC_SetDate>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8001608:	f000 fdf2 	bl	80021f0 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 14;
 800160c:	230e      	movs	r3, #14
 800160e:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 15;
 8001610:	230f      	movs	r3, #15
 8001612:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 10;
 8001614:	230a      	movs	r3, #10
 8001616:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800161c:	2300      	movs	r3, #0
 800161e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001624:	2300      	movs	r3, #0
 8001626:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001628:	2300      	movs	r3, #0
 800162a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800162c:	2300      	movs	r3, #0
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 1;
 8001630:	2301      	movs	r3, #1
 8001632:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8001636:	f44f 7380 	mov.w	r3, #256	; 0x100
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	2200      	movs	r2, #0
 8001640:	4619      	mov	r1, r3
 8001642:	4806      	ldr	r0, [pc, #24]	; (800165c <MX_RTC_Init+0x118>)
 8001644:	f00e fe44 	bl	80102d0 <HAL_RTC_SetAlarm_IT>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 800164e:	f000 fdcf 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001652:	bf00      	nop
 8001654:	3748      	adds	r7, #72	; 0x48
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	2000585c 	.word	0x2000585c
 8001660:	40002800 	.word	0x40002800

08001664 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08a      	sub	sp, #40	; 0x28
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800166a:	f107 031c 	add.w	r3, r7, #28
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001676:	463b      	mov	r3, r7
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
 8001684:	615a      	str	r2, [r3, #20]
 8001686:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001688:	4b27      	ldr	r3, [pc, #156]	; (8001728 <MX_TIM2_Init+0xc4>)
 800168a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800168e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8001690:	4b25      	ldr	r3, [pc, #148]	; (8001728 <MX_TIM2_Init+0xc4>)
 8001692:	224f      	movs	r2, #79	; 0x4f
 8001694:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001696:	4b24      	ldr	r3, [pc, #144]	; (8001728 <MX_TIM2_Init+0xc4>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 256-1;
 800169c:	4b22      	ldr	r3, [pc, #136]	; (8001728 <MX_TIM2_Init+0xc4>)
 800169e:	22ff      	movs	r2, #255	; 0xff
 80016a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a2:	4b21      	ldr	r3, [pc, #132]	; (8001728 <MX_TIM2_Init+0xc4>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a8:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <MX_TIM2_Init+0xc4>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016ae:	481e      	ldr	r0, [pc, #120]	; (8001728 <MX_TIM2_Init+0xc4>)
 80016b0:	f00f f934 	bl	801091c <HAL_TIM_PWM_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80016ba:	f000 fd99 	bl	80021f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016c6:	f107 031c 	add.w	r3, r7, #28
 80016ca:	4619      	mov	r1, r3
 80016cc:	4816      	ldr	r0, [pc, #88]	; (8001728 <MX_TIM2_Init+0xc4>)
 80016ce:	f010 f871 	bl	80117b4 <HAL_TIMEx_MasterConfigSynchronization>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80016d8:	f000 fd8a 	bl	80021f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016dc:	2360      	movs	r3, #96	; 0x60
 80016de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ec:	463b      	mov	r3, r7
 80016ee:	2200      	movs	r2, #0
 80016f0:	4619      	mov	r1, r3
 80016f2:	480d      	ldr	r0, [pc, #52]	; (8001728 <MX_TIM2_Init+0xc4>)
 80016f4:	f00f fb90 	bl	8010e18 <HAL_TIM_PWM_ConfigChannel>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80016fe:	f000 fd77 	bl	80021f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001702:	463b      	mov	r3, r7
 8001704:	220c      	movs	r2, #12
 8001706:	4619      	mov	r1, r3
 8001708:	4807      	ldr	r0, [pc, #28]	; (8001728 <MX_TIM2_Init+0xc4>)
 800170a:	f00f fb85 	bl	8010e18 <HAL_TIM_PWM_ConfigChannel>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001714:	f000 fd6c 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001718:	4803      	ldr	r0, [pc, #12]	; (8001728 <MX_TIM2_Init+0xc4>)
 800171a:	f000 ff5d 	bl	80025d8 <HAL_TIM_MspPostInit>

}
 800171e:	bf00      	nop
 8001720:	3728      	adds	r7, #40	; 0x28
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20005884 	.word	0x20005884

0800172c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	; 0x28
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001732:	f107 031c 	add.w	r3, r7, #28
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800173e:	463b      	mov	r3, r7
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
 800174c:	615a      	str	r2, [r3, #20]
 800174e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001750:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <MX_TIM3_Init+0xac>)
 8001752:	4a22      	ldr	r2, [pc, #136]	; (80017dc <MX_TIM3_Init+0xb0>)
 8001754:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8001756:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <MX_TIM3_Init+0xac>)
 8001758:	224f      	movs	r2, #79	; 0x4f
 800175a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175c:	4b1e      	ldr	r3, [pc, #120]	; (80017d8 <MX_TIM3_Init+0xac>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 256-1;
 8001762:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <MX_TIM3_Init+0xac>)
 8001764:	22ff      	movs	r2, #255	; 0xff
 8001766:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001768:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <MX_TIM3_Init+0xac>)
 800176a:	2200      	movs	r2, #0
 800176c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800176e:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <MX_TIM3_Init+0xac>)
 8001770:	2200      	movs	r2, #0
 8001772:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001774:	4818      	ldr	r0, [pc, #96]	; (80017d8 <MX_TIM3_Init+0xac>)
 8001776:	f00f f8d1 	bl	801091c <HAL_TIM_PWM_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001780:	f000 fd36 	bl	80021f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001784:	2300      	movs	r3, #0
 8001786:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001788:	2300      	movs	r3, #0
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800178c:	f107 031c 	add.w	r3, r7, #28
 8001790:	4619      	mov	r1, r3
 8001792:	4811      	ldr	r0, [pc, #68]	; (80017d8 <MX_TIM3_Init+0xac>)
 8001794:	f010 f80e 	bl	80117b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800179e:	f000 fd27 	bl	80021f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017a2:	2360      	movs	r3, #96	; 0x60
 80017a4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017b2:	463b      	mov	r3, r7
 80017b4:	2200      	movs	r2, #0
 80017b6:	4619      	mov	r1, r3
 80017b8:	4807      	ldr	r0, [pc, #28]	; (80017d8 <MX_TIM3_Init+0xac>)
 80017ba:	f00f fb2d 	bl	8010e18 <HAL_TIM_PWM_ConfigChannel>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80017c4:	f000 fd14 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017c8:	4803      	ldr	r0, [pc, #12]	; (80017d8 <MX_TIM3_Init+0xac>)
 80017ca:	f000 ff05 	bl	80025d8 <HAL_TIM_MspPostInit>

}
 80017ce:	bf00      	nop
 80017d0:	3728      	adds	r7, #40	; 0x28
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20004f8c 	.word	0x20004f8c
 80017dc:	40000400 	.word	0x40000400

080017e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e6:	f107 031c 	add.w	r3, r7, #28
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017f2:	463b      	mov	r3, r7
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
 8001800:	615a      	str	r2, [r3, #20]
 8001802:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001804:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <MX_TIM4_Init+0xc0>)
 8001806:	4a27      	ldr	r2, [pc, #156]	; (80018a4 <MX_TIM4_Init+0xc4>)
 8001808:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 80-1;
 800180a:	4b25      	ldr	r3, [pc, #148]	; (80018a0 <MX_TIM4_Init+0xc0>)
 800180c:	224f      	movs	r2, #79	; 0x4f
 800180e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001810:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <MX_TIM4_Init+0xc0>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 256-1;
 8001816:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <MX_TIM4_Init+0xc0>)
 8001818:	22ff      	movs	r2, #255	; 0xff
 800181a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800181c:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <MX_TIM4_Init+0xc0>)
 800181e:	2200      	movs	r2, #0
 8001820:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001822:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <MX_TIM4_Init+0xc0>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001828:	481d      	ldr	r0, [pc, #116]	; (80018a0 <MX_TIM4_Init+0xc0>)
 800182a:	f00f f877 	bl	801091c <HAL_TIM_PWM_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001834:	f000 fcdc 	bl	80021f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001838:	2300      	movs	r3, #0
 800183a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183c:	2300      	movs	r3, #0
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001840:	f107 031c 	add.w	r3, r7, #28
 8001844:	4619      	mov	r1, r3
 8001846:	4816      	ldr	r0, [pc, #88]	; (80018a0 <MX_TIM4_Init+0xc0>)
 8001848:	f00f ffb4 	bl	80117b4 <HAL_TIMEx_MasterConfigSynchronization>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001852:	f000 fccd 	bl	80021f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001856:	2360      	movs	r3, #96	; 0x60
 8001858:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001866:	463b      	mov	r3, r7
 8001868:	2200      	movs	r2, #0
 800186a:	4619      	mov	r1, r3
 800186c:	480c      	ldr	r0, [pc, #48]	; (80018a0 <MX_TIM4_Init+0xc0>)
 800186e:	f00f fad3 	bl	8010e18 <HAL_TIM_PWM_ConfigChannel>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001878:	f000 fcba 	bl	80021f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800187c:	463b      	mov	r3, r7
 800187e:	2204      	movs	r2, #4
 8001880:	4619      	mov	r1, r3
 8001882:	4807      	ldr	r0, [pc, #28]	; (80018a0 <MX_TIM4_Init+0xc0>)
 8001884:	f00f fac8 	bl	8010e18 <HAL_TIM_PWM_ConfigChannel>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800188e:	f000 fcaf 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001892:	4803      	ldr	r0, [pc, #12]	; (80018a0 <MX_TIM4_Init+0xc0>)
 8001894:	f000 fea0 	bl	80025d8 <HAL_TIM_MspPostInit>

}
 8001898:	bf00      	nop
 800189a:	3728      	adds	r7, #40	; 0x28
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20004a88 	.word	0x20004a88
 80018a4:	40000800 	.word	0x40000800

080018a8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80018b8:	4b15      	ldr	r3, [pc, #84]	; (8001910 <MX_TIM7_Init+0x68>)
 80018ba:	4a16      	ldr	r2, [pc, #88]	; (8001914 <MX_TIM7_Init+0x6c>)
 80018bc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 32000-1;
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <MX_TIM7_Init+0x68>)
 80018c0:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80018c4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c6:	4b12      	ldr	r3, [pc, #72]	; (8001910 <MX_TIM7_Init+0x68>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 80018cc:	4b10      	ldr	r3, [pc, #64]	; (8001910 <MX_TIM7_Init+0x68>)
 80018ce:	f242 720f 	movw	r2, #9999	; 0x270f
 80018d2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d4:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <MX_TIM7_Init+0x68>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80018da:	480d      	ldr	r0, [pc, #52]	; (8001910 <MX_TIM7_Init+0x68>)
 80018dc:	f00e ff56 	bl	801078c <HAL_TIM_Base_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80018e6:	f000 fc83 	bl	80021f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	4619      	mov	r1, r3
 80018f6:	4806      	ldr	r0, [pc, #24]	; (8001910 <MX_TIM7_Init+0x68>)
 80018f8:	f00f ff5c 	bl	80117b4 <HAL_TIMEx_MasterConfigSynchronization>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001902:	f000 fc75 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20005dcc 	.word	0x20005dcc
 8001914:	40001400 	.word	0x40001400

08001918 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800191c:	4b14      	ldr	r3, [pc, #80]	; (8001970 <MX_USART2_UART_Init+0x58>)
 800191e:	4a15      	ldr	r2, [pc, #84]	; (8001974 <MX_USART2_UART_Init+0x5c>)
 8001920:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001922:	4b13      	ldr	r3, [pc, #76]	; (8001970 <MX_USART2_UART_Init+0x58>)
 8001924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001928:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800192a:	4b11      	ldr	r3, [pc, #68]	; (8001970 <MX_USART2_UART_Init+0x58>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001930:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <MX_USART2_UART_Init+0x58>)
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001936:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <MX_USART2_UART_Init+0x58>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <MX_USART2_UART_Init+0x58>)
 800193e:	220c      	movs	r2, #12
 8001940:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001942:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <MX_USART2_UART_Init+0x58>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001948:	4b09      	ldr	r3, [pc, #36]	; (8001970 <MX_USART2_UART_Init+0x58>)
 800194a:	2200      	movs	r2, #0
 800194c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800194e:	4b08      	ldr	r3, [pc, #32]	; (8001970 <MX_USART2_UART_Init+0x58>)
 8001950:	2200      	movs	r2, #0
 8001952:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <MX_USART2_UART_Init+0x58>)
 8001956:	2200      	movs	r2, #0
 8001958:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800195a:	4805      	ldr	r0, [pc, #20]	; (8001970 <MX_USART2_UART_Init+0x58>)
 800195c:	f00f ffd0 	bl	8011900 <HAL_UART_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001966:	f000 fc43 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	2000591c 	.word	0x2000591c
 8001974:	40004400 	.word	0x40004400

08001978 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800197e:	4b1e      	ldr	r3, [pc, #120]	; (80019f8 <MX_DMA_Init+0x80>)
 8001980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001982:	4a1d      	ldr	r2, [pc, #116]	; (80019f8 <MX_DMA_Init+0x80>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6493      	str	r3, [r2, #72]	; 0x48
 800198a:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <MX_DMA_Init+0x80>)
 800198c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	607b      	str	r3, [r7, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001996:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <MX_DMA_Init+0x80>)
 8001998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800199a:	4a17      	ldr	r2, [pc, #92]	; (80019f8 <MX_DMA_Init+0x80>)
 800199c:	f043 0302 	orr.w	r3, r3, #2
 80019a0:	6493      	str	r3, [r2, #72]	; 0x48
 80019a2:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <MX_DMA_Init+0x80>)
 80019a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	603b      	str	r3, [r7, #0]
 80019ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2105      	movs	r1, #5
 80019b2:	200b      	movs	r0, #11
 80019b4:	f009 fd28 	bl	800b408 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019b8:	200b      	movs	r0, #11
 80019ba:	f009 fd41 	bl	800b440 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80019be:	2200      	movs	r2, #0
 80019c0:	2105      	movs	r1, #5
 80019c2:	200c      	movs	r0, #12
 80019c4:	f009 fd20 	bl	800b408 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80019c8:	200c      	movs	r0, #12
 80019ca:	f009 fd39 	bl	800b440 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2105      	movs	r1, #5
 80019d2:	200e      	movs	r0, #14
 80019d4:	f009 fd18 	bl	800b408 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80019d8:	200e      	movs	r0, #14
 80019da:	f009 fd31 	bl	800b440 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 5, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2105      	movs	r1, #5
 80019e2:	203a      	movs	r0, #58	; 0x3a
 80019e4:	f009 fd10 	bl	800b408 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80019e8:	203a      	movs	r0, #58	; 0x3a
 80019ea:	f009 fd29 	bl	800b440 <HAL_NVIC_EnableIRQ>

}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000

080019fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08a      	sub	sp, #40	; 0x28
 8001a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
 8001a10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a12:	4b46      	ldr	r3, [pc, #280]	; (8001b2c <MX_GPIO_Init+0x130>)
 8001a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a16:	4a45      	ldr	r2, [pc, #276]	; (8001b2c <MX_GPIO_Init+0x130>)
 8001a18:	f043 0304 	orr.w	r3, r3, #4
 8001a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a1e:	4b43      	ldr	r3, [pc, #268]	; (8001b2c <MX_GPIO_Init+0x130>)
 8001a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a2a:	4b40      	ldr	r3, [pc, #256]	; (8001b2c <MX_GPIO_Init+0x130>)
 8001a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2e:	4a3f      	ldr	r2, [pc, #252]	; (8001b2c <MX_GPIO_Init+0x130>)
 8001a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a36:	4b3d      	ldr	r3, [pc, #244]	; (8001b2c <MX_GPIO_Init+0x130>)
 8001a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	4b3a      	ldr	r3, [pc, #232]	; (8001b2c <MX_GPIO_Init+0x130>)
 8001a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a46:	4a39      	ldr	r2, [pc, #228]	; (8001b2c <MX_GPIO_Init+0x130>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a4e:	4b37      	ldr	r3, [pc, #220]	; (8001b2c <MX_GPIO_Init+0x130>)
 8001a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5a:	4b34      	ldr	r3, [pc, #208]	; (8001b2c <MX_GPIO_Init+0x130>)
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5e:	4a33      	ldr	r2, [pc, #204]	; (8001b2c <MX_GPIO_Init+0x130>)
 8001a60:	f043 0302 	orr.w	r3, r3, #2
 8001a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a66:	4b31      	ldr	r3, [pc, #196]	; (8001b2c <MX_GPIO_Init+0x130>)
 8001a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_7, GPIO_PIN_RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2181      	movs	r1, #129	; 0x81
 8001a76:	482e      	ldr	r0, [pc, #184]	; (8001b30 <MX_GPIO_Init+0x134>)
 8001a78:	f00a f99c 	bl	800bdb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8001a82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a86:	f00a f995 	bl	800bdb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_13
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f246 4136 	movw	r1, #25654	; 0x6436
 8001a90:	4828      	ldr	r0, [pc, #160]	; (8001b34 <MX_GPIO_Init+0x138>)
 8001a92:	f00a f98f 	bl	800bdb4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a9c:	4b26      	ldr	r3, [pc, #152]	; (8001b38 <MX_GPIO_Init+0x13c>)
 8001a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4821      	ldr	r0, [pc, #132]	; (8001b30 <MX_GPIO_Init+0x134>)
 8001aac:	f009 fece 	bl	800b84c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 8001ab0:	2381      	movs	r3, #129	; 0x81
 8001ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abc:	2300      	movs	r3, #0
 8001abe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	481a      	ldr	r0, [pc, #104]	; (8001b30 <MX_GPIO_Init+0x134>)
 8001ac8:	f009 fec0 	bl	800b84c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_8;
 8001acc:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	2300      	movs	r3, #0
 8001adc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae8:	f009 feb0 	bl	800b84c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001aec:	2301      	movs	r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001af0:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <MX_GPIO_Init+0x13c>)
 8001af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001af4:	2301      	movs	r3, #1
 8001af6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	4619      	mov	r1, r3
 8001afe:	480d      	ldr	r0, [pc, #52]	; (8001b34 <MX_GPIO_Init+0x138>)
 8001b00:	f009 fea4 	bl	800b84c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB13
                           PB14 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_13
 8001b04:	f246 4336 	movw	r3, #25654	; 0x6436
 8001b08:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4805      	ldr	r0, [pc, #20]	; (8001b34 <MX_GPIO_Init+0x138>)
 8001b1e:	f009 fe95 	bl	800b84c <HAL_GPIO_Init>

}
 8001b22:	bf00      	nop
 8001b24:	3728      	adds	r7, #40	; 0x28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	48000800 	.word	0x48000800
 8001b34:	48000400 	.word	0x48000400
 8001b38:	10210000 	.word	0x10210000

08001b3c <UART_Write>:

/* USER CODE BEGIN 4 */

void UART_Write(uint8_t *string) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, string, strlen((char*) string), 1000);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7fe fb43 	bl	80001d0 <strlen>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	4803      	ldr	r0, [pc, #12]	; (8001b64 <UART_Write+0x28>)
 8001b56:	f00f ff21 	bl	801199c <HAL_UART_Transmit>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	2000591c 	.word	0x2000591c

08001b68 <ColumnNamesInit>:

void ColumnNamesInit(void) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
	USB_Write("Timestamp;ACC_X;ACC_Y;ACC_Z;GYR_X;GYR_Y;GYR_Z;");
 8001b6c:	4803      	ldr	r0, [pc, #12]	; (8001b7c <ColumnNamesInit+0x14>)
 8001b6e:	f7ff fa43 	bl	8000ff8 <USB_Write>
	USB_Write("MAG_X;MAG_Y;MAG_Z;Temp;Hum;Press;;GNSS Position;\r\n");
 8001b72:	4803      	ldr	r0, [pc, #12]	; (8001b80 <ColumnNamesInit+0x18>)
 8001b74:	f7ff fa40 	bl	8000ff8 <USB_Write>
}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	0801f3e8 	.word	0x0801f3e8
 8001b80:	0801f418 	.word	0x0801f418

08001b84 <RTC_Process>:

void RTC_Process(void) {
 8001b84:	b5b0      	push	{r4, r5, r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af04      	add	r7, sp, #16
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	4917      	ldr	r1, [pc, #92]	; (8001bec <RTC_Process+0x68>)
 8001b8e:	4818      	ldr	r0, [pc, #96]	; (8001bf0 <RTC_Process+0x6c>)
 8001b90:	f00e fb51 	bl	8010236 <HAL_RTC_GetDate>
	HAL_Delay(10);
 8001b94:	200a      	movs	r0, #10
 8001b96:	f008 f8f9 	bl	8009d8c <HAL_Delay>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	4915      	ldr	r1, [pc, #84]	; (8001bf4 <RTC_Process+0x70>)
 8001b9e:	4814      	ldr	r0, [pc, #80]	; (8001bf0 <RTC_Process+0x6c>)
 8001ba0:	f00e fa66 	bl	8010070 <HAL_RTC_GetTime>
	HAL_Delay(10);
 8001ba4:	200a      	movs	r0, #10
 8001ba6:	f008 f8f1 	bl	8009d8c <HAL_Delay>

	sprintf((char*) timestamp, "%02d:%02d:%02d    %02d.%02d.%02d	;",
			sTime.Hours, sTime.Minutes, sTime.Seconds, sDate.Date, sDate.Month,
 8001baa:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <RTC_Process+0x70>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
	sprintf((char*) timestamp, "%02d:%02d:%02d    %02d.%02d.%02d	;",
 8001bae:	461c      	mov	r4, r3
			sTime.Hours, sTime.Minutes, sTime.Seconds, sDate.Date, sDate.Month,
 8001bb0:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <RTC_Process+0x70>)
 8001bb2:	785b      	ldrb	r3, [r3, #1]
	sprintf((char*) timestamp, "%02d:%02d:%02d    %02d.%02d.%02d	;",
 8001bb4:	461d      	mov	r5, r3
			sTime.Hours, sTime.Minutes, sTime.Seconds, sDate.Date, sDate.Month,
 8001bb6:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <RTC_Process+0x70>)
 8001bb8:	789b      	ldrb	r3, [r3, #2]
	sprintf((char*) timestamp, "%02d:%02d:%02d    %02d.%02d.%02d	;",
 8001bba:	461a      	mov	r2, r3
			sTime.Hours, sTime.Minutes, sTime.Seconds, sDate.Date, sDate.Month,
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <RTC_Process+0x68>)
 8001bbe:	789b      	ldrb	r3, [r3, #2]
	sprintf((char*) timestamp, "%02d:%02d:%02d    %02d.%02d.%02d	;",
 8001bc0:	4619      	mov	r1, r3
			sTime.Hours, sTime.Minutes, sTime.Seconds, sDate.Date, sDate.Month,
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <RTC_Process+0x68>)
 8001bc4:	785b      	ldrb	r3, [r3, #1]
	sprintf((char*) timestamp, "%02d:%02d:%02d    %02d.%02d.%02d	;",
 8001bc6:	4618      	mov	r0, r3
			sDate.Year);
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <RTC_Process+0x68>)
 8001bca:	78db      	ldrb	r3, [r3, #3]
	sprintf((char*) timestamp, "%02d:%02d:%02d    %02d.%02d.%02d	;",
 8001bcc:	9303      	str	r3, [sp, #12]
 8001bce:	9002      	str	r0, [sp, #8]
 8001bd0:	9101      	str	r1, [sp, #4]
 8001bd2:	9200      	str	r2, [sp, #0]
 8001bd4:	462b      	mov	r3, r5
 8001bd6:	4622      	mov	r2, r4
 8001bd8:	4907      	ldr	r1, [pc, #28]	; (8001bf8 <RTC_Process+0x74>)
 8001bda:	4808      	ldr	r0, [pc, #32]	; (8001bfc <RTC_Process+0x78>)
 8001bdc:	f01b f8d0 	bl	801cd80 <siprintf>

	USB_Write(timestamp); //write timestamp on USB
 8001be0:	4806      	ldr	r0, [pc, #24]	; (8001bfc <RTC_Process+0x78>)
 8001be2:	f7ff fa09 	bl	8000ff8 <USB_Write>
}
 8001be6:	bf00      	nop
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bdb0      	pop	{r4, r5, r7, pc}
 8001bec:	20000248 	.word	0x20000248
 8001bf0:	2000585c 	.word	0x2000585c
 8001bf4:	20000234 	.word	0x20000234
 8001bf8:	0801f44c 	.word	0x0801f44c
 8001bfc:	20004ad4 	.word	0x20004ad4

08001c00 <GNSS_Process>:

void GNSS_Process(void) {
 8001c00:	b590      	push	{r4, r7, lr}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af02      	add	r7, sp, #8

	int i;
	bool GPSfound = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	71fb      	strb	r3, [r7, #7]
	bool statusSent = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Master_Transmit(&hi2c1, Teseo_I2C_7bits_Addr << 1, (uint8_t*) gpgll_msg, strlen(gpgll_msg), 2000);
 8001c0e:	4b33      	ldr	r3, [pc, #204]	; (8001cdc <GNSS_Process+0xdc>)
 8001c10:	681c      	ldr	r4, [r3, #0]
 8001c12:	4b32      	ldr	r3, [pc, #200]	; (8001cdc <GNSS_Process+0xdc>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fada 	bl	80001d0 <strlen>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	4613      	mov	r3, r2
 8001c28:	4622      	mov	r2, r4
 8001c2a:	2174      	movs	r1, #116	; 0x74
 8001c2c:	482c      	ldr	r0, [pc, #176]	; (8001ce0 <GNSS_Process+0xe0>)
 8001c2e:	f00b fe55 	bl	800d8dc <HAL_I2C_Master_Transmit>

	//UART_Write("got:...\n\r");

	for (read_buf[I2C_BUF_SIZE - 1] = 0; read_buf[I2C_BUF_SIZE - 1] != 0xff;) {
 8001c32:	4b2c      	ldr	r3, [pc, #176]	; (8001ce4 <GNSS_Process+0xe4>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 23e7 	strb.w	r2, [r3, #999]	; 0x3e7
 8001c3a:	e046      	b.n	8001cca <GNSS_Process+0xca>
		HAL_I2C_Master_Receive(&hi2c1, Teseo_I2C_7bits_Addr << 1, read_buf, I2C_BUF_SIZE, 2000);
 8001c3c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c46:	4a27      	ldr	r2, [pc, #156]	; (8001ce4 <GNSS_Process+0xe4>)
 8001c48:	2174      	movs	r1, #116	; 0x74
 8001c4a:	4825      	ldr	r0, [pc, #148]	; (8001ce0 <GNSS_Process+0xe0>)
 8001c4c:	f00b ff3a 	bl	800dac4 <HAL_I2C_Master_Receive>
		if (read_buf[0] == NULL) {
 8001c50:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <GNSS_Process+0xe4>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d103      	bne.n	8001c60 <GNSS_Process+0x60>
			UART_Write("Buffer empty...\n\r");
 8001c58:	4823      	ldr	r0, [pc, #140]	; (8001ce8 <GNSS_Process+0xe8>)
 8001c5a:	f7ff ff6f 	bl	8001b3c <UART_Write>
 8001c5e:	e034      	b.n	8001cca <GNSS_Process+0xca>
		} else {
			for (int i = 0; i < I2C_BUF_SIZE; i++) {
 8001c60:	2300      	movs	r3, #0
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	e02d      	b.n	8001cc2 <GNSS_Process+0xc2>
				if (read_buf[i] != 0xff) {
 8001c66:	4a1f      	ldr	r2, [pc, #124]	; (8001ce4 <GNSS_Process+0xe4>)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2bff      	cmp	r3, #255	; 0xff
 8001c70:	d013      	beq.n	8001c9a <GNSS_Process+0x9a>
					GPSfound = 1;
 8001c72:	2301      	movs	r3, #1
 8001c74:	71fb      	strb	r3, [r7, #7]
					HAL_UART_Transmit(&huart2, &read_buf[i], 1, 1000);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	4a1a      	ldr	r2, [pc, #104]	; (8001ce4 <GNSS_Process+0xe4>)
 8001c7a:	1899      	adds	r1, r3, r2
 8001c7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c80:	2201      	movs	r2, #1
 8001c82:	481a      	ldr	r0, [pc, #104]	; (8001cec <GNSS_Process+0xec>)
 8001c84:	f00f fe8a 	bl	801199c <HAL_UART_Transmit>
					strncat(GNSSposition, &read_buf[i], 1);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	4a16      	ldr	r2, [pc, #88]	; (8001ce4 <GNSS_Process+0xe4>)
 8001c8c:	4413      	add	r3, r2
 8001c8e:	2201      	movs	r2, #1
 8001c90:	4619      	mov	r1, r3
 8001c92:	4817      	ldr	r0, [pc, #92]	; (8001cf0 <GNSS_Process+0xf0>)
 8001c94:	f01b f894 	bl	801cdc0 <strncat>
 8001c98:	e010      	b.n	8001cbc <GNSS_Process+0xbc>

				} else if (!GPSfound) {
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	f083 0301 	eor.w	r3, r3, #1
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00a      	beq.n	8001cbc <GNSS_Process+0xbc>
					if (!statusSent) {
 8001ca6:	79bb      	ldrb	r3, [r7, #6]
 8001ca8:	f083 0301 	eor.w	r3, r3, #1
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d004      	beq.n	8001cbc <GNSS_Process+0xbc>
						UART_Write("Searching for GPS Data...\n\r");
 8001cb2:	4810      	ldr	r0, [pc, #64]	; (8001cf4 <GNSS_Process+0xf4>)
 8001cb4:	f7ff ff42 	bl	8001b3c <UART_Write>
						statusSent = 1;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	71bb      	strb	r3, [r7, #6]
			for (int i = 0; i < I2C_BUF_SIZE; i++) {
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	603b      	str	r3, [r7, #0]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cc8:	dbcd      	blt.n	8001c66 <GNSS_Process+0x66>
	for (read_buf[I2C_BUF_SIZE - 1] = 0; read_buf[I2C_BUF_SIZE - 1] != 0xff;) {
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <GNSS_Process+0xe4>)
 8001ccc:	f893 33e7 	ldrb.w	r3, [r3, #999]	; 0x3e7
 8001cd0:	2bff      	cmp	r3, #255	; 0xff
 8001cd2:	d1b3      	bne.n	8001c3c <GNSS_Process+0x3c>

		}

	}

}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd90      	pop	{r4, r7, pc}
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	20004b58 	.word	0x20004b58
 8001ce4:	200059e4 	.word	0x200059e4
 8001ce8:	0801f470 	.word	0x0801f470
 8001cec:	2000591c 	.word	0x2000591c
 8001cf0:	20004fdc 	.word	0x20004fdc
 8001cf4:	0801f484 	.word	0x0801f484

08001cf8 <writeToUsbTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_writeToUsbTask */
void writeToUsbTask(void *argument)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001d00:	f01a fbcc 	bl	801c49c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
	bool oneTimeColumnNamesInitDone = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for (;;) {

		USBH_Process(&hUsbHostFS);
 8001d08:	482d      	ldr	r0, [pc, #180]	; (8001dc0 <writeToUsbTask+0xc8>)
 8001d0a:	f013 fb1f 	bl	801534c <USBH_Process>

		switch (Appli_state) {
 8001d0e:	4b2d      	ldr	r3, [pc, #180]	; (8001dc4 <writeToUsbTask+0xcc>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d84f      	bhi.n	8001db6 <writeToUsbTask+0xbe>
 8001d16:	a201      	add	r2, pc, #4	; (adr r2, 8001d1c <writeToUsbTask+0x24>)
 8001d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d1c:	08001db7 	.word	0x08001db7
 8001d20:	08001db7 	.word	0x08001db7
 8001d24:	08001d2d 	.word	0x08001d2d
 8001d28:	08001db7 	.word	0x08001db7

		case APPLICATION_START:
			break;

		case APPLICATION_READY:
			if (MEMSready == 1 && GNSSready == 1) {
 8001d2c:	4b26      	ldr	r3, [pc, #152]	; (8001dc8 <writeToUsbTask+0xd0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d13f      	bne.n	8001db4 <writeToUsbTask+0xbc>
 8001d34:	4b25      	ldr	r3, [pc, #148]	; (8001dcc <writeToUsbTask+0xd4>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d13b      	bne.n	8001db4 <writeToUsbTask+0xbc>
				UART_Write(
 8001d3c:	4824      	ldr	r0, [pc, #144]	; (8001dd0 <writeToUsbTask+0xd8>)
 8001d3e:	f7ff fefd 	bl	8001b3c <UART_Write>
						"-------------------------------------USB STARTING-------------------------------------\r\n");

				//executed once after every reset, write type of sensors on USB
				if (!oneTimeColumnNamesInitDone) {
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	f083 0301 	eor.w	r3, r3, #1
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <writeToUsbTask+0x5e>
					ColumnNamesInit();
 8001d4e:	f7ff ff0b 	bl	8001b68 <ColumnNamesInit>
					oneTimeColumnNamesInitDone = 1;
 8001d52:	2301      	movs	r3, #1
 8001d54:	73fb      	strb	r3, [r7, #15]
				}

				RTC_Process();
 8001d56:	f7ff ff15 	bl	8001b84 <RTC_Process>
				UART_Write("RTC Data written to USB\r\n");
 8001d5a:	481e      	ldr	r0, [pc, #120]	; (8001dd4 <writeToUsbTask+0xdc>)
 8001d5c:	f7ff feee 	bl	8001b3c <UART_Write>

				USB_Write(Acceleration);
 8001d60:	481d      	ldr	r0, [pc, #116]	; (8001dd8 <writeToUsbTask+0xe0>)
 8001d62:	f7ff f949 	bl	8000ff8 <USB_Write>
				USB_Write(Gyroscope);
 8001d66:	481d      	ldr	r0, [pc, #116]	; (8001ddc <writeToUsbTask+0xe4>)
 8001d68:	f7ff f946 	bl	8000ff8 <USB_Write>
				USB_Write(Magnetometer);
 8001d6c:	481c      	ldr	r0, [pc, #112]	; (8001de0 <writeToUsbTask+0xe8>)
 8001d6e:	f7ff f943 	bl	8000ff8 <USB_Write>
				USB_Write(Temperature);
 8001d72:	481c      	ldr	r0, [pc, #112]	; (8001de4 <writeToUsbTask+0xec>)
 8001d74:	f7ff f940 	bl	8000ff8 <USB_Write>
				USB_Write(Humidity);
 8001d78:	481b      	ldr	r0, [pc, #108]	; (8001de8 <writeToUsbTask+0xf0>)
 8001d7a:	f7ff f93d 	bl	8000ff8 <USB_Write>
				USB_Write(Pressure);
 8001d7e:	481b      	ldr	r0, [pc, #108]	; (8001dec <writeToUsbTask+0xf4>)
 8001d80:	f7ff f93a 	bl	8000ff8 <USB_Write>
				MEMSready = 0;
 8001d84:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <writeToUsbTask+0xd0>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
				UART_Write("MEMS Data written to USB, MEMSready=0\r\n");
 8001d8a:	4819      	ldr	r0, [pc, #100]	; (8001df0 <writeToUsbTask+0xf8>)
 8001d8c:	f7ff fed6 	bl	8001b3c <UART_Write>

				USB_Write(";");
 8001d90:	4818      	ldr	r0, [pc, #96]	; (8001df4 <writeToUsbTask+0xfc>)
 8001d92:	f7ff f931 	bl	8000ff8 <USB_Write>

				USB_Write(GNSSposition);
 8001d96:	4818      	ldr	r0, [pc, #96]	; (8001df8 <writeToUsbTask+0x100>)
 8001d98:	f7ff f92e 	bl	8000ff8 <USB_Write>
				GNSSready = 0;
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <writeToUsbTask+0xd4>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
				//clear array
				GNSSposition[0] = '\0';
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <writeToUsbTask+0x100>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	701a      	strb	r2, [r3, #0]
				UART_Write("GNSS Data written to USB, GNSSready=0\r\n");
 8001da8:	4814      	ldr	r0, [pc, #80]	; (8001dfc <writeToUsbTask+0x104>)
 8001daa:	f7ff fec7 	bl	8001b3c <UART_Write>

				UART_Write(
 8001dae:	4814      	ldr	r0, [pc, #80]	; (8001e00 <writeToUsbTask+0x108>)
 8001db0:	f7ff fec4 	bl	8001b3c <UART_Write>
						"-------------------------------------USB FINISHED-------------------------------------\r\n");

			}
			break;
 8001db4:	bf00      	nop

		case APPLICATION_DISCONNECT:
			break;
		}

		osDelay(1);
 8001db6:	2001      	movs	r0, #1
 8001db8:	f017 f99e 	bl	80190f8 <osDelay>
		USBH_Process(&hUsbHostFS);
 8001dbc:	e7a4      	b.n	8001d08 <writeToUsbTask+0x10>
 8001dbe:	bf00      	nop
 8001dc0:	20004bac 	.word	0x20004bac
 8001dc4:	20002920 	.word	0x20002920
 8001dc8:	20005810 	.word	0x20005810
 8001dcc:	20005e18 	.word	0x20005e18
 8001dd0:	0801f4a0 	.word	0x0801f4a0
 8001dd4:	0801f4fc 	.word	0x0801f4fc
 8001dd8:	20008174 	.word	0x20008174
 8001ddc:	20008374 	.word	0x20008374
 8001de0:	20008074 	.word	0x20008074
 8001de4:	20007f74 	.word	0x20007f74
 8001de8:	20008574 	.word	0x20008574
 8001dec:	20008474 	.word	0x20008474
 8001df0:	0801f518 	.word	0x0801f518
 8001df4:	0801f540 	.word	0x0801f540
 8001df8:	20004fdc 	.word	0x20004fdc
 8001dfc:	0801f544 	.word	0x0801f544
 8001e00:	0801f56c 	.word	0x0801f56c

08001e04 <moveRobotArms>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_moveRobotArms */
void moveRobotArms(void *argument)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN moveRobotArms */
	/* Infinite loop */
	for (;;) {
		HAL_ADC_Start(&hadc1);
 8001e0c:	4822      	ldr	r0, [pc, #136]	; (8001e98 <moveRobotArms+0x94>)
 8001e0e:	f008 fb09 	bl	800a424 <HAL_ADC_Start>

		if (adcDataX[0] > 120) {
 8001e12:	4b22      	ldr	r3, [pc, #136]	; (8001e9c <moveRobotArms+0x98>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b78      	cmp	r3, #120	; 0x78
 8001e18:	d911      	bls.n	8001e3e <moveRobotArms+0x3a>
			//arms apart
			TIM3->CCR1 = adcDataX[0];
 8001e1a:	4a21      	ldr	r2, [pc, #132]	; (8001ea0 <moveRobotArms+0x9c>)
 8001e1c:	4b1f      	ldr	r3, [pc, #124]	; (8001e9c <moveRobotArms+0x98>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6353      	str	r3, [r2, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e2c:	f009 ffc2 	bl	800bdb4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8001e30:	2201      	movs	r2, #1
 8001e32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e36:	481b      	ldr	r0, [pc, #108]	; (8001ea4 <moveRobotArms+0xa0>)
 8001e38:	f009 ffbc 	bl	800bdb4 <HAL_GPIO_WritePin>
 8001e3c:	e027      	b.n	8001e8e <moveRobotArms+0x8a>

//			UART_Write("Arms apart\r\n");

		} else if (adcDataX[0] < 100) {
 8001e3e:	4b17      	ldr	r3, [pc, #92]	; (8001e9c <moveRobotArms+0x98>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2b63      	cmp	r3, #99	; 0x63
 8001e44:	d813      	bhi.n	8001e6e <moveRobotArms+0x6a>

			//arms together
			TIM3->CCR1 = 255 - adcDataX[0];
 8001e46:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <moveRobotArms+0x98>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a15      	ldr	r2, [pc, #84]	; (8001ea0 <moveRobotArms+0x9c>)
 8001e4c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001e50:	6353      	str	r3, [r2, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8001e52:	2201      	movs	r2, #1
 8001e54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e5c:	f009 ffaa 	bl	800bdb4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8001e60:	2200      	movs	r2, #0
 8001e62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e66:	480f      	ldr	r0, [pc, #60]	; (8001ea4 <moveRobotArms+0xa0>)
 8001e68:	f009 ffa4 	bl	800bdb4 <HAL_GPIO_WritePin>
 8001e6c:	e00f      	b.n	8001e8e <moveRobotArms+0x8a>
//			UART_Write("Arms together\r\n");


		} else {
			//still
			TIM3->CCR1 = 0;
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <moveRobotArms+0x9c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8001e74:	2200      	movs	r2, #0
 8001e76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e7e:	f009 ff99 	bl	800bdb4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8001e82:	2200      	movs	r2, #0
 8001e84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e88:	4806      	ldr	r0, [pc, #24]	; (8001ea4 <moveRobotArms+0xa0>)
 8001e8a:	f009 ff93 	bl	800bdb4 <HAL_GPIO_WritePin>
//			UART_Write("Arms don't move\r\n");
		}

		osDelay(1);
 8001e8e:	2001      	movs	r0, #1
 8001e90:	f017 f932 	bl	80190f8 <osDelay>
		HAL_ADC_Start(&hadc1);
 8001e94:	e7ba      	b.n	8001e0c <moveRobotArms+0x8>
 8001e96:	bf00      	nop
 8001e98:	200057ac 	.word	0x200057ac
 8001e9c:	20004f88 	.word	0x20004f88
 8001ea0:	40000400 	.word	0x40000400
 8001ea4:	48000400 	.word	0x48000400

08001ea8 <moveRobotWheels>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_moveRobotWheels */
void moveRobotWheels(void *argument)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN moveRobotWheels */
  /* Infinite loop */
  for(;;)
  {
	  		HAL_ADC_Start(&hadc2);
 8001eb0:	4862      	ldr	r0, [pc, #392]	; (800203c <moveRobotWheels+0x194>)
 8001eb2:	f008 fab7 	bl	800a424 <HAL_ADC_Start>
	  //		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 || HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 0) {
	  		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {
 8001eb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eba:	4861      	ldr	r0, [pc, #388]	; (8002040 <moveRobotWheels+0x198>)
 8001ebc:	f009 ff62 	bl	800bd84 <HAL_GPIO_ReadPin>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d153      	bne.n	8001f6e <moveRobotWheels+0xc6>
	  //		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 0) {

	  			if (direction == 0) {
 8001ec6:	4b5f      	ldr	r3, [pc, #380]	; (8002044 <moveRobotWheels+0x19c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d127      	bne.n	8001f1e <moveRobotWheels+0x76>
	  				direction = 1;
 8001ece:	4b5d      	ldr	r3, [pc, #372]	; (8002044 <moveRobotWheels+0x19c>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]
	  				while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {
 8001ed4:	e01a      	b.n	8001f0c <moveRobotWheels+0x64>
	  //				while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 0) {
	  					//right wheel forwards
	  					TIM4->CCR1 = 160;
 8001ed6:	4b5c      	ldr	r3, [pc, #368]	; (8002048 <moveRobotWheels+0x1a0>)
 8001ed8:	22a0      	movs	r2, #160	; 0xa0
 8001eda:	635a      	str	r2, [r3, #52]	; 0x34
	  					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8001edc:	2201      	movs	r2, #1
 8001ede:	2180      	movs	r1, #128	; 0x80
 8001ee0:	4857      	ldr	r0, [pc, #348]	; (8002040 <moveRobotWheels+0x198>)
 8001ee2:	f009 ff67 	bl	800bdb4 <HAL_GPIO_WritePin>
	  					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2180      	movs	r1, #128	; 0x80
 8001eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eee:	f009 ff61 	bl	800bdb4 <HAL_GPIO_WritePin>

	  					//left wheel backwards
	  					TIM4->CCR2 = 160;
 8001ef2:	4b55      	ldr	r3, [pc, #340]	; (8002048 <moveRobotWheels+0x1a0>)
 8001ef4:	22a0      	movs	r2, #160	; 0xa0
 8001ef6:	639a      	str	r2, [r3, #56]	; 0x38
	  					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2120      	movs	r1, #32
 8001efc:	4853      	ldr	r0, [pc, #332]	; (800204c <moveRobotWheels+0x1a4>)
 8001efe:	f009 ff59 	bl	800bdb4 <HAL_GPIO_WritePin>
	  					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8001f02:	2201      	movs	r2, #1
 8001f04:	2110      	movs	r1, #16
 8001f06:	4851      	ldr	r0, [pc, #324]	; (800204c <moveRobotWheels+0x1a4>)
 8001f08:	f009 ff54 	bl	800bdb4 <HAL_GPIO_WritePin>
	  				while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {
 8001f0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f10:	484b      	ldr	r0, [pc, #300]	; (8002040 <moveRobotWheels+0x198>)
 8001f12:	f009 ff37 	bl	800bd84 <HAL_GPIO_ReadPin>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0dc      	beq.n	8001ed6 <moveRobotWheels+0x2e>
 8001f1c:	e08a      	b.n	8002034 <moveRobotWheels+0x18c>
//	  					UART_Write("Turn Left\r\n");
	  				}
	  			}

	  			else {
	  				direction = 0;
 8001f1e:	4b49      	ldr	r3, [pc, #292]	; (8002044 <moveRobotWheels+0x19c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
	  //				while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 0) {
	  					while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {
 8001f24:	e01a      	b.n	8001f5c <moveRobotWheels+0xb4>
	  					//right wheel backwards
	  					TIM4->CCR1 = 160;
 8001f26:	4b48      	ldr	r3, [pc, #288]	; (8002048 <moveRobotWheels+0x1a0>)
 8001f28:	22a0      	movs	r2, #160	; 0xa0
 8001f2a:	635a      	str	r2, [r3, #52]	; 0x34
	  					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2180      	movs	r1, #128	; 0x80
 8001f30:	4843      	ldr	r0, [pc, #268]	; (8002040 <moveRobotWheels+0x198>)
 8001f32:	f009 ff3f 	bl	800bdb4 <HAL_GPIO_WritePin>
	  					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8001f36:	2201      	movs	r2, #1
 8001f38:	2180      	movs	r1, #128	; 0x80
 8001f3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f3e:	f009 ff39 	bl	800bdb4 <HAL_GPIO_WritePin>

	  					//left wheel forwards
	  					TIM4->CCR2 = 160;
 8001f42:	4b41      	ldr	r3, [pc, #260]	; (8002048 <moveRobotWheels+0x1a0>)
 8001f44:	22a0      	movs	r2, #160	; 0xa0
 8001f46:	639a      	str	r2, [r3, #56]	; 0x38
	  					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8001f48:	2201      	movs	r2, #1
 8001f4a:	2120      	movs	r1, #32
 8001f4c:	483f      	ldr	r0, [pc, #252]	; (800204c <moveRobotWheels+0x1a4>)
 8001f4e:	f009 ff31 	bl	800bdb4 <HAL_GPIO_WritePin>
	  					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2110      	movs	r1, #16
 8001f56:	483d      	ldr	r0, [pc, #244]	; (800204c <moveRobotWheels+0x1a4>)
 8001f58:	f009 ff2c 	bl	800bdb4 <HAL_GPIO_WritePin>
	  					while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {
 8001f5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f60:	4837      	ldr	r0, [pc, #220]	; (8002040 <moveRobotWheels+0x198>)
 8001f62:	f009 ff0f 	bl	800bd84 <HAL_GPIO_ReadPin>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0dc      	beq.n	8001f26 <moveRobotWheels+0x7e>
 8001f6c:	e062      	b.n	8002034 <moveRobotWheels+0x18c>
	  		}

	  		//ADC
	  		else {
	  //			UART_Write("else\r\n");
	  			if (adcDataY[0] > 120) {
 8001f6e:	4b38      	ldr	r3, [pc, #224]	; (8002050 <moveRobotWheels+0x1a8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2b78      	cmp	r3, #120	; 0x78
 8001f74:	d91d      	bls.n	8001fb2 <moveRobotWheels+0x10a>
	  				//right wheel forwards
	  				TIM4->CCR1 = adcDataY[0];
 8001f76:	4a34      	ldr	r2, [pc, #208]	; (8002048 <moveRobotWheels+0x1a0>)
 8001f78:	4b35      	ldr	r3, [pc, #212]	; (8002050 <moveRobotWheels+0x1a8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6353      	str	r3, [r2, #52]	; 0x34
	  				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8001f7e:	2201      	movs	r2, #1
 8001f80:	2180      	movs	r1, #128	; 0x80
 8001f82:	482f      	ldr	r0, [pc, #188]	; (8002040 <moveRobotWheels+0x198>)
 8001f84:	f009 ff16 	bl	800bdb4 <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2180      	movs	r1, #128	; 0x80
 8001f8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f90:	f009 ff10 	bl	800bdb4 <HAL_GPIO_WritePin>

	  				//left wheel forwards
	  				TIM4->CCR2 = adcDataY[0];
 8001f94:	4a2c      	ldr	r2, [pc, #176]	; (8002048 <moveRobotWheels+0x1a0>)
 8001f96:	4b2e      	ldr	r3, [pc, #184]	; (8002050 <moveRobotWheels+0x1a8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6393      	str	r3, [r2, #56]	; 0x38
	  				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	2120      	movs	r1, #32
 8001fa0:	482a      	ldr	r0, [pc, #168]	; (800204c <moveRobotWheels+0x1a4>)
 8001fa2:	f009 ff07 	bl	800bdb4 <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2110      	movs	r1, #16
 8001faa:	4828      	ldr	r0, [pc, #160]	; (800204c <moveRobotWheels+0x1a4>)
 8001fac:	f009 ff02 	bl	800bdb4 <HAL_GPIO_WritePin>
 8001fb0:	e040      	b.n	8002034 <moveRobotWheels+0x18c>

//	  				UART_Write("Wheels move forwards\r\n");

	  			} else if (adcDataY[0] < 100) {
 8001fb2:	4b27      	ldr	r3, [pc, #156]	; (8002050 <moveRobotWheels+0x1a8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b63      	cmp	r3, #99	; 0x63
 8001fb8:	d821      	bhi.n	8001ffe <moveRobotWheels+0x156>

	  				//right wheel backwards
	  				TIM4->CCR1 = 255 - adcDataY[0];;
 8001fba:	4b25      	ldr	r3, [pc, #148]	; (8002050 <moveRobotWheels+0x1a8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a22      	ldr	r2, [pc, #136]	; (8002048 <moveRobotWheels+0x1a0>)
 8001fc0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001fc4:	6353      	str	r3, [r2, #52]	; 0x34
	  				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2180      	movs	r1, #128	; 0x80
 8001fca:	481d      	ldr	r0, [pc, #116]	; (8002040 <moveRobotWheels+0x198>)
 8001fcc:	f009 fef2 	bl	800bdb4 <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	2180      	movs	r1, #128	; 0x80
 8001fd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd8:	f009 feec 	bl	800bdb4 <HAL_GPIO_WritePin>

	  				//left wheel backwards
	  				TIM4->CCR2 = 255 - adcDataY[0];;
 8001fdc:	4b1c      	ldr	r3, [pc, #112]	; (8002050 <moveRobotWheels+0x1a8>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a19      	ldr	r2, [pc, #100]	; (8002048 <moveRobotWheels+0x1a0>)
 8001fe2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001fe6:	6393      	str	r3, [r2, #56]	; 0x38
	  				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2120      	movs	r1, #32
 8001fec:	4817      	ldr	r0, [pc, #92]	; (800204c <moveRobotWheels+0x1a4>)
 8001fee:	f009 fee1 	bl	800bdb4 <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	2110      	movs	r1, #16
 8001ff6:	4815      	ldr	r0, [pc, #84]	; (800204c <moveRobotWheels+0x1a4>)
 8001ff8:	f009 fedc 	bl	800bdb4 <HAL_GPIO_WritePin>
 8001ffc:	e01a      	b.n	8002034 <moveRobotWheels+0x18c>

//	  				UART_Write("Wheels move backwards\r\n");

	  			} else {
	  				//right wheel doesn't move
	  				TIM4->CCR1 = 0;
 8001ffe:	4b12      	ldr	r3, [pc, #72]	; (8002048 <moveRobotWheels+0x1a0>)
 8002000:	2200      	movs	r2, #0
 8002002:	635a      	str	r2, [r3, #52]	; 0x34
	  				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8002004:	2200      	movs	r2, #0
 8002006:	2180      	movs	r1, #128	; 0x80
 8002008:	480d      	ldr	r0, [pc, #52]	; (8002040 <moveRobotWheels+0x198>)
 800200a:	f009 fed3 	bl	800bdb4 <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 800200e:	2200      	movs	r2, #0
 8002010:	2180      	movs	r1, #128	; 0x80
 8002012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002016:	f009 fecd 	bl	800bdb4 <HAL_GPIO_WritePin>

	  				//left wheel doesn't move
	  				TIM4->CCR2 = 0;
 800201a:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <moveRobotWheels+0x1a0>)
 800201c:	2200      	movs	r2, #0
 800201e:	639a      	str	r2, [r3, #56]	; 0x38
	  				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8002020:	2200      	movs	r2, #0
 8002022:	2110      	movs	r1, #16
 8002024:	4809      	ldr	r0, [pc, #36]	; (800204c <moveRobotWheels+0x1a4>)
 8002026:	f009 fec5 	bl	800bdb4 <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 800202a:	2200      	movs	r2, #0
 800202c:	2120      	movs	r1, #32
 800202e:	4807      	ldr	r0, [pc, #28]	; (800204c <moveRobotWheels+0x1a4>)
 8002030:	f009 fec0 	bl	800bdb4 <HAL_GPIO_WritePin>

	  //			UART_Write("Wheels don't move\r\n");
	  			}
	  		}

    osDelay(1);
 8002034:	2001      	movs	r0, #1
 8002036:	f017 f85f 	bl	80190f8 <osDelay>
	  		HAL_ADC_Start(&hadc2);
 800203a:	e739      	b.n	8001eb0 <moveRobotWheels+0x8>
 800203c:	20004af4 	.word	0x20004af4
 8002040:	48000800 	.word	0x48000800
 8002044:	20004fd8 	.word	0x20004fd8
 8002048:	40000800 	.word	0x40000800
 800204c:	48000400 	.word	0x48000400
 8002050:	20004f84 	.word	0x20004f84

08002054 <moveRobotRockets>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_moveRobotRockets */
void moveRobotRockets(void *argument)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN moveRobotRockets */
  /* Infinite loop */
  for(;;)
  {
	  	  	//Rockets left
	  		TIM2->CCR4 = 250;
 800205c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002060:	22fa      	movs	r2, #250	; 0xfa
 8002062:	641a      	str	r2, [r3, #64]	; 0x40
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8002064:	2201      	movs	r2, #1
 8002066:	2102      	movs	r1, #2
 8002068:	4810      	ldr	r0, [pc, #64]	; (80020ac <moveRobotRockets+0x58>)
 800206a:	f009 fea3 	bl	800bdb4 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 800206e:	2200      	movs	r2, #0
 8002070:	2104      	movs	r1, #4
 8002072:	480e      	ldr	r0, [pc, #56]	; (80020ac <moveRobotRockets+0x58>)
 8002074:	f009 fe9e 	bl	800bdb4 <HAL_GPIO_WritePin>

	  		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {
 8002078:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800207c:	480c      	ldr	r0, [pc, #48]	; (80020b0 <moveRobotRockets+0x5c>)
 800207e:	f009 fe81 	bl	800bd84 <HAL_GPIO_ReadPin>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10d      	bne.n	80020a4 <moveRobotRockets+0x50>

	  			//Rocket right
	  			TIM2->CCR4 = 250;
 8002088:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800208c:	22fa      	movs	r2, #250	; 0xfa
 800208e:	641a      	str	r2, [r3, #64]	; 0x40
	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8002090:	2200      	movs	r2, #0
 8002092:	2102      	movs	r1, #2
 8002094:	4805      	ldr	r0, [pc, #20]	; (80020ac <moveRobotRockets+0x58>)
 8002096:	f009 fe8d 	bl	800bdb4 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 800209a:	2201      	movs	r2, #1
 800209c:	2104      	movs	r1, #4
 800209e:	4803      	ldr	r0, [pc, #12]	; (80020ac <moveRobotRockets+0x58>)
 80020a0:	f009 fe88 	bl	800bdb4 <HAL_GPIO_WritePin>
//	  			UART_Write("Rocket right\r\n");
	  		}
    osDelay(1);
 80020a4:	2001      	movs	r0, #1
 80020a6:	f017 f827 	bl	80190f8 <osDelay>
	  		TIM2->CCR4 = 250;
 80020aa:	e7d7      	b.n	800205c <moveRobotRockets+0x8>
 80020ac:	48000400 	.word	0x48000400
 80020b0:	48000800 	.word	0x48000800

080020b4 <moveRobotHips>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_moveRobotHips */
void moveRobotHips(void *argument)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN moveRobotHips */
	/* Infinite loop */
	for (;;) {

		//Robot bends
		TIM2->CCR1 = 180;
 80020bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020c0:	22b4      	movs	r2, #180	; 0xb4
 80020c2:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 80020c4:	2201      	movs	r2, #1
 80020c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020ca:	4812      	ldr	r0, [pc, #72]	; (8002114 <moveRobotHips+0x60>)
 80020cc:	f009 fe72 	bl	800bdb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80020d0:	2200      	movs	r2, #0
 80020d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020d6:	480f      	ldr	r0, [pc, #60]	; (8002114 <moveRobotHips+0x60>)
 80020d8:	f009 fe6c 	bl	800bdb4 <HAL_GPIO_WritePin>

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {
 80020dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020e0:	480d      	ldr	r0, [pc, #52]	; (8002118 <moveRobotHips+0x64>)
 80020e2:	f009 fe4f 	bl	800bd84 <HAL_GPIO_ReadPin>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10f      	bne.n	800210c <moveRobotHips+0x58>
			TIM2->CCR1 = 180;
 80020ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020f0:	22b4      	movs	r2, #180	; 0xb4
 80020f2:	635a      	str	r2, [r3, #52]	; 0x34

			//Robot stretches
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 80020f4:	2200      	movs	r2, #0
 80020f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020fa:	4806      	ldr	r0, [pc, #24]	; (8002114 <moveRobotHips+0x60>)
 80020fc:	f009 fe5a 	bl	800bdb4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8002100:	2201      	movs	r2, #1
 8002102:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002106:	4803      	ldr	r0, [pc, #12]	; (8002114 <moveRobotHips+0x60>)
 8002108:	f009 fe54 	bl	800bdb4 <HAL_GPIO_WritePin>
//			UART_Write("Robot stretches\r\n");

		}
		osDelay(1);
 800210c:	2001      	movs	r0, #1
 800210e:	f016 fff3 	bl	80190f8 <osDelay>
		TIM2->CCR1 = 180;
 8002112:	e7d3      	b.n	80020bc <moveRobotHips+0x8>
 8002114:	48000400 	.word	0x48000400
 8002118:	48000800 	.word	0x48000800

0800211c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8002124:	2001      	movs	r0, #1
 8002126:	f016 ffe7 	bl	80190f8 <osDelay>
 800212a:	e7fb      	b.n	8002124 <StartDefaultTask+0x8>

0800212c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a1e      	ldr	r2, [pc, #120]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d101      	bne.n	8002142 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800213e:	f007 fe05 	bl	8009d4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM7) {
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a1c      	ldr	r2, [pc, #112]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d12f      	bne.n	80021ac <HAL_TIM_PeriodElapsedCallback+0x80>
		if (Appli_state == APPLICATION_READY) {
 800214c:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <HAL_TIM_PeriodElapsedCallback+0x90>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b02      	cmp	r3, #2
 8002152:	d128      	bne.n	80021a6 <HAL_TIM_PeriodElapsedCallback+0x7a>
			UART_Write(
 8002154:	481a      	ldr	r0, [pc, #104]	; (80021c0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002156:	f7ff fcf1 	bl	8001b3c <UART_Write>
					"------------------------------------MEMS PROCESS STARTING------------------------------------\r\n");
			UART_Write("\r\n");
 800215a:	481a      	ldr	r0, [pc, #104]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800215c:	f7ff fcee 	bl	8001b3c <UART_Write>
			MX_MEMS_Process();
 8002160:	f011 f836 	bl	80131d0 <MX_MEMS_Process>
			MEMSready = 1;
 8002164:	4b18      	ldr	r3, [pc, #96]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002166:	2201      	movs	r2, #1
 8002168:	601a      	str	r2, [r3, #0]
			UART_Write("MEMS Data aquired, MEMSready=1\r\n");
 800216a:	4818      	ldr	r0, [pc, #96]	; (80021cc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800216c:	f7ff fce6 	bl	8001b3c <UART_Write>
			UART_Write(
 8002170:	4817      	ldr	r0, [pc, #92]	; (80021d0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002172:	f7ff fce3 	bl	8001b3c <UART_Write>
					"------------------------------------MEMS PROCESS FINISHED------------------------------------\r\n");

			UART_Write("-\r\n");
 8002176:	4817      	ldr	r0, [pc, #92]	; (80021d4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002178:	f7ff fce0 	bl	8001b3c <UART_Write>

			UART_Write(
 800217c:	4816      	ldr	r0, [pc, #88]	; (80021d8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800217e:	f7ff fcdd 	bl	8001b3c <UART_Write>
					"------------------------------------GNSS PROCESS STARTING------------------------------------\r\n");
			UART_Write("\r\n");
 8002182:	4810      	ldr	r0, [pc, #64]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002184:	f7ff fcda 	bl	8001b3c <UART_Write>
			GNSS_Process();
 8002188:	f7ff fd3a 	bl	8001c00 <GNSS_Process>
			GNSSready = 1;
 800218c:	4b13      	ldr	r3, [pc, #76]	; (80021dc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800218e:	2201      	movs	r2, #1
 8002190:	601a      	str	r2, [r3, #0]
			UART_Write("GNSS Data aquired, GNSSready=1\r\n");
 8002192:	4813      	ldr	r0, [pc, #76]	; (80021e0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002194:	f7ff fcd2 	bl	8001b3c <UART_Write>
			UART_Write(
 8002198:	4812      	ldr	r0, [pc, #72]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800219a:	f7ff fccf 	bl	8001b3c <UART_Write>
					"------------------------------------GNSS PROCESS FINISHED------------------------------------\r\n");

			UART_Write("-\r\n-\r\n");
 800219e:	4812      	ldr	r0, [pc, #72]	; (80021e8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80021a0:	f7ff fccc 	bl	8001b3c <UART_Write>
			UART_Write("MEMS and GNSS Data NOT aquired, USB not ready\r\n");
		}

	}
  /* USER CODE END Callback 1 */
}
 80021a4:	e002      	b.n	80021ac <HAL_TIM_PeriodElapsedCallback+0x80>
			UART_Write("MEMS and GNSS Data NOT aquired, USB not ready\r\n");
 80021a6:	4811      	ldr	r0, [pc, #68]	; (80021ec <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80021a8:	f7ff fcc8 	bl	8001b3c <UART_Write>
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40001000 	.word	0x40001000
 80021b8:	40001400 	.word	0x40001400
 80021bc:	20002920 	.word	0x20002920
 80021c0:	0801f5c8 	.word	0x0801f5c8
 80021c4:	0801f628 	.word	0x0801f628
 80021c8:	20005810 	.word	0x20005810
 80021cc:	0801f62c 	.word	0x0801f62c
 80021d0:	0801f650 	.word	0x0801f650
 80021d4:	0801f6b0 	.word	0x0801f6b0
 80021d8:	0801f6b4 	.word	0x0801f6b4
 80021dc:	20005e18 	.word	0x20005e18
 80021e0:	0801f714 	.word	0x0801f714
 80021e4:	0801f738 	.word	0x0801f738
 80021e8:	0801f798 	.word	0x0801f798
 80021ec:	0801f7a0 	.word	0x0801f7a0

080021f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021f4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80021f6:	e7fe      	b.n	80021f6 <Error_Handler+0x6>

080021f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fe:	4b11      	ldr	r3, [pc, #68]	; (8002244 <HAL_MspInit+0x4c>)
 8002200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002202:	4a10      	ldr	r2, [pc, #64]	; (8002244 <HAL_MspInit+0x4c>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6613      	str	r3, [r2, #96]	; 0x60
 800220a:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <HAL_MspInit+0x4c>)
 800220c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	607b      	str	r3, [r7, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002216:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_MspInit+0x4c>)
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221a:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <HAL_MspInit+0x4c>)
 800221c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002220:	6593      	str	r3, [r2, #88]	; 0x58
 8002222:	4b08      	ldr	r3, [pc, #32]	; (8002244 <HAL_MspInit+0x4c>)
 8002224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222a:	603b      	str	r3, [r7, #0]
 800222c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	210f      	movs	r1, #15
 8002232:	f06f 0001 	mvn.w	r0, #1
 8002236:	f009 f8e7 	bl	800b408 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40021000 	.word	0x40021000

08002248 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08c      	sub	sp, #48	; 0x30
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 031c 	add.w	r3, r7, #28
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a5f      	ldr	r2, [pc, #380]	; (80023e4 <HAL_ADC_MspInit+0x19c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d159      	bne.n	800231e <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800226a:	4b5f      	ldr	r3, [pc, #380]	; (80023e8 <HAL_ADC_MspInit+0x1a0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	3301      	adds	r3, #1
 8002270:	4a5d      	ldr	r2, [pc, #372]	; (80023e8 <HAL_ADC_MspInit+0x1a0>)
 8002272:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002274:	4b5c      	ldr	r3, [pc, #368]	; (80023e8 <HAL_ADC_MspInit+0x1a0>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d10b      	bne.n	8002294 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 800227c:	4b5b      	ldr	r3, [pc, #364]	; (80023ec <HAL_ADC_MspInit+0x1a4>)
 800227e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002280:	4a5a      	ldr	r2, [pc, #360]	; (80023ec <HAL_ADC_MspInit+0x1a4>)
 8002282:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002286:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002288:	4b58      	ldr	r3, [pc, #352]	; (80023ec <HAL_ADC_MspInit+0x1a4>)
 800228a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002290:	61bb      	str	r3, [r7, #24]
 8002292:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002294:	4b55      	ldr	r3, [pc, #340]	; (80023ec <HAL_ADC_MspInit+0x1a4>)
 8002296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002298:	4a54      	ldr	r2, [pc, #336]	; (80023ec <HAL_ADC_MspInit+0x1a4>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022a0:	4b52      	ldr	r3, [pc, #328]	; (80023ec <HAL_ADC_MspInit+0x1a4>)
 80022a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022ac:	2301      	movs	r3, #1
 80022ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80022b0:	230b      	movs	r3, #11
 80022b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b8:	f107 031c 	add.w	r3, r7, #28
 80022bc:	4619      	mov	r1, r3
 80022be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022c2:	f009 fac3 	bl	800b84c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel3;
 80022c6:	4b4a      	ldr	r3, [pc, #296]	; (80023f0 <HAL_ADC_MspInit+0x1a8>)
 80022c8:	4a4a      	ldr	r2, [pc, #296]	; (80023f4 <HAL_ADC_MspInit+0x1ac>)
 80022ca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80022cc:	4b48      	ldr	r3, [pc, #288]	; (80023f0 <HAL_ADC_MspInit+0x1a8>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022d2:	4b47      	ldr	r3, [pc, #284]	; (80023f0 <HAL_ADC_MspInit+0x1a8>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022d8:	4b45      	ldr	r3, [pc, #276]	; (80023f0 <HAL_ADC_MspInit+0x1a8>)
 80022da:	2200      	movs	r2, #0
 80022dc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80022de:	4b44      	ldr	r3, [pc, #272]	; (80023f0 <HAL_ADC_MspInit+0x1a8>)
 80022e0:	2280      	movs	r2, #128	; 0x80
 80022e2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022e4:	4b42      	ldr	r3, [pc, #264]	; (80023f0 <HAL_ADC_MspInit+0x1a8>)
 80022e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022ea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022ec:	4b40      	ldr	r3, [pc, #256]	; (80023f0 <HAL_ADC_MspInit+0x1a8>)
 80022ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022f2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80022f4:	4b3e      	ldr	r3, [pc, #248]	; (80023f0 <HAL_ADC_MspInit+0x1a8>)
 80022f6:	2220      	movs	r2, #32
 80022f8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80022fa:	4b3d      	ldr	r3, [pc, #244]	; (80023f0 <HAL_ADC_MspInit+0x1a8>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002300:	483b      	ldr	r0, [pc, #236]	; (80023f0 <HAL_ADC_MspInit+0x1a8>)
 8002302:	f009 f8ab 	bl	800b45c <HAL_DMA_Init>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 800230c:	f7ff ff70 	bl	80021f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a37      	ldr	r2, [pc, #220]	; (80023f0 <HAL_ADC_MspInit+0x1a8>)
 8002314:	64da      	str	r2, [r3, #76]	; 0x4c
 8002316:	4a36      	ldr	r2, [pc, #216]	; (80023f0 <HAL_ADC_MspInit+0x1a8>)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800231c:	e05d      	b.n	80023da <HAL_ADC_MspInit+0x192>
  else if(hadc->Instance==ADC2)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a35      	ldr	r2, [pc, #212]	; (80023f8 <HAL_ADC_MspInit+0x1b0>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d158      	bne.n	80023da <HAL_ADC_MspInit+0x192>
    HAL_RCC_ADC_CLK_ENABLED++;
 8002328:	4b2f      	ldr	r3, [pc, #188]	; (80023e8 <HAL_ADC_MspInit+0x1a0>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	3301      	adds	r3, #1
 800232e:	4a2e      	ldr	r2, [pc, #184]	; (80023e8 <HAL_ADC_MspInit+0x1a0>)
 8002330:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002332:	4b2d      	ldr	r3, [pc, #180]	; (80023e8 <HAL_ADC_MspInit+0x1a0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d10b      	bne.n	8002352 <HAL_ADC_MspInit+0x10a>
      __HAL_RCC_ADC_CLK_ENABLE();
 800233a:	4b2c      	ldr	r3, [pc, #176]	; (80023ec <HAL_ADC_MspInit+0x1a4>)
 800233c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233e:	4a2b      	ldr	r2, [pc, #172]	; (80023ec <HAL_ADC_MspInit+0x1a4>)
 8002340:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002344:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002346:	4b29      	ldr	r3, [pc, #164]	; (80023ec <HAL_ADC_MspInit+0x1a4>)
 8002348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002352:	4b26      	ldr	r3, [pc, #152]	; (80023ec <HAL_ADC_MspInit+0x1a4>)
 8002354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002356:	4a25      	ldr	r2, [pc, #148]	; (80023ec <HAL_ADC_MspInit+0x1a4>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800235e:	4b23      	ldr	r3, [pc, #140]	; (80023ec <HAL_ADC_MspInit+0x1a4>)
 8002360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800236a:	2302      	movs	r3, #2
 800236c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800236e:	230b      	movs	r3, #11
 8002370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002376:	f107 031c 	add.w	r3, r7, #28
 800237a:	4619      	mov	r1, r3
 800237c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002380:	f009 fa64 	bl	800b84c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8002384:	4b1d      	ldr	r3, [pc, #116]	; (80023fc <HAL_ADC_MspInit+0x1b4>)
 8002386:	4a1e      	ldr	r2, [pc, #120]	; (8002400 <HAL_ADC_MspInit+0x1b8>)
 8002388:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 800238a:	4b1c      	ldr	r3, [pc, #112]	; (80023fc <HAL_ADC_MspInit+0x1b4>)
 800238c:	2200      	movs	r2, #0
 800238e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002390:	4b1a      	ldr	r3, [pc, #104]	; (80023fc <HAL_ADC_MspInit+0x1b4>)
 8002392:	2200      	movs	r2, #0
 8002394:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002396:	4b19      	ldr	r3, [pc, #100]	; (80023fc <HAL_ADC_MspInit+0x1b4>)
 8002398:	2200      	movs	r2, #0
 800239a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800239c:	4b17      	ldr	r3, [pc, #92]	; (80023fc <HAL_ADC_MspInit+0x1b4>)
 800239e:	2280      	movs	r2, #128	; 0x80
 80023a0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023a2:	4b16      	ldr	r3, [pc, #88]	; (80023fc <HAL_ADC_MspInit+0x1b4>)
 80023a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023a8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023aa:	4b14      	ldr	r3, [pc, #80]	; (80023fc <HAL_ADC_MspInit+0x1b4>)
 80023ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023b0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80023b2:	4b12      	ldr	r3, [pc, #72]	; (80023fc <HAL_ADC_MspInit+0x1b4>)
 80023b4:	2220      	movs	r2, #32
 80023b6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80023b8:	4b10      	ldr	r3, [pc, #64]	; (80023fc <HAL_ADC_MspInit+0x1b4>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80023be:	480f      	ldr	r0, [pc, #60]	; (80023fc <HAL_ADC_MspInit+0x1b4>)
 80023c0:	f009 f84c 	bl	800b45c <HAL_DMA_Init>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_ADC_MspInit+0x186>
      Error_Handler();
 80023ca:	f7ff ff11 	bl	80021f0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <HAL_ADC_MspInit+0x1b4>)
 80023d2:	64da      	str	r2, [r3, #76]	; 0x4c
 80023d4:	4a09      	ldr	r2, [pc, #36]	; (80023fc <HAL_ADC_MspInit+0x1b4>)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6293      	str	r3, [r2, #40]	; 0x28
}
 80023da:	bf00      	nop
 80023dc:	3730      	adds	r7, #48	; 0x30
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	50040000 	.word	0x50040000
 80023e8:	2000024c 	.word	0x2000024c
 80023ec:	40021000 	.word	0x40021000
 80023f0:	20005814 	.word	0x20005814
 80023f4:	40020430 	.word	0x40020430
 80023f8:	50040100 	.word	0x50040100
 80023fc:	2000599c 	.word	0x2000599c
 8002400:	4002001c 	.word	0x4002001c

08002404 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a0b      	ldr	r2, [pc, #44]	; (8002440 <HAL_RTC_MspInit+0x3c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d10f      	bne.n	8002436 <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002416:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_RTC_MspInit+0x40>)
 8002418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241c:	4a09      	ldr	r2, [pc, #36]	; (8002444 <HAL_RTC_MspInit+0x40>)
 800241e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002422:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8002426:	2200      	movs	r2, #0
 8002428:	2105      	movs	r1, #5
 800242a:	2029      	movs	r0, #41	; 0x29
 800242c:	f008 ffec 	bl	800b408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002430:	2029      	movs	r0, #41	; 0x29
 8002432:	f009 f805 	bl	800b440 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40002800 	.word	0x40002800
 8002444:	40021000 	.word	0x40021000

08002448 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002458:	d10c      	bne.n	8002474 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800245a:	4b45      	ldr	r3, [pc, #276]	; (8002570 <HAL_TIM_PWM_MspInit+0x128>)
 800245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245e:	4a44      	ldr	r2, [pc, #272]	; (8002570 <HAL_TIM_PWM_MspInit+0x128>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	6593      	str	r3, [r2, #88]	; 0x58
 8002466:	4b42      	ldr	r3, [pc, #264]	; (8002570 <HAL_TIM_PWM_MspInit+0x128>)
 8002468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002472:	e078      	b.n	8002566 <HAL_TIM_PWM_MspInit+0x11e>
  else if(htim_pwm->Instance==TIM3)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a3e      	ldr	r2, [pc, #248]	; (8002574 <HAL_TIM_PWM_MspInit+0x12c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d10c      	bne.n	8002498 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800247e:	4b3c      	ldr	r3, [pc, #240]	; (8002570 <HAL_TIM_PWM_MspInit+0x128>)
 8002480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002482:	4a3b      	ldr	r2, [pc, #236]	; (8002570 <HAL_TIM_PWM_MspInit+0x128>)
 8002484:	f043 0302 	orr.w	r3, r3, #2
 8002488:	6593      	str	r3, [r2, #88]	; 0x58
 800248a:	4b39      	ldr	r3, [pc, #228]	; (8002570 <HAL_TIM_PWM_MspInit+0x128>)
 800248c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	693b      	ldr	r3, [r7, #16]
}
 8002496:	e066      	b.n	8002566 <HAL_TIM_PWM_MspInit+0x11e>
  else if(htim_pwm->Instance==TIM4)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a36      	ldr	r2, [pc, #216]	; (8002578 <HAL_TIM_PWM_MspInit+0x130>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d161      	bne.n	8002566 <HAL_TIM_PWM_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024a2:	4b33      	ldr	r3, [pc, #204]	; (8002570 <HAL_TIM_PWM_MspInit+0x128>)
 80024a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a6:	4a32      	ldr	r2, [pc, #200]	; (8002570 <HAL_TIM_PWM_MspInit+0x128>)
 80024a8:	f043 0304 	orr.w	r3, r3, #4
 80024ac:	6593      	str	r3, [r2, #88]	; 0x58
 80024ae:	4b30      	ldr	r3, [pc, #192]	; (8002570 <HAL_TIM_PWM_MspInit+0x128>)
 80024b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch1.Instance = DMA1_Channel1;
 80024ba:	4b30      	ldr	r3, [pc, #192]	; (800257c <HAL_TIM_PWM_MspInit+0x134>)
 80024bc:	4a30      	ldr	r2, [pc, #192]	; (8002580 <HAL_TIM_PWM_MspInit+0x138>)
 80024be:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_6;
 80024c0:	4b2e      	ldr	r3, [pc, #184]	; (800257c <HAL_TIM_PWM_MspInit+0x134>)
 80024c2:	2206      	movs	r2, #6
 80024c4:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024c6:	4b2d      	ldr	r3, [pc, #180]	; (800257c <HAL_TIM_PWM_MspInit+0x134>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80024cc:	4b2b      	ldr	r3, [pc, #172]	; (800257c <HAL_TIM_PWM_MspInit+0x134>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80024d2:	4b2a      	ldr	r3, [pc, #168]	; (800257c <HAL_TIM_PWM_MspInit+0x134>)
 80024d4:	2280      	movs	r2, #128	; 0x80
 80024d6:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80024d8:	4b28      	ldr	r3, [pc, #160]	; (800257c <HAL_TIM_PWM_MspInit+0x134>)
 80024da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024de:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80024e0:	4b26      	ldr	r3, [pc, #152]	; (800257c <HAL_TIM_PWM_MspInit+0x134>)
 80024e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024e6:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 80024e8:	4b24      	ldr	r3, [pc, #144]	; (800257c <HAL_TIM_PWM_MspInit+0x134>)
 80024ea:	2220      	movs	r2, #32
 80024ec:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80024ee:	4b23      	ldr	r3, [pc, #140]	; (800257c <HAL_TIM_PWM_MspInit+0x134>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 80024f4:	4821      	ldr	r0, [pc, #132]	; (800257c <HAL_TIM_PWM_MspInit+0x134>)
 80024f6:	f008 ffb1 	bl	800b45c <HAL_DMA_Init>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_TIM_PWM_MspInit+0xbc>
      Error_Handler();
 8002500:	f7ff fe76 	bl	80021f0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a1d      	ldr	r2, [pc, #116]	; (800257c <HAL_TIM_PWM_MspInit+0x134>)
 8002508:	625a      	str	r2, [r3, #36]	; 0x24
 800250a:	4a1c      	ldr	r2, [pc, #112]	; (800257c <HAL_TIM_PWM_MspInit+0x134>)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_tim4_ch2.Instance = DMA1_Channel4;
 8002510:	4b1c      	ldr	r3, [pc, #112]	; (8002584 <HAL_TIM_PWM_MspInit+0x13c>)
 8002512:	4a1d      	ldr	r2, [pc, #116]	; (8002588 <HAL_TIM_PWM_MspInit+0x140>)
 8002514:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Request = DMA_REQUEST_6;
 8002516:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <HAL_TIM_PWM_MspInit+0x13c>)
 8002518:	2206      	movs	r2, #6
 800251a:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800251c:	4b19      	ldr	r3, [pc, #100]	; (8002584 <HAL_TIM_PWM_MspInit+0x13c>)
 800251e:	2200      	movs	r2, #0
 8002520:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002522:	4b18      	ldr	r3, [pc, #96]	; (8002584 <HAL_TIM_PWM_MspInit+0x13c>)
 8002524:	2200      	movs	r2, #0
 8002526:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002528:	4b16      	ldr	r3, [pc, #88]	; (8002584 <HAL_TIM_PWM_MspInit+0x13c>)
 800252a:	2280      	movs	r2, #128	; 0x80
 800252c:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800252e:	4b15      	ldr	r3, [pc, #84]	; (8002584 <HAL_TIM_PWM_MspInit+0x13c>)
 8002530:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002534:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002536:	4b13      	ldr	r3, [pc, #76]	; (8002584 <HAL_TIM_PWM_MspInit+0x13c>)
 8002538:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800253c:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Mode = DMA_CIRCULAR;
 800253e:	4b11      	ldr	r3, [pc, #68]	; (8002584 <HAL_TIM_PWM_MspInit+0x13c>)
 8002540:	2220      	movs	r2, #32
 8002542:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002544:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <HAL_TIM_PWM_MspInit+0x13c>)
 8002546:	2200      	movs	r2, #0
 8002548:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 800254a:	480e      	ldr	r0, [pc, #56]	; (8002584 <HAL_TIM_PWM_MspInit+0x13c>)
 800254c:	f008 ff86 	bl	800b45c <HAL_DMA_Init>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_TIM_PWM_MspInit+0x112>
      Error_Handler();
 8002556:	f7ff fe4b 	bl	80021f0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a09      	ldr	r2, [pc, #36]	; (8002584 <HAL_TIM_PWM_MspInit+0x13c>)
 800255e:	629a      	str	r2, [r3, #40]	; 0x28
 8002560:	4a08      	ldr	r2, [pc, #32]	; (8002584 <HAL_TIM_PWM_MspInit+0x13c>)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6293      	str	r3, [r2, #40]	; 0x28
}
 8002566:	bf00      	nop
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40021000 	.word	0x40021000
 8002574:	40000400 	.word	0x40000400
 8002578:	40000800 	.word	0x40000800
 800257c:	200058d4 	.word	0x200058d4
 8002580:	40020008 	.word	0x40020008
 8002584:	20004a3c 	.word	0x20004a3c
 8002588:	40020044 	.word	0x40020044

0800258c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a0d      	ldr	r2, [pc, #52]	; (80025d0 <HAL_TIM_Base_MspInit+0x44>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d113      	bne.n	80025c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800259e:	4b0d      	ldr	r3, [pc, #52]	; (80025d4 <HAL_TIM_Base_MspInit+0x48>)
 80025a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a2:	4a0c      	ldr	r2, [pc, #48]	; (80025d4 <HAL_TIM_Base_MspInit+0x48>)
 80025a4:	f043 0320 	orr.w	r3, r3, #32
 80025a8:	6593      	str	r3, [r2, #88]	; 0x58
 80025aa:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <HAL_TIM_Base_MspInit+0x48>)
 80025ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ae:	f003 0320 	and.w	r3, r3, #32
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80025b6:	2200      	movs	r2, #0
 80025b8:	2105      	movs	r1, #5
 80025ba:	2037      	movs	r0, #55	; 0x37
 80025bc:	f008 ff24 	bl	800b408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80025c0:	2037      	movs	r0, #55	; 0x37
 80025c2:	f008 ff3d 	bl	800b440 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40001400 	.word	0x40001400
 80025d4:	40021000 	.word	0x40021000

080025d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08c      	sub	sp, #48	; 0x30
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e0:	f107 031c 	add.w	r3, r7, #28
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	60da      	str	r2, [r3, #12]
 80025ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f8:	d13b      	bne.n	8002672 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fa:	4b42      	ldr	r3, [pc, #264]	; (8002704 <HAL_TIM_MspPostInit+0x12c>)
 80025fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025fe:	4a41      	ldr	r2, [pc, #260]	; (8002704 <HAL_TIM_MspPostInit+0x12c>)
 8002600:	f043 0302 	orr.w	r3, r3, #2
 8002604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002606:	4b3f      	ldr	r3, [pc, #252]	; (8002704 <HAL_TIM_MspPostInit+0x12c>)
 8002608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	61bb      	str	r3, [r7, #24]
 8002610:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002612:	4b3c      	ldr	r3, [pc, #240]	; (8002704 <HAL_TIM_MspPostInit+0x12c>)
 8002614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002616:	4a3b      	ldr	r2, [pc, #236]	; (8002704 <HAL_TIM_MspPostInit+0x12c>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800261e:	4b39      	ldr	r3, [pc, #228]	; (8002704 <HAL_TIM_MspPostInit+0x12c>)
 8002620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800262a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800262e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002630:	2302      	movs	r3, #2
 8002632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002634:	2300      	movs	r3, #0
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002638:	2300      	movs	r3, #0
 800263a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800263c:	2301      	movs	r3, #1
 800263e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002640:	f107 031c 	add.w	r3, r7, #28
 8002644:	4619      	mov	r1, r3
 8002646:	4830      	ldr	r0, [pc, #192]	; (8002708 <HAL_TIM_MspPostInit+0x130>)
 8002648:	f009 f900 	bl	800b84c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800264c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002652:	2302      	movs	r3, #2
 8002654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265a:	2300      	movs	r3, #0
 800265c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800265e:	2301      	movs	r3, #1
 8002660:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002662:	f107 031c 	add.w	r3, r7, #28
 8002666:	4619      	mov	r1, r3
 8002668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800266c:	f009 f8ee 	bl	800b84c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002670:	e043      	b.n	80026fa <HAL_TIM_MspPostInit+0x122>
  else if(htim->Instance==TIM3)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a25      	ldr	r2, [pc, #148]	; (800270c <HAL_TIM_MspPostInit+0x134>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d11d      	bne.n	80026b8 <HAL_TIM_MspPostInit+0xe0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800267c:	4b21      	ldr	r3, [pc, #132]	; (8002704 <HAL_TIM_MspPostInit+0x12c>)
 800267e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002680:	4a20      	ldr	r2, [pc, #128]	; (8002704 <HAL_TIM_MspPostInit+0x12c>)
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002688:	4b1e      	ldr	r3, [pc, #120]	; (8002704 <HAL_TIM_MspPostInit+0x12c>)
 800268a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002694:	2340      	movs	r3, #64	; 0x40
 8002696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002698:	2302      	movs	r3, #2
 800269a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a0:	2300      	movs	r3, #0
 80026a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026a4:	2302      	movs	r3, #2
 80026a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a8:	f107 031c 	add.w	r3, r7, #28
 80026ac:	4619      	mov	r1, r3
 80026ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026b2:	f009 f8cb 	bl	800b84c <HAL_GPIO_Init>
}
 80026b6:	e020      	b.n	80026fa <HAL_TIM_MspPostInit+0x122>
  else if(htim->Instance==TIM4)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a14      	ldr	r2, [pc, #80]	; (8002710 <HAL_TIM_MspPostInit+0x138>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d11b      	bne.n	80026fa <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c2:	4b10      	ldr	r3, [pc, #64]	; (8002704 <HAL_TIM_MspPostInit+0x12c>)
 80026c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c6:	4a0f      	ldr	r2, [pc, #60]	; (8002704 <HAL_TIM_MspPostInit+0x12c>)
 80026c8:	f043 0302 	orr.w	r3, r3, #2
 80026cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ce:	4b0d      	ldr	r3, [pc, #52]	; (8002704 <HAL_TIM_MspPostInit+0x12c>)
 80026d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026da:	23c0      	movs	r3, #192	; 0xc0
 80026dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026de:	2302      	movs	r3, #2
 80026e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e6:	2300      	movs	r3, #0
 80026e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80026ea:	2302      	movs	r3, #2
 80026ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ee:	f107 031c 	add.w	r3, r7, #28
 80026f2:	4619      	mov	r1, r3
 80026f4:	4804      	ldr	r0, [pc, #16]	; (8002708 <HAL_TIM_MspPostInit+0x130>)
 80026f6:	f009 f8a9 	bl	800b84c <HAL_GPIO_Init>
}
 80026fa:	bf00      	nop
 80026fc:	3730      	adds	r7, #48	; 0x30
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40021000 	.word	0x40021000
 8002708:	48000400 	.word	0x48000400
 800270c:	40000400 	.word	0x40000400
 8002710:	40000800 	.word	0x40000800

08002714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08a      	sub	sp, #40	; 0x28
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800271c:	f107 0314 	add.w	r3, r7, #20
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	605a      	str	r2, [r3, #4]
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	60da      	str	r2, [r3, #12]
 800272a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a17      	ldr	r2, [pc, #92]	; (8002790 <HAL_UART_MspInit+0x7c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d128      	bne.n	8002788 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002736:	4b17      	ldr	r3, [pc, #92]	; (8002794 <HAL_UART_MspInit+0x80>)
 8002738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273a:	4a16      	ldr	r2, [pc, #88]	; (8002794 <HAL_UART_MspInit+0x80>)
 800273c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002740:	6593      	str	r3, [r2, #88]	; 0x58
 8002742:	4b14      	ldr	r3, [pc, #80]	; (8002794 <HAL_UART_MspInit+0x80>)
 8002744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	613b      	str	r3, [r7, #16]
 800274c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800274e:	4b11      	ldr	r3, [pc, #68]	; (8002794 <HAL_UART_MspInit+0x80>)
 8002750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002752:	4a10      	ldr	r2, [pc, #64]	; (8002794 <HAL_UART_MspInit+0x80>)
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800275a:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <HAL_UART_MspInit+0x80>)
 800275c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002766:	230c      	movs	r3, #12
 8002768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276a:	2302      	movs	r3, #2
 800276c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002772:	2303      	movs	r3, #3
 8002774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002776:	2307      	movs	r3, #7
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800277a:	f107 0314 	add.w	r3, r7, #20
 800277e:	4619      	mov	r1, r3
 8002780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002784:	f009 f862 	bl	800b84c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002788:	bf00      	nop
 800278a:	3728      	adds	r7, #40	; 0x28
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40004400 	.word	0x40004400
 8002794:	40021000 	.word	0x40021000

08002798 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08c      	sub	sp, #48	; 0x30
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80027a8:	2200      	movs	r2, #0
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	2036      	movs	r0, #54	; 0x36
 80027ae:	f008 fe2b 	bl	800b408 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80027b2:	2036      	movs	r0, #54	; 0x36
 80027b4:	f008 fe44 	bl	800b440 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80027b8:	4b1e      	ldr	r3, [pc, #120]	; (8002834 <HAL_InitTick+0x9c>)
 80027ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027bc:	4a1d      	ldr	r2, [pc, #116]	; (8002834 <HAL_InitTick+0x9c>)
 80027be:	f043 0310 	orr.w	r3, r3, #16
 80027c2:	6593      	str	r3, [r2, #88]	; 0x58
 80027c4:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <HAL_InitTick+0x9c>)
 80027c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c8:	f003 0310 	and.w	r3, r3, #16
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80027d0:	f107 0210 	add.w	r2, r7, #16
 80027d4:	f107 0314 	add.w	r3, r7, #20
 80027d8:	4611      	mov	r1, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	f00c fdde 	bl	800f39c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80027e0:	f00c fdb0 	bl	800f344 <HAL_RCC_GetPCLK1Freq>
 80027e4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80027e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e8:	4a13      	ldr	r2, [pc, #76]	; (8002838 <HAL_InitTick+0xa0>)
 80027ea:	fba2 2303 	umull	r2, r3, r2, r3
 80027ee:	0c9b      	lsrs	r3, r3, #18
 80027f0:	3b01      	subs	r3, #1
 80027f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80027f4:	4b11      	ldr	r3, [pc, #68]	; (800283c <HAL_InitTick+0xa4>)
 80027f6:	4a12      	ldr	r2, [pc, #72]	; (8002840 <HAL_InitTick+0xa8>)
 80027f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80027fa:	4b10      	ldr	r3, [pc, #64]	; (800283c <HAL_InitTick+0xa4>)
 80027fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002800:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002802:	4a0e      	ldr	r2, [pc, #56]	; (800283c <HAL_InitTick+0xa4>)
 8002804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002806:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002808:	4b0c      	ldr	r3, [pc, #48]	; (800283c <HAL_InitTick+0xa4>)
 800280a:	2200      	movs	r2, #0
 800280c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800280e:	4b0b      	ldr	r3, [pc, #44]	; (800283c <HAL_InitTick+0xa4>)
 8002810:	2200      	movs	r2, #0
 8002812:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002814:	4809      	ldr	r0, [pc, #36]	; (800283c <HAL_InitTick+0xa4>)
 8002816:	f00d ffb9 	bl	801078c <HAL_TIM_Base_Init>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d104      	bne.n	800282a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002820:	4806      	ldr	r0, [pc, #24]	; (800283c <HAL_InitTick+0xa4>)
 8002822:	f00e f80b 	bl	801083c <HAL_TIM_Base_Start_IT>
 8002826:	4603      	mov	r3, r0
 8002828:	e000      	b.n	800282c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
}
 800282c:	4618      	mov	r0, r3
 800282e:	3730      	adds	r7, #48	; 0x30
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40021000 	.word	0x40021000
 8002838:	431bde83 	.word	0x431bde83
 800283c:	20005e20 	.word	0x20005e20
 8002840:	40001000 	.word	0x40001000

08002844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002848:	e7fe      	b.n	8002848 <NMI_Handler+0x4>
	...

0800284c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 8002850:	2201      	movs	r2, #1
 8002852:	2102      	movs	r1, #2
 8002854:	4801      	ldr	r0, [pc, #4]	; (800285c <HardFault_Handler+0x10>)
 8002856:	f009 faad 	bl	800bdb4 <HAL_GPIO_WritePin>
 800285a:	e7f9      	b.n	8002850 <HardFault_Handler+0x4>
 800285c:	48000800 	.word	0x48000800

08002860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002864:	e7fe      	b.n	8002864 <MemManage_Handler+0x4>

08002866 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002866:	b480      	push	{r7}
 8002868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800286a:	e7fe      	b.n	800286a <BusFault_Handler+0x4>

0800286c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002870:	e7fe      	b.n	8002870 <UsageFault_Handler+0x4>

08002872 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002872:	b480      	push	{r7}
 8002874:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002884:	4802      	ldr	r0, [pc, #8]	; (8002890 <DMA1_Channel1_IRQHandler+0x10>)
 8002886:	f008 ff01 	bl	800b68c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	200058d4 	.word	0x200058d4

08002894 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002898:	4802      	ldr	r0, [pc, #8]	; (80028a4 <DMA1_Channel2_IRQHandler+0x10>)
 800289a:	f008 fef7 	bl	800b68c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	2000599c 	.word	0x2000599c

080028a8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 80028ac:	4802      	ldr	r0, [pc, #8]	; (80028b8 <DMA1_Channel4_IRQHandler+0x10>)
 80028ae:	f008 feed 	bl	800b68c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80028b2:	bf00      	nop
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	20004a3c 	.word	0x20004a3c

080028bc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80028c0:	4802      	ldr	r0, [pc, #8]	; (80028cc <RTC_Alarm_IRQHandler+0x10>)
 80028c2:	f00d fe41 	bl	8010548 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	2000585c 	.word	0x2000585c

080028d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80028d4:	4802      	ldr	r0, [pc, #8]	; (80028e0 <TIM6_DAC_IRQHandler+0x10>)
 80028d6:	f00e f97f 	bl	8010bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20005e20 	.word	0x20005e20

080028e4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80028e8:	4802      	ldr	r0, [pc, #8]	; (80028f4 <TIM7_IRQHandler+0x10>)
 80028ea:	f00e f975 	bl	8010bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20005dcc 	.word	0x20005dcc

080028f8 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028fc:	4802      	ldr	r0, [pc, #8]	; (8002908 <DMA2_Channel3_IRQHandler+0x10>)
 80028fe:	f008 fec5 	bl	800b68c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20005814 	.word	0x20005814

0800290c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002910:	4802      	ldr	r0, [pc, #8]	; (800291c <OTG_FS_IRQHandler+0x10>)
 8002912:	f009 fcf3 	bl	800c2fc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	200086b4 	.word	0x200086b4

08002920 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002926:	2300      	movs	r3, #0
 8002928:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800292a:	4b19      	ldr	r3, [pc, #100]	; (8002990 <BSP_I2C1_Init+0x70>)
 800292c:	4a19      	ldr	r2, [pc, #100]	; (8002994 <BSP_I2C1_Init+0x74>)
 800292e:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8002930:	4b19      	ldr	r3, [pc, #100]	; (8002998 <BSP_I2C1_Init+0x78>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	1c5a      	adds	r2, r3, #1
 8002936:	4918      	ldr	r1, [pc, #96]	; (8002998 <BSP_I2C1_Init+0x78>)
 8002938:	600a      	str	r2, [r1, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d122      	bne.n	8002984 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800293e:	4814      	ldr	r0, [pc, #80]	; (8002990 <BSP_I2C1_Init+0x70>)
 8002940:	f00b fbe4 	bl	800e10c <HAL_I2C_GetState>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d11c      	bne.n	8002984 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800294a:	4811      	ldr	r0, [pc, #68]	; (8002990 <BSP_I2C1_Init+0x70>)
 800294c:	f000 f8fe 	bl	8002b4c <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d116      	bne.n	8002984 <BSP_I2C1_Init+0x64>
	  {
    	/* Init the I2C */
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8002956:	480e      	ldr	r0, [pc, #56]	; (8002990 <BSP_I2C1_Init+0x70>)
 8002958:	f000 f8b4 	bl	8002ac4 <MX_I2C1_Init>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <BSP_I2C1_Init+0x4a>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 8002962:	f06f 0307 	mvn.w	r3, #7
 8002966:	607b      	str	r3, [r7, #4]
 8002968:	e00c      	b.n	8002984 <BSP_I2C1_Init+0x64>
    	}
    	else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800296a:	2100      	movs	r1, #0
 800296c:	4808      	ldr	r0, [pc, #32]	; (8002990 <BSP_I2C1_Init+0x70>)
 800296e:	f00b fe6f 	bl	800e650 <HAL_I2CEx_ConfigAnalogFilter>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <BSP_I2C1_Init+0x60>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 8002978:	f06f 0307 	mvn.w	r3, #7
 800297c:	607b      	str	r3, [r7, #4]
 800297e:	e001      	b.n	8002984 <BSP_I2C1_Init+0x64>
    	}
        else
        {
      	  ret = BSP_ERROR_NONE;
 8002980:	2300      	movs	r3, #0
 8002982:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002984:	687b      	ldr	r3, [r7, #4]
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20004b58 	.word	0x20004b58
 8002994:	40005400 	.word	0x40005400
 8002998:	20000250 	.word	0x20000250

0800299c <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80029a2:	2300      	movs	r3, #0
 80029a4:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80029a6:	4b0f      	ldr	r3, [pc, #60]	; (80029e4 <BSP_I2C1_DeInit+0x48>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d014      	beq.n	80029d8 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80029ae:	4b0d      	ldr	r3, [pc, #52]	; (80029e4 <BSP_I2C1_DeInit+0x48>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	4a0b      	ldr	r2, [pc, #44]	; (80029e4 <BSP_I2C1_DeInit+0x48>)
 80029b6:	6013      	str	r3, [r2, #0]
 80029b8:	4b0a      	ldr	r3, [pc, #40]	; (80029e4 <BSP_I2C1_DeInit+0x48>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10b      	bne.n	80029d8 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80029c0:	4809      	ldr	r0, [pc, #36]	; (80029e8 <BSP_I2C1_DeInit+0x4c>)
 80029c2:	f000 f909 	bl	8002bd8 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80029c6:	4808      	ldr	r0, [pc, #32]	; (80029e8 <BSP_I2C1_DeInit+0x4c>)
 80029c8:	f00a ff44 	bl	800d854 <HAL_I2C_DeInit>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80029d2:	f06f 0307 	mvn.w	r3, #7
 80029d6:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80029d8:	687b      	ldr	r3, [r7, #4]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20000250 	.word	0x20000250
 80029e8:	20004b58 	.word	0x20004b58

080029ec <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08a      	sub	sp, #40	; 0x28
 80029f0:	af04      	add	r7, sp, #16
 80029f2:	60ba      	str	r2, [r7, #8]
 80029f4:	461a      	mov	r2, r3
 80029f6:	4603      	mov	r3, r0
 80029f8:	81fb      	strh	r3, [r7, #14]
 80029fa:	460b      	mov	r3, r1
 80029fc:	81bb      	strh	r3, [r7, #12]
 80029fe:	4613      	mov	r3, r2
 8002a00:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002a06:	89ba      	ldrh	r2, [r7, #12]
 8002a08:	89f9      	ldrh	r1, [r7, #14]
 8002a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a0e:	9302      	str	r3, [sp, #8]
 8002a10:	88fb      	ldrh	r3, [r7, #6]
 8002a12:	9301      	str	r3, [sp, #4]
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	2301      	movs	r3, #1
 8002a1a:	480c      	ldr	r0, [pc, #48]	; (8002a4c <BSP_I2C1_WriteReg+0x60>)
 8002a1c:	f00b f948 	bl	800dcb0 <HAL_I2C_Mem_Write>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00c      	beq.n	8002a40 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002a26:	4809      	ldr	r0, [pc, #36]	; (8002a4c <BSP_I2C1_WriteReg+0x60>)
 8002a28:	f00b fb7e 	bl	800e128 <HAL_I2C_GetError>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d103      	bne.n	8002a3a <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002a32:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002a36:	617b      	str	r3, [r7, #20]
 8002a38:	e002      	b.n	8002a40 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002a3a:	f06f 0303 	mvn.w	r3, #3
 8002a3e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002a40:	697b      	ldr	r3, [r7, #20]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20004b58 	.word	0x20004b58

08002a50 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08a      	sub	sp, #40	; 0x28
 8002a54:	af04      	add	r7, sp, #16
 8002a56:	60ba      	str	r2, [r7, #8]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	81fb      	strh	r3, [r7, #14]
 8002a5e:	460b      	mov	r3, r1
 8002a60:	81bb      	strh	r3, [r7, #12]
 8002a62:	4613      	mov	r3, r2
 8002a64:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002a6a:	89ba      	ldrh	r2, [r7, #12]
 8002a6c:	89f9      	ldrh	r1, [r7, #14]
 8002a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a72:	9302      	str	r3, [sp, #8]
 8002a74:	88fb      	ldrh	r3, [r7, #6]
 8002a76:	9301      	str	r3, [sp, #4]
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	480c      	ldr	r0, [pc, #48]	; (8002ab0 <BSP_I2C1_ReadReg+0x60>)
 8002a80:	f00b fa2a 	bl	800ded8 <HAL_I2C_Mem_Read>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00c      	beq.n	8002aa4 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002a8a:	4809      	ldr	r0, [pc, #36]	; (8002ab0 <BSP_I2C1_ReadReg+0x60>)
 8002a8c:	f00b fb4c 	bl	800e128 <HAL_I2C_GetError>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d103      	bne.n	8002a9e <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002a96:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002a9a:	617b      	str	r3, [r7, #20]
 8002a9c:	e002      	b.n	8002aa4 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002a9e:	f06f 0303 	mvn.w	r3, #3
 8002aa2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002aa4:	697b      	ldr	r3, [r7, #20]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20004b58 	.word	0x20004b58

08002ab4 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002ab8:	f007 f95c 	bl	8009d74 <HAL_GetTick>
 8002abc:	4603      	mov	r3, r0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C1;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a1c      	ldr	r2, [pc, #112]	; (8002b44 <MX_I2C1_Init+0x80>)
 8002ad4:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a1b      	ldr	r2, [pc, #108]	; (8002b48 <MX_I2C1_Init+0x84>)
 8002ada:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f00a fe15 	bl	800d736 <HAL_I2C_Init>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b16:	2100      	movs	r1, #0
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f00b fd99 	bl	800e650 <HAL_I2CEx_ConfigAnalogFilter>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8002b28:	2100      	movs	r1, #0
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f00b fddb 	bl	800e6e6 <HAL_I2CEx_ConfigDigitalFilter>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40005400 	.word	0x40005400
 8002b48:	00707cbb 	.word	0x00707cbb

08002b4c <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08a      	sub	sp, #40	; 0x28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b54:	4b1e      	ldr	r3, [pc, #120]	; (8002bd0 <I2C1_MspInit+0x84>)
 8002b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b58:	4a1d      	ldr	r2, [pc, #116]	; (8002bd0 <I2C1_MspInit+0x84>)
 8002b5a:	f043 0302 	orr.w	r3, r3, #2
 8002b5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b60:	4b1b      	ldr	r3, [pc, #108]	; (8002bd0 <I2C1_MspInit+0x84>)
 8002b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8002b6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b72:	2312      	movs	r3, #18
 8002b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b76:	2301      	movs	r3, #1
 8002b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8002b7e:	2304      	movs	r3, #4
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002b82:	f107 0314 	add.w	r3, r7, #20
 8002b86:	4619      	mov	r1, r3
 8002b88:	4812      	ldr	r0, [pc, #72]	; (8002bd4 <I2C1_MspInit+0x88>)
 8002b8a:	f008 fe5f 	bl	800b84c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8002b8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b94:	2312      	movs	r3, #18
 8002b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8002ba0:	2304      	movs	r3, #4
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002ba4:	f107 0314 	add.w	r3, r7, #20
 8002ba8:	4619      	mov	r1, r3
 8002baa:	480a      	ldr	r0, [pc, #40]	; (8002bd4 <I2C1_MspInit+0x88>)
 8002bac:	f008 fe4e 	bl	800b84c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bb0:	4b07      	ldr	r3, [pc, #28]	; (8002bd0 <I2C1_MspInit+0x84>)
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb4:	4a06      	ldr	r2, [pc, #24]	; (8002bd0 <I2C1_MspInit+0x84>)
 8002bb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bba:	6593      	str	r3, [r2, #88]	; 0x58
 8002bbc:	4b04      	ldr	r3, [pc, #16]	; (8002bd0 <I2C1_MspInit+0x84>)
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8002bc8:	bf00      	nop
 8002bca:	3728      	adds	r7, #40	; 0x28
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	48000400 	.word	0x48000400

08002bd8 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002be0:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <I2C1_MspDeInit+0x30>)
 8002be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be4:	4a08      	ldr	r2, [pc, #32]	; (8002c08 <I2C1_MspDeInit+0x30>)
 8002be6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002bea:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8002bec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bf0:	4806      	ldr	r0, [pc, #24]	; (8002c0c <I2C1_MspDeInit+0x34>)
 8002bf2:	f008 ffd3 	bl	800bb9c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8002bf6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bfa:	4804      	ldr	r0, [pc, #16]	; (8002c0c <I2C1_MspDeInit+0x34>)
 8002bfc:	f008 ffce 	bl	800bb9c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8002c00:	bf00      	nop
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	48000400 	.word	0x48000400

08002c10 <_read>:
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	e00a      	b.n	8002c38 <_read+0x28>
 8002c22:	f3af 8000 	nop.w
 8002c26:	4601      	mov	r1, r0
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	1c5a      	adds	r2, r3, #1
 8002c2c:	60ba      	str	r2, [r7, #8]
 8002c2e:	b2ca      	uxtb	r2, r1
 8002c30:	701a      	strb	r2, [r3, #0]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	3301      	adds	r3, #1
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	dbf0      	blt.n	8002c22 <_read+0x12>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <_write>:
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b086      	sub	sp, #24
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	e009      	b.n	8002c70 <_write+0x26>
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	60ba      	str	r2, [r7, #8]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f007 f839 	bl	8009cdc <__io_putchar>
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	dbf1      	blt.n	8002c5c <_write+0x12>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <_close>:
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8e:	4618      	mov	r0, r3
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <_fstat>:
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	6039      	str	r1, [r7, #0]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002caa:	605a      	str	r2, [r3, #4]
 8002cac:	2300      	movs	r3, #0
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <_isatty>:
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <_lseek>:
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
 8002cdc:	2300      	movs	r3, #0
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
	...

08002cec <_sbrk>:
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	4a14      	ldr	r2, [pc, #80]	; (8002d48 <_sbrk+0x5c>)
 8002cf6:	4b15      	ldr	r3, [pc, #84]	; (8002d4c <_sbrk+0x60>)
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	617b      	str	r3, [r7, #20]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	613b      	str	r3, [r7, #16]
 8002d00:	4b13      	ldr	r3, [pc, #76]	; (8002d50 <_sbrk+0x64>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d102      	bne.n	8002d0e <_sbrk+0x22>
 8002d08:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <_sbrk+0x64>)
 8002d0a:	4a12      	ldr	r2, [pc, #72]	; (8002d54 <_sbrk+0x68>)
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	4b10      	ldr	r3, [pc, #64]	; (8002d50 <_sbrk+0x64>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4413      	add	r3, r2
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d207      	bcs.n	8002d2c <_sbrk+0x40>
 8002d1c:	f019 fede 	bl	801cadc <__errno>
 8002d20:	4602      	mov	r2, r0
 8002d22:	230c      	movs	r3, #12
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	f04f 33ff 	mov.w	r3, #4294967295
 8002d2a:	e009      	b.n	8002d40 <_sbrk+0x54>
 8002d2c:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <_sbrk+0x64>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	4b07      	ldr	r3, [pc, #28]	; (8002d50 <_sbrk+0x64>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4413      	add	r3, r2
 8002d3a:	4a05      	ldr	r2, [pc, #20]	; (8002d50 <_sbrk+0x64>)
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	20018000 	.word	0x20018000
 8002d4c:	00000400 	.word	0x00000400
 8002d50:	20000254 	.word	0x20000254
 8002d54:	20008980 	.word	0x20008980

08002d58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d5c:	4b17      	ldr	r3, [pc, #92]	; (8002dbc <SystemInit+0x64>)
 8002d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d62:	4a16      	ldr	r2, [pc, #88]	; (8002dbc <SystemInit+0x64>)
 8002d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002d6c:	4b14      	ldr	r3, [pc, #80]	; (8002dc0 <SystemInit+0x68>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a13      	ldr	r2, [pc, #76]	; (8002dc0 <SystemInit+0x68>)
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002d78:	4b11      	ldr	r3, [pc, #68]	; (8002dc0 <SystemInit+0x68>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002d7e:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <SystemInit+0x68>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a0f      	ldr	r2, [pc, #60]	; (8002dc0 <SystemInit+0x68>)
 8002d84:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002d88:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002d8c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002d8e:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <SystemInit+0x68>)
 8002d90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d94:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d96:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <SystemInit+0x68>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a09      	ldr	r2, [pc, #36]	; (8002dc0 <SystemInit+0x68>)
 8002d9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002da0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002da2:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <SystemInit+0x68>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002da8:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <SystemInit+0x64>)
 8002daa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002dae:	609a      	str	r2, [r3, #8]
#endif
}
 8002db0:	bf00      	nop
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	e000ed00 	.word	0xe000ed00
 8002dc0:	40021000 	.word	0x40021000

08002dc4 <Reset_Handler>:
 8002dc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dfc <LoopForever+0x2>
 8002dc8:	f7ff ffc6 	bl	8002d58 <SystemInit>
 8002dcc:	2100      	movs	r1, #0
 8002dce:	e003      	b.n	8002dd8 <LoopCopyDataInit>

08002dd0 <CopyDataInit>:
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <LoopForever+0x6>)
 8002dd2:	585b      	ldr	r3, [r3, r1]
 8002dd4:	5043      	str	r3, [r0, r1]
 8002dd6:	3104      	adds	r1, #4

08002dd8 <LoopCopyDataInit>:
 8002dd8:	480a      	ldr	r0, [pc, #40]	; (8002e04 <LoopForever+0xa>)
 8002dda:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <LoopForever+0xe>)
 8002ddc:	1842      	adds	r2, r0, r1
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d3f6      	bcc.n	8002dd0 <CopyDataInit>
 8002de2:	4a0a      	ldr	r2, [pc, #40]	; (8002e0c <LoopForever+0x12>)
 8002de4:	e002      	b.n	8002dec <LoopFillZerobss>

08002de6 <FillZerobss>:
 8002de6:	2300      	movs	r3, #0
 8002de8:	f842 3b04 	str.w	r3, [r2], #4

08002dec <LoopFillZerobss>:
 8002dec:	4b08      	ldr	r3, [pc, #32]	; (8002e10 <LoopForever+0x16>)
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d3f9      	bcc.n	8002de6 <FillZerobss>
 8002df2:	f019 fe79 	bl	801cae8 <__libc_init_array>
 8002df6:	f7fe f979 	bl	80010ec <main>

08002dfa <LoopForever>:
 8002dfa:	e7fe      	b.n	8002dfa <LoopForever>
 8002dfc:	20018000 	.word	0x20018000
 8002e00:	0801fe18 	.word	0x0801fe18
 8002e04:	20000000 	.word	0x20000000
 8002e08:	20000218 	.word	0x20000218
 8002e0c:	20000218 	.word	0x20000218
 8002e10:	2000897c 	.word	0x2000897c

08002e14 <ADC1_2_IRQHandler>:
 8002e14:	e7fe      	b.n	8002e14 <ADC1_2_IRQHandler>
	...

08002e18 <HTS221_RegisterBusIO>:
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d103      	bne.n	8002e30 <HTS221_RegisterBusIO+0x18>
 8002e28:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	e030      	b.n	8002e92 <HTS221_RegisterBusIO+0x7a>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	605a      	str	r2, [r3, #4]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	609a      	str	r2, [r3, #8]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	7b1a      	ldrb	r2, [r3, #12]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	731a      	strb	r2, [r3, #12]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	691a      	ldr	r2, [r3, #16]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	611a      	str	r2, [r3, #16]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	695a      	ldr	r2, [r3, #20]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	615a      	str	r2, [r3, #20]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	699a      	ldr	r2, [r3, #24]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	619a      	str	r2, [r3, #24]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a0c      	ldr	r2, [pc, #48]	; (8002e9c <HTS221_RegisterBusIO+0x84>)
 8002e6c:	621a      	str	r2, [r3, #32]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a0b      	ldr	r2, [pc, #44]	; (8002ea0 <HTS221_RegisterBusIO+0x88>)
 8002e72:	61da      	str	r2, [r3, #28]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	625a      	str	r2, [r3, #36]	; 0x24
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d004      	beq.n	8002e8c <HTS221_RegisterBusIO+0x74>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4798      	blx	r3
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	e002      	b.n	8002e92 <HTS221_RegisterBusIO+0x7a>
 8002e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	080034cf 	.word	0x080034cf
 8002ea0:	08003531 	.word	0x08003531

08002ea4 <HTS221_Init>:
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d108      	bne.n	8002ec8 <HTS221_Init+0x24>
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 faa4 	bl	8003404 <HTS221_Initialize>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <HTS221_Init+0x24>
 8002ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec6:	e004      	b.n	8002ed2 <HTS221_Init+0x2e>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HTS221_DeInit>:
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d111      	bne.n	8002f10 <HTS221_DeInit+0x36>
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f878 	bl	8002fe2 <HTS221_HUM_Disable>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d002      	beq.n	8002efe <HTS221_DeInit+0x24>
 8002ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8002efc:	e00d      	b.n	8002f1a <HTS221_DeInit+0x40>
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f95f 	bl	80031c2 <HTS221_TEMP_Disable>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d002      	beq.n	8002f10 <HTS221_DeInit+0x36>
 8002f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f0e:	e004      	b.n	8002f1a <HTS221_DeInit+0x40>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002f18:	2300      	movs	r3, #0
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HTS221_ReadID>:
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b082      	sub	sp, #8
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
 8002f2a:	6039      	str	r1, [r7, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	331c      	adds	r3, #28
 8002f30:	6839      	ldr	r1, [r7, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 fc28 	bl	8003788 <hts221_device_id_get>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <HTS221_ReadID+0x22>
 8002f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f42:	e000      	b.n	8002f46 <HTS221_ReadID+0x24>
 8002f44:	2300      	movs	r3, #0
 8002f46:	4618      	mov	r0, r3
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <HTS221_GetCapabilities>:
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	709a      	strb	r2, [r3, #2]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	2200      	movs	r2, #0
 8002f64:	705a      	strb	r2, [r3, #1]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	701a      	strb	r2, [r3, #0]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	70da      	strb	r2, [r3, #3]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	4a07      	ldr	r2, [pc, #28]	; (8002f94 <HTS221_GetCapabilities+0x44>)
 8002f76:	605a      	str	r2, [r3, #4]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	4a06      	ldr	r2, [pc, #24]	; (8002f94 <HTS221_GetCapabilities+0x44>)
 8002f7c:	609a      	str	r2, [r3, #8]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	2300      	movs	r3, #0
 8002f88:	4618      	mov	r0, r3
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	41480000 	.word	0x41480000

08002f98 <HTS221_HUM_Enable>:
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d101      	bne.n	8002fae <HTS221_HUM_Enable+0x16>
 8002faa:	2300      	movs	r3, #0
 8002fac:	e015      	b.n	8002fda <HTS221_HUM_Enable+0x42>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10b      	bne.n	8002fd0 <HTS221_HUM_Enable+0x38>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	331c      	adds	r3, #28
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 fbf3 	bl	80037aa <hts221_power_on_set>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d002      	beq.n	8002fd0 <HTS221_HUM_Enable+0x38>
 8002fca:	f04f 33ff 	mov.w	r3, #4294967295
 8002fce:	e004      	b.n	8002fda <HTS221_HUM_Enable+0x42>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8002fd8:	2300      	movs	r3, #0
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HTS221_HUM_Disable>:
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d101      	bne.n	8002ff8 <HTS221_HUM_Disable+0x16>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	e015      	b.n	8003024 <HTS221_HUM_Disable+0x42>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10b      	bne.n	800301a <HTS221_HUM_Disable+0x38>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	331c      	adds	r3, #28
 8003006:	2100      	movs	r1, #0
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fbce 	bl	80037aa <hts221_power_on_set>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <HTS221_HUM_Disable+0x38>
 8003014:	f04f 33ff 	mov.w	r3, #4294967295
 8003018:	e004      	b.n	8003024 <HTS221_HUM_Disable+0x42>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8003022:	2300      	movs	r3, #0
 8003024:	4618      	mov	r0, r3
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HTS221_HUM_GetOutputDataRate>:
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
 8003036:	6839      	ldr	r1, [r7, #0]
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f96f 	bl	800331c <HTS221_GetOutputDataRate>
 800303e:	4603      	mov	r3, r0
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HTS221_HUM_SetOutputDataRate>:
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	ed87 0a00 	vstr	s0, [r7]
 8003054:	ed97 0a00 	vldr	s0, [r7]
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f9a3 	bl	80033a4 <HTS221_SetOutputDataRate>
 800305e:	4603      	mov	r3, r0
 8003060:	4618      	mov	r0, r3
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <HTS221_HUM_GetHumidity>:
 8003068:	b580      	push	{r7, lr}
 800306a:	b088      	sub	sp, #32
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	331c      	adds	r3, #28
 8003076:	f107 020c 	add.w	r2, r7, #12
 800307a:	4611      	mov	r1, r2
 800307c:	4618      	mov	r0, r3
 800307e:	f000 fc58 	bl	8003932 <hts221_hum_adc_point_0_get>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <HTS221_HUM_GetHumidity+0x26>
 8003088:	f04f 33ff 	mov.w	r3, #4294967295
 800308c:	e06b      	b.n	8003166 <HTS221_HUM_GetHumidity+0xfe>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f103 021c 	add.w	r2, r3, #28
 8003094:	f107 030c 	add.w	r3, r7, #12
 8003098:	3304      	adds	r3, #4
 800309a:	4619      	mov	r1, r3
 800309c:	4610      	mov	r0, r2
 800309e:	f000 fbaa 	bl	80037f6 <hts221_hum_rh_point_0_get>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d002      	beq.n	80030ae <HTS221_HUM_GetHumidity+0x46>
 80030a8:	f04f 33ff 	mov.w	r3, #4294967295
 80030ac:	e05b      	b.n	8003166 <HTS221_HUM_GetHumidity+0xfe>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f103 021c 	add.w	r2, r3, #28
 80030b4:	f107 030c 	add.w	r3, r7, #12
 80030b8:	3308      	adds	r3, #8
 80030ba:	4619      	mov	r1, r3
 80030bc:	4610      	mov	r0, r2
 80030be:	f000 fc5c 	bl	800397a <hts221_hum_adc_point_1_get>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <HTS221_HUM_GetHumidity+0x66>
 80030c8:	f04f 33ff 	mov.w	r3, #4294967295
 80030cc:	e04b      	b.n	8003166 <HTS221_HUM_GetHumidity+0xfe>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f103 021c 	add.w	r2, r3, #28
 80030d4:	f107 030c 	add.w	r3, r7, #12
 80030d8:	330c      	adds	r3, #12
 80030da:	4619      	mov	r1, r3
 80030dc:	4610      	mov	r0, r2
 80030de:	f000 fba8 	bl	8003832 <hts221_hum_rh_point_1_get>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d002      	beq.n	80030ee <HTS221_HUM_GetHumidity+0x86>
 80030e8:	f04f 33ff 	mov.w	r3, #4294967295
 80030ec:	e03b      	b.n	8003166 <HTS221_HUM_GetHumidity+0xfe>
 80030ee:	2300      	movs	r3, #0
 80030f0:	83bb      	strh	r3, [r7, #28]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	331c      	adds	r3, #28
 80030f6:	f107 021c 	add.w	r2, r7, #28
 80030fa:	4611      	mov	r1, r2
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 fafd 	bl	80036fc <hts221_humidity_raw_get>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d002      	beq.n	800310e <HTS221_HUM_GetHumidity+0xa6>
 8003108:	f04f 33ff 	mov.w	r3, #4294967295
 800310c:	e02b      	b.n	8003166 <HTS221_HUM_GetHumidity+0xfe>
 800310e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003112:	ee07 3a90 	vmov	s15, r3
 8003116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800311a:	f107 030c 	add.w	r3, r7, #12
 800311e:	eeb0 0a67 	vmov.f32	s0, s15
 8003122:	4618      	mov	r0, r3
 8003124:	f000 f99a 	bl	800345c <Linear_Interpolation>
 8003128:	eef0 7a40 	vmov.f32	s15, s0
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	edc3 7a00 	vstr	s15, [r3]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	edd3 7a00 	vldr	s15, [r3]
 8003138:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800313c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003140:	d503      	bpl.n	800314a <HTS221_HUM_GetHumidity+0xe2>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	f04f 0200 	mov.w	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	edd3 7a00 	vldr	s15, [r3]
 8003150:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003170 <HTS221_HUM_GetHumidity+0x108>
 8003154:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800315c:	dd02      	ble.n	8003164 <HTS221_HUM_GetHumidity+0xfc>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	4a04      	ldr	r2, [pc, #16]	; (8003174 <HTS221_HUM_GetHumidity+0x10c>)
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	2300      	movs	r3, #0
 8003166:	4618      	mov	r0, r3
 8003168:	3720      	adds	r7, #32
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	42c80000 	.word	0x42c80000
 8003174:	42c80000 	.word	0x42c80000

08003178 <HTS221_TEMP_Enable>:
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <HTS221_TEMP_Enable+0x16>
 800318a:	2300      	movs	r3, #0
 800318c:	e015      	b.n	80031ba <HTS221_TEMP_Enable+0x42>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10b      	bne.n	80031b0 <HTS221_TEMP_Enable+0x38>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	331c      	adds	r3, #28
 800319c:	2101      	movs	r1, #1
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 fb03 	bl	80037aa <hts221_power_on_set>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <HTS221_TEMP_Enable+0x38>
 80031aa:	f04f 33ff 	mov.w	r3, #4294967295
 80031ae:	e004      	b.n	80031ba <HTS221_TEMP_Enable+0x42>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 80031b8:	2300      	movs	r3, #0
 80031ba:	4618      	mov	r0, r3
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HTS221_TEMP_Disable>:
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HTS221_TEMP_Disable+0x16>
 80031d4:	2300      	movs	r3, #0
 80031d6:	e015      	b.n	8003204 <HTS221_TEMP_Disable+0x42>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10b      	bne.n	80031fa <HTS221_TEMP_Disable+0x38>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	331c      	adds	r3, #28
 80031e6:	2100      	movs	r1, #0
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 fade 	bl	80037aa <hts221_power_on_set>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <HTS221_TEMP_Disable+0x38>
 80031f4:	f04f 33ff 	mov.w	r3, #4294967295
 80031f8:	e004      	b.n	8003204 <HTS221_TEMP_Disable+0x42>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8003202:	2300      	movs	r3, #0
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HTS221_TEMP_GetOutputDataRate>:
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
 8003216:	6839      	ldr	r1, [r7, #0]
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 f87f 	bl	800331c <HTS221_GetOutputDataRate>
 800321e:	4603      	mov	r3, r0
 8003220:	4618      	mov	r0, r3
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HTS221_TEMP_SetOutputDataRate>:
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	ed87 0a00 	vstr	s0, [r7]
 8003234:	ed97 0a00 	vldr	s0, [r7]
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f8b3 	bl	80033a4 <HTS221_SetOutputDataRate>
 800323e:	4603      	mov	r3, r0
 8003240:	4618      	mov	r0, r3
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HTS221_TEMP_GetTemperature>:
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	331c      	adds	r3, #28
 8003256:	f107 020c 	add.w	r2, r7, #12
 800325a:	4611      	mov	r1, r2
 800325c:	4618      	mov	r0, r3
 800325e:	f000 fbb0 	bl	80039c2 <hts221_temp_adc_point_0_get>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d002      	beq.n	800326e <HTS221_TEMP_GetTemperature+0x26>
 8003268:	f04f 33ff 	mov.w	r3, #4294967295
 800326c:	e052      	b.n	8003314 <HTS221_TEMP_GetTemperature+0xcc>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f103 021c 	add.w	r2, r3, #28
 8003274:	f107 030c 	add.w	r3, r7, #12
 8003278:	3304      	adds	r3, #4
 800327a:	4619      	mov	r1, r3
 800327c:	4610      	mov	r0, r2
 800327e:	f000 faf6 	bl	800386e <hts221_temp_deg_point_0_get>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d002      	beq.n	800328e <HTS221_TEMP_GetTemperature+0x46>
 8003288:	f04f 33ff 	mov.w	r3, #4294967295
 800328c:	e042      	b.n	8003314 <HTS221_TEMP_GetTemperature+0xcc>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f103 021c 	add.w	r2, r3, #28
 8003294:	f107 030c 	add.w	r3, r7, #12
 8003298:	3308      	adds	r3, #8
 800329a:	4619      	mov	r1, r3
 800329c:	4610      	mov	r0, r2
 800329e:	f000 fbb4 	bl	8003a0a <hts221_temp_adc_point_1_get>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d002      	beq.n	80032ae <HTS221_TEMP_GetTemperature+0x66>
 80032a8:	f04f 33ff 	mov.w	r3, #4294967295
 80032ac:	e032      	b.n	8003314 <HTS221_TEMP_GetTemperature+0xcc>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f103 021c 	add.w	r2, r3, #28
 80032b4:	f107 030c 	add.w	r3, r7, #12
 80032b8:	330c      	adds	r3, #12
 80032ba:	4619      	mov	r1, r3
 80032bc:	4610      	mov	r0, r2
 80032be:	f000 fb07 	bl	80038d0 <hts221_temp_deg_point_1_get>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d002      	beq.n	80032ce <HTS221_TEMP_GetTemperature+0x86>
 80032c8:	f04f 33ff 	mov.w	r3, #4294967295
 80032cc:	e022      	b.n	8003314 <HTS221_TEMP_GetTemperature+0xcc>
 80032ce:	2300      	movs	r3, #0
 80032d0:	83bb      	strh	r3, [r7, #28]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	331c      	adds	r3, #28
 80032d6:	f107 021c 	add.w	r2, r7, #28
 80032da:	4611      	mov	r1, r2
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 fa30 	bl	8003742 <hts221_temperature_raw_get>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d002      	beq.n	80032ee <HTS221_TEMP_GetTemperature+0xa6>
 80032e8:	f04f 33ff 	mov.w	r3, #4294967295
 80032ec:	e012      	b.n	8003314 <HTS221_TEMP_GetTemperature+0xcc>
 80032ee:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80032f2:	ee07 3a90 	vmov	s15, r3
 80032f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032fa:	f107 030c 	add.w	r3, r7, #12
 80032fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003302:	4618      	mov	r0, r3
 8003304:	f000 f8aa 	bl	800345c <Linear_Interpolation>
 8003308:	eef0 7a40 	vmov.f32	s15, s0
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	edc3 7a00 	vstr	s15, [r3]
 8003312:	2300      	movs	r3, #0
 8003314:	4618      	mov	r0, r3
 8003316:	3720      	adds	r7, #32
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HTS221_GetOutputDataRate>:
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	331c      	adds	r3, #28
 800332e:	f107 020b 	add.w	r2, r7, #11
 8003332:	4611      	mov	r1, r2
 8003334:	4618      	mov	r0, r3
 8003336:	f000 f983 	bl	8003640 <hts221_data_rate_get>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <HTS221_GetOutputDataRate+0x2a>
 8003340:	f04f 33ff 	mov.w	r3, #4294967295
 8003344:	e025      	b.n	8003392 <HTS221_GetOutputDataRate+0x76>
 8003346:	7afb      	ldrb	r3, [r7, #11]
 8003348:	2b03      	cmp	r3, #3
 800334a:	d81d      	bhi.n	8003388 <HTS221_GetOutputDataRate+0x6c>
 800334c:	a201      	add	r2, pc, #4	; (adr r2, 8003354 <HTS221_GetOutputDataRate+0x38>)
 800334e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003352:	bf00      	nop
 8003354:	08003365 	.word	0x08003365
 8003358:	0800336f 	.word	0x0800336f
 800335c:	08003379 	.word	0x08003379
 8003360:	08003381 	.word	0x08003381
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	e010      	b.n	8003390 <HTS221_GetOutputDataRate+0x74>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	e00b      	b.n	8003390 <HTS221_GetOutputDataRate+0x74>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	4a08      	ldr	r2, [pc, #32]	; (800339c <HTS221_GetOutputDataRate+0x80>)
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	e007      	b.n	8003390 <HTS221_GetOutputDataRate+0x74>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	4a07      	ldr	r2, [pc, #28]	; (80033a0 <HTS221_GetOutputDataRate+0x84>)
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	e003      	b.n	8003390 <HTS221_GetOutputDataRate+0x74>
 8003388:	f04f 33ff 	mov.w	r3, #4294967295
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	bf00      	nop
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40e00000 	.word	0x40e00000
 80033a0:	41480000 	.word	0x41480000

080033a4 <HTS221_SetOutputDataRate>:
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	ed87 0a00 	vstr	s0, [r7]
 80033b0:	edd7 7a00 	vldr	s15, [r7]
 80033b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80033b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c0:	d801      	bhi.n	80033c6 <HTS221_SetOutputDataRate+0x22>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e00b      	b.n	80033de <HTS221_SetOutputDataRate+0x3a>
 80033c6:	edd7 7a00 	vldr	s15, [r7]
 80033ca:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80033ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d6:	d801      	bhi.n	80033dc <HTS221_SetOutputDataRate+0x38>
 80033d8:	2302      	movs	r3, #2
 80033da:	e000      	b.n	80033de <HTS221_SetOutputDataRate+0x3a>
 80033dc:	2303      	movs	r3, #3
 80033de:	73fb      	strb	r3, [r7, #15]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	331c      	adds	r3, #28
 80033e4:	7bfa      	ldrb	r2, [r7, #15]
 80033e6:	4611      	mov	r1, r2
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 f902 	bl	80035f2 <hts221_data_rate_set>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <HTS221_SetOutputDataRate+0x56>
 80033f4:	f04f 33ff 	mov.w	r3, #4294967295
 80033f8:	e000      	b.n	80033fc <HTS221_SetOutputDataRate+0x58>
 80033fa:	2300      	movs	r3, #0
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HTS221_Initialize>:
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	331c      	adds	r3, #28
 8003410:	2100      	movs	r1, #0
 8003412:	4618      	mov	r0, r3
 8003414:	f000 f9c9 	bl	80037aa <hts221_power_on_set>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d002      	beq.n	8003424 <HTS221_Initialize+0x20>
 800341e:	f04f 33ff 	mov.w	r3, #4294967295
 8003422:	e017      	b.n	8003454 <HTS221_Initialize+0x50>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	331c      	adds	r3, #28
 8003428:	2101      	movs	r1, #1
 800342a:	4618      	mov	r0, r3
 800342c:	f000 f940 	bl	80036b0 <hts221_block_data_update_set>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d002      	beq.n	800343c <HTS221_Initialize+0x38>
 8003436:	f04f 33ff 	mov.w	r3, #4294967295
 800343a:	e00b      	b.n	8003454 <HTS221_Initialize+0x50>
 800343c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7ff ffaf 	bl	80033a4 <HTS221_SetOutputDataRate>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <HTS221_Initialize+0x4e>
 800344c:	f04f 33ff 	mov.w	r3, #4294967295
 8003450:	e000      	b.n	8003454 <HTS221_Initialize+0x50>
 8003452:	2300      	movs	r3, #0
 8003454:	4618      	mov	r0, r3
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <Linear_Interpolation>:
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	ed87 0a00 	vstr	s0, [r7]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	ed93 7a03 	vldr	s14, [r3, #12]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	edd3 7a01 	vldr	s15, [r3, #4]
 8003474:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003478:	edd7 7a00 	vldr	s15, [r7]
 800347c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	edd3 6a02 	vldr	s13, [r3, #8]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	edd3 7a01 	vldr	s15, [r3, #4]
 800348c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	ed93 6a00 	vldr	s12, [r3]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	edd3 7a03 	vldr	s15, [r3, #12]
 800349c:	ee66 7a27 	vmul.f32	s15, s12, s15
 80034a0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80034a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	edd3 6a02 	vldr	s13, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	edd3 7a00 	vldr	s15, [r3]
 80034b4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80034b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80034bc:	eef0 7a66 	vmov.f32	s15, s13
 80034c0:	eeb0 0a67 	vmov.f32	s0, s15
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <ReadRegWrap>:
 80034ce:	b590      	push	{r4, r7, lr}
 80034d0:	b087      	sub	sp, #28
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	60f8      	str	r0, [r7, #12]
 80034d6:	607a      	str	r2, [r7, #4]
 80034d8:	461a      	mov	r2, r3
 80034da:	460b      	mov	r3, r1
 80034dc:	72fb      	strb	r3, [r7, #11]
 80034de:	4613      	mov	r3, r2
 80034e0:	813b      	strh	r3, [r7, #8]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	617b      	str	r3, [r7, #20]
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10e      	bne.n	800350c <ReadRegWrap+0x3e>
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	695c      	ldr	r4, [r3, #20]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	7b1b      	ldrb	r3, [r3, #12]
 80034f6:	b298      	uxth	r0, r3
 80034f8:	7afb      	ldrb	r3, [r7, #11]
 80034fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	b299      	uxth	r1, r3
 8003502:	893b      	ldrh	r3, [r7, #8]
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	47a0      	blx	r4
 8003508:	4603      	mov	r3, r0
 800350a:	e00d      	b.n	8003528 <ReadRegWrap+0x5a>
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	695c      	ldr	r4, [r3, #20]
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	7b1b      	ldrb	r3, [r3, #12]
 8003514:	b298      	uxth	r0, r3
 8003516:	7afb      	ldrb	r3, [r7, #11]
 8003518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800351c:	b2db      	uxtb	r3, r3
 800351e:	b299      	uxth	r1, r3
 8003520:	893b      	ldrh	r3, [r7, #8]
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	47a0      	blx	r4
 8003526:	4603      	mov	r3, r0
 8003528:	4618      	mov	r0, r3
 800352a:	371c      	adds	r7, #28
 800352c:	46bd      	mov	sp, r7
 800352e:	bd90      	pop	{r4, r7, pc}

08003530 <WriteRegWrap>:
 8003530:	b590      	push	{r4, r7, lr}
 8003532:	b087      	sub	sp, #28
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	607a      	str	r2, [r7, #4]
 800353a:	461a      	mov	r2, r3
 800353c:	460b      	mov	r3, r1
 800353e:	72fb      	strb	r3, [r7, #11]
 8003540:	4613      	mov	r3, r2
 8003542:	813b      	strh	r3, [r7, #8]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	617b      	str	r3, [r7, #20]
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10e      	bne.n	800356e <WriteRegWrap+0x3e>
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	691c      	ldr	r4, [r3, #16]
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	7b1b      	ldrb	r3, [r3, #12]
 8003558:	b298      	uxth	r0, r3
 800355a:	7afb      	ldrb	r3, [r7, #11]
 800355c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003560:	b2db      	uxtb	r3, r3
 8003562:	b299      	uxth	r1, r3
 8003564:	893b      	ldrh	r3, [r7, #8]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	47a0      	blx	r4
 800356a:	4603      	mov	r3, r0
 800356c:	e00d      	b.n	800358a <WriteRegWrap+0x5a>
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	691c      	ldr	r4, [r3, #16]
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	7b1b      	ldrb	r3, [r3, #12]
 8003576:	b298      	uxth	r0, r3
 8003578:	7afb      	ldrb	r3, [r7, #11]
 800357a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800357e:	b2db      	uxtb	r3, r3
 8003580:	b299      	uxth	r1, r3
 8003582:	893b      	ldrh	r3, [r7, #8]
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	47a0      	blx	r4
 8003588:	4603      	mov	r3, r0
 800358a:	4618      	mov	r0, r3
 800358c:	371c      	adds	r7, #28
 800358e:	46bd      	mov	sp, r7
 8003590:	bd90      	pop	{r4, r7, pc}

08003592 <hts221_read_reg>:
 8003592:	b590      	push	{r4, r7, lr}
 8003594:	b087      	sub	sp, #28
 8003596:	af00      	add	r7, sp, #0
 8003598:	60f8      	str	r0, [r7, #12]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	461a      	mov	r2, r3
 800359e:	460b      	mov	r3, r1
 80035a0:	72fb      	strb	r3, [r7, #11]
 80035a2:	4613      	mov	r3, r2
 80035a4:	813b      	strh	r3, [r7, #8]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	685c      	ldr	r4, [r3, #4]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6898      	ldr	r0, [r3, #8]
 80035ae:	893b      	ldrh	r3, [r7, #8]
 80035b0:	7af9      	ldrb	r1, [r7, #11]
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	47a0      	blx	r4
 80035b6:	6178      	str	r0, [r7, #20]
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	4618      	mov	r0, r3
 80035bc:	371c      	adds	r7, #28
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd90      	pop	{r4, r7, pc}

080035c2 <hts221_write_reg>:
 80035c2:	b590      	push	{r4, r7, lr}
 80035c4:	b087      	sub	sp, #28
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	60f8      	str	r0, [r7, #12]
 80035ca:	607a      	str	r2, [r7, #4]
 80035cc:	461a      	mov	r2, r3
 80035ce:	460b      	mov	r3, r1
 80035d0:	72fb      	strb	r3, [r7, #11]
 80035d2:	4613      	mov	r3, r2
 80035d4:	813b      	strh	r3, [r7, #8]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681c      	ldr	r4, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6898      	ldr	r0, [r3, #8]
 80035de:	893b      	ldrh	r3, [r7, #8]
 80035e0:	7af9      	ldrb	r1, [r7, #11]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	47a0      	blx	r4
 80035e6:	6178      	str	r0, [r7, #20]
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	4618      	mov	r0, r3
 80035ec:	371c      	adds	r7, #28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd90      	pop	{r4, r7, pc}

080035f2 <hts221_data_rate_set>:
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	460b      	mov	r3, r1
 80035fc:	70fb      	strb	r3, [r7, #3]
 80035fe:	f107 0208 	add.w	r2, r7, #8
 8003602:	2301      	movs	r3, #1
 8003604:	2120      	movs	r1, #32
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7ff ffc3 	bl	8003592 <hts221_read_reg>
 800360c:	60f8      	str	r0, [r7, #12]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d10f      	bne.n	8003634 <hts221_data_rate_set+0x42>
 8003614:	78fb      	ldrb	r3, [r7, #3]
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	b2da      	uxtb	r2, r3
 800361c:	7a3b      	ldrb	r3, [r7, #8]
 800361e:	f362 0301 	bfi	r3, r2, #0, #2
 8003622:	723b      	strb	r3, [r7, #8]
 8003624:	f107 0208 	add.w	r2, r7, #8
 8003628:	2301      	movs	r3, #1
 800362a:	2120      	movs	r1, #32
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff ffc8 	bl	80035c2 <hts221_write_reg>
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <hts221_data_rate_get>:
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
 800364a:	f107 0208 	add.w	r2, r7, #8
 800364e:	2301      	movs	r3, #1
 8003650:	2120      	movs	r1, #32
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7ff ff9d 	bl	8003592 <hts221_read_reg>
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	7a3b      	ldrb	r3, [r7, #8]
 800365c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b03      	cmp	r3, #3
 8003664:	d81a      	bhi.n	800369c <hts221_data_rate_get+0x5c>
 8003666:	a201      	add	r2, pc, #4	; (adr r2, 800366c <hts221_data_rate_get+0x2c>)
 8003668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366c:	0800367d 	.word	0x0800367d
 8003670:	08003685 	.word	0x08003685
 8003674:	0800368d 	.word	0x0800368d
 8003678:	08003695 	.word	0x08003695
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	2200      	movs	r2, #0
 8003680:	701a      	strb	r2, [r3, #0]
 8003682:	e00f      	b.n	80036a4 <hts221_data_rate_get+0x64>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	2201      	movs	r2, #1
 8003688:	701a      	strb	r2, [r3, #0]
 800368a:	e00b      	b.n	80036a4 <hts221_data_rate_get+0x64>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	2202      	movs	r2, #2
 8003690:	701a      	strb	r2, [r3, #0]
 8003692:	e007      	b.n	80036a4 <hts221_data_rate_get+0x64>
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	2203      	movs	r2, #3
 8003698:	701a      	strb	r2, [r3, #0]
 800369a:	e003      	b.n	80036a4 <hts221_data_rate_get+0x64>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2204      	movs	r2, #4
 80036a0:	701a      	strb	r2, [r3, #0]
 80036a2:	bf00      	nop
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop

080036b0 <hts221_block_data_update_set>:
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	70fb      	strb	r3, [r7, #3]
 80036bc:	f107 0208 	add.w	r2, r7, #8
 80036c0:	2301      	movs	r3, #1
 80036c2:	2120      	movs	r1, #32
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7ff ff64 	bl	8003592 <hts221_read_reg>
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10f      	bne.n	80036f2 <hts221_block_data_update_set+0x42>
 80036d2:	78fb      	ldrb	r3, [r7, #3]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	7a3b      	ldrb	r3, [r7, #8]
 80036dc:	f362 0382 	bfi	r3, r2, #2, #1
 80036e0:	723b      	strb	r3, [r7, #8]
 80036e2:	f107 0208 	add.w	r2, r7, #8
 80036e6:	2301      	movs	r3, #1
 80036e8:	2120      	movs	r1, #32
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff ff69 	bl	80035c2 <hts221_write_reg>
 80036f0:	60f8      	str	r0, [r7, #12]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <hts221_humidity_raw_get>:
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
 8003706:	f107 0208 	add.w	r2, r7, #8
 800370a:	2302      	movs	r3, #2
 800370c:	2128      	movs	r1, #40	; 0x28
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7ff ff3f 	bl	8003592 <hts221_read_reg>
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	7a7b      	ldrb	r3, [r7, #9]
 8003718:	b21a      	sxth	r2, r3
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	801a      	strh	r2, [r3, #0]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003724:	b29b      	uxth	r3, r3
 8003726:	021b      	lsls	r3, r3, #8
 8003728:	b29a      	uxth	r2, r3
 800372a:	7a3b      	ldrb	r3, [r7, #8]
 800372c:	b29b      	uxth	r3, r3
 800372e:	4413      	add	r3, r2
 8003730:	b29b      	uxth	r3, r3
 8003732:	b21a      	sxth	r2, r3
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	801a      	strh	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <hts221_temperature_raw_get>:
 8003742:	b580      	push	{r7, lr}
 8003744:	b084      	sub	sp, #16
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	6039      	str	r1, [r7, #0]
 800374c:	f107 0208 	add.w	r2, r7, #8
 8003750:	2302      	movs	r3, #2
 8003752:	212a      	movs	r1, #42	; 0x2a
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7ff ff1c 	bl	8003592 <hts221_read_reg>
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	7a7b      	ldrb	r3, [r7, #9]
 800375e:	b21a      	sxth	r2, r3
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	f9b3 3000 	ldrsh.w	r3, [r3]
 800376a:	b29b      	uxth	r3, r3
 800376c:	021b      	lsls	r3, r3, #8
 800376e:	b29a      	uxth	r2, r3
 8003770:	7a3b      	ldrb	r3, [r7, #8]
 8003772:	b29b      	uxth	r3, r3
 8003774:	4413      	add	r3, r2
 8003776:	b29b      	uxth	r3, r3
 8003778:	b21a      	sxth	r2, r3
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	801a      	strh	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <hts221_device_id_get>:
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
 8003792:	2301      	movs	r3, #1
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	210f      	movs	r1, #15
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f7ff fefa 	bl	8003592 <hts221_read_reg>
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <hts221_power_on_set>:
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b084      	sub	sp, #16
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
 80037b2:	460b      	mov	r3, r1
 80037b4:	70fb      	strb	r3, [r7, #3]
 80037b6:	f107 0208 	add.w	r2, r7, #8
 80037ba:	2301      	movs	r3, #1
 80037bc:	2120      	movs	r1, #32
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7ff fee7 	bl	8003592 <hts221_read_reg>
 80037c4:	60f8      	str	r0, [r7, #12]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10f      	bne.n	80037ec <hts221_power_on_set+0x42>
 80037cc:	78fb      	ldrb	r3, [r7, #3]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	7a3b      	ldrb	r3, [r7, #8]
 80037d6:	f362 13c7 	bfi	r3, r2, #7, #1
 80037da:	723b      	strb	r3, [r7, #8]
 80037dc:	f107 0208 	add.w	r2, r7, #8
 80037e0:	2301      	movs	r3, #1
 80037e2:	2120      	movs	r1, #32
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff feec 	bl	80035c2 <hts221_write_reg>
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <hts221_hum_rh_point_0_get>:
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b084      	sub	sp, #16
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	6039      	str	r1, [r7, #0]
 8003800:	f107 020b 	add.w	r2, r7, #11
 8003804:	2301      	movs	r3, #1
 8003806:	2130      	movs	r1, #48	; 0x30
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff fec2 	bl	8003592 <hts221_read_reg>
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	7afb      	ldrb	r3, [r7, #11]
 8003812:	ee07 3a90 	vmov	s15, r3
 8003816:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800381a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800381e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	edc3 7a00 	vstr	s15, [r3]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <hts221_hum_rh_point_1_get>:
 8003832:	b580      	push	{r7, lr}
 8003834:	b084      	sub	sp, #16
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
 800383a:	6039      	str	r1, [r7, #0]
 800383c:	f107 020b 	add.w	r2, r7, #11
 8003840:	2301      	movs	r3, #1
 8003842:	2131      	movs	r1, #49	; 0x31
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7ff fea4 	bl	8003592 <hts221_read_reg>
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	7afb      	ldrb	r3, [r7, #11]
 800384e:	ee07 3a90 	vmov	s15, r3
 8003852:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003856:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800385a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	edc3 7a00 	vstr	s15, [r3]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <hts221_temp_deg_point_0_get>:
 800386e:	b580      	push	{r7, lr}
 8003870:	b086      	sub	sp, #24
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
 8003876:	6039      	str	r1, [r7, #0]
 8003878:	f107 020f 	add.w	r2, r7, #15
 800387c:	2301      	movs	r3, #1
 800387e:	2132      	movs	r1, #50	; 0x32
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7ff fe86 	bl	8003592 <hts221_read_reg>
 8003886:	6178      	str	r0, [r7, #20]
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d11b      	bne.n	80038c6 <hts221_temp_deg_point_0_get+0x58>
 800388e:	f107 0210 	add.w	r2, r7, #16
 8003892:	2301      	movs	r3, #1
 8003894:	2135      	movs	r1, #53	; 0x35
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7ff fe7b 	bl	8003592 <hts221_read_reg>
 800389c:	6178      	str	r0, [r7, #20]
 800389e:	7c3b      	ldrb	r3, [r7, #16]
 80038a0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	74fb      	strb	r3, [r7, #19]
 80038a8:	7cfb      	ldrb	r3, [r7, #19]
 80038aa:	021b      	lsls	r3, r3, #8
 80038ac:	7bfa      	ldrb	r2, [r7, #15]
 80038ae:	4413      	add	r3, r2
 80038b0:	ee07 3a90 	vmov	s15, r3
 80038b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038b8:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80038bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	edc3 7a00 	vstr	s15, [r3]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	4618      	mov	r0, r3
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <hts221_temp_deg_point_1_get>:
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
 80038da:	f107 020f 	add.w	r2, r7, #15
 80038de:	2301      	movs	r3, #1
 80038e0:	2133      	movs	r1, #51	; 0x33
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7ff fe55 	bl	8003592 <hts221_read_reg>
 80038e8:	6178      	str	r0, [r7, #20]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d11b      	bne.n	8003928 <hts221_temp_deg_point_1_get+0x58>
 80038f0:	f107 0210 	add.w	r2, r7, #16
 80038f4:	2301      	movs	r3, #1
 80038f6:	2135      	movs	r1, #53	; 0x35
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7ff fe4a 	bl	8003592 <hts221_read_reg>
 80038fe:	6178      	str	r0, [r7, #20]
 8003900:	7c3b      	ldrb	r3, [r7, #16]
 8003902:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003906:	b2db      	uxtb	r3, r3
 8003908:	74fb      	strb	r3, [r7, #19]
 800390a:	7cfb      	ldrb	r3, [r7, #19]
 800390c:	021b      	lsls	r3, r3, #8
 800390e:	7bfa      	ldrb	r2, [r7, #15]
 8003910:	4413      	add	r3, r2
 8003912:	ee07 3a90 	vmov	s15, r3
 8003916:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800391a:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800391e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	edc3 7a00 	vstr	s15, [r3]
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	4618      	mov	r0, r3
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <hts221_hum_adc_point_0_get>:
 8003932:	b580      	push	{r7, lr}
 8003934:	b084      	sub	sp, #16
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
 800393a:	6039      	str	r1, [r7, #0]
 800393c:	f107 0208 	add.w	r2, r7, #8
 8003940:	2302      	movs	r3, #2
 8003942:	2136      	movs	r1, #54	; 0x36
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff fe24 	bl	8003592 <hts221_read_reg>
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	7a7b      	ldrb	r3, [r7, #9]
 800394e:	b29b      	uxth	r3, r3
 8003950:	021b      	lsls	r3, r3, #8
 8003952:	b29a      	uxth	r2, r3
 8003954:	7a3b      	ldrb	r3, [r7, #8]
 8003956:	b29b      	uxth	r3, r3
 8003958:	4413      	add	r3, r2
 800395a:	b29b      	uxth	r3, r3
 800395c:	817b      	strh	r3, [r7, #10]
 800395e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003962:	ee07 3a90 	vmov	s15, r3
 8003966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	edc3 7a00 	vstr	s15, [r3]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <hts221_hum_adc_point_1_get>:
 800397a:	b580      	push	{r7, lr}
 800397c:	b084      	sub	sp, #16
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	6039      	str	r1, [r7, #0]
 8003984:	f107 0208 	add.w	r2, r7, #8
 8003988:	2302      	movs	r3, #2
 800398a:	213a      	movs	r1, #58	; 0x3a
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f7ff fe00 	bl	8003592 <hts221_read_reg>
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	7a7b      	ldrb	r3, [r7, #9]
 8003996:	b29b      	uxth	r3, r3
 8003998:	021b      	lsls	r3, r3, #8
 800399a:	b29a      	uxth	r2, r3
 800399c:	7a3b      	ldrb	r3, [r7, #8]
 800399e:	b29b      	uxth	r3, r3
 80039a0:	4413      	add	r3, r2
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	817b      	strh	r3, [r7, #10]
 80039a6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80039aa:	ee07 3a90 	vmov	s15, r3
 80039ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	edc3 7a00 	vstr	s15, [r3]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <hts221_temp_adc_point_0_get>:
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b084      	sub	sp, #16
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	6039      	str	r1, [r7, #0]
 80039cc:	f107 0208 	add.w	r2, r7, #8
 80039d0:	2302      	movs	r3, #2
 80039d2:	213c      	movs	r1, #60	; 0x3c
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f7ff fddc 	bl	8003592 <hts221_read_reg>
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	7a7b      	ldrb	r3, [r7, #9]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	021b      	lsls	r3, r3, #8
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	7a3b      	ldrb	r3, [r7, #8]
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	4413      	add	r3, r2
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	817b      	strh	r3, [r7, #10]
 80039ee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80039f2:	ee07 3a90 	vmov	s15, r3
 80039f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	edc3 7a00 	vstr	s15, [r3]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <hts221_temp_adc_point_1_get>:
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b084      	sub	sp, #16
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
 8003a12:	6039      	str	r1, [r7, #0]
 8003a14:	f107 0208 	add.w	r2, r7, #8
 8003a18:	2302      	movs	r3, #2
 8003a1a:	213e      	movs	r1, #62	; 0x3e
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7ff fdb8 	bl	8003592 <hts221_read_reg>
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	7a7b      	ldrb	r3, [r7, #9]
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	021b      	lsls	r3, r3, #8
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	7a3b      	ldrb	r3, [r7, #8]
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	4413      	add	r3, r2
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	817b      	strh	r3, [r7, #10]
 8003a36:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003a3a:	ee07 3a90 	vmov	s15, r3
 8003a3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	edc3 7a00 	vstr	s15, [r3]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
	...

08003a54 <LIS2DW12_RegisterBusIO>:
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60fb      	str	r3, [r7, #12]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d103      	bne.n	8003a70 <LIS2DW12_RegisterBusIO+0x1c>
 8003a68:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	e04d      	b.n	8003b0c <LIS2DW12_RegisterBusIO+0xb8>
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	605a      	str	r2, [r3, #4]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	609a      	str	r2, [r3, #8]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	7b1a      	ldrb	r2, [r3, #12]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	731a      	strb	r2, [r3, #12]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	691a      	ldr	r2, [r3, #16]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	611a      	str	r2, [r3, #16]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	695a      	ldr	r2, [r3, #20]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	615a      	str	r2, [r3, #20]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	699a      	ldr	r2, [r3, #24]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	619a      	str	r2, [r3, #24]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a1b      	ldr	r2, [pc, #108]	; (8003b18 <LIS2DW12_RegisterBusIO+0xc4>)
 8003aac:	621a      	str	r2, [r3, #32]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a1a      	ldr	r2, [pc, #104]	; (8003b1c <LIS2DW12_RegisterBusIO+0xc8>)
 8003ab2:	61da      	str	r2, [r3, #28]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	625a      	str	r2, [r3, #36]	; 0x24
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d103      	bne.n	8003aca <LIS2DW12_RegisterBusIO+0x76>
 8003ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	e020      	b.n	8003b0c <LIS2DW12_RegisterBusIO+0xb8>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4798      	blx	r3
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <LIS2DW12_RegisterBusIO+0x8a>
 8003ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	e016      	b.n	8003b0c <LIS2DW12_RegisterBusIO+0xb8>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d112      	bne.n	8003b0c <LIS2DW12_RegisterBusIO+0xb8>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10d      	bne.n	8003b0c <LIS2DW12_RegisterBusIO+0xb8>
 8003af0:	2305      	movs	r3, #5
 8003af2:	72fb      	strb	r3, [r7, #11]
 8003af4:	7afb      	ldrb	r3, [r7, #11]
 8003af6:	461a      	mov	r2, r3
 8003af8:	2121      	movs	r1, #33	; 0x21
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 fd87 	bl	800460e <LIS2DW12_Write_Reg>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <LIS2DW12_RegisterBusIO+0xb8>
 8003b06:	f04f 33ff 	mov.w	r3, #4294967295
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	080049a1 	.word	0x080049a1
 8003b1c:	080049d7 	.word	0x080049d7

08003b20 <LIS2DW12_Init>:
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	331c      	adds	r3, #28
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f001 fa94 	bl	800505c <lis2dw12_auto_increment_set>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d002      	beq.n	8003b40 <LIS2DW12_Init+0x20>
 8003b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b3e:	e04b      	b.n	8003bd8 <LIS2DW12_Init+0xb8>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	331c      	adds	r3, #28
 8003b44:	2101      	movs	r1, #1
 8003b46:	4618      	mov	r0, r3
 8003b48:	f001 f9a8 	bl	8004e9c <lis2dw12_block_data_update_set>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d002      	beq.n	8003b58 <LIS2DW12_Init+0x38>
 8003b52:	f04f 33ff 	mov.w	r3, #4294967295
 8003b56:	e03f      	b.n	8003bd8 <LIS2DW12_Init+0xb8>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	331c      	adds	r3, #28
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f001 faa2 	bl	80050a8 <lis2dw12_fifo_mode_set>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <LIS2DW12_Init+0x50>
 8003b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b6e:	e033      	b.n	8003bd8 <LIS2DW12_Init+0xb8>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	331c      	adds	r3, #28
 8003b74:	2104      	movs	r1, #4
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 ff78 	bl	8004a6c <lis2dw12_power_mode_set>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <LIS2DW12_Init+0x68>
 8003b82:	f04f 33ff 	mov.w	r3, #4294967295
 8003b86:	e027      	b.n	8003bd8 <LIS2DW12_Init+0xb8>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a15      	ldr	r2, [pc, #84]	; (8003be0 <LIS2DW12_Init+0xc0>)
 8003b8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	331c      	adds	r3, #28
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f001 f869 	bl	8004c7c <lis2dw12_data_rate_set>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <LIS2DW12_Init+0x96>
 8003bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb4:	e010      	b.n	8003bd8 <LIS2DW12_Init+0xb8>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	331c      	adds	r3, #28
 8003bba:	2100      	movs	r1, #0
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f001 f993 	bl	8004ee8 <lis2dw12_full_scale_set>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <LIS2DW12_Init+0xae>
 8003bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bcc:	e004      	b.n	8003bd8 <LIS2DW12_Init+0xb8>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	42c80000 	.word	0x42c80000

08003be4 <LIS2DW12_DeInit>:
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f888 	bl	8003d02 <LIS2DW12_ACC_Disable>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <LIS2DW12_DeInit+0x1a>
 8003bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bfc:	e010      	b.n	8003c20 <LIS2DW12_DeInit+0x3c>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003c1e:	2300      	movs	r3, #0
 8003c20:	4618      	mov	r0, r3
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <LIS2DW12_ReadID>:
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	331c      	adds	r3, #28
 8003c36:	6839      	ldr	r1, [r7, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f001 f9fe 	bl	800503a <lis2dw12_device_id_get>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d002      	beq.n	8003c4a <LIS2DW12_ReadID+0x22>
 8003c44:	f04f 33ff 	mov.w	r3, #4294967295
 8003c48:	e000      	b.n	8003c4c <LIS2DW12_ReadID+0x24>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <LIS2DW12_GetCapabilities>:
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2201      	movs	r2, #1
 8003c62:	701a      	strb	r2, [r3, #0]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	2200      	movs	r2, #0
 8003c68:	705a      	strb	r2, [r3, #1]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	709a      	strb	r2, [r3, #2]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	2200      	movs	r2, #0
 8003c74:	70da      	strb	r2, [r3, #3]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	605a      	str	r2, [r3, #4]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	2210      	movs	r2, #16
 8003c80:	609a      	str	r2, [r3, #8]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2200      	movs	r2, #0
 8003c86:	60da      	str	r2, [r3, #12]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	f04f 0200 	mov.w	r2, #0
 8003c8e:	611a      	str	r2, [r3, #16]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	4a06      	ldr	r2, [pc, #24]	; (8003cac <LIS2DW12_GetCapabilities+0x58>)
 8003c94:	615a      	str	r2, [r3, #20]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	619a      	str	r2, [r3, #24]
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	44c80000 	.word	0x44c80000

08003cb0 <LIS2DW12_ACC_Enable>:
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d101      	bne.n	8003cc6 <LIS2DW12_ACC_Enable+0x16>
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	e019      	b.n	8003cfa <LIS2DW12_ACC_Enable+0x4a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003cd8:	461a      	mov	r2, r3
 8003cda:	eeb0 0a67 	vmov.f32	s0, s15
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 fcb0 	bl	8004644 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <LIS2DW12_ACC_Enable+0x40>
 8003cea:	f04f 33ff 	mov.w	r3, #4294967295
 8003cee:	e004      	b.n	8003cfa <LIS2DW12_ACC_Enable+0x4a>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <LIS2DW12_ACC_Disable>:
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b082      	sub	sp, #8
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <LIS2DW12_ACC_Disable+0x16>
 8003d14:	2300      	movs	r3, #0
 8003d16:	e010      	b.n	8003d3a <LIS2DW12_ACC_Disable+0x38>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	331c      	adds	r3, #28
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 ffac 	bl	8004c7c <lis2dw12_data_rate_set>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <LIS2DW12_ACC_Disable+0x2e>
 8003d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2e:	e004      	b.n	8003d3a <LIS2DW12_ACC_Disable+0x38>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8003d38:	2300      	movs	r3, #0
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
	...

08003d44 <LIS2DW12_ACC_GetSensitivity>:
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	331c      	adds	r3, #28
 8003d56:	f107 020b 	add.w	r2, r7, #11
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f001 f8e9 	bl	8004f34 <lis2dw12_full_scale_get>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d002      	beq.n	8003d6e <LIS2DW12_ACC_GetSensitivity+0x2a>
 8003d68:	f04f 33ff 	mov.w	r3, #4294967295
 8003d6c:	e0a0      	b.n	8003eb0 <LIS2DW12_ACC_GetSensitivity+0x16c>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	331c      	adds	r3, #28
 8003d72:	f107 020a 	add.w	r2, r7, #10
 8003d76:	4611      	mov	r1, r2
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 fec5 	bl	8004b08 <lis2dw12_power_mode_get>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <LIS2DW12_ACC_GetSensitivity+0x46>
 8003d84:	f04f 33ff 	mov.w	r3, #4294967295
 8003d88:	e092      	b.n	8003eb0 <LIS2DW12_ACC_GetSensitivity+0x16c>
 8003d8a:	7abb      	ldrb	r3, [r7, #10]
 8003d8c:	2b1b      	cmp	r3, #27
 8003d8e:	f200 8087 	bhi.w	8003ea0 <LIS2DW12_ACC_GetSensitivity+0x15c>
 8003d92:	a201      	add	r2, pc, #4	; (adr r2, 8003d98 <LIS2DW12_ACC_GetSensitivity+0x54>)
 8003d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d98:	08003e09 	.word	0x08003e09
 8003d9c:	08003e55 	.word	0x08003e55
 8003da0:	08003e55 	.word	0x08003e55
 8003da4:	08003e55 	.word	0x08003e55
 8003da8:	08003e55 	.word	0x08003e55
 8003dac:	08003ea1 	.word	0x08003ea1
 8003db0:	08003ea1 	.word	0x08003ea1
 8003db4:	08003ea1 	.word	0x08003ea1
 8003db8:	08003e09 	.word	0x08003e09
 8003dbc:	08003e55 	.word	0x08003e55
 8003dc0:	08003e55 	.word	0x08003e55
 8003dc4:	08003e55 	.word	0x08003e55
 8003dc8:	08003ea1 	.word	0x08003ea1
 8003dcc:	08003ea1 	.word	0x08003ea1
 8003dd0:	08003ea1 	.word	0x08003ea1
 8003dd4:	08003ea1 	.word	0x08003ea1
 8003dd8:	08003e09 	.word	0x08003e09
 8003ddc:	08003e55 	.word	0x08003e55
 8003de0:	08003e55 	.word	0x08003e55
 8003de4:	08003e55 	.word	0x08003e55
 8003de8:	08003e55 	.word	0x08003e55
 8003dec:	08003ea1 	.word	0x08003ea1
 8003df0:	08003ea1 	.word	0x08003ea1
 8003df4:	08003ea1 	.word	0x08003ea1
 8003df8:	08003e09 	.word	0x08003e09
 8003dfc:	08003e55 	.word	0x08003e55
 8003e00:	08003e55 	.word	0x08003e55
 8003e04:	08003e55 	.word	0x08003e55
 8003e08:	7afb      	ldrb	r3, [r7, #11]
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	d81a      	bhi.n	8003e44 <LIS2DW12_ACC_GetSensitivity+0x100>
 8003e0e:	a201      	add	r2, pc, #4	; (adr r2, 8003e14 <LIS2DW12_ACC_GetSensitivity+0xd0>)
 8003e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e14:	08003e25 	.word	0x08003e25
 8003e18:	08003e2d 	.word	0x08003e2d
 8003e1c:	08003e35 	.word	0x08003e35
 8003e20:	08003e3d 	.word	0x08003e3d
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	4a24      	ldr	r2, [pc, #144]	; (8003eb8 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	e012      	b.n	8003e52 <LIS2DW12_ACC_GetSensitivity+0x10e>
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	4a23      	ldr	r2, [pc, #140]	; (8003ebc <LIS2DW12_ACC_GetSensitivity+0x178>)
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	e00e      	b.n	8003e52 <LIS2DW12_ACC_GetSensitivity+0x10e>
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	4a22      	ldr	r2, [pc, #136]	; (8003ec0 <LIS2DW12_ACC_GetSensitivity+0x17c>)
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	e00a      	b.n	8003e52 <LIS2DW12_ACC_GetSensitivity+0x10e>
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	4a21      	ldr	r2, [pc, #132]	; (8003ec4 <LIS2DW12_ACC_GetSensitivity+0x180>)
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	e006      	b.n	8003e52 <LIS2DW12_ACC_GetSensitivity+0x10e>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	4a20      	ldr	r2, [pc, #128]	; (8003ec8 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	bf00      	nop
 8003e52:	e02c      	b.n	8003eae <LIS2DW12_ACC_GetSensitivity+0x16a>
 8003e54:	7afb      	ldrb	r3, [r7, #11]
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d81a      	bhi.n	8003e90 <LIS2DW12_ACC_GetSensitivity+0x14c>
 8003e5a:	a201      	add	r2, pc, #4	; (adr r2, 8003e60 <LIS2DW12_ACC_GetSensitivity+0x11c>)
 8003e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e60:	08003e71 	.word	0x08003e71
 8003e64:	08003e79 	.word	0x08003e79
 8003e68:	08003e81 	.word	0x08003e81
 8003e6c:	08003e89 	.word	0x08003e89
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	4a16      	ldr	r2, [pc, #88]	; (8003ecc <LIS2DW12_ACC_GetSensitivity+0x188>)
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	e012      	b.n	8003e9e <LIS2DW12_ACC_GetSensitivity+0x15a>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	4a15      	ldr	r2, [pc, #84]	; (8003ed0 <LIS2DW12_ACC_GetSensitivity+0x18c>)
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	e00e      	b.n	8003e9e <LIS2DW12_ACC_GetSensitivity+0x15a>
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	4a0d      	ldr	r2, [pc, #52]	; (8003eb8 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	e00a      	b.n	8003e9e <LIS2DW12_ACC_GetSensitivity+0x15a>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	4a0c      	ldr	r2, [pc, #48]	; (8003ebc <LIS2DW12_ACC_GetSensitivity+0x178>)
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	e006      	b.n	8003e9e <LIS2DW12_ACC_GetSensitivity+0x15a>
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	4a0d      	ldr	r2, [pc, #52]	; (8003ec8 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	f04f 33ff 	mov.w	r3, #4294967295
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	bf00      	nop
 8003e9e:	e006      	b.n	8003eae <LIS2DW12_ACC_GetSensitivity+0x16a>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	4a09      	ldr	r2, [pc, #36]	; (8003ec8 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	bf00      	nop
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	3f79db23 	.word	0x3f79db23
 8003ebc:	3ff9db23 	.word	0x3ff9db23
 8003ec0:	4079db23 	.word	0x4079db23
 8003ec4:	40f9db23 	.word	0x40f9db23
 8003ec8:	bf800000 	.word	0xbf800000
 8003ecc:	3e79db23 	.word	0x3e79db23
 8003ed0:	3ef9db23 	.word	0x3ef9db23

08003ed4 <LIS2DW12_ACC_GetOutputDataRate>:
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60fb      	str	r3, [r7, #12]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	331c      	adds	r3, #28
 8003ee6:	f107 020b 	add.w	r2, r7, #11
 8003eea:	4611      	mov	r1, r2
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 ff0b 	bl	8004d08 <lis2dw12_data_rate_get>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d002      	beq.n	8003efe <LIS2DW12_ACC_GetOutputDataRate+0x2a>
 8003ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8003efc:	e1d4      	b.n	80042a8 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	331c      	adds	r3, #28
 8003f02:	f107 020a 	add.w	r2, r7, #10
 8003f06:	4611      	mov	r1, r2
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 fdfd 	bl	8004b08 <lis2dw12_power_mode_get>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <LIS2DW12_ACC_GetOutputDataRate+0x46>
 8003f14:	f04f 33ff 	mov.w	r3, #4294967295
 8003f18:	e1c6      	b.n	80042a8 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
 8003f1a:	7afb      	ldrb	r3, [r7, #11]
 8003f1c:	2b32      	cmp	r3, #50	; 0x32
 8003f1e:	f200 81bb 	bhi.w	8004298 <LIS2DW12_ACC_GetOutputDataRate+0x3c4>
 8003f22:	a201      	add	r2, pc, #4	; (adr r2, 8003f28 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8003f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f28:	08003ff5 	.word	0x08003ff5
 8003f2c:	08003fff 	.word	0x08003fff
 8003f30:	0800409d 	.word	0x0800409d
 8003f34:	080040a5 	.word	0x080040a5
 8003f38:	080040ad 	.word	0x080040ad
 8003f3c:	080040b5 	.word	0x080040b5
 8003f40:	080040bd 	.word	0x080040bd
 8003f44:	080040c5 	.word	0x080040c5
 8003f48:	08004161 	.word	0x08004161
 8003f4c:	080041fd 	.word	0x080041fd
 8003f50:	08004299 	.word	0x08004299
 8003f54:	08004299 	.word	0x08004299
 8003f58:	08004299 	.word	0x08004299
 8003f5c:	08004299 	.word	0x08004299
 8003f60:	08004299 	.word	0x08004299
 8003f64:	08004299 	.word	0x08004299
 8003f68:	08004299 	.word	0x08004299
 8003f6c:	08004299 	.word	0x08004299
 8003f70:	08003ff5 	.word	0x08003ff5
 8003f74:	08004299 	.word	0x08004299
 8003f78:	08004299 	.word	0x08004299
 8003f7c:	08004299 	.word	0x08004299
 8003f80:	08004299 	.word	0x08004299
 8003f84:	08004299 	.word	0x08004299
 8003f88:	08004299 	.word	0x08004299
 8003f8c:	08004299 	.word	0x08004299
 8003f90:	08004299 	.word	0x08004299
 8003f94:	08004299 	.word	0x08004299
 8003f98:	08004299 	.word	0x08004299
 8003f9c:	08004299 	.word	0x08004299
 8003fa0:	08004299 	.word	0x08004299
 8003fa4:	08004299 	.word	0x08004299
 8003fa8:	08004299 	.word	0x08004299
 8003fac:	08004299 	.word	0x08004299
 8003fb0:	08004299 	.word	0x08004299
 8003fb4:	08004299 	.word	0x08004299
 8003fb8:	08004299 	.word	0x08004299
 8003fbc:	08004299 	.word	0x08004299
 8003fc0:	08004299 	.word	0x08004299
 8003fc4:	08004299 	.word	0x08004299
 8003fc8:	08004299 	.word	0x08004299
 8003fcc:	08004299 	.word	0x08004299
 8003fd0:	08004299 	.word	0x08004299
 8003fd4:	08004299 	.word	0x08004299
 8003fd8:	08004299 	.word	0x08004299
 8003fdc:	08004299 	.word	0x08004299
 8003fe0:	08004299 	.word	0x08004299
 8003fe4:	08004299 	.word	0x08004299
 8003fe8:	08004299 	.word	0x08004299
 8003fec:	08004299 	.word	0x08004299
 8003ff0:	08003ff5 	.word	0x08003ff5
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	e153      	b.n	80042a6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>
 8003ffe:	7abb      	ldrb	r3, [r7, #10]
 8004000:	2b1b      	cmp	r3, #27
 8004002:	d843      	bhi.n	800408c <LIS2DW12_ACC_GetOutputDataRate+0x1b8>
 8004004:	a201      	add	r2, pc, #4	; (adr r2, 800400c <LIS2DW12_ACC_GetOutputDataRate+0x138>)
 8004006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400a:	bf00      	nop
 800400c:	08004085 	.word	0x08004085
 8004010:	08004085 	.word	0x08004085
 8004014:	08004085 	.word	0x08004085
 8004018:	08004085 	.word	0x08004085
 800401c:	0800407d 	.word	0x0800407d
 8004020:	0800408d 	.word	0x0800408d
 8004024:	0800408d 	.word	0x0800408d
 8004028:	0800408d 	.word	0x0800408d
 800402c:	08004085 	.word	0x08004085
 8004030:	08004085 	.word	0x08004085
 8004034:	08004085 	.word	0x08004085
 8004038:	08004085 	.word	0x08004085
 800403c:	0800408d 	.word	0x0800408d
 8004040:	0800408d 	.word	0x0800408d
 8004044:	0800408d 	.word	0x0800408d
 8004048:	0800408d 	.word	0x0800408d
 800404c:	08004085 	.word	0x08004085
 8004050:	08004085 	.word	0x08004085
 8004054:	08004085 	.word	0x08004085
 8004058:	08004085 	.word	0x08004085
 800405c:	0800407d 	.word	0x0800407d
 8004060:	0800408d 	.word	0x0800408d
 8004064:	0800408d 	.word	0x0800408d
 8004068:	0800408d 	.word	0x0800408d
 800406c:	08004085 	.word	0x08004085
 8004070:	08004085 	.word	0x08004085
 8004074:	08004085 	.word	0x08004085
 8004078:	08004085 	.word	0x08004085
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	4a8c      	ldr	r2, [pc, #560]	; (80042b0 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	e00a      	b.n	800409a <LIS2DW12_ACC_GetOutputDataRate+0x1c6>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	4a8b      	ldr	r2, [pc, #556]	; (80042b4 <LIS2DW12_ACC_GetOutputDataRate+0x3e0>)
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	e006      	b.n	800409a <LIS2DW12_ACC_GetOutputDataRate+0x1c6>
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	4a8a      	ldr	r2, [pc, #552]	; (80042b8 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	f04f 33ff 	mov.w	r3, #4294967295
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	bf00      	nop
 800409a:	e104      	b.n	80042a6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	4a84      	ldr	r2, [pc, #528]	; (80042b0 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	e100      	b.n	80042a6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	4a85      	ldr	r2, [pc, #532]	; (80042bc <LIS2DW12_ACC_GetOutputDataRate+0x3e8>)
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	e0fc      	b.n	80042a6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	4a84      	ldr	r2, [pc, #528]	; (80042c0 <LIS2DW12_ACC_GetOutputDataRate+0x3ec>)
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	e0f8      	b.n	80042a6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	4a83      	ldr	r2, [pc, #524]	; (80042c4 <LIS2DW12_ACC_GetOutputDataRate+0x3f0>)
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	e0f4      	b.n	80042a6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	4a82      	ldr	r2, [pc, #520]	; (80042c8 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	e0f0      	b.n	80042a6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>
 80040c4:	7abb      	ldrb	r3, [r7, #10]
 80040c6:	2b1b      	cmp	r3, #27
 80040c8:	d842      	bhi.n	8004150 <LIS2DW12_ACC_GetOutputDataRate+0x27c>
 80040ca:	a201      	add	r2, pc, #4	; (adr r2, 80040d0 <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 80040cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d0:	08004149 	.word	0x08004149
 80040d4:	08004149 	.word	0x08004149
 80040d8:	08004149 	.word	0x08004149
 80040dc:	08004149 	.word	0x08004149
 80040e0:	08004141 	.word	0x08004141
 80040e4:	08004151 	.word	0x08004151
 80040e8:	08004151 	.word	0x08004151
 80040ec:	08004151 	.word	0x08004151
 80040f0:	08004149 	.word	0x08004149
 80040f4:	08004149 	.word	0x08004149
 80040f8:	08004149 	.word	0x08004149
 80040fc:	08004149 	.word	0x08004149
 8004100:	08004151 	.word	0x08004151
 8004104:	08004151 	.word	0x08004151
 8004108:	08004151 	.word	0x08004151
 800410c:	08004151 	.word	0x08004151
 8004110:	08004149 	.word	0x08004149
 8004114:	08004149 	.word	0x08004149
 8004118:	08004149 	.word	0x08004149
 800411c:	08004149 	.word	0x08004149
 8004120:	08004141 	.word	0x08004141
 8004124:	08004151 	.word	0x08004151
 8004128:	08004151 	.word	0x08004151
 800412c:	08004151 	.word	0x08004151
 8004130:	08004149 	.word	0x08004149
 8004134:	08004149 	.word	0x08004149
 8004138:	08004149 	.word	0x08004149
 800413c:	08004149 	.word	0x08004149
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	4a62      	ldr	r2, [pc, #392]	; (80042cc <LIS2DW12_ACC_GetOutputDataRate+0x3f8>)
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	e00a      	b.n	800415e <LIS2DW12_ACC_GetOutputDataRate+0x28a>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	4a5f      	ldr	r2, [pc, #380]	; (80042c8 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	e006      	b.n	800415e <LIS2DW12_ACC_GetOutputDataRate+0x28a>
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	4a59      	ldr	r2, [pc, #356]	; (80042b8 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	f04f 33ff 	mov.w	r3, #4294967295
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	bf00      	nop
 800415e:	e0a2      	b.n	80042a6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>
 8004160:	7abb      	ldrb	r3, [r7, #10]
 8004162:	2b1b      	cmp	r3, #27
 8004164:	d842      	bhi.n	80041ec <LIS2DW12_ACC_GetOutputDataRate+0x318>
 8004166:	a201      	add	r2, pc, #4	; (adr r2, 800416c <LIS2DW12_ACC_GetOutputDataRate+0x298>)
 8004168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416c:	080041e5 	.word	0x080041e5
 8004170:	080041e5 	.word	0x080041e5
 8004174:	080041e5 	.word	0x080041e5
 8004178:	080041e5 	.word	0x080041e5
 800417c:	080041dd 	.word	0x080041dd
 8004180:	080041ed 	.word	0x080041ed
 8004184:	080041ed 	.word	0x080041ed
 8004188:	080041ed 	.word	0x080041ed
 800418c:	080041e5 	.word	0x080041e5
 8004190:	080041e5 	.word	0x080041e5
 8004194:	080041e5 	.word	0x080041e5
 8004198:	080041e5 	.word	0x080041e5
 800419c:	080041ed 	.word	0x080041ed
 80041a0:	080041ed 	.word	0x080041ed
 80041a4:	080041ed 	.word	0x080041ed
 80041a8:	080041ed 	.word	0x080041ed
 80041ac:	080041e5 	.word	0x080041e5
 80041b0:	080041e5 	.word	0x080041e5
 80041b4:	080041e5 	.word	0x080041e5
 80041b8:	080041e5 	.word	0x080041e5
 80041bc:	080041dd 	.word	0x080041dd
 80041c0:	080041ed 	.word	0x080041ed
 80041c4:	080041ed 	.word	0x080041ed
 80041c8:	080041ed 	.word	0x080041ed
 80041cc:	080041e5 	.word	0x080041e5
 80041d0:	080041e5 	.word	0x080041e5
 80041d4:	080041e5 	.word	0x080041e5
 80041d8:	080041e5 	.word	0x080041e5
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	4a3c      	ldr	r2, [pc, #240]	; (80042d0 <LIS2DW12_ACC_GetOutputDataRate+0x3fc>)
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	e00a      	b.n	80041fa <LIS2DW12_ACC_GetOutputDataRate+0x326>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	4a38      	ldr	r2, [pc, #224]	; (80042c8 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	e006      	b.n	80041fa <LIS2DW12_ACC_GetOutputDataRate+0x326>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	4a32      	ldr	r2, [pc, #200]	; (80042b8 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	f04f 33ff 	mov.w	r3, #4294967295
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	bf00      	nop
 80041fa:	e054      	b.n	80042a6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>
 80041fc:	7abb      	ldrb	r3, [r7, #10]
 80041fe:	2b1b      	cmp	r3, #27
 8004200:	d842      	bhi.n	8004288 <LIS2DW12_ACC_GetOutputDataRate+0x3b4>
 8004202:	a201      	add	r2, pc, #4	; (adr r2, 8004208 <LIS2DW12_ACC_GetOutputDataRate+0x334>)
 8004204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004208:	08004281 	.word	0x08004281
 800420c:	08004281 	.word	0x08004281
 8004210:	08004281 	.word	0x08004281
 8004214:	08004281 	.word	0x08004281
 8004218:	08004279 	.word	0x08004279
 800421c:	08004289 	.word	0x08004289
 8004220:	08004289 	.word	0x08004289
 8004224:	08004289 	.word	0x08004289
 8004228:	08004281 	.word	0x08004281
 800422c:	08004281 	.word	0x08004281
 8004230:	08004281 	.word	0x08004281
 8004234:	08004281 	.word	0x08004281
 8004238:	08004289 	.word	0x08004289
 800423c:	08004289 	.word	0x08004289
 8004240:	08004289 	.word	0x08004289
 8004244:	08004289 	.word	0x08004289
 8004248:	08004281 	.word	0x08004281
 800424c:	08004281 	.word	0x08004281
 8004250:	08004281 	.word	0x08004281
 8004254:	08004281 	.word	0x08004281
 8004258:	08004279 	.word	0x08004279
 800425c:	08004289 	.word	0x08004289
 8004260:	08004289 	.word	0x08004289
 8004264:	08004289 	.word	0x08004289
 8004268:	08004281 	.word	0x08004281
 800426c:	08004281 	.word	0x08004281
 8004270:	08004281 	.word	0x08004281
 8004274:	08004281 	.word	0x08004281
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	4a16      	ldr	r2, [pc, #88]	; (80042d4 <LIS2DW12_ACC_GetOutputDataRate+0x400>)
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	e00a      	b.n	8004296 <LIS2DW12_ACC_GetOutputDataRate+0x3c2>
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	4a11      	ldr	r2, [pc, #68]	; (80042c8 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	e006      	b.n	8004296 <LIS2DW12_ACC_GetOutputDataRate+0x3c2>
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	4a0b      	ldr	r2, [pc, #44]	; (80042b8 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	f04f 33ff 	mov.w	r3, #4294967295
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	bf00      	nop
 8004296:	e006      	b.n	80042a6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	4a07      	ldr	r2, [pc, #28]	; (80042b8 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	f04f 33ff 	mov.w	r3, #4294967295
 80042a2:	60fb      	str	r3, [r7, #12]
 80042a4:	bf00      	nop
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	41480000 	.word	0x41480000
 80042b4:	3fcccccd 	.word	0x3fcccccd
 80042b8:	bf800000 	.word	0xbf800000
 80042bc:	41c80000 	.word	0x41c80000
 80042c0:	42480000 	.word	0x42480000
 80042c4:	42c80000 	.word	0x42c80000
 80042c8:	43480000 	.word	0x43480000
 80042cc:	43c80000 	.word	0x43c80000
 80042d0:	44480000 	.word	0x44480000
 80042d4:	44c80000 	.word	0x44c80000

080042d8 <LIS2DW12_ACC_SetOutputDataRate>:
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	ed87 0a00 	vstr	s0, [r7]
 80042e4:	2200      	movs	r2, #0
 80042e6:	2100      	movs	r1, #0
 80042e8:	ed97 0a00 	vldr	s0, [r7]
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f805 	bl	80042fc <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 80042f2:	4603      	mov	r3, r0
 80042f4:	4618      	mov	r0, r3
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	ed87 0a02 	vstr	s0, [r7, #8]
 8004308:	460b      	mov	r3, r1
 800430a:	71fb      	strb	r3, [r7, #7]
 800430c:	4613      	mov	r3, r2
 800430e:	71bb      	strb	r3, [r7, #6]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004316:	2b01      	cmp	r3, #1
 8004318:	d109      	bne.n	800432e <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
 800431a:	79ba      	ldrb	r2, [r7, #6]
 800431c:	79fb      	ldrb	r3, [r7, #7]
 800431e:	4619      	mov	r1, r3
 8004320:	ed97 0a02 	vldr	s0, [r7, #8]
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 f98d 	bl	8004644 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 800432a:	4603      	mov	r3, r0
 800432c:	e008      	b.n	8004340 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
 800432e:	79ba      	ldrb	r2, [r7, #6]
 8004330:	79fb      	ldrb	r3, [r7, #7]
 8004332:	4619      	mov	r1, r3
 8004334:	ed97 0a02 	vldr	s0, [r7, #8]
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 fa9f 	bl	800487c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 800433e:	4603      	mov	r3, r0
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <LIS2DW12_ACC_GetFullScale>:
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
 8004352:	2300      	movs	r3, #0
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	331c      	adds	r3, #28
 800435a:	f107 020b 	add.w	r2, r7, #11
 800435e:	4611      	mov	r1, r2
 8004360:	4618      	mov	r0, r3
 8004362:	f000 fde7 	bl	8004f34 <lis2dw12_full_scale_get>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d002      	beq.n	8004372 <LIS2DW12_ACC_GetFullScale+0x2a>
 800436c:	f04f 33ff 	mov.w	r3, #4294967295
 8004370:	e027      	b.n	80043c2 <LIS2DW12_ACC_GetFullScale+0x7a>
 8004372:	7afb      	ldrb	r3, [r7, #11]
 8004374:	2b03      	cmp	r3, #3
 8004376:	d81b      	bhi.n	80043b0 <LIS2DW12_ACC_GetFullScale+0x68>
 8004378:	a201      	add	r2, pc, #4	; (adr r2, 8004380 <LIS2DW12_ACC_GetFullScale+0x38>)
 800437a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437e:	bf00      	nop
 8004380:	08004391 	.word	0x08004391
 8004384:	08004399 	.word	0x08004399
 8004388:	080043a1 	.word	0x080043a1
 800438c:	080043a9 	.word	0x080043a9
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	2202      	movs	r2, #2
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	e013      	b.n	80043c0 <LIS2DW12_ACC_GetFullScale+0x78>
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	2204      	movs	r2, #4
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	e00f      	b.n	80043c0 <LIS2DW12_ACC_GetFullScale+0x78>
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	2208      	movs	r2, #8
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	e00b      	b.n	80043c0 <LIS2DW12_ACC_GetFullScale+0x78>
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	2210      	movs	r2, #16
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	e007      	b.n	80043c0 <LIS2DW12_ACC_GetFullScale+0x78>
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	f04f 32ff 	mov.w	r2, #4294967295
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	f04f 33ff 	mov.w	r3, #4294967295
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	bf00      	nop
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop

080043cc <LIS2DW12_ACC_SetFullScale>:
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b02      	cmp	r3, #2
 80043da:	dd0b      	ble.n	80043f4 <LIS2DW12_ACC_SetFullScale+0x28>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	2b04      	cmp	r3, #4
 80043e0:	dd06      	ble.n	80043f0 <LIS2DW12_ACC_SetFullScale+0x24>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	dc01      	bgt.n	80043ec <LIS2DW12_ACC_SetFullScale+0x20>
 80043e8:	2302      	movs	r3, #2
 80043ea:	e004      	b.n	80043f6 <LIS2DW12_ACC_SetFullScale+0x2a>
 80043ec:	2303      	movs	r3, #3
 80043ee:	e002      	b.n	80043f6 <LIS2DW12_ACC_SetFullScale+0x2a>
 80043f0:	2301      	movs	r3, #1
 80043f2:	e000      	b.n	80043f6 <LIS2DW12_ACC_SetFullScale+0x2a>
 80043f4:	2300      	movs	r3, #0
 80043f6:	73fb      	strb	r3, [r7, #15]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	331c      	adds	r3, #28
 80043fc:	7bfa      	ldrb	r2, [r7, #15]
 80043fe:	4611      	mov	r1, r2
 8004400:	4618      	mov	r0, r3
 8004402:	f000 fd71 	bl	8004ee8 <lis2dw12_full_scale_set>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <LIS2DW12_ACC_SetFullScale+0x46>
 800440c:	f04f 33ff 	mov.w	r3, #4294967295
 8004410:	e000      	b.n	8004414 <LIS2DW12_ACC_SetFullScale+0x48>
 8004412:	2300      	movs	r3, #0
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <LIS2DW12_ACC_GetAxesRaw>:
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
 8004426:	2300      	movs	r3, #0
 8004428:	617b      	str	r3, [r7, #20]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	331c      	adds	r3, #28
 800442e:	f107 020b 	add.w	r2, r7, #11
 8004432:	4611      	mov	r1, r2
 8004434:	4618      	mov	r0, r3
 8004436:	f000 fb67 	bl	8004b08 <lis2dw12_power_mode_get>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <LIS2DW12_ACC_GetAxesRaw+0x2a>
 8004440:	f04f 33ff 	mov.w	r3, #4294967295
 8004444:	e089      	b.n	800455a <LIS2DW12_ACC_GetAxesRaw+0x13e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	331c      	adds	r3, #28
 800444a:	f107 020c 	add.w	r2, r7, #12
 800444e:	4611      	mov	r1, r2
 8004450:	4618      	mov	r0, r3
 8004452:	f000 fda7 	bl	8004fa4 <lis2dw12_acceleration_raw_get>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d002      	beq.n	8004462 <LIS2DW12_ACC_GetAxesRaw+0x46>
 800445c:	f04f 33ff 	mov.w	r3, #4294967295
 8004460:	e07b      	b.n	800455a <LIS2DW12_ACC_GetAxesRaw+0x13e>
 8004462:	7afb      	ldrb	r3, [r7, #11]
 8004464:	2b1b      	cmp	r3, #27
 8004466:	d873      	bhi.n	8004550 <LIS2DW12_ACC_GetAxesRaw+0x134>
 8004468:	a201      	add	r2, pc, #4	; (adr r2, 8004470 <LIS2DW12_ACC_GetAxesRaw+0x54>)
 800446a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446e:	bf00      	nop
 8004470:	080044e1 	.word	0x080044e1
 8004474:	08004519 	.word	0x08004519
 8004478:	08004519 	.word	0x08004519
 800447c:	08004519 	.word	0x08004519
 8004480:	08004519 	.word	0x08004519
 8004484:	08004551 	.word	0x08004551
 8004488:	08004551 	.word	0x08004551
 800448c:	08004551 	.word	0x08004551
 8004490:	080044e1 	.word	0x080044e1
 8004494:	08004519 	.word	0x08004519
 8004498:	08004519 	.word	0x08004519
 800449c:	08004519 	.word	0x08004519
 80044a0:	08004551 	.word	0x08004551
 80044a4:	08004551 	.word	0x08004551
 80044a8:	08004551 	.word	0x08004551
 80044ac:	08004551 	.word	0x08004551
 80044b0:	080044e1 	.word	0x080044e1
 80044b4:	08004519 	.word	0x08004519
 80044b8:	08004519 	.word	0x08004519
 80044bc:	08004519 	.word	0x08004519
 80044c0:	08004519 	.word	0x08004519
 80044c4:	08004551 	.word	0x08004551
 80044c8:	08004551 	.word	0x08004551
 80044cc:	08004551 	.word	0x08004551
 80044d0:	080044e1 	.word	0x080044e1
 80044d4:	08004519 	.word	0x08004519
 80044d8:	08004519 	.word	0x08004519
 80044dc:	08004519 	.word	0x08004519
 80044e0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	da00      	bge.n	80044ea <LIS2DW12_ACC_GetAxesRaw+0xce>
 80044e8:	330f      	adds	r3, #15
 80044ea:	111b      	asrs	r3, r3, #4
 80044ec:	b21a      	sxth	r2, r3
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	801a      	strh	r2, [r3, #0]
 80044f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	da00      	bge.n	80044fc <LIS2DW12_ACC_GetAxesRaw+0xe0>
 80044fa:	330f      	adds	r3, #15
 80044fc:	111b      	asrs	r3, r3, #4
 80044fe:	b21a      	sxth	r2, r3
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	805a      	strh	r2, [r3, #2]
 8004504:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004508:	2b00      	cmp	r3, #0
 800450a:	da00      	bge.n	800450e <LIS2DW12_ACC_GetAxesRaw+0xf2>
 800450c:	330f      	adds	r3, #15
 800450e:	111b      	asrs	r3, r3, #4
 8004510:	b21a      	sxth	r2, r3
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	809a      	strh	r2, [r3, #4]
 8004516:	e01f      	b.n	8004558 <LIS2DW12_ACC_GetAxesRaw+0x13c>
 8004518:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800451c:	2b00      	cmp	r3, #0
 800451e:	da00      	bge.n	8004522 <LIS2DW12_ACC_GetAxesRaw+0x106>
 8004520:	3303      	adds	r3, #3
 8004522:	109b      	asrs	r3, r3, #2
 8004524:	b21a      	sxth	r2, r3
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	801a      	strh	r2, [r3, #0]
 800452a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800452e:	2b00      	cmp	r3, #0
 8004530:	da00      	bge.n	8004534 <LIS2DW12_ACC_GetAxesRaw+0x118>
 8004532:	3303      	adds	r3, #3
 8004534:	109b      	asrs	r3, r3, #2
 8004536:	b21a      	sxth	r2, r3
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	805a      	strh	r2, [r3, #2]
 800453c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004540:	2b00      	cmp	r3, #0
 8004542:	da00      	bge.n	8004546 <LIS2DW12_ACC_GetAxesRaw+0x12a>
 8004544:	3303      	adds	r3, #3
 8004546:	109b      	asrs	r3, r3, #2
 8004548:	b21a      	sxth	r2, r3
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	809a      	strh	r2, [r3, #4]
 800454e:	e003      	b.n	8004558 <LIS2DW12_ACC_GetAxesRaw+0x13c>
 8004550:	f04f 33ff 	mov.w	r3, #4294967295
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	bf00      	nop
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop

08004564 <LIS2DW12_ACC_GetAxes>:
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
 800456e:	f04f 0300 	mov.w	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	f107 0310 	add.w	r3, r7, #16
 8004578:	4619      	mov	r1, r3
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7ff ff4e 	bl	800441c <LIS2DW12_ACC_GetAxesRaw>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d002      	beq.n	800458c <LIS2DW12_ACC_GetAxes+0x28>
 8004586:	f04f 33ff 	mov.w	r3, #4294967295
 800458a:	e03c      	b.n	8004606 <LIS2DW12_ACC_GetAxes+0xa2>
 800458c:	f107 030c 	add.w	r3, r7, #12
 8004590:	4619      	mov	r1, r3
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7ff fbd6 	bl	8003d44 <LIS2DW12_ACC_GetSensitivity>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <LIS2DW12_ACC_GetAxes+0x40>
 800459e:	f04f 33ff 	mov.w	r3, #4294967295
 80045a2:	e030      	b.n	8004606 <LIS2DW12_ACC_GetAxes+0xa2>
 80045a4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80045a8:	ee07 3a90 	vmov	s15, r3
 80045ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80045b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045bc:	ee17 2a90 	vmov	r2, s15
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80045c8:	ee07 3a90 	vmov	s15, r3
 80045cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80045d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045dc:	ee17 2a90 	vmov	r2, s15
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	605a      	str	r2, [r3, #4]
 80045e4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80045e8:	ee07 3a90 	vmov	s15, r3
 80045ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80045f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045fc:	ee17 2a90 	vmov	r2, s15
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	609a      	str	r2, [r3, #8]
 8004604:	2300      	movs	r3, #0
 8004606:	4618      	mov	r0, r3
 8004608:	3718      	adds	r7, #24
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <LIS2DW12_Write_Reg>:
 800460e:	b580      	push	{r7, lr}
 8004610:	b082      	sub	sp, #8
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
 8004616:	460b      	mov	r3, r1
 8004618:	70fb      	strb	r3, [r7, #3]
 800461a:	4613      	mov	r3, r2
 800461c:	70bb      	strb	r3, [r7, #2]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f103 001c 	add.w	r0, r3, #28
 8004624:	1cba      	adds	r2, r7, #2
 8004626:	78f9      	ldrb	r1, [r7, #3]
 8004628:	2301      	movs	r3, #1
 800462a:	f000 fa07 	bl	8004a3c <lis2dw12_write_reg>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <LIS2DW12_Write_Reg+0x2c>
 8004634:	f04f 33ff 	mov.w	r3, #4294967295
 8004638:	e000      	b.n	800463c <LIS2DW12_Write_Reg+0x2e>
 800463a:	2300      	movs	r3, #0
 800463c:	4618      	mov	r0, r3
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004650:	460b      	mov	r3, r1
 8004652:	71fb      	strb	r3, [r7, #7]
 8004654:	4613      	mov	r3, r2
 8004656:	71bb      	strb	r3, [r7, #6]
 8004658:	79fb      	ldrb	r3, [r7, #7]
 800465a:	3b01      	subs	r3, #1
 800465c:	2b03      	cmp	r3, #3
 800465e:	d80b      	bhi.n	8004678 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8004660:	a201      	add	r2, pc, #4	; (adr r2, 8004668 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 8004662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004666:	bf00      	nop
 8004668:	080046a5 	.word	0x080046a5
 800466c:	080046d1 	.word	0x080046d1
 8004670:	080046fd 	.word	0x080046fd
 8004674:	08004729 	.word	0x08004729
 8004678:	79bb      	ldrb	r3, [r7, #6]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d002      	beq.n	8004684 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
 800467e:	2304      	movs	r3, #4
 8004680:	75fb      	strb	r3, [r7, #23]
 8004682:	e002      	b.n	800468a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
 8004684:	2314      	movs	r3, #20
 8004686:	75fb      	strb	r3, [r7, #23]
 8004688:	bf00      	nop
 800468a:	edd7 7a02 	vldr	s15, [r7, #8]
 800468e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004692:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800469a:	d400      	bmi.n	800469e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
 800469c:	e05a      	b.n	8004754 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
 800469e:	4b6f      	ldr	r3, [pc, #444]	; (800485c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 80046a0:	60bb      	str	r3, [r7, #8]
 80046a2:	e057      	b.n	8004754 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
 80046a4:	79bb      	ldrb	r3, [r7, #6]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d002      	beq.n	80046b0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
 80046aa:	2303      	movs	r3, #3
 80046ac:	75fb      	strb	r3, [r7, #23]
 80046ae:	e002      	b.n	80046b6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
 80046b0:	2313      	movs	r3, #19
 80046b2:	75fb      	strb	r3, [r7, #23]
 80046b4:	bf00      	nop
 80046b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80046ba:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8004860 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80046be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c6:	dc00      	bgt.n	80046ca <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
 80046c8:	e044      	b.n	8004754 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
 80046ca:	4b66      	ldr	r3, [pc, #408]	; (8004864 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80046cc:	60bb      	str	r3, [r7, #8]
 80046ce:	e041      	b.n	8004754 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
 80046d0:	79bb      	ldrb	r3, [r7, #6]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d002      	beq.n	80046dc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
 80046d6:	2302      	movs	r3, #2
 80046d8:	75fb      	strb	r3, [r7, #23]
 80046da:	e002      	b.n	80046e2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
 80046dc:	2312      	movs	r3, #18
 80046de:	75fb      	strb	r3, [r7, #23]
 80046e0:	bf00      	nop
 80046e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80046e6:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8004860 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80046ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f2:	dc00      	bgt.n	80046f6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
 80046f4:	e02e      	b.n	8004754 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
 80046f6:	4b5b      	ldr	r3, [pc, #364]	; (8004864 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80046f8:	60bb      	str	r3, [r7, #8]
 80046fa:	e02b      	b.n	8004754 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
 80046fc:	79bb      	ldrb	r3, [r7, #6]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d002      	beq.n	8004708 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
 8004702:	2301      	movs	r3, #1
 8004704:	75fb      	strb	r3, [r7, #23]
 8004706:	e002      	b.n	800470e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
 8004708:	2311      	movs	r3, #17
 800470a:	75fb      	strb	r3, [r7, #23]
 800470c:	bf00      	nop
 800470e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004712:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8004860 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8004716:	eef4 7ac7 	vcmpe.f32	s15, s14
 800471a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800471e:	dc00      	bgt.n	8004722 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
 8004720:	e018      	b.n	8004754 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
 8004722:	4b50      	ldr	r3, [pc, #320]	; (8004864 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8004724:	60bb      	str	r3, [r7, #8]
 8004726:	e015      	b.n	8004754 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
 8004728:	79bb      	ldrb	r3, [r7, #6]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d002      	beq.n	8004734 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
 800472e:	2300      	movs	r3, #0
 8004730:	75fb      	strb	r3, [r7, #23]
 8004732:	e002      	b.n	800473a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
 8004734:	2310      	movs	r3, #16
 8004736:	75fb      	strb	r3, [r7, #23]
 8004738:	bf00      	nop
 800473a:	edd7 7a02 	vldr	s15, [r7, #8]
 800473e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8004860 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8004742:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800474a:	dc00      	bgt.n	800474e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
 800474c:	e001      	b.n	8004752 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
 800474e:	4b45      	ldr	r3, [pc, #276]	; (8004864 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8004750:	60bb      	str	r3, [r7, #8]
 8004752:	bf00      	nop
 8004754:	edd7 7a02 	vldr	s15, [r7, #8]
 8004758:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8004868 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 800475c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004764:	d801      	bhi.n	800476a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8004766:	2301      	movs	r3, #1
 8004768:	e04d      	b.n	8004806 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800476a:	edd7 7a02 	vldr	s15, [r7, #8]
 800476e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004772:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800477a:	d801      	bhi.n	8004780 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 800477c:	2302      	movs	r3, #2
 800477e:	e042      	b.n	8004806 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004780:	edd7 7a02 	vldr	s15, [r7, #8]
 8004784:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004788:	eef4 7ac7 	vcmpe.f32	s15, s14
 800478c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004790:	d801      	bhi.n	8004796 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 8004792:	2303      	movs	r3, #3
 8004794:	e037      	b.n	8004806 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004796:	edd7 7a02 	vldr	s15, [r7, #8]
 800479a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800486c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 800479e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a6:	d801      	bhi.n	80047ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 80047a8:	2304      	movs	r3, #4
 80047aa:	e02c      	b.n	8004806 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80047ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80047b0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004870 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 80047b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047bc:	d801      	bhi.n	80047c2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 80047be:	2305      	movs	r3, #5
 80047c0:	e021      	b.n	8004806 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80047c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80047c6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004860 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80047ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047d2:	d801      	bhi.n	80047d8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 80047d4:	2306      	movs	r3, #6
 80047d6:	e016      	b.n	8004806 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80047d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80047dc:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8004874 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 80047e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e8:	d801      	bhi.n	80047ee <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 80047ea:	2307      	movs	r3, #7
 80047ec:	e00b      	b.n	8004806 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80047ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80047f2:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004878 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 80047f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047fe:	d801      	bhi.n	8004804 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8004800:	2308      	movs	r3, #8
 8004802:	e000      	b.n	8004806 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004804:	2309      	movs	r3, #9
 8004806:	75bb      	strb	r3, [r7, #22]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	331c      	adds	r3, #28
 800480c:	7dba      	ldrb	r2, [r7, #22]
 800480e:	4611      	mov	r1, r2
 8004810:	4618      	mov	r0, r3
 8004812:	f000 fa33 	bl	8004c7c <lis2dw12_data_rate_set>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
 800481c:	f04f 33ff 	mov.w	r3, #4294967295
 8004820:	e018      	b.n	8004854 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	331c      	adds	r3, #28
 8004826:	7dfa      	ldrb	r2, [r7, #23]
 8004828:	4611      	mov	r1, r2
 800482a:	4618      	mov	r0, r3
 800482c:	f000 f91e 	bl	8004a6c <lis2dw12_power_mode_set>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d002      	beq.n	800483c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
 8004836:	f04f 33ff 	mov.w	r3, #4294967295
 800483a:	e00b      	b.n	8004854 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	62da      	str	r2, [r3, #44]	; 0x2c
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	79fa      	ldrb	r2, [r7, #7]
 8004846:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	79ba      	ldrb	r2, [r7, #6]
 800484e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8004852:	2300      	movs	r3, #0
 8004854:	4618      	mov	r0, r3
 8004856:	3718      	adds	r7, #24
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	41480000 	.word	0x41480000
 8004860:	43480000 	.word	0x43480000
 8004864:	43480000 	.word	0x43480000
 8004868:	3fcccccd 	.word	0x3fcccccd
 800486c:	42480000 	.word	0x42480000
 8004870:	42c80000 	.word	0x42c80000
 8004874:	43c80000 	.word	0x43c80000
 8004878:	44480000 	.word	0x44480000

0800487c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	ed87 0a02 	vstr	s0, [r7, #8]
 8004888:	460b      	mov	r3, r1
 800488a:	71fb      	strb	r3, [r7, #7]
 800488c:	4613      	mov	r3, r2
 800488e:	71bb      	strb	r3, [r7, #6]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	79fa      	ldrb	r2, [r7, #7]
 8004894:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	79ba      	ldrb	r2, [r7, #6]
 800489c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80048a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80048a4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004964 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80048a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b0:	d801      	bhi.n	80048b6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 80048b2:	4b2d      	ldr	r3, [pc, #180]	; (8004968 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 80048b4:	e04d      	b.n	8004952 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 80048b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80048ba:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80048be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c6:	d801      	bhi.n	80048cc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 80048c8:	4b28      	ldr	r3, [pc, #160]	; (800496c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 80048ca:	e042      	b.n	8004952 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 80048cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80048d0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80048d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048dc:	d801      	bhi.n	80048e2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 80048de:	4b24      	ldr	r3, [pc, #144]	; (8004970 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 80048e0:	e037      	b.n	8004952 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 80048e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80048e6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004974 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80048ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f2:	d801      	bhi.n	80048f8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 80048f4:	4b20      	ldr	r3, [pc, #128]	; (8004978 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 80048f6:	e02c      	b.n	8004952 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 80048f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80048fc:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800497c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004900:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004908:	d801      	bhi.n	800490e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 800490a:	4b1d      	ldr	r3, [pc, #116]	; (8004980 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 800490c:	e021      	b.n	8004952 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 800490e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004912:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004984 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 8004916:	eef4 7ac7 	vcmpe.f32	s15, s14
 800491a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800491e:	d801      	bhi.n	8004924 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8004920:	4b19      	ldr	r3, [pc, #100]	; (8004988 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8004922:	e016      	b.n	8004952 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8004924:	edd7 7a02 	vldr	s15, [r7, #8]
 8004928:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800498c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 800492c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004934:	d801      	bhi.n	800493a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8004936:	4b16      	ldr	r3, [pc, #88]	; (8004990 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8004938:	e00b      	b.n	8004952 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 800493a:	edd7 7a02 	vldr	s15, [r7, #8]
 800493e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004994 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 8004942:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800494a:	d801      	bhi.n	8004950 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800494c:	4b12      	ldr	r3, [pc, #72]	; (8004998 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 800494e:	e000      	b.n	8004952 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8004950:	4b12      	ldr	r3, [pc, #72]	; (800499c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004956:	2300      	movs	r3, #0
 8004958:	4618      	mov	r0, r3
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	3fcccccd 	.word	0x3fcccccd
 8004968:	3fcccccd 	.word	0x3fcccccd
 800496c:	41480000 	.word	0x41480000
 8004970:	41c80000 	.word	0x41c80000
 8004974:	42480000 	.word	0x42480000
 8004978:	42480000 	.word	0x42480000
 800497c:	42c80000 	.word	0x42c80000
 8004980:	42c80000 	.word	0x42c80000
 8004984:	43480000 	.word	0x43480000
 8004988:	43480000 	.word	0x43480000
 800498c:	43c80000 	.word	0x43c80000
 8004990:	43c80000 	.word	0x43c80000
 8004994:	44480000 	.word	0x44480000
 8004998:	44480000 	.word	0x44480000
 800499c:	44c80000 	.word	0x44c80000

080049a0 <ReadRegWrap>:
 80049a0:	b590      	push	{r4, r7, lr}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	607a      	str	r2, [r7, #4]
 80049aa:	461a      	mov	r2, r3
 80049ac:	460b      	mov	r3, r1
 80049ae:	72fb      	strb	r3, [r7, #11]
 80049b0:	4613      	mov	r3, r2
 80049b2:	813b      	strh	r3, [r7, #8]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	695c      	ldr	r4, [r3, #20]
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	7b1b      	ldrb	r3, [r3, #12]
 80049c0:	b298      	uxth	r0, r3
 80049c2:	7afb      	ldrb	r3, [r7, #11]
 80049c4:	b299      	uxth	r1, r3
 80049c6:	893b      	ldrh	r3, [r7, #8]
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	47a0      	blx	r4
 80049cc:	4603      	mov	r3, r0
 80049ce:	4618      	mov	r0, r3
 80049d0:	371c      	adds	r7, #28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd90      	pop	{r4, r7, pc}

080049d6 <WriteRegWrap>:
 80049d6:	b590      	push	{r4, r7, lr}
 80049d8:	b087      	sub	sp, #28
 80049da:	af00      	add	r7, sp, #0
 80049dc:	60f8      	str	r0, [r7, #12]
 80049de:	607a      	str	r2, [r7, #4]
 80049e0:	461a      	mov	r2, r3
 80049e2:	460b      	mov	r3, r1
 80049e4:	72fb      	strb	r3, [r7, #11]
 80049e6:	4613      	mov	r3, r2
 80049e8:	813b      	strh	r3, [r7, #8]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	617b      	str	r3, [r7, #20]
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	691c      	ldr	r4, [r3, #16]
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	7b1b      	ldrb	r3, [r3, #12]
 80049f6:	b298      	uxth	r0, r3
 80049f8:	7afb      	ldrb	r3, [r7, #11]
 80049fa:	b299      	uxth	r1, r3
 80049fc:	893b      	ldrh	r3, [r7, #8]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	47a0      	blx	r4
 8004a02:	4603      	mov	r3, r0
 8004a04:	4618      	mov	r0, r3
 8004a06:	371c      	adds	r7, #28
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd90      	pop	{r4, r7, pc}

08004a0c <lis2dw12_read_reg>:
 8004a0c:	b590      	push	{r4, r7, lr}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	607a      	str	r2, [r7, #4]
 8004a16:	461a      	mov	r2, r3
 8004a18:	460b      	mov	r3, r1
 8004a1a:	72fb      	strb	r3, [r7, #11]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	813b      	strh	r3, [r7, #8]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	685c      	ldr	r4, [r3, #4]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6898      	ldr	r0, [r3, #8]
 8004a28:	893b      	ldrh	r3, [r7, #8]
 8004a2a:	7af9      	ldrb	r1, [r7, #11]
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	47a0      	blx	r4
 8004a30:	6178      	str	r0, [r7, #20]
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	4618      	mov	r0, r3
 8004a36:	371c      	adds	r7, #28
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd90      	pop	{r4, r7, pc}

08004a3c <lis2dw12_write_reg>:
 8004a3c:	b590      	push	{r4, r7, lr}
 8004a3e:	b087      	sub	sp, #28
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	607a      	str	r2, [r7, #4]
 8004a46:	461a      	mov	r2, r3
 8004a48:	460b      	mov	r3, r1
 8004a4a:	72fb      	strb	r3, [r7, #11]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	813b      	strh	r3, [r7, #8]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681c      	ldr	r4, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6898      	ldr	r0, [r3, #8]
 8004a58:	893b      	ldrh	r3, [r7, #8]
 8004a5a:	7af9      	ldrb	r1, [r7, #11]
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	47a0      	blx	r4
 8004a60:	6178      	str	r0, [r7, #20]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	4618      	mov	r0, r3
 8004a66:	371c      	adds	r7, #28
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd90      	pop	{r4, r7, pc}

08004a6c <lis2dw12_power_mode_set>:
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	70fb      	strb	r3, [r7, #3]
 8004a78:	f107 0210 	add.w	r2, r7, #16
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	2120      	movs	r1, #32
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7ff ffc3 	bl	8004a0c <lis2dw12_read_reg>
 8004a86:	6178      	str	r0, [r7, #20]
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d118      	bne.n	8004ac0 <lis2dw12_power_mode_set+0x54>
 8004a8e:	78fb      	ldrb	r3, [r7, #3]
 8004a90:	089b      	lsrs	r3, r3, #2
 8004a92:	f003 0303 	and.w	r3, r3, #3
 8004a96:	b2da      	uxtb	r2, r3
 8004a98:	7c3b      	ldrb	r3, [r7, #16]
 8004a9a:	f362 0383 	bfi	r3, r2, #2, #2
 8004a9e:	743b      	strb	r3, [r7, #16]
 8004aa0:	78fb      	ldrb	r3, [r7, #3]
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	b2da      	uxtb	r2, r3
 8004aa8:	7c3b      	ldrb	r3, [r7, #16]
 8004aaa:	f362 0301 	bfi	r3, r2, #0, #2
 8004aae:	743b      	strb	r3, [r7, #16]
 8004ab0:	f107 0210 	add.w	r2, r7, #16
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	2120      	movs	r1, #32
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f7ff ffbf 	bl	8004a3c <lis2dw12_write_reg>
 8004abe:	6178      	str	r0, [r7, #20]
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d107      	bne.n	8004ad6 <lis2dw12_power_mode_set+0x6a>
 8004ac6:	f107 020c 	add.w	r2, r7, #12
 8004aca:	2301      	movs	r3, #1
 8004acc:	2125      	movs	r1, #37	; 0x25
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7ff ff9c 	bl	8004a0c <lis2dw12_read_reg>
 8004ad4:	6178      	str	r0, [r7, #20]
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d110      	bne.n	8004afe <lis2dw12_power_mode_set+0x92>
 8004adc:	78fb      	ldrb	r3, [r7, #3]
 8004ade:	091b      	lsrs	r3, r3, #4
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	7b3b      	ldrb	r3, [r7, #12]
 8004ae8:	f362 0382 	bfi	r3, r2, #2, #1
 8004aec:	733b      	strb	r3, [r7, #12]
 8004aee:	f107 020c 	add.w	r2, r7, #12
 8004af2:	2301      	movs	r3, #1
 8004af4:	2125      	movs	r1, #37	; 0x25
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7ff ffa0 	bl	8004a3c <lis2dw12_write_reg>
 8004afc:	6178      	str	r0, [r7, #20]
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	4618      	mov	r0, r3
 8004b02:	3718      	adds	r7, #24
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <lis2dw12_power_mode_get>:
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
 8004b12:	f107 0210 	add.w	r2, r7, #16
 8004b16:	2301      	movs	r3, #1
 8004b18:	2120      	movs	r1, #32
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7ff ff76 	bl	8004a0c <lis2dw12_read_reg>
 8004b20:	6178      	str	r0, [r7, #20]
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f040 80a3 	bne.w	8004c70 <lis2dw12_power_mode_get+0x168>
 8004b2a:	f107 020c 	add.w	r2, r7, #12
 8004b2e:	2301      	movs	r3, #1
 8004b30:	2125      	movs	r1, #37	; 0x25
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7ff ff6a 	bl	8004a0c <lis2dw12_read_reg>
 8004b38:	6178      	str	r0, [r7, #20]
 8004b3a:	7b3b      	ldrb	r3, [r7, #12]
 8004b3c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	011a      	lsls	r2, r3, #4
 8004b44:	7c3b      	ldrb	r3, [r7, #16]
 8004b46:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	7c3a      	ldrb	r2, [r7, #16]
 8004b52:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	4413      	add	r3, r2
 8004b5a:	2b1b      	cmp	r3, #27
 8004b5c:	f200 8084 	bhi.w	8004c68 <lis2dw12_power_mode_get+0x160>
 8004b60:	a201      	add	r2, pc, #4	; (adr r2, 8004b68 <lis2dw12_power_mode_get+0x60>)
 8004b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b66:	bf00      	nop
 8004b68:	08004bf9 	.word	0x08004bf9
 8004b6c:	08004bf1 	.word	0x08004bf1
 8004b70:	08004be9 	.word	0x08004be9
 8004b74:	08004be1 	.word	0x08004be1
 8004b78:	08004bd9 	.word	0x08004bd9
 8004b7c:	08004c69 	.word	0x08004c69
 8004b80:	08004c69 	.word	0x08004c69
 8004b84:	08004c69 	.word	0x08004c69
 8004b88:	08004c19 	.word	0x08004c19
 8004b8c:	08004c11 	.word	0x08004c11
 8004b90:	08004c09 	.word	0x08004c09
 8004b94:	08004c01 	.word	0x08004c01
 8004b98:	08004c69 	.word	0x08004c69
 8004b9c:	08004c69 	.word	0x08004c69
 8004ba0:	08004c69 	.word	0x08004c69
 8004ba4:	08004c69 	.word	0x08004c69
 8004ba8:	08004c41 	.word	0x08004c41
 8004bac:	08004c39 	.word	0x08004c39
 8004bb0:	08004c31 	.word	0x08004c31
 8004bb4:	08004c29 	.word	0x08004c29
 8004bb8:	08004c21 	.word	0x08004c21
 8004bbc:	08004c69 	.word	0x08004c69
 8004bc0:	08004c69 	.word	0x08004c69
 8004bc4:	08004c69 	.word	0x08004c69
 8004bc8:	08004c61 	.word	0x08004c61
 8004bcc:	08004c59 	.word	0x08004c59
 8004bd0:	08004c51 	.word	0x08004c51
 8004bd4:	08004c49 	.word	0x08004c49
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2204      	movs	r2, #4
 8004bdc:	701a      	strb	r2, [r3, #0]
 8004bde:	e048      	b.n	8004c72 <lis2dw12_power_mode_get+0x16a>
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	2203      	movs	r2, #3
 8004be4:	701a      	strb	r2, [r3, #0]
 8004be6:	e044      	b.n	8004c72 <lis2dw12_power_mode_get+0x16a>
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	2202      	movs	r2, #2
 8004bec:	701a      	strb	r2, [r3, #0]
 8004bee:	e040      	b.n	8004c72 <lis2dw12_power_mode_get+0x16a>
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	701a      	strb	r2, [r3, #0]
 8004bf6:	e03c      	b.n	8004c72 <lis2dw12_power_mode_get+0x16a>
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	701a      	strb	r2, [r3, #0]
 8004bfe:	e038      	b.n	8004c72 <lis2dw12_power_mode_get+0x16a>
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	220b      	movs	r2, #11
 8004c04:	701a      	strb	r2, [r3, #0]
 8004c06:	e034      	b.n	8004c72 <lis2dw12_power_mode_get+0x16a>
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	220a      	movs	r2, #10
 8004c0c:	701a      	strb	r2, [r3, #0]
 8004c0e:	e030      	b.n	8004c72 <lis2dw12_power_mode_get+0x16a>
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	2209      	movs	r2, #9
 8004c14:	701a      	strb	r2, [r3, #0]
 8004c16:	e02c      	b.n	8004c72 <lis2dw12_power_mode_get+0x16a>
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	2208      	movs	r2, #8
 8004c1c:	701a      	strb	r2, [r3, #0]
 8004c1e:	e028      	b.n	8004c72 <lis2dw12_power_mode_get+0x16a>
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	2214      	movs	r2, #20
 8004c24:	701a      	strb	r2, [r3, #0]
 8004c26:	e024      	b.n	8004c72 <lis2dw12_power_mode_get+0x16a>
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	2213      	movs	r2, #19
 8004c2c:	701a      	strb	r2, [r3, #0]
 8004c2e:	e020      	b.n	8004c72 <lis2dw12_power_mode_get+0x16a>
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	2212      	movs	r2, #18
 8004c34:	701a      	strb	r2, [r3, #0]
 8004c36:	e01c      	b.n	8004c72 <lis2dw12_power_mode_get+0x16a>
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	2211      	movs	r2, #17
 8004c3c:	701a      	strb	r2, [r3, #0]
 8004c3e:	e018      	b.n	8004c72 <lis2dw12_power_mode_get+0x16a>
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	2210      	movs	r2, #16
 8004c44:	701a      	strb	r2, [r3, #0]
 8004c46:	e014      	b.n	8004c72 <lis2dw12_power_mode_get+0x16a>
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	221b      	movs	r2, #27
 8004c4c:	701a      	strb	r2, [r3, #0]
 8004c4e:	e010      	b.n	8004c72 <lis2dw12_power_mode_get+0x16a>
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	221a      	movs	r2, #26
 8004c54:	701a      	strb	r2, [r3, #0]
 8004c56:	e00c      	b.n	8004c72 <lis2dw12_power_mode_get+0x16a>
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	2219      	movs	r2, #25
 8004c5c:	701a      	strb	r2, [r3, #0]
 8004c5e:	e008      	b.n	8004c72 <lis2dw12_power_mode_get+0x16a>
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	2218      	movs	r2, #24
 8004c64:	701a      	strb	r2, [r3, #0]
 8004c66:	e004      	b.n	8004c72 <lis2dw12_power_mode_get+0x16a>
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	2204      	movs	r2, #4
 8004c6c:	701a      	strb	r2, [r3, #0]
 8004c6e:	e000      	b.n	8004c72 <lis2dw12_power_mode_get+0x16a>
 8004c70:	bf00      	nop
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	4618      	mov	r0, r3
 8004c76:	3718      	adds	r7, #24
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <lis2dw12_data_rate_set>:
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	460b      	mov	r3, r1
 8004c86:	70fb      	strb	r3, [r7, #3]
 8004c88:	f107 0210 	add.w	r2, r7, #16
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	2120      	movs	r1, #32
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff febb 	bl	8004a0c <lis2dw12_read_reg>
 8004c96:	6178      	str	r0, [r7, #20]
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10f      	bne.n	8004cbe <lis2dw12_data_rate_set+0x42>
 8004c9e:	78fb      	ldrb	r3, [r7, #3]
 8004ca0:	f003 030f 	and.w	r3, r3, #15
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	7c3b      	ldrb	r3, [r7, #16]
 8004ca8:	f362 1307 	bfi	r3, r2, #4, #4
 8004cac:	743b      	strb	r3, [r7, #16]
 8004cae:	f107 0210 	add.w	r2, r7, #16
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	2120      	movs	r1, #32
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7ff fec0 	bl	8004a3c <lis2dw12_write_reg>
 8004cbc:	6178      	str	r0, [r7, #20]
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d107      	bne.n	8004cd4 <lis2dw12_data_rate_set+0x58>
 8004cc4:	f107 020c 	add.w	r2, r7, #12
 8004cc8:	2301      	movs	r3, #1
 8004cca:	2122      	movs	r1, #34	; 0x22
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7ff fe9d 	bl	8004a0c <lis2dw12_read_reg>
 8004cd2:	6178      	str	r0, [r7, #20]
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d110      	bne.n	8004cfc <lis2dw12_data_rate_set+0x80>
 8004cda:	78fb      	ldrb	r3, [r7, #3]
 8004cdc:	091b      	lsrs	r3, r3, #4
 8004cde:	f003 0303 	and.w	r3, r3, #3
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	7b3b      	ldrb	r3, [r7, #12]
 8004ce6:	f362 0301 	bfi	r3, r2, #0, #2
 8004cea:	733b      	strb	r3, [r7, #12]
 8004cec:	f107 020c 	add.w	r2, r7, #12
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	2122      	movs	r1, #34	; 0x22
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7ff fea1 	bl	8004a3c <lis2dw12_write_reg>
 8004cfa:	6178      	str	r0, [r7, #20]
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3718      	adds	r7, #24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
	...

08004d08 <lis2dw12_data_rate_get>:
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
 8004d12:	f107 0210 	add.w	r2, r7, #16
 8004d16:	2301      	movs	r3, #1
 8004d18:	2120      	movs	r1, #32
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7ff fe76 	bl	8004a0c <lis2dw12_read_reg>
 8004d20:	6178      	str	r0, [r7, #20]
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f040 80b3 	bne.w	8004e90 <lis2dw12_data_rate_get+0x188>
 8004d2a:	f107 020c 	add.w	r2, r7, #12
 8004d2e:	2301      	movs	r3, #1
 8004d30:	2122      	movs	r1, #34	; 0x22
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7ff fe6a 	bl	8004a0c <lis2dw12_read_reg>
 8004d38:	6178      	str	r0, [r7, #20]
 8004d3a:	7b3b      	ldrb	r3, [r7, #12]
 8004d3c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	011b      	lsls	r3, r3, #4
 8004d44:	7c3a      	ldrb	r2, [r7, #16]
 8004d46:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	2b32      	cmp	r3, #50	; 0x32
 8004d50:	f200 809a 	bhi.w	8004e88 <lis2dw12_data_rate_get+0x180>
 8004d54:	a201      	add	r2, pc, #4	; (adr r2, 8004d5c <lis2dw12_data_rate_get+0x54>)
 8004d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5a:	bf00      	nop
 8004d5c:	08004e29 	.word	0x08004e29
 8004d60:	08004e31 	.word	0x08004e31
 8004d64:	08004e39 	.word	0x08004e39
 8004d68:	08004e41 	.word	0x08004e41
 8004d6c:	08004e49 	.word	0x08004e49
 8004d70:	08004e51 	.word	0x08004e51
 8004d74:	08004e59 	.word	0x08004e59
 8004d78:	08004e61 	.word	0x08004e61
 8004d7c:	08004e69 	.word	0x08004e69
 8004d80:	08004e71 	.word	0x08004e71
 8004d84:	08004e89 	.word	0x08004e89
 8004d88:	08004e89 	.word	0x08004e89
 8004d8c:	08004e89 	.word	0x08004e89
 8004d90:	08004e89 	.word	0x08004e89
 8004d94:	08004e89 	.word	0x08004e89
 8004d98:	08004e89 	.word	0x08004e89
 8004d9c:	08004e89 	.word	0x08004e89
 8004da0:	08004e89 	.word	0x08004e89
 8004da4:	08004e81 	.word	0x08004e81
 8004da8:	08004e89 	.word	0x08004e89
 8004dac:	08004e89 	.word	0x08004e89
 8004db0:	08004e89 	.word	0x08004e89
 8004db4:	08004e89 	.word	0x08004e89
 8004db8:	08004e89 	.word	0x08004e89
 8004dbc:	08004e89 	.word	0x08004e89
 8004dc0:	08004e89 	.word	0x08004e89
 8004dc4:	08004e89 	.word	0x08004e89
 8004dc8:	08004e89 	.word	0x08004e89
 8004dcc:	08004e89 	.word	0x08004e89
 8004dd0:	08004e89 	.word	0x08004e89
 8004dd4:	08004e89 	.word	0x08004e89
 8004dd8:	08004e89 	.word	0x08004e89
 8004ddc:	08004e89 	.word	0x08004e89
 8004de0:	08004e89 	.word	0x08004e89
 8004de4:	08004e89 	.word	0x08004e89
 8004de8:	08004e89 	.word	0x08004e89
 8004dec:	08004e89 	.word	0x08004e89
 8004df0:	08004e89 	.word	0x08004e89
 8004df4:	08004e89 	.word	0x08004e89
 8004df8:	08004e89 	.word	0x08004e89
 8004dfc:	08004e89 	.word	0x08004e89
 8004e00:	08004e89 	.word	0x08004e89
 8004e04:	08004e89 	.word	0x08004e89
 8004e08:	08004e89 	.word	0x08004e89
 8004e0c:	08004e89 	.word	0x08004e89
 8004e10:	08004e89 	.word	0x08004e89
 8004e14:	08004e89 	.word	0x08004e89
 8004e18:	08004e89 	.word	0x08004e89
 8004e1c:	08004e89 	.word	0x08004e89
 8004e20:	08004e89 	.word	0x08004e89
 8004e24:	08004e79 	.word	0x08004e79
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	701a      	strb	r2, [r3, #0]
 8004e2e:	e030      	b.n	8004e92 <lis2dw12_data_rate_get+0x18a>
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	2201      	movs	r2, #1
 8004e34:	701a      	strb	r2, [r3, #0]
 8004e36:	e02c      	b.n	8004e92 <lis2dw12_data_rate_get+0x18a>
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	701a      	strb	r2, [r3, #0]
 8004e3e:	e028      	b.n	8004e92 <lis2dw12_data_rate_get+0x18a>
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	2203      	movs	r2, #3
 8004e44:	701a      	strb	r2, [r3, #0]
 8004e46:	e024      	b.n	8004e92 <lis2dw12_data_rate_get+0x18a>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	2204      	movs	r2, #4
 8004e4c:	701a      	strb	r2, [r3, #0]
 8004e4e:	e020      	b.n	8004e92 <lis2dw12_data_rate_get+0x18a>
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	2205      	movs	r2, #5
 8004e54:	701a      	strb	r2, [r3, #0]
 8004e56:	e01c      	b.n	8004e92 <lis2dw12_data_rate_get+0x18a>
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	2206      	movs	r2, #6
 8004e5c:	701a      	strb	r2, [r3, #0]
 8004e5e:	e018      	b.n	8004e92 <lis2dw12_data_rate_get+0x18a>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	2207      	movs	r2, #7
 8004e64:	701a      	strb	r2, [r3, #0]
 8004e66:	e014      	b.n	8004e92 <lis2dw12_data_rate_get+0x18a>
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	2208      	movs	r2, #8
 8004e6c:	701a      	strb	r2, [r3, #0]
 8004e6e:	e010      	b.n	8004e92 <lis2dw12_data_rate_get+0x18a>
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	2209      	movs	r2, #9
 8004e74:	701a      	strb	r2, [r3, #0]
 8004e76:	e00c      	b.n	8004e92 <lis2dw12_data_rate_get+0x18a>
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	2232      	movs	r2, #50	; 0x32
 8004e7c:	701a      	strb	r2, [r3, #0]
 8004e7e:	e008      	b.n	8004e92 <lis2dw12_data_rate_get+0x18a>
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	2212      	movs	r2, #18
 8004e84:	701a      	strb	r2, [r3, #0]
 8004e86:	e004      	b.n	8004e92 <lis2dw12_data_rate_get+0x18a>
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	701a      	strb	r2, [r3, #0]
 8004e8e:	e000      	b.n	8004e92 <lis2dw12_data_rate_get+0x18a>
 8004e90:	bf00      	nop
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	4618      	mov	r0, r3
 8004e96:	3718      	adds	r7, #24
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <lis2dw12_block_data_update_set>:
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	70fb      	strb	r3, [r7, #3]
 8004ea8:	f107 0208 	add.w	r2, r7, #8
 8004eac:	2301      	movs	r3, #1
 8004eae:	2121      	movs	r1, #33	; 0x21
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7ff fdab 	bl	8004a0c <lis2dw12_read_reg>
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10f      	bne.n	8004ede <lis2dw12_block_data_update_set+0x42>
 8004ebe:	78fb      	ldrb	r3, [r7, #3]
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	7a3b      	ldrb	r3, [r7, #8]
 8004ec8:	f362 03c3 	bfi	r3, r2, #3, #1
 8004ecc:	723b      	strb	r3, [r7, #8]
 8004ece:	f107 0208 	add.w	r2, r7, #8
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	2121      	movs	r1, #33	; 0x21
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f7ff fdb0 	bl	8004a3c <lis2dw12_write_reg>
 8004edc:	60f8      	str	r0, [r7, #12]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <lis2dw12_full_scale_set>:
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	70fb      	strb	r3, [r7, #3]
 8004ef4:	f107 0208 	add.w	r2, r7, #8
 8004ef8:	2301      	movs	r3, #1
 8004efa:	2125      	movs	r1, #37	; 0x25
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f7ff fd85 	bl	8004a0c <lis2dw12_read_reg>
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10f      	bne.n	8004f2a <lis2dw12_full_scale_set+0x42>
 8004f0a:	78fb      	ldrb	r3, [r7, #3]
 8004f0c:	f003 0303 	and.w	r3, r3, #3
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	7a3b      	ldrb	r3, [r7, #8]
 8004f14:	f362 1305 	bfi	r3, r2, #4, #2
 8004f18:	723b      	strb	r3, [r7, #8]
 8004f1a:	f107 0208 	add.w	r2, r7, #8
 8004f1e:	2301      	movs	r3, #1
 8004f20:	2125      	movs	r1, #37	; 0x25
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7ff fd8a 	bl	8004a3c <lis2dw12_write_reg>
 8004f28:	60f8      	str	r0, [r7, #12]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <lis2dw12_full_scale_get>:
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
 8004f3e:	f107 0208 	add.w	r2, r7, #8
 8004f42:	2301      	movs	r3, #1
 8004f44:	2125      	movs	r1, #37	; 0x25
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7ff fd60 	bl	8004a0c <lis2dw12_read_reg>
 8004f4c:	60f8      	str	r0, [r7, #12]
 8004f4e:	7a3b      	ldrb	r3, [r7, #8]
 8004f50:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b03      	cmp	r3, #3
 8004f58:	d81a      	bhi.n	8004f90 <lis2dw12_full_scale_get+0x5c>
 8004f5a:	a201      	add	r2, pc, #4	; (adr r2, 8004f60 <lis2dw12_full_scale_get+0x2c>)
 8004f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f60:	08004f71 	.word	0x08004f71
 8004f64:	08004f79 	.word	0x08004f79
 8004f68:	08004f81 	.word	0x08004f81
 8004f6c:	08004f89 	.word	0x08004f89
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	2200      	movs	r2, #0
 8004f74:	701a      	strb	r2, [r3, #0]
 8004f76:	e00f      	b.n	8004f98 <lis2dw12_full_scale_get+0x64>
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	701a      	strb	r2, [r3, #0]
 8004f7e:	e00b      	b.n	8004f98 <lis2dw12_full_scale_get+0x64>
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	2202      	movs	r2, #2
 8004f84:	701a      	strb	r2, [r3, #0]
 8004f86:	e007      	b.n	8004f98 <lis2dw12_full_scale_get+0x64>
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	2203      	movs	r2, #3
 8004f8c:	701a      	strb	r2, [r3, #0]
 8004f8e:	e003      	b.n	8004f98 <lis2dw12_full_scale_get+0x64>
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	2200      	movs	r2, #0
 8004f94:	701a      	strb	r2, [r3, #0]
 8004f96:	bf00      	nop
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop

08004fa4 <lis2dw12_acceleration_raw_get>:
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
 8004fae:	f107 020c 	add.w	r2, r7, #12
 8004fb2:	2306      	movs	r3, #6
 8004fb4:	2128      	movs	r1, #40	; 0x28
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7ff fd28 	bl	8004a0c <lis2dw12_read_reg>
 8004fbc:	6178      	str	r0, [r7, #20]
 8004fbe:	7b7b      	ldrb	r3, [r7, #13]
 8004fc0:	b21a      	sxth	r2, r3
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	801a      	strh	r2, [r3, #0]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	021b      	lsls	r3, r3, #8
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	7b3b      	ldrb	r3, [r7, #12]
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	4413      	add	r3, r2
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	b21a      	sxth	r2, r3
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	801a      	strh	r2, [r3, #0]
 8004fe0:	7bfa      	ldrb	r2, [r7, #15]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	3302      	adds	r3, #2
 8004fe6:	b212      	sxth	r2, r2
 8004fe8:	801a      	strh	r2, [r3, #0]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	3302      	adds	r3, #2
 8004fee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	021b      	lsls	r3, r3, #8
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	7bbb      	ldrb	r3, [r7, #14]
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	4413      	add	r3, r2
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	3302      	adds	r3, #2
 8005004:	b212      	sxth	r2, r2
 8005006:	801a      	strh	r2, [r3, #0]
 8005008:	7c7a      	ldrb	r2, [r7, #17]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	3304      	adds	r3, #4
 800500e:	b212      	sxth	r2, r2
 8005010:	801a      	strh	r2, [r3, #0]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	3304      	adds	r3, #4
 8005016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800501a:	b29b      	uxth	r3, r3
 800501c:	021b      	lsls	r3, r3, #8
 800501e:	b29a      	uxth	r2, r3
 8005020:	7c3b      	ldrb	r3, [r7, #16]
 8005022:	b29b      	uxth	r3, r3
 8005024:	4413      	add	r3, r2
 8005026:	b29a      	uxth	r2, r3
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	3304      	adds	r3, #4
 800502c:	b212      	sxth	r2, r2
 800502e:	801a      	strh	r2, [r3, #0]
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	4618      	mov	r0, r3
 8005034:	3718      	adds	r7, #24
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <lis2dw12_device_id_get>:
 800503a:	b580      	push	{r7, lr}
 800503c:	b084      	sub	sp, #16
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	6039      	str	r1, [r7, #0]
 8005044:	2301      	movs	r3, #1
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	210f      	movs	r1, #15
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7ff fcde 	bl	8004a0c <lis2dw12_read_reg>
 8005050:	60f8      	str	r0, [r7, #12]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <lis2dw12_auto_increment_set>:
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	460b      	mov	r3, r1
 8005066:	70fb      	strb	r3, [r7, #3]
 8005068:	f107 0208 	add.w	r2, r7, #8
 800506c:	2301      	movs	r3, #1
 800506e:	2121      	movs	r1, #33	; 0x21
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f7ff fccb 	bl	8004a0c <lis2dw12_read_reg>
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10f      	bne.n	800509e <lis2dw12_auto_increment_set+0x42>
 800507e:	78fb      	ldrb	r3, [r7, #3]
 8005080:	f003 0301 	and.w	r3, r3, #1
 8005084:	b2da      	uxtb	r2, r3
 8005086:	7a3b      	ldrb	r3, [r7, #8]
 8005088:	f362 0382 	bfi	r3, r2, #2, #1
 800508c:	723b      	strb	r3, [r7, #8]
 800508e:	f107 0208 	add.w	r2, r7, #8
 8005092:	2301      	movs	r3, #1
 8005094:	2121      	movs	r1, #33	; 0x21
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7ff fcd0 	bl	8004a3c <lis2dw12_write_reg>
 800509c:	60f8      	str	r0, [r7, #12]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <lis2dw12_fifo_mode_set>:
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	460b      	mov	r3, r1
 80050b2:	70fb      	strb	r3, [r7, #3]
 80050b4:	f107 0208 	add.w	r2, r7, #8
 80050b8:	2301      	movs	r3, #1
 80050ba:	212e      	movs	r1, #46	; 0x2e
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f7ff fca5 	bl	8004a0c <lis2dw12_read_reg>
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10f      	bne.n	80050ea <lis2dw12_fifo_mode_set+0x42>
 80050ca:	78fb      	ldrb	r3, [r7, #3]
 80050cc:	f003 0307 	and.w	r3, r3, #7
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	7a3b      	ldrb	r3, [r7, #8]
 80050d4:	f362 1347 	bfi	r3, r2, #5, #3
 80050d8:	723b      	strb	r3, [r7, #8]
 80050da:	f107 0208 	add.w	r2, r7, #8
 80050de:	2301      	movs	r3, #1
 80050e0:	212e      	movs	r1, #46	; 0x2e
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7ff fcaa 	bl	8004a3c <lis2dw12_write_reg>
 80050e8:	60f8      	str	r0, [r7, #12]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4618      	mov	r0, r3
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <LIS2MDL_RegisterBusIO>:
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
 80050fe:	2300      	movs	r3, #0
 8005100:	60fb      	str	r3, [r7, #12]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d103      	bne.n	8005110 <LIS2MDL_RegisterBusIO+0x1c>
 8005108:	f04f 33ff 	mov.w	r3, #4294967295
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	e05d      	b.n	80051cc <LIS2MDL_RegisterBusIO+0xd8>
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	605a      	str	r2, [r3, #4]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	609a      	str	r2, [r3, #8]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	7b1a      	ldrb	r2, [r3, #12]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	731a      	strb	r2, [r3, #12]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	691a      	ldr	r2, [r3, #16]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	611a      	str	r2, [r3, #16]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	695a      	ldr	r2, [r3, #20]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	615a      	str	r2, [r3, #20]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	699a      	ldr	r2, [r3, #24]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	619a      	str	r2, [r3, #24]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a23      	ldr	r2, [pc, #140]	; (80051d8 <LIS2MDL_RegisterBusIO+0xe4>)
 800514c:	621a      	str	r2, [r3, #32]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a22      	ldr	r2, [pc, #136]	; (80051dc <LIS2MDL_RegisterBusIO+0xe8>)
 8005152:	61da      	str	r2, [r3, #28]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	625a      	str	r2, [r3, #36]	; 0x24
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d103      	bne.n	800516a <LIS2MDL_RegisterBusIO+0x76>
 8005162:	f04f 33ff 	mov.w	r3, #4294967295
 8005166:	60fb      	str	r3, [r7, #12]
 8005168:	e030      	b.n	80051cc <LIS2MDL_RegisterBusIO+0xd8>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4798      	blx	r3
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <LIS2MDL_RegisterBusIO+0x8a>
 8005176:	f04f 33ff 	mov.w	r3, #4294967295
 800517a:	60fb      	str	r3, [r7, #12]
 800517c:	e026      	b.n	80051cc <LIS2MDL_RegisterBusIO+0xd8>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d022      	beq.n	80051cc <LIS2MDL_RegisterBusIO+0xd8>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800518c:	2b00      	cmp	r3, #0
 800518e:	d11d      	bne.n	80051cc <LIS2MDL_RegisterBusIO+0xd8>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d10d      	bne.n	80051b4 <LIS2MDL_RegisterBusIO+0xc0>
 8005198:	2334      	movs	r3, #52	; 0x34
 800519a:	72fb      	strb	r3, [r7, #11]
 800519c:	7afb      	ldrb	r3, [r7, #11]
 800519e:	461a      	mov	r2, r3
 80051a0:	2162      	movs	r1, #98	; 0x62
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fa15 	bl	80055d2 <LIS2MDL_Write_Reg>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00e      	beq.n	80051cc <LIS2MDL_RegisterBusIO+0xd8>
 80051ae:	f04f 33ff 	mov.w	r3, #4294967295
 80051b2:	e00c      	b.n	80051ce <LIS2MDL_RegisterBusIO+0xda>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	331c      	adds	r3, #28
 80051b8:	2101      	movs	r1, #1
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 fbe2 	bl	8005984 <lis2mdl_i2c_interface_set>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d002      	beq.n	80051cc <LIS2MDL_RegisterBusIO+0xd8>
 80051c6:	f04f 33ff 	mov.w	r3, #4294967295
 80051ca:	e000      	b.n	80051ce <LIS2MDL_RegisterBusIO+0xda>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	08005609 	.word	0x08005609
 80051dc:	0800566b 	.word	0x0800566b

080051e0 <LIS2MDL_Init>:
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	331c      	adds	r3, #28
 80051ec:	2101      	movs	r1, #1
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 fb20 	bl	8005834 <lis2mdl_block_data_update_set>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d002      	beq.n	8005200 <LIS2MDL_Init+0x20>
 80051fa:	f04f 33ff 	mov.w	r3, #4294967295
 80051fe:	e028      	b.n	8005252 <LIS2MDL_Init+0x72>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	331c      	adds	r3, #28
 8005204:	2102      	movs	r1, #2
 8005206:	4618      	mov	r0, r3
 8005208:	f000 fa90 	bl	800572c <lis2mdl_operating_mode_set>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d002      	beq.n	8005218 <LIS2MDL_Init+0x38>
 8005212:	f04f 33ff 	mov.w	r3, #4294967295
 8005216:	e01c      	b.n	8005252 <LIS2MDL_Init+0x72>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	331c      	adds	r3, #28
 800521c:	2103      	movs	r1, #3
 800521e:	4618      	mov	r0, r3
 8005220:	f000 faaa 	bl	8005778 <lis2mdl_data_rate_set>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d002      	beq.n	8005230 <LIS2MDL_Init+0x50>
 800522a:	f04f 33ff 	mov.w	r3, #4294967295
 800522e:	e010      	b.n	8005252 <LIS2MDL_Init+0x72>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	331c      	adds	r3, #28
 8005234:	2100      	movs	r1, #0
 8005236:	4618      	mov	r0, r3
 8005238:	f000 fb7e 	bl	8005938 <lis2mdl_self_test_set>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d002      	beq.n	8005248 <LIS2MDL_Init+0x68>
 8005242:	f04f 33ff 	mov.w	r3, #4294967295
 8005246:	e004      	b.n	8005252 <LIS2MDL_Init+0x72>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005250:	2300      	movs	r3, #0
 8005252:	4618      	mov	r0, r3
 8005254:	3708      	adds	r7, #8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <LIS2MDL_DeInit>:
 800525a:	b580      	push	{r7, lr}
 800525c:	b082      	sub	sp, #8
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f874 	bl	8005350 <LIS2MDL_MAG_Disable>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d002      	beq.n	8005274 <LIS2MDL_DeInit+0x1a>
 800526e:	f04f 33ff 	mov.w	r3, #4294967295
 8005272:	e004      	b.n	800527e <LIS2MDL_DeInit+0x24>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800527c:	2300      	movs	r3, #0
 800527e:	4618      	mov	r0, r3
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <LIS2MDL_ReadID>:
 8005286:	b580      	push	{r7, lr}
 8005288:	b082      	sub	sp, #8
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
 800528e:	6039      	str	r1, [r7, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	331c      	adds	r3, #28
 8005294:	6839      	ldr	r1, [r7, #0]
 8005296:	4618      	mov	r0, r3
 8005298:	f000 fb3d 	bl	8005916 <lis2mdl_device_id_get>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <LIS2MDL_ReadID+0x22>
 80052a2:	f04f 33ff 	mov.w	r3, #4294967295
 80052a6:	e000      	b.n	80052aa <LIS2MDL_ReadID+0x24>
 80052a8:	2300      	movs	r3, #0
 80052aa:	4618      	mov	r0, r3
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
	...

080052b4 <LIS2MDL_GetCapabilities>:
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2200      	movs	r2, #0
 80052c2:	701a      	strb	r2, [r3, #0]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2200      	movs	r2, #0
 80052c8:	705a      	strb	r2, [r3, #1]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2201      	movs	r2, #1
 80052ce:	709a      	strb	r2, [r3, #2]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	2200      	movs	r2, #0
 80052d4:	70da      	strb	r2, [r3, #3]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2200      	movs	r2, #0
 80052da:	605a      	str	r2, [r3, #4]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	2200      	movs	r2, #0
 80052e0:	609a      	str	r2, [r3, #8]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2232      	movs	r2, #50	; 0x32
 80052e6:	60da      	str	r2, [r3, #12]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	f04f 0200 	mov.w	r2, #0
 80052ee:	611a      	str	r2, [r3, #16]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	f04f 0200 	mov.w	r2, #0
 80052f6:	615a      	str	r2, [r3, #20]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	4a04      	ldr	r2, [pc, #16]	; (800530c <LIS2MDL_GetCapabilities+0x58>)
 80052fc:	619a      	str	r2, [r3, #24]
 80052fe:	2300      	movs	r3, #0
 8005300:	4618      	mov	r0, r3
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	42c80000 	.word	0x42c80000

08005310 <LIS2MDL_MAG_Enable>:
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800531e:	2b01      	cmp	r3, #1
 8005320:	d101      	bne.n	8005326 <LIS2MDL_MAG_Enable+0x16>
 8005322:	2300      	movs	r3, #0
 8005324:	e010      	b.n	8005348 <LIS2MDL_MAG_Enable+0x38>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	331c      	adds	r3, #28
 800532a:	2100      	movs	r1, #0
 800532c:	4618      	mov	r0, r3
 800532e:	f000 f9fd 	bl	800572c <lis2mdl_operating_mode_set>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <LIS2MDL_MAG_Enable+0x2e>
 8005338:	f04f 33ff 	mov.w	r3, #4294967295
 800533c:	e004      	b.n	8005348 <LIS2MDL_MAG_Enable+0x38>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005346:	2300      	movs	r3, #0
 8005348:	4618      	mov	r0, r3
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <LIS2MDL_MAG_Disable>:
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <LIS2MDL_MAG_Disable+0x16>
 8005362:	2300      	movs	r3, #0
 8005364:	e010      	b.n	8005388 <LIS2MDL_MAG_Disable+0x38>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	331c      	adds	r3, #28
 800536a:	2102      	movs	r1, #2
 800536c:	4618      	mov	r0, r3
 800536e:	f000 f9dd 	bl	800572c <lis2mdl_operating_mode_set>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d002      	beq.n	800537e <LIS2MDL_MAG_Disable+0x2e>
 8005378:	f04f 33ff 	mov.w	r3, #4294967295
 800537c:	e004      	b.n	8005388 <LIS2MDL_MAG_Disable+0x38>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005386:	2300      	movs	r3, #0
 8005388:	4618      	mov	r0, r3
 800538a:	3708      	adds	r7, #8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <LIS2MDL_MAG_GetSensitivity>:
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	2300      	movs	r3, #0
 80053a4:	4618      	mov	r0, r3
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <LIS2MDL_MAG_GetOutputDataRate>:
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
 80053ba:	2300      	movs	r3, #0
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	331c      	adds	r3, #28
 80053c2:	f107 020b 	add.w	r2, r7, #11
 80053c6:	4611      	mov	r1, r2
 80053c8:	4618      	mov	r0, r3
 80053ca:	f000 f9fb 	bl	80057c4 <lis2mdl_data_rate_get>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d002      	beq.n	80053da <LIS2MDL_MAG_GetOutputDataRate+0x2a>
 80053d4:	f04f 33ff 	mov.w	r3, #4294967295
 80053d8:	e023      	b.n	8005422 <LIS2MDL_MAG_GetOutputDataRate+0x72>
 80053da:	7afb      	ldrb	r3, [r7, #11]
 80053dc:	2b03      	cmp	r3, #3
 80053de:	d81b      	bhi.n	8005418 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 80053e0:	a201      	add	r2, pc, #4	; (adr r2, 80053e8 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 80053e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e6:	bf00      	nop
 80053e8:	080053f9 	.word	0x080053f9
 80053ec:	08005401 	.word	0x08005401
 80053f0:	08005409 	.word	0x08005409
 80053f4:	08005411 	.word	0x08005411
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	4a0c      	ldr	r2, [pc, #48]	; (800542c <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	e00f      	b.n	8005420 <LIS2MDL_MAG_GetOutputDataRate+0x70>
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	4a0b      	ldr	r2, [pc, #44]	; (8005430 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8005404:	601a      	str	r2, [r3, #0]
 8005406:	e00b      	b.n	8005420 <LIS2MDL_MAG_GetOutputDataRate+0x70>
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	4a0a      	ldr	r2, [pc, #40]	; (8005434 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	e007      	b.n	8005420 <LIS2MDL_MAG_GetOutputDataRate+0x70>
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	4a09      	ldr	r2, [pc, #36]	; (8005438 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8005414:	601a      	str	r2, [r3, #0]
 8005416:	e003      	b.n	8005420 <LIS2MDL_MAG_GetOutputDataRate+0x70>
 8005418:	f04f 33ff 	mov.w	r3, #4294967295
 800541c:	60fb      	str	r3, [r7, #12]
 800541e:	bf00      	nop
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	41200000 	.word	0x41200000
 8005430:	41a00000 	.word	0x41a00000
 8005434:	42480000 	.word	0x42480000
 8005438:	42c80000 	.word	0x42c80000

0800543c <LIS2MDL_MAG_SetOutputDataRate>:
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	ed87 0a00 	vstr	s0, [r7]
 8005448:	edd7 7a00 	vldr	s15, [r7]
 800544c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005450:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005458:	d801      	bhi.n	800545e <LIS2MDL_MAG_SetOutputDataRate+0x22>
 800545a:	2300      	movs	r3, #0
 800545c:	e016      	b.n	800548c <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800545e:	edd7 7a00 	vldr	s15, [r7]
 8005462:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005466:	eef4 7ac7 	vcmpe.f32	s15, s14
 800546a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800546e:	d801      	bhi.n	8005474 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8005470:	2301      	movs	r3, #1
 8005472:	e00b      	b.n	800548c <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8005474:	edd7 7a00 	vldr	s15, [r7]
 8005478:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80054b4 <LIS2MDL_MAG_SetOutputDataRate+0x78>
 800547c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005484:	d801      	bhi.n	800548a <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 8005486:	2302      	movs	r3, #2
 8005488:	e000      	b.n	800548c <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800548a:	2303      	movs	r3, #3
 800548c:	73fb      	strb	r3, [r7, #15]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	331c      	adds	r3, #28
 8005492:	7bfa      	ldrb	r2, [r7, #15]
 8005494:	4611      	mov	r1, r2
 8005496:	4618      	mov	r0, r3
 8005498:	f000 f96e 	bl	8005778 <lis2mdl_data_rate_set>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <LIS2MDL_MAG_SetOutputDataRate+0x6c>
 80054a2:	f04f 33ff 	mov.w	r3, #4294967295
 80054a6:	e000      	b.n	80054aa <LIS2MDL_MAG_SetOutputDataRate+0x6e>
 80054a8:	2300      	movs	r3, #0
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	42480000 	.word	0x42480000

080054b8 <LIS2MDL_MAG_GetFullScale>:
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2232      	movs	r2, #50	; 0x32
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	2300      	movs	r3, #0
 80054ca:	4618      	mov	r0, r3
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <LIS2MDL_MAG_SetFullScale>:
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	6039      	str	r1, [r7, #0]
 80054e0:	2300      	movs	r3, #0
 80054e2:	4618      	mov	r0, r3
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <LIS2MDL_MAG_GetAxesRaw>:
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b084      	sub	sp, #16
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	6039      	str	r1, [r7, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	331c      	adds	r3, #28
 80054fc:	f107 0208 	add.w	r2, r7, #8
 8005500:	4611      	mov	r1, r2
 8005502:	4618      	mov	r0, r3
 8005504:	f000 f9bc 	bl	8005880 <lis2mdl_magnetic_raw_get>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d002      	beq.n	8005514 <LIS2MDL_MAG_GetAxesRaw+0x26>
 800550e:	f04f 33ff 	mov.w	r3, #4294967295
 8005512:	e00c      	b.n	800552e <LIS2MDL_MAG_GetAxesRaw+0x40>
 8005514:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	801a      	strh	r2, [r3, #0]
 800551c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	805a      	strh	r2, [r3, #2]
 8005524:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	809a      	strh	r2, [r3, #4]
 800552c:	2300      	movs	r3, #0
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <LIS2MDL_MAG_GetAxes>:
 8005536:	b580      	push	{r7, lr}
 8005538:	b086      	sub	sp, #24
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	6039      	str	r1, [r7, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	331c      	adds	r3, #28
 8005544:	f107 0210 	add.w	r2, r7, #16
 8005548:	4611      	mov	r1, r2
 800554a:	4618      	mov	r0, r3
 800554c:	f000 f998 	bl	8005880 <lis2mdl_magnetic_raw_get>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d002      	beq.n	800555c <LIS2MDL_MAG_GetAxes+0x26>
 8005556:	f04f 33ff 	mov.w	r3, #4294967295
 800555a:	e036      	b.n	80055ca <LIS2MDL_MAG_GetAxes+0x94>
 800555c:	f107 030c 	add.w	r3, r7, #12
 8005560:	4619      	mov	r1, r3
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7ff ff14 	bl	8005390 <LIS2MDL_MAG_GetSensitivity>
 8005568:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800556c:	ee07 3a90 	vmov	s15, r3
 8005570:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005574:	edd7 7a03 	vldr	s15, [r7, #12]
 8005578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800557c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005580:	ee17 2a90 	vmov	r2, s15
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800558c:	ee07 3a90 	vmov	s15, r3
 8005590:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005594:	edd7 7a03 	vldr	s15, [r7, #12]
 8005598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800559c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055a0:	ee17 2a90 	vmov	r2, s15
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	605a      	str	r2, [r3, #4]
 80055a8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80055ac:	ee07 3a90 	vmov	s15, r3
 80055b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80055b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055c0:	ee17 2a90 	vmov	r2, s15
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	609a      	str	r2, [r3, #8]
 80055c8:	2300      	movs	r3, #0
 80055ca:	4618      	mov	r0, r3
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <LIS2MDL_Write_Reg>:
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b082      	sub	sp, #8
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
 80055da:	460b      	mov	r3, r1
 80055dc:	70fb      	strb	r3, [r7, #3]
 80055de:	4613      	mov	r3, r2
 80055e0:	70bb      	strb	r3, [r7, #2]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f103 001c 	add.w	r0, r3, #28
 80055e8:	1cba      	adds	r2, r7, #2
 80055ea:	78f9      	ldrb	r1, [r7, #3]
 80055ec:	2301      	movs	r3, #1
 80055ee:	f000 f885 	bl	80056fc <lis2mdl_write_reg>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d002      	beq.n	80055fe <LIS2MDL_Write_Reg+0x2c>
 80055f8:	f04f 33ff 	mov.w	r3, #4294967295
 80055fc:	e000      	b.n	8005600 <LIS2MDL_Write_Reg+0x2e>
 80055fe:	2300      	movs	r3, #0
 8005600:	4618      	mov	r0, r3
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <ReadMagRegWrap>:
 8005608:	b590      	push	{r4, r7, lr}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	607a      	str	r2, [r7, #4]
 8005612:	461a      	mov	r2, r3
 8005614:	460b      	mov	r3, r1
 8005616:	72fb      	strb	r3, [r7, #11]
 8005618:	4613      	mov	r3, r2
 800561a:	813b      	strh	r3, [r7, #8]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	617b      	str	r3, [r7, #20]
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10e      	bne.n	8005646 <ReadMagRegWrap+0x3e>
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	695c      	ldr	r4, [r3, #20]
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	7b1b      	ldrb	r3, [r3, #12]
 8005630:	b298      	uxth	r0, r3
 8005632:	7afb      	ldrb	r3, [r7, #11]
 8005634:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005638:	b2db      	uxtb	r3, r3
 800563a:	b299      	uxth	r1, r3
 800563c:	893b      	ldrh	r3, [r7, #8]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	47a0      	blx	r4
 8005642:	4603      	mov	r3, r0
 8005644:	e00d      	b.n	8005662 <ReadMagRegWrap+0x5a>
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	695c      	ldr	r4, [r3, #20]
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	7b1b      	ldrb	r3, [r3, #12]
 800564e:	b298      	uxth	r0, r3
 8005650:	7afb      	ldrb	r3, [r7, #11]
 8005652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005656:	b2db      	uxtb	r3, r3
 8005658:	b299      	uxth	r1, r3
 800565a:	893b      	ldrh	r3, [r7, #8]
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	47a0      	blx	r4
 8005660:	4603      	mov	r3, r0
 8005662:	4618      	mov	r0, r3
 8005664:	371c      	adds	r7, #28
 8005666:	46bd      	mov	sp, r7
 8005668:	bd90      	pop	{r4, r7, pc}

0800566a <WriteMagRegWrap>:
 800566a:	b590      	push	{r4, r7, lr}
 800566c:	b087      	sub	sp, #28
 800566e:	af00      	add	r7, sp, #0
 8005670:	60f8      	str	r0, [r7, #12]
 8005672:	607a      	str	r2, [r7, #4]
 8005674:	461a      	mov	r2, r3
 8005676:	460b      	mov	r3, r1
 8005678:	72fb      	strb	r3, [r7, #11]
 800567a:	4613      	mov	r3, r2
 800567c:	813b      	strh	r3, [r7, #8]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10e      	bne.n	80056a8 <WriteMagRegWrap+0x3e>
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	691c      	ldr	r4, [r3, #16]
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	7b1b      	ldrb	r3, [r3, #12]
 8005692:	b298      	uxth	r0, r3
 8005694:	7afb      	ldrb	r3, [r7, #11]
 8005696:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800569a:	b2db      	uxtb	r3, r3
 800569c:	b299      	uxth	r1, r3
 800569e:	893b      	ldrh	r3, [r7, #8]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	47a0      	blx	r4
 80056a4:	4603      	mov	r3, r0
 80056a6:	e00d      	b.n	80056c4 <WriteMagRegWrap+0x5a>
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	691c      	ldr	r4, [r3, #16]
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	7b1b      	ldrb	r3, [r3, #12]
 80056b0:	b298      	uxth	r0, r3
 80056b2:	7afb      	ldrb	r3, [r7, #11]
 80056b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	b299      	uxth	r1, r3
 80056bc:	893b      	ldrh	r3, [r7, #8]
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	47a0      	blx	r4
 80056c2:	4603      	mov	r3, r0
 80056c4:	4618      	mov	r0, r3
 80056c6:	371c      	adds	r7, #28
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd90      	pop	{r4, r7, pc}

080056cc <lis2mdl_read_reg>:
 80056cc:	b590      	push	{r4, r7, lr}
 80056ce:	b087      	sub	sp, #28
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	607a      	str	r2, [r7, #4]
 80056d6:	461a      	mov	r2, r3
 80056d8:	460b      	mov	r3, r1
 80056da:	72fb      	strb	r3, [r7, #11]
 80056dc:	4613      	mov	r3, r2
 80056de:	813b      	strh	r3, [r7, #8]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	685c      	ldr	r4, [r3, #4]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6898      	ldr	r0, [r3, #8]
 80056e8:	893b      	ldrh	r3, [r7, #8]
 80056ea:	7af9      	ldrb	r1, [r7, #11]
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	47a0      	blx	r4
 80056f0:	6178      	str	r0, [r7, #20]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	4618      	mov	r0, r3
 80056f6:	371c      	adds	r7, #28
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd90      	pop	{r4, r7, pc}

080056fc <lis2mdl_write_reg>:
 80056fc:	b590      	push	{r4, r7, lr}
 80056fe:	b087      	sub	sp, #28
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	607a      	str	r2, [r7, #4]
 8005706:	461a      	mov	r2, r3
 8005708:	460b      	mov	r3, r1
 800570a:	72fb      	strb	r3, [r7, #11]
 800570c:	4613      	mov	r3, r2
 800570e:	813b      	strh	r3, [r7, #8]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681c      	ldr	r4, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6898      	ldr	r0, [r3, #8]
 8005718:	893b      	ldrh	r3, [r7, #8]
 800571a:	7af9      	ldrb	r1, [r7, #11]
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	47a0      	blx	r4
 8005720:	6178      	str	r0, [r7, #20]
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	4618      	mov	r0, r3
 8005726:	371c      	adds	r7, #28
 8005728:	46bd      	mov	sp, r7
 800572a:	bd90      	pop	{r4, r7, pc}

0800572c <lis2mdl_operating_mode_set>:
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	460b      	mov	r3, r1
 8005736:	70fb      	strb	r3, [r7, #3]
 8005738:	f107 0208 	add.w	r2, r7, #8
 800573c:	2301      	movs	r3, #1
 800573e:	2160      	movs	r1, #96	; 0x60
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7ff ffc3 	bl	80056cc <lis2mdl_read_reg>
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10f      	bne.n	800576e <lis2mdl_operating_mode_set+0x42>
 800574e:	78fb      	ldrb	r3, [r7, #3]
 8005750:	f003 0303 	and.w	r3, r3, #3
 8005754:	b2da      	uxtb	r2, r3
 8005756:	7a3b      	ldrb	r3, [r7, #8]
 8005758:	f362 0301 	bfi	r3, r2, #0, #2
 800575c:	723b      	strb	r3, [r7, #8]
 800575e:	f107 0208 	add.w	r2, r7, #8
 8005762:	2301      	movs	r3, #1
 8005764:	2160      	movs	r1, #96	; 0x60
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7ff ffc8 	bl	80056fc <lis2mdl_write_reg>
 800576c:	60f8      	str	r0, [r7, #12]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <lis2mdl_data_rate_set>:
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	460b      	mov	r3, r1
 8005782:	70fb      	strb	r3, [r7, #3]
 8005784:	f107 0208 	add.w	r2, r7, #8
 8005788:	2301      	movs	r3, #1
 800578a:	2160      	movs	r1, #96	; 0x60
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f7ff ff9d 	bl	80056cc <lis2mdl_read_reg>
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10f      	bne.n	80057ba <lis2mdl_data_rate_set+0x42>
 800579a:	78fb      	ldrb	r3, [r7, #3]
 800579c:	f003 0303 	and.w	r3, r3, #3
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	7a3b      	ldrb	r3, [r7, #8]
 80057a4:	f362 0383 	bfi	r3, r2, #2, #2
 80057a8:	723b      	strb	r3, [r7, #8]
 80057aa:	f107 0208 	add.w	r2, r7, #8
 80057ae:	2301      	movs	r3, #1
 80057b0:	2160      	movs	r1, #96	; 0x60
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f7ff ffa2 	bl	80056fc <lis2mdl_write_reg>
 80057b8:	60f8      	str	r0, [r7, #12]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <lis2mdl_data_rate_get>:
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
 80057ce:	f107 0208 	add.w	r2, r7, #8
 80057d2:	2301      	movs	r3, #1
 80057d4:	2160      	movs	r1, #96	; 0x60
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7ff ff78 	bl	80056cc <lis2mdl_read_reg>
 80057dc:	60f8      	str	r0, [r7, #12]
 80057de:	7a3b      	ldrb	r3, [r7, #8]
 80057e0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b03      	cmp	r3, #3
 80057e8:	d81a      	bhi.n	8005820 <lis2mdl_data_rate_get+0x5c>
 80057ea:	a201      	add	r2, pc, #4	; (adr r2, 80057f0 <lis2mdl_data_rate_get+0x2c>)
 80057ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f0:	08005801 	.word	0x08005801
 80057f4:	08005809 	.word	0x08005809
 80057f8:	08005811 	.word	0x08005811
 80057fc:	08005819 	.word	0x08005819
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	2200      	movs	r2, #0
 8005804:	701a      	strb	r2, [r3, #0]
 8005806:	e00f      	b.n	8005828 <lis2mdl_data_rate_get+0x64>
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	2201      	movs	r2, #1
 800580c:	701a      	strb	r2, [r3, #0]
 800580e:	e00b      	b.n	8005828 <lis2mdl_data_rate_get+0x64>
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	2202      	movs	r2, #2
 8005814:	701a      	strb	r2, [r3, #0]
 8005816:	e007      	b.n	8005828 <lis2mdl_data_rate_get+0x64>
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	2203      	movs	r2, #3
 800581c:	701a      	strb	r2, [r3, #0]
 800581e:	e003      	b.n	8005828 <lis2mdl_data_rate_get+0x64>
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	2200      	movs	r2, #0
 8005824:	701a      	strb	r2, [r3, #0]
 8005826:	bf00      	nop
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop

08005834 <lis2mdl_block_data_update_set>:
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	460b      	mov	r3, r1
 800583e:	70fb      	strb	r3, [r7, #3]
 8005840:	f107 0208 	add.w	r2, r7, #8
 8005844:	2301      	movs	r3, #1
 8005846:	2162      	movs	r1, #98	; 0x62
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f7ff ff3f 	bl	80056cc <lis2mdl_read_reg>
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10f      	bne.n	8005876 <lis2mdl_block_data_update_set+0x42>
 8005856:	78fb      	ldrb	r3, [r7, #3]
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	b2da      	uxtb	r2, r3
 800585e:	7a3b      	ldrb	r3, [r7, #8]
 8005860:	f362 1304 	bfi	r3, r2, #4, #1
 8005864:	723b      	strb	r3, [r7, #8]
 8005866:	f107 0208 	add.w	r2, r7, #8
 800586a:	2301      	movs	r3, #1
 800586c:	2162      	movs	r1, #98	; 0x62
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7ff ff44 	bl	80056fc <lis2mdl_write_reg>
 8005874:	60f8      	str	r0, [r7, #12]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <lis2mdl_magnetic_raw_get>:
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
 800588a:	f107 020c 	add.w	r2, r7, #12
 800588e:	2306      	movs	r3, #6
 8005890:	2168      	movs	r1, #104	; 0x68
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7ff ff1a 	bl	80056cc <lis2mdl_read_reg>
 8005898:	6178      	str	r0, [r7, #20]
 800589a:	7b7b      	ldrb	r3, [r7, #13]
 800589c:	b21a      	sxth	r2, r3
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	801a      	strh	r2, [r3, #0]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	021b      	lsls	r3, r3, #8
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	7b3b      	ldrb	r3, [r7, #12]
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	4413      	add	r3, r2
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	b21a      	sxth	r2, r3
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	801a      	strh	r2, [r3, #0]
 80058bc:	7bfa      	ldrb	r2, [r7, #15]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	3302      	adds	r3, #2
 80058c2:	b212      	sxth	r2, r2
 80058c4:	801a      	strh	r2, [r3, #0]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	3302      	adds	r3, #2
 80058ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	021b      	lsls	r3, r3, #8
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	7bbb      	ldrb	r3, [r7, #14]
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	4413      	add	r3, r2
 80058da:	b29a      	uxth	r2, r3
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	3302      	adds	r3, #2
 80058e0:	b212      	sxth	r2, r2
 80058e2:	801a      	strh	r2, [r3, #0]
 80058e4:	7c7a      	ldrb	r2, [r7, #17]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	3304      	adds	r3, #4
 80058ea:	b212      	sxth	r2, r2
 80058ec:	801a      	strh	r2, [r3, #0]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	3304      	adds	r3, #4
 80058f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	021b      	lsls	r3, r3, #8
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	7c3b      	ldrb	r3, [r7, #16]
 80058fe:	b29b      	uxth	r3, r3
 8005900:	4413      	add	r3, r2
 8005902:	b29a      	uxth	r2, r3
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	3304      	adds	r3, #4
 8005908:	b212      	sxth	r2, r2
 800590a:	801a      	strh	r2, [r3, #0]
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	4618      	mov	r0, r3
 8005910:	3718      	adds	r7, #24
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <lis2mdl_device_id_get>:
 8005916:	b580      	push	{r7, lr}
 8005918:	b084      	sub	sp, #16
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	6039      	str	r1, [r7, #0]
 8005920:	2301      	movs	r3, #1
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	214f      	movs	r1, #79	; 0x4f
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7ff fed0 	bl	80056cc <lis2mdl_read_reg>
 800592c:	60f8      	str	r0, [r7, #12]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	4618      	mov	r0, r3
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <lis2mdl_self_test_set>:
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	460b      	mov	r3, r1
 8005942:	70fb      	strb	r3, [r7, #3]
 8005944:	f107 0208 	add.w	r2, r7, #8
 8005948:	2301      	movs	r3, #1
 800594a:	2162      	movs	r1, #98	; 0x62
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f7ff febd 	bl	80056cc <lis2mdl_read_reg>
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10f      	bne.n	800597a <lis2mdl_self_test_set+0x42>
 800595a:	78fb      	ldrb	r3, [r7, #3]
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	b2da      	uxtb	r2, r3
 8005962:	7a3b      	ldrb	r3, [r7, #8]
 8005964:	f362 0341 	bfi	r3, r2, #1, #1
 8005968:	723b      	strb	r3, [r7, #8]
 800596a:	f107 0208 	add.w	r2, r7, #8
 800596e:	2301      	movs	r3, #1
 8005970:	2162      	movs	r1, #98	; 0x62
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7ff fec2 	bl	80056fc <lis2mdl_write_reg>
 8005978:	60f8      	str	r0, [r7, #12]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <lis2mdl_i2c_interface_set>:
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	70fb      	strb	r3, [r7, #3]
 8005990:	f107 0208 	add.w	r2, r7, #8
 8005994:	2301      	movs	r3, #1
 8005996:	2162      	movs	r1, #98	; 0x62
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f7ff fe97 	bl	80056cc <lis2mdl_read_reg>
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10f      	bne.n	80059c6 <lis2mdl_i2c_interface_set+0x42>
 80059a6:	78fb      	ldrb	r3, [r7, #3]
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	b2da      	uxtb	r2, r3
 80059ae:	7a3b      	ldrb	r3, [r7, #8]
 80059b0:	f362 1345 	bfi	r3, r2, #5, #1
 80059b4:	723b      	strb	r3, [r7, #8]
 80059b6:	f107 0208 	add.w	r2, r7, #8
 80059ba:	2301      	movs	r3, #1
 80059bc:	2162      	movs	r1, #98	; 0x62
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7ff fe9c 	bl	80056fc <lis2mdl_write_reg>
 80059c4:	60f8      	str	r0, [r7, #12]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4618      	mov	r0, r3
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <LPS22HH_RegisterBusIO>:
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
 80059da:	2300      	movs	r3, #0
 80059dc:	60fb      	str	r3, [r7, #12]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d103      	bne.n	80059ec <LPS22HH_RegisterBusIO+0x1c>
 80059e4:	f04f 33ff 	mov.w	r3, #4294967295
 80059e8:	60fb      	str	r3, [r7, #12]
 80059ea:	e04d      	b.n	8005a88 <LPS22HH_RegisterBusIO+0xb8>
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	605a      	str	r2, [r3, #4]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	689a      	ldr	r2, [r3, #8]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	609a      	str	r2, [r3, #8]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	7b1a      	ldrb	r2, [r3, #12]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	731a      	strb	r2, [r3, #12]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	691a      	ldr	r2, [r3, #16]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	611a      	str	r2, [r3, #16]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	695a      	ldr	r2, [r3, #20]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	615a      	str	r2, [r3, #20]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	699a      	ldr	r2, [r3, #24]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	619a      	str	r2, [r3, #24]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a1b      	ldr	r2, [pc, #108]	; (8005a94 <LPS22HH_RegisterBusIO+0xc4>)
 8005a28:	621a      	str	r2, [r3, #32]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a1a      	ldr	r2, [pc, #104]	; (8005a98 <LPS22HH_RegisterBusIO+0xc8>)
 8005a2e:	61da      	str	r2, [r3, #28]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	625a      	str	r2, [r3, #36]	; 0x24
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d103      	bne.n	8005a46 <LPS22HH_RegisterBusIO+0x76>
 8005a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	e020      	b.n	8005a88 <LPS22HH_RegisterBusIO+0xb8>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4798      	blx	r3
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <LPS22HH_RegisterBusIO+0x8a>
 8005a52:	f04f 33ff 	mov.w	r3, #4294967295
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	e016      	b.n	8005a88 <LPS22HH_RegisterBusIO+0xb8>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d112      	bne.n	8005a88 <LPS22HH_RegisterBusIO+0xb8>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10d      	bne.n	8005a88 <LPS22HH_RegisterBusIO+0xb8>
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	72fb      	strb	r3, [r7, #11]
 8005a70:	7afb      	ldrb	r3, [r7, #11]
 8005a72:	461a      	mov	r2, r3
 8005a74:	2110      	movs	r1, #16
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f9df 	bl	8005e3a <LPS22HH_Write_Reg>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d002      	beq.n	8005a88 <LPS22HH_RegisterBusIO+0xb8>
 8005a82:	f04f 33ff 	mov.w	r3, #4294967295
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	08006163 	.word	0x08006163
 8005a98:	08006199 	.word	0x08006199

08005a9c <LPS22HH_Init>:
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d108      	bne.n	8005ac0 <LPS22HH_Init+0x24>
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 fb0e 	bl	80060d0 <LPS22HH_Initialize>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d002      	beq.n	8005ac0 <LPS22HH_Init+0x24>
 8005aba:	f04f 33ff 	mov.w	r3, #4294967295
 8005abe:	e004      	b.n	8005aca <LPS22HH_Init+0x2e>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005ac8:	2300      	movs	r3, #0
 8005aca:	4618      	mov	r0, r3
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <LPS22HH_DeInit>:
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b082      	sub	sp, #8
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d111      	bne.n	8005b08 <LPS22HH_DeInit+0x36>
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f877 	bl	8005bd8 <LPS22HH_PRESS_Disable>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <LPS22HH_DeInit+0x24>
 8005af0:	f04f 33ff 	mov.w	r3, #4294967295
 8005af4:	e00d      	b.n	8005b12 <LPS22HH_DeInit+0x40>
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f918 	bl	8005d2c <LPS22HH_TEMP_Disable>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <LPS22HH_DeInit+0x36>
 8005b02:	f04f 33ff 	mov.w	r3, #4294967295
 8005b06:	e004      	b.n	8005b12 <LPS22HH_DeInit+0x40>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005b10:	2300      	movs	r3, #0
 8005b12:	4618      	mov	r0, r3
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <LPS22HH_ReadID>:
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b082      	sub	sp, #8
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
 8005b22:	6039      	str	r1, [r7, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	331c      	adds	r3, #28
 8005b28:	6839      	ldr	r1, [r7, #0]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 fd1a 	bl	8006564 <lps22hh_device_id_get>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <LPS22HH_ReadID+0x22>
 8005b36:	f04f 33ff 	mov.w	r3, #4294967295
 8005b3a:	e000      	b.n	8005b3e <LPS22HH_ReadID+0x24>
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3708      	adds	r7, #8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
	...

08005b48 <LPS22HH_GetCapabilities>:
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2200      	movs	r2, #0
 8005b56:	709a      	strb	r2, [r3, #2]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	705a      	strb	r2, [r3, #1]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2201      	movs	r2, #1
 8005b62:	701a      	strb	r2, [r3, #0]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2200      	movs	r2, #0
 8005b68:	70da      	strb	r2, [r3, #3]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	f04f 0200 	mov.w	r2, #0
 8005b70:	605a      	str	r2, [r3, #4]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	4a05      	ldr	r2, [pc, #20]	; (8005b8c <LPS22HH_GetCapabilities+0x44>)
 8005b76:	609a      	str	r2, [r3, #8]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	4a04      	ldr	r2, [pc, #16]	; (8005b8c <LPS22HH_GetCapabilities+0x44>)
 8005b7c:	60da      	str	r2, [r3, #12]
 8005b7e:	2300      	movs	r3, #0
 8005b80:	4618      	mov	r0, r3
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	43480000 	.word	0x43480000

08005b90 <LPS22HH_PRESS_Enable>:
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d101      	bne.n	8005ba6 <LPS22HH_PRESS_Enable+0x16>
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	e014      	b.n	8005bd0 <LPS22HH_PRESS_Enable+0x40>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f103 021c 	add.w	r2, r3, #28
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	4610      	mov	r0, r2
 8005bb6:	f000 fb93 	bl	80062e0 <lps22hh_data_rate_set>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d002      	beq.n	8005bc6 <LPS22HH_PRESS_Enable+0x36>
 8005bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8005bc4:	e004      	b.n	8005bd0 <LPS22HH_PRESS_Enable+0x40>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005bce:	2300      	movs	r3, #0
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <LPS22HH_PRESS_Disable>:
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <LPS22HH_PRESS_Disable+0x16>
 8005bea:	2300      	movs	r3, #0
 8005bec:	e024      	b.n	8005c38 <LPS22HH_PRESS_Disable+0x60>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d11a      	bne.n	8005c2e <LPS22HH_PRESS_Disable+0x56>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f103 021c 	add.w	r2, r3, #28
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	332b      	adds	r3, #43	; 0x2b
 8005c02:	4619      	mov	r1, r3
 8005c04:	4610      	mov	r0, r2
 8005c06:	f000 fbb9 	bl	800637c <lps22hh_data_rate_get>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d002      	beq.n	8005c16 <LPS22HH_PRESS_Disable+0x3e>
 8005c10:	f04f 33ff 	mov.w	r3, #4294967295
 8005c14:	e010      	b.n	8005c38 <LPS22HH_PRESS_Disable+0x60>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	331c      	adds	r3, #28
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f000 fb5f 	bl	80062e0 <lps22hh_data_rate_set>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <LPS22HH_PRESS_Disable+0x56>
 8005c28:	f04f 33ff 	mov.w	r3, #4294967295
 8005c2c:	e004      	b.n	8005c38 <LPS22HH_PRESS_Disable+0x60>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005c36:	2300      	movs	r3, #0
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3708      	adds	r7, #8
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <LPS22HH_PRESS_GetOutputDataRate>:
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
 8005c4a:	6839      	ldr	r1, [r7, #0]
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 f90f 	bl	8005e70 <LPS22HH_GetOutputDataRate>
 8005c52:	4603      	mov	r3, r0
 8005c54:	4618      	mov	r0, r3
 8005c56:	3708      	adds	r7, #8
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <LPS22HH_PRESS_SetOutputDataRate>:
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	ed87 0a00 	vstr	s0, [r7]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d106      	bne.n	8005c80 <LPS22HH_PRESS_SetOutputDataRate+0x24>
 8005c72:	ed97 0a00 	vldr	s0, [r7]
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f95e 	bl	8005f38 <LPS22HH_SetOutputDataRate_When_Enabled>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	e005      	b.n	8005c8c <LPS22HH_PRESS_SetOutputDataRate+0x30>
 8005c80:	ed97 0a00 	vldr	s0, [r7]
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 f9c9 	bl	800601c <LPS22HH_SetOutputDataRate_When_Disabled>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3708      	adds	r7, #8
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <LPS22HH_PRESS_GetPressure>:
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
 8005c9e:	f107 030c 	add.w	r3, r7, #12
 8005ca2:	2204      	movs	r2, #4
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f016 ff5d 	bl	801cb66 <memset>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	331c      	adds	r3, #28
 8005cb0:	f107 020c 	add.w	r2, r7, #12
 8005cb4:	4611      	mov	r1, r2
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 fc08 	bl	80064cc <lps22hh_pressure_raw_get>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d002      	beq.n	8005cc8 <LPS22HH_PRESS_GetPressure+0x34>
 8005cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005cc6:	e009      	b.n	8005cdc <LPS22HH_PRESS_GetPressure+0x48>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 fab0 	bl	8006230 <lps22hh_from_lsb_to_hpa>
 8005cd0:	eef0 7a40 	vmov.f32	s15, s0
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	edc3 7a00 	vstr	s15, [r3]
 8005cda:	2300      	movs	r3, #0
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <LPS22HH_TEMP_Enable>:
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d101      	bne.n	8005cfa <LPS22HH_TEMP_Enable+0x16>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	e014      	b.n	8005d24 <LPS22HH_TEMP_Enable+0x40>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f103 021c 	add.w	r2, r3, #28
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005d06:	4619      	mov	r1, r3
 8005d08:	4610      	mov	r0, r2
 8005d0a:	f000 fae9 	bl	80062e0 <lps22hh_data_rate_set>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d002      	beq.n	8005d1a <LPS22HH_TEMP_Enable+0x36>
 8005d14:	f04f 33ff 	mov.w	r3, #4294967295
 8005d18:	e004      	b.n	8005d24 <LPS22HH_TEMP_Enable+0x40>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8005d22:	2300      	movs	r3, #0
 8005d24:	4618      	mov	r0, r3
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <LPS22HH_TEMP_Disable>:
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <LPS22HH_TEMP_Disable+0x16>
 8005d3e:	2300      	movs	r3, #0
 8005d40:	e024      	b.n	8005d8c <LPS22HH_TEMP_Disable+0x60>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d11a      	bne.n	8005d82 <LPS22HH_TEMP_Disable+0x56>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f103 021c 	add.w	r2, r3, #28
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	332b      	adds	r3, #43	; 0x2b
 8005d56:	4619      	mov	r1, r3
 8005d58:	4610      	mov	r0, r2
 8005d5a:	f000 fb0f 	bl	800637c <lps22hh_data_rate_get>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d002      	beq.n	8005d6a <LPS22HH_TEMP_Disable+0x3e>
 8005d64:	f04f 33ff 	mov.w	r3, #4294967295
 8005d68:	e010      	b.n	8005d8c <LPS22HH_TEMP_Disable+0x60>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	331c      	adds	r3, #28
 8005d6e:	2100      	movs	r1, #0
 8005d70:	4618      	mov	r0, r3
 8005d72:	f000 fab5 	bl	80062e0 <lps22hh_data_rate_set>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d002      	beq.n	8005d82 <LPS22HH_TEMP_Disable+0x56>
 8005d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d80:	e004      	b.n	8005d8c <LPS22HH_TEMP_Disable+0x60>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <LPS22HH_TEMP_GetOutputDataRate>:
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
 8005d9e:	6839      	ldr	r1, [r7, #0]
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 f865 	bl	8005e70 <LPS22HH_GetOutputDataRate>
 8005da6:	4603      	mov	r3, r0
 8005da8:	4618      	mov	r0, r3
 8005daa:	3708      	adds	r7, #8
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <LPS22HH_TEMP_SetOutputDataRate>:
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	ed87 0a00 	vstr	s0, [r7]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d106      	bne.n	8005dd4 <LPS22HH_TEMP_SetOutputDataRate+0x24>
 8005dc6:	ed97 0a00 	vldr	s0, [r7]
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f8b4 	bl	8005f38 <LPS22HH_SetOutputDataRate_When_Enabled>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	e005      	b.n	8005de0 <LPS22HH_TEMP_SetOutputDataRate+0x30>
 8005dd4:	ed97 0a00 	vldr	s0, [r7]
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 f91f 	bl	800601c <LPS22HH_SetOutputDataRate_When_Disabled>
 8005dde:	4603      	mov	r3, r0
 8005de0:	4618      	mov	r0, r3
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <LPS22HH_TEMP_GetTemperature>:
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
 8005df2:	f107 030c 	add.w	r3, r7, #12
 8005df6:	2202      	movs	r2, #2
 8005df8:	2100      	movs	r1, #0
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f016 feb3 	bl	801cb66 <memset>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	331c      	adds	r3, #28
 8005e04:	f107 020c 	add.w	r2, r7, #12
 8005e08:	4611      	mov	r1, r2
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 fb87 	bl	800651e <lps22hh_temperature_raw_get>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d002      	beq.n	8005e1c <LPS22HH_TEMP_GetTemperature+0x34>
 8005e16:	f04f 33ff 	mov.w	r3, #4294967295
 8005e1a:	e00a      	b.n	8005e32 <LPS22HH_TEMP_GetTemperature+0x4a>
 8005e1c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f000 fa1d 	bl	8006260 <lps22hh_from_lsb_to_celsius>
 8005e26:	eef0 7a40 	vmov.f32	s15, s0
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	edc3 7a00 	vstr	s15, [r3]
 8005e30:	2300      	movs	r3, #0
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <LPS22HH_Write_Reg>:
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b082      	sub	sp, #8
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
 8005e42:	460b      	mov	r3, r1
 8005e44:	70fb      	strb	r3, [r7, #3]
 8005e46:	4613      	mov	r3, r2
 8005e48:	70bb      	strb	r3, [r7, #2]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f103 001c 	add.w	r0, r3, #28
 8005e50:	1cba      	adds	r2, r7, #2
 8005e52:	78f9      	ldrb	r1, [r7, #3]
 8005e54:	2301      	movs	r3, #1
 8005e56:	f000 f9d2 	bl	80061fe <lps22hh_write_reg>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d002      	beq.n	8005e66 <LPS22HH_Write_Reg+0x2c>
 8005e60:	f04f 33ff 	mov.w	r3, #4294967295
 8005e64:	e000      	b.n	8005e68 <LPS22HH_Write_Reg+0x2e>
 8005e66:	2300      	movs	r3, #0
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3708      	adds	r7, #8
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <LPS22HH_GetOutputDataRate>:
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60fb      	str	r3, [r7, #12]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	331c      	adds	r3, #28
 8005e82:	f107 020b 	add.w	r2, r7, #11
 8005e86:	4611      	mov	r1, r2
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f000 fa77 	bl	800637c <lps22hh_data_rate_get>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d002      	beq.n	8005e9a <LPS22HH_GetOutputDataRate+0x2a>
 8005e94:	f04f 33ff 	mov.w	r3, #4294967295
 8005e98:	e03d      	b.n	8005f16 <LPS22HH_GetOutputDataRate+0xa6>
 8005e9a:	7afb      	ldrb	r3, [r7, #11]
 8005e9c:	2b07      	cmp	r3, #7
 8005e9e:	d835      	bhi.n	8005f0c <LPS22HH_GetOutputDataRate+0x9c>
 8005ea0:	a201      	add	r2, pc, #4	; (adr r2, 8005ea8 <LPS22HH_GetOutputDataRate+0x38>)
 8005ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea6:	bf00      	nop
 8005ea8:	08005ec9 	.word	0x08005ec9
 8005eac:	08005ed3 	.word	0x08005ed3
 8005eb0:	08005edd 	.word	0x08005edd
 8005eb4:	08005ee5 	.word	0x08005ee5
 8005eb8:	08005eed 	.word	0x08005eed
 8005ebc:	08005ef5 	.word	0x08005ef5
 8005ec0:	08005efd 	.word	0x08005efd
 8005ec4:	08005f05 	.word	0x08005f05
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	f04f 0200 	mov.w	r2, #0
 8005ece:	601a      	str	r2, [r3, #0]
 8005ed0:	e020      	b.n	8005f14 <LPS22HH_GetOutputDataRate+0xa4>
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005ed8:	601a      	str	r2, [r3, #0]
 8005eda:	e01b      	b.n	8005f14 <LPS22HH_GetOutputDataRate+0xa4>
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	4a10      	ldr	r2, [pc, #64]	; (8005f20 <LPS22HH_GetOutputDataRate+0xb0>)
 8005ee0:	601a      	str	r2, [r3, #0]
 8005ee2:	e017      	b.n	8005f14 <LPS22HH_GetOutputDataRate+0xa4>
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	4a0f      	ldr	r2, [pc, #60]	; (8005f24 <LPS22HH_GetOutputDataRate+0xb4>)
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	e013      	b.n	8005f14 <LPS22HH_GetOutputDataRate+0xa4>
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	4a0e      	ldr	r2, [pc, #56]	; (8005f28 <LPS22HH_GetOutputDataRate+0xb8>)
 8005ef0:	601a      	str	r2, [r3, #0]
 8005ef2:	e00f      	b.n	8005f14 <LPS22HH_GetOutputDataRate+0xa4>
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	4a0d      	ldr	r2, [pc, #52]	; (8005f2c <LPS22HH_GetOutputDataRate+0xbc>)
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	e00b      	b.n	8005f14 <LPS22HH_GetOutputDataRate+0xa4>
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	4a0c      	ldr	r2, [pc, #48]	; (8005f30 <LPS22HH_GetOutputDataRate+0xc0>)
 8005f00:	601a      	str	r2, [r3, #0]
 8005f02:	e007      	b.n	8005f14 <LPS22HH_GetOutputDataRate+0xa4>
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	4a0b      	ldr	r2, [pc, #44]	; (8005f34 <LPS22HH_GetOutputDataRate+0xc4>)
 8005f08:	601a      	str	r2, [r3, #0]
 8005f0a:	e003      	b.n	8005f14 <LPS22HH_GetOutputDataRate+0xa4>
 8005f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f10:	60fb      	str	r3, [r7, #12]
 8005f12:	bf00      	nop
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	41200000 	.word	0x41200000
 8005f24:	41c80000 	.word	0x41c80000
 8005f28:	42480000 	.word	0x42480000
 8005f2c:	42960000 	.word	0x42960000
 8005f30:	42c80000 	.word	0x42c80000
 8005f34:	43480000 	.word	0x43480000

08005f38 <LPS22HH_SetOutputDataRate_When_Enabled>:
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	ed87 0a00 	vstr	s0, [r7]
 8005f44:	edd7 7a00 	vldr	s15, [r7]
 8005f48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f54:	d801      	bhi.n	8005f5a <LPS22HH_SetOutputDataRate_When_Enabled+0x22>
 8005f56:	2301      	movs	r3, #1
 8005f58:	e037      	b.n	8005fca <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005f5a:	edd7 7a00 	vldr	s15, [r7]
 8005f5e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005f62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f6a:	d801      	bhi.n	8005f70 <LPS22HH_SetOutputDataRate_When_Enabled+0x38>
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	e02c      	b.n	8005fca <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005f70:	edd7 7a00 	vldr	s15, [r7]
 8005f74:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005f78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f80:	d801      	bhi.n	8005f86 <LPS22HH_SetOutputDataRate_When_Enabled+0x4e>
 8005f82:	2303      	movs	r3, #3
 8005f84:	e021      	b.n	8005fca <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005f86:	edd7 7a00 	vldr	s15, [r7]
 8005f8a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8006010 <LPS22HH_SetOutputDataRate_When_Enabled+0xd8>
 8005f8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f96:	d801      	bhi.n	8005f9c <LPS22HH_SetOutputDataRate_When_Enabled+0x64>
 8005f98:	2304      	movs	r3, #4
 8005f9a:	e016      	b.n	8005fca <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005f9c:	edd7 7a00 	vldr	s15, [r7]
 8005fa0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8006014 <LPS22HH_SetOutputDataRate_When_Enabled+0xdc>
 8005fa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fac:	d801      	bhi.n	8005fb2 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8005fae:	2305      	movs	r3, #5
 8005fb0:	e00b      	b.n	8005fca <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005fb2:	edd7 7a00 	vldr	s15, [r7]
 8005fb6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006018 <LPS22HH_SetOutputDataRate_When_Enabled+0xe0>
 8005fba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fc2:	d801      	bhi.n	8005fc8 <LPS22HH_SetOutputDataRate_When_Enabled+0x90>
 8005fc4:	2306      	movs	r3, #6
 8005fc6:	e000      	b.n	8005fca <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005fc8:	2307      	movs	r3, #7
 8005fca:	73fb      	strb	r3, [r7, #15]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	331c      	adds	r3, #28
 8005fd0:	7bfa      	ldrb	r2, [r7, #15]
 8005fd2:	4611      	mov	r1, r2
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f000 f983 	bl	80062e0 <lps22hh_data_rate_set>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <LPS22HH_SetOutputDataRate_When_Enabled+0xae>
 8005fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe4:	e00f      	b.n	8006006 <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f103 021c 	add.w	r2, r3, #28
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	332b      	adds	r3, #43	; 0x2b
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	4610      	mov	r0, r2
 8005ff4:	f000 f9c2 	bl	800637c <lps22hh_data_rate_get>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d002      	beq.n	8006004 <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>
 8005ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8006002:	e000      	b.n	8006006 <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
 8006004:	2300      	movs	r3, #0
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	42480000 	.word	0x42480000
 8006014:	42960000 	.word	0x42960000
 8006018:	42c80000 	.word	0x42c80000

0800601c <LPS22HH_SetOutputDataRate_When_Disabled>:
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	ed87 0a00 	vstr	s0, [r7]
 8006028:	edd7 7a00 	vldr	s15, [r7]
 800602c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006030:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006038:	d801      	bhi.n	800603e <LPS22HH_SetOutputDataRate_When_Disabled+0x22>
 800603a:	2301      	movs	r3, #1
 800603c:	e037      	b.n	80060ae <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 800603e:	edd7 7a00 	vldr	s15, [r7]
 8006042:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006046:	eef4 7ac7 	vcmpe.f32	s15, s14
 800604a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800604e:	d801      	bhi.n	8006054 <LPS22HH_SetOutputDataRate_When_Disabled+0x38>
 8006050:	2302      	movs	r3, #2
 8006052:	e02c      	b.n	80060ae <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8006054:	edd7 7a00 	vldr	s15, [r7]
 8006058:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800605c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006064:	d801      	bhi.n	800606a <LPS22HH_SetOutputDataRate_When_Disabled+0x4e>
 8006066:	2303      	movs	r3, #3
 8006068:	e021      	b.n	80060ae <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 800606a:	edd7 7a00 	vldr	s15, [r7]
 800606e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80060c4 <LPS22HH_SetOutputDataRate_When_Disabled+0xa8>
 8006072:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800607a:	d801      	bhi.n	8006080 <LPS22HH_SetOutputDataRate_When_Disabled+0x64>
 800607c:	2304      	movs	r3, #4
 800607e:	e016      	b.n	80060ae <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8006080:	edd7 7a00 	vldr	s15, [r7]
 8006084:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80060c8 <LPS22HH_SetOutputDataRate_When_Disabled+0xac>
 8006088:	eef4 7ac7 	vcmpe.f32	s15, s14
 800608c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006090:	d801      	bhi.n	8006096 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8006092:	2305      	movs	r3, #5
 8006094:	e00b      	b.n	80060ae <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8006096:	edd7 7a00 	vldr	s15, [r7]
 800609a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80060cc <LPS22HH_SetOutputDataRate_When_Disabled+0xb0>
 800609e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060a6:	d801      	bhi.n	80060ac <LPS22HH_SetOutputDataRate_When_Disabled+0x90>
 80060a8:	2306      	movs	r3, #6
 80060aa:	e000      	b.n	80060ae <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 80060ac:	2307      	movs	r3, #7
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
 80060b4:	2300      	movs	r3, #0
 80060b6:	4618      	mov	r0, r3
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	42480000 	.word	0x42480000
 80060c8:	42960000 	.word	0x42960000
 80060cc:	42c80000 	.word	0x42c80000

080060d0 <LPS22HH_Initialize>:
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	331c      	adds	r3, #28
 80060dc:	2111      	movs	r1, #17
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 fa9d 	bl	800661e <lps22hh_i3c_interface_set>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d002      	beq.n	80060f0 <LPS22HH_Initialize+0x20>
 80060ea:	f04f 33ff 	mov.w	r3, #4294967295
 80060ee:	e034      	b.n	800615a <LPS22HH_Initialize+0x8a>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	331c      	adds	r3, #28
 80060f4:	2110      	movs	r1, #16
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 f8f2 	bl	80062e0 <lps22hh_data_rate_set>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d002      	beq.n	8006108 <LPS22HH_Initialize+0x38>
 8006102:	f04f 33ff 	mov.w	r3, #4294967295
 8006106:	e028      	b.n	800615a <LPS22HH_Initialize+0x8a>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	331c      	adds	r3, #28
 800610c:	2100      	movs	r1, #0
 800610e:	4618      	mov	r0, r3
 8006110:	f000 fa5f 	bl	80065d2 <lps22hh_lp_bandwidth_set>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d002      	beq.n	8006120 <LPS22HH_Initialize+0x50>
 800611a:	f04f 33ff 	mov.w	r3, #4294967295
 800611e:	e01c      	b.n	800615a <LPS22HH_Initialize+0x8a>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	331c      	adds	r3, #28
 8006124:	2101      	movs	r1, #1
 8006126:	4618      	mov	r0, r3
 8006128:	f000 f8b4 	bl	8006294 <lps22hh_block_data_update_set>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d002      	beq.n	8006138 <LPS22HH_Initialize+0x68>
 8006132:	f04f 33ff 	mov.w	r3, #4294967295
 8006136:	e010      	b.n	800615a <LPS22HH_Initialize+0x8a>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	331c      	adds	r3, #28
 800613c:	2101      	movs	r1, #1
 800613e:	4618      	mov	r0, r3
 8006140:	f000 fa21 	bl	8006586 <lps22hh_auto_increment_set>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d002      	beq.n	8006150 <LPS22HH_Initialize+0x80>
 800614a:	f04f 33ff 	mov.w	r3, #4294967295
 800614e:	e004      	b.n	800615a <LPS22HH_Initialize+0x8a>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2203      	movs	r2, #3
 8006154:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8006158:	2300      	movs	r3, #0
 800615a:	4618      	mov	r0, r3
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <ReadRegWrap>:
 8006162:	b590      	push	{r4, r7, lr}
 8006164:	b087      	sub	sp, #28
 8006166:	af00      	add	r7, sp, #0
 8006168:	60f8      	str	r0, [r7, #12]
 800616a:	607a      	str	r2, [r7, #4]
 800616c:	461a      	mov	r2, r3
 800616e:	460b      	mov	r3, r1
 8006170:	72fb      	strb	r3, [r7, #11]
 8006172:	4613      	mov	r3, r2
 8006174:	813b      	strh	r3, [r7, #8]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	617b      	str	r3, [r7, #20]
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	695c      	ldr	r4, [r3, #20]
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	7b1b      	ldrb	r3, [r3, #12]
 8006182:	b298      	uxth	r0, r3
 8006184:	7afb      	ldrb	r3, [r7, #11]
 8006186:	b299      	uxth	r1, r3
 8006188:	893b      	ldrh	r3, [r7, #8]
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	47a0      	blx	r4
 800618e:	4603      	mov	r3, r0
 8006190:	4618      	mov	r0, r3
 8006192:	371c      	adds	r7, #28
 8006194:	46bd      	mov	sp, r7
 8006196:	bd90      	pop	{r4, r7, pc}

08006198 <WriteRegWrap>:
 8006198:	b590      	push	{r4, r7, lr}
 800619a:	b087      	sub	sp, #28
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	607a      	str	r2, [r7, #4]
 80061a2:	461a      	mov	r2, r3
 80061a4:	460b      	mov	r3, r1
 80061a6:	72fb      	strb	r3, [r7, #11]
 80061a8:	4613      	mov	r3, r2
 80061aa:	813b      	strh	r3, [r7, #8]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	617b      	str	r3, [r7, #20]
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	691c      	ldr	r4, [r3, #16]
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	7b1b      	ldrb	r3, [r3, #12]
 80061b8:	b298      	uxth	r0, r3
 80061ba:	7afb      	ldrb	r3, [r7, #11]
 80061bc:	b299      	uxth	r1, r3
 80061be:	893b      	ldrh	r3, [r7, #8]
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	47a0      	blx	r4
 80061c4:	4603      	mov	r3, r0
 80061c6:	4618      	mov	r0, r3
 80061c8:	371c      	adds	r7, #28
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd90      	pop	{r4, r7, pc}

080061ce <lps22hh_read_reg>:
 80061ce:	b590      	push	{r4, r7, lr}
 80061d0:	b087      	sub	sp, #28
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	60f8      	str	r0, [r7, #12]
 80061d6:	607a      	str	r2, [r7, #4]
 80061d8:	461a      	mov	r2, r3
 80061da:	460b      	mov	r3, r1
 80061dc:	72fb      	strb	r3, [r7, #11]
 80061de:	4613      	mov	r3, r2
 80061e0:	813b      	strh	r3, [r7, #8]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	685c      	ldr	r4, [r3, #4]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6898      	ldr	r0, [r3, #8]
 80061ea:	893b      	ldrh	r3, [r7, #8]
 80061ec:	7af9      	ldrb	r1, [r7, #11]
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	47a0      	blx	r4
 80061f2:	6178      	str	r0, [r7, #20]
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	4618      	mov	r0, r3
 80061f8:	371c      	adds	r7, #28
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd90      	pop	{r4, r7, pc}

080061fe <lps22hh_write_reg>:
 80061fe:	b590      	push	{r4, r7, lr}
 8006200:	b087      	sub	sp, #28
 8006202:	af00      	add	r7, sp, #0
 8006204:	60f8      	str	r0, [r7, #12]
 8006206:	607a      	str	r2, [r7, #4]
 8006208:	461a      	mov	r2, r3
 800620a:	460b      	mov	r3, r1
 800620c:	72fb      	strb	r3, [r7, #11]
 800620e:	4613      	mov	r3, r2
 8006210:	813b      	strh	r3, [r7, #8]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681c      	ldr	r4, [r3, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6898      	ldr	r0, [r3, #8]
 800621a:	893b      	ldrh	r3, [r7, #8]
 800621c:	7af9      	ldrb	r1, [r7, #11]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	47a0      	blx	r4
 8006222:	6178      	str	r0, [r7, #20]
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	4618      	mov	r0, r3
 8006228:	371c      	adds	r7, #28
 800622a:	46bd      	mov	sp, r7
 800622c:	bd90      	pop	{r4, r7, pc}
	...

08006230 <lps22hh_from_lsb_to_hpa>:
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	ee07 3a90 	vmov	s15, r3
 800623e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006242:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800625c <lps22hh_from_lsb_to_hpa+0x2c>
 8006246:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800624a:	eef0 7a66 	vmov.f32	s15, s13
 800624e:	eeb0 0a67 	vmov.f32	s0, s15
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	49800000 	.word	0x49800000

08006260 <lps22hh_from_lsb_to_celsius>:
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	4603      	mov	r3, r0
 8006268:	80fb      	strh	r3, [r7, #6]
 800626a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800626e:	ee07 3a90 	vmov	s15, r3
 8006272:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006276:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006290 <lps22hh_from_lsb_to_celsius+0x30>
 800627a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800627e:	eef0 7a66 	vmov.f32	s15, s13
 8006282:	eeb0 0a67 	vmov.f32	s0, s15
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	42c80000 	.word	0x42c80000

08006294 <lps22hh_block_data_update_set>:
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	460b      	mov	r3, r1
 800629e:	70fb      	strb	r3, [r7, #3]
 80062a0:	f107 0208 	add.w	r2, r7, #8
 80062a4:	2301      	movs	r3, #1
 80062a6:	2110      	movs	r1, #16
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f7ff ff90 	bl	80061ce <lps22hh_read_reg>
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10f      	bne.n	80062d6 <lps22hh_block_data_update_set+0x42>
 80062b6:	78fb      	ldrb	r3, [r7, #3]
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	b2da      	uxtb	r2, r3
 80062be:	7a3b      	ldrb	r3, [r7, #8]
 80062c0:	f362 0341 	bfi	r3, r2, #1, #1
 80062c4:	723b      	strb	r3, [r7, #8]
 80062c6:	f107 0208 	add.w	r2, r7, #8
 80062ca:	2301      	movs	r3, #1
 80062cc:	2110      	movs	r1, #16
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7ff ff95 	bl	80061fe <lps22hh_write_reg>
 80062d4:	60f8      	str	r0, [r7, #12]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	4618      	mov	r0, r3
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <lps22hh_data_rate_set>:
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	460b      	mov	r3, r1
 80062ea:	70fb      	strb	r3, [r7, #3]
 80062ec:	f107 0210 	add.w	r2, r7, #16
 80062f0:	2301      	movs	r3, #1
 80062f2:	2110      	movs	r1, #16
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f7ff ff6a 	bl	80061ce <lps22hh_read_reg>
 80062fa:	6178      	str	r0, [r7, #20]
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d107      	bne.n	8006312 <lps22hh_data_rate_set+0x32>
 8006302:	f107 020c 	add.w	r2, r7, #12
 8006306:	2301      	movs	r3, #1
 8006308:	2111      	movs	r1, #17
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7ff ff5f 	bl	80061ce <lps22hh_read_reg>
 8006310:	6178      	str	r0, [r7, #20]
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10f      	bne.n	8006338 <lps22hh_data_rate_set+0x58>
 8006318:	78fb      	ldrb	r3, [r7, #3]
 800631a:	f003 0307 	and.w	r3, r3, #7
 800631e:	b2da      	uxtb	r2, r3
 8006320:	7c3b      	ldrb	r3, [r7, #16]
 8006322:	f362 1306 	bfi	r3, r2, #4, #3
 8006326:	743b      	strb	r3, [r7, #16]
 8006328:	f107 0210 	add.w	r2, r7, #16
 800632c:	2301      	movs	r3, #1
 800632e:	2110      	movs	r1, #16
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f7ff ff64 	bl	80061fe <lps22hh_write_reg>
 8006336:	6178      	str	r0, [r7, #20]
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d119      	bne.n	8006372 <lps22hh_data_rate_set+0x92>
 800633e:	78fb      	ldrb	r3, [r7, #3]
 8006340:	091b      	lsrs	r3, r3, #4
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	b2da      	uxtb	r2, r3
 8006348:	7b3b      	ldrb	r3, [r7, #12]
 800634a:	f362 0341 	bfi	r3, r2, #1, #1
 800634e:	733b      	strb	r3, [r7, #12]
 8006350:	78fb      	ldrb	r3, [r7, #3]
 8006352:	08db      	lsrs	r3, r3, #3
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	b2da      	uxtb	r2, r3
 800635a:	7b3b      	ldrb	r3, [r7, #12]
 800635c:	f362 0300 	bfi	r3, r2, #0, #1
 8006360:	733b      	strb	r3, [r7, #12]
 8006362:	f107 020c 	add.w	r2, r7, #12
 8006366:	2301      	movs	r3, #1
 8006368:	2111      	movs	r1, #17
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7ff ff47 	bl	80061fe <lps22hh_write_reg>
 8006370:	6178      	str	r0, [r7, #20]
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	4618      	mov	r0, r3
 8006376:	3718      	adds	r7, #24
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <lps22hh_data_rate_get>:
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
 8006386:	f107 0210 	add.w	r2, r7, #16
 800638a:	2301      	movs	r3, #1
 800638c:	2110      	movs	r1, #16
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7ff ff1d 	bl	80061ce <lps22hh_read_reg>
 8006394:	6178      	str	r0, [r7, #20]
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d107      	bne.n	80063ac <lps22hh_data_rate_get+0x30>
 800639c:	f107 020c 	add.w	r2, r7, #12
 80063a0:	2301      	movs	r3, #1
 80063a2:	2111      	movs	r1, #17
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f7ff ff12 	bl	80061ce <lps22hh_read_reg>
 80063aa:	6178      	str	r0, [r7, #20]
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f040 8086 	bne.w	80064c0 <lps22hh_data_rate_get+0x144>
 80063b4:	f107 020c 	add.w	r2, r7, #12
 80063b8:	2301      	movs	r3, #1
 80063ba:	2111      	movs	r1, #17
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f7ff ff06 	bl	80061ce <lps22hh_read_reg>
 80063c2:	6178      	str	r0, [r7, #20]
 80063c4:	7b3b      	ldrb	r3, [r7, #12]
 80063c6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	011a      	lsls	r2, r3, #4
 80063ce:	7b3b      	ldrb	r3, [r7, #12]
 80063d0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	00db      	lsls	r3, r3, #3
 80063d8:	4413      	add	r3, r2
 80063da:	7c3a      	ldrb	r2, [r7, #16]
 80063dc:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80063e0:	b2d2      	uxtb	r2, r2
 80063e2:	4413      	add	r3, r2
 80063e4:	2b15      	cmp	r3, #21
 80063e6:	d867      	bhi.n	80064b8 <lps22hh_data_rate_get+0x13c>
 80063e8:	a201      	add	r2, pc, #4	; (adr r2, 80063f0 <lps22hh_data_rate_get+0x74>)
 80063ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ee:	bf00      	nop
 80063f0:	08006449 	.word	0x08006449
 80063f4:	08006459 	.word	0x08006459
 80063f8:	08006461 	.word	0x08006461
 80063fc:	08006469 	.word	0x08006469
 8006400:	08006471 	.word	0x08006471
 8006404:	08006479 	.word	0x08006479
 8006408:	080064a9 	.word	0x080064a9
 800640c:	080064b1 	.word	0x080064b1
 8006410:	08006451 	.word	0x08006451
 8006414:	080064b9 	.word	0x080064b9
 8006418:	080064b9 	.word	0x080064b9
 800641c:	080064b9 	.word	0x080064b9
 8006420:	080064b9 	.word	0x080064b9
 8006424:	080064b9 	.word	0x080064b9
 8006428:	080064b9 	.word	0x080064b9
 800642c:	080064b9 	.word	0x080064b9
 8006430:	080064b9 	.word	0x080064b9
 8006434:	08006481 	.word	0x08006481
 8006438:	08006489 	.word	0x08006489
 800643c:	08006491 	.word	0x08006491
 8006440:	08006499 	.word	0x08006499
 8006444:	080064a1 	.word	0x080064a1
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2200      	movs	r2, #0
 800644c:	701a      	strb	r2, [r3, #0]
 800644e:	e038      	b.n	80064c2 <lps22hh_data_rate_get+0x146>
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	2208      	movs	r2, #8
 8006454:	701a      	strb	r2, [r3, #0]
 8006456:	e034      	b.n	80064c2 <lps22hh_data_rate_get+0x146>
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2201      	movs	r2, #1
 800645c:	701a      	strb	r2, [r3, #0]
 800645e:	e030      	b.n	80064c2 <lps22hh_data_rate_get+0x146>
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	2202      	movs	r2, #2
 8006464:	701a      	strb	r2, [r3, #0]
 8006466:	e02c      	b.n	80064c2 <lps22hh_data_rate_get+0x146>
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	2203      	movs	r2, #3
 800646c:	701a      	strb	r2, [r3, #0]
 800646e:	e028      	b.n	80064c2 <lps22hh_data_rate_get+0x146>
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	2204      	movs	r2, #4
 8006474:	701a      	strb	r2, [r3, #0]
 8006476:	e024      	b.n	80064c2 <lps22hh_data_rate_get+0x146>
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	2205      	movs	r2, #5
 800647c:	701a      	strb	r2, [r3, #0]
 800647e:	e020      	b.n	80064c2 <lps22hh_data_rate_get+0x146>
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	2211      	movs	r2, #17
 8006484:	701a      	strb	r2, [r3, #0]
 8006486:	e01c      	b.n	80064c2 <lps22hh_data_rate_get+0x146>
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	2212      	movs	r2, #18
 800648c:	701a      	strb	r2, [r3, #0]
 800648e:	e018      	b.n	80064c2 <lps22hh_data_rate_get+0x146>
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	2213      	movs	r2, #19
 8006494:	701a      	strb	r2, [r3, #0]
 8006496:	e014      	b.n	80064c2 <lps22hh_data_rate_get+0x146>
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	2214      	movs	r2, #20
 800649c:	701a      	strb	r2, [r3, #0]
 800649e:	e010      	b.n	80064c2 <lps22hh_data_rate_get+0x146>
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	2215      	movs	r2, #21
 80064a4:	701a      	strb	r2, [r3, #0]
 80064a6:	e00c      	b.n	80064c2 <lps22hh_data_rate_get+0x146>
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	2206      	movs	r2, #6
 80064ac:	701a      	strb	r2, [r3, #0]
 80064ae:	e008      	b.n	80064c2 <lps22hh_data_rate_get+0x146>
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	2207      	movs	r2, #7
 80064b4:	701a      	strb	r2, [r3, #0]
 80064b6:	e004      	b.n	80064c2 <lps22hh_data_rate_get+0x146>
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	2200      	movs	r2, #0
 80064bc:	701a      	strb	r2, [r3, #0]
 80064be:	e000      	b.n	80064c2 <lps22hh_data_rate_get+0x146>
 80064c0:	bf00      	nop
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	4618      	mov	r0, r3
 80064c6:	3718      	adds	r7, #24
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <lps22hh_pressure_raw_get>:
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
 80064d6:	f107 0208 	add.w	r2, r7, #8
 80064da:	2303      	movs	r3, #3
 80064dc:	2128      	movs	r1, #40	; 0x28
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7ff fe75 	bl	80061ce <lps22hh_read_reg>
 80064e4:	60f8      	str	r0, [r7, #12]
 80064e6:	7abb      	ldrb	r3, [r7, #10]
 80064e8:	461a      	mov	r2, r3
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	601a      	str	r2, [r3, #0]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	021b      	lsls	r3, r3, #8
 80064f4:	7a7a      	ldrb	r2, [r7, #9]
 80064f6:	441a      	add	r2, r3
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	601a      	str	r2, [r3, #0]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	021b      	lsls	r3, r3, #8
 8006502:	7a3a      	ldrb	r2, [r7, #8]
 8006504:	441a      	add	r2, r3
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	601a      	str	r2, [r3, #0]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	021a      	lsls	r2, r3, #8
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	601a      	str	r2, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <lps22hh_temperature_raw_get>:
 800651e:	b580      	push	{r7, lr}
 8006520:	b084      	sub	sp, #16
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	6039      	str	r1, [r7, #0]
 8006528:	f107 0208 	add.w	r2, r7, #8
 800652c:	2302      	movs	r3, #2
 800652e:	212b      	movs	r1, #43	; 0x2b
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f7ff fe4c 	bl	80061ce <lps22hh_read_reg>
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	7a7b      	ldrb	r3, [r7, #9]
 800653a:	b21a      	sxth	r2, r3
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	801a      	strh	r2, [r3, #0]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006546:	b29b      	uxth	r3, r3
 8006548:	021b      	lsls	r3, r3, #8
 800654a:	b29a      	uxth	r2, r3
 800654c:	7a3b      	ldrb	r3, [r7, #8]
 800654e:	b29b      	uxth	r3, r3
 8006550:	4413      	add	r3, r2
 8006552:	b29b      	uxth	r3, r3
 8006554:	b21a      	sxth	r2, r3
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	801a      	strh	r2, [r3, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <lps22hh_device_id_get>:
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
 800656e:	2301      	movs	r3, #1
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	210f      	movs	r1, #15
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f7ff fe2a 	bl	80061ce <lps22hh_read_reg>
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <lps22hh_auto_increment_set>:
 8006586:	b580      	push	{r7, lr}
 8006588:	b084      	sub	sp, #16
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	460b      	mov	r3, r1
 8006590:	70fb      	strb	r3, [r7, #3]
 8006592:	f107 0208 	add.w	r2, r7, #8
 8006596:	2301      	movs	r3, #1
 8006598:	2111      	movs	r1, #17
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7ff fe17 	bl	80061ce <lps22hh_read_reg>
 80065a0:	60f8      	str	r0, [r7, #12]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10f      	bne.n	80065c8 <lps22hh_auto_increment_set+0x42>
 80065a8:	78fb      	ldrb	r3, [r7, #3]
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	b2da      	uxtb	r2, r3
 80065b0:	7a3b      	ldrb	r3, [r7, #8]
 80065b2:	f362 1304 	bfi	r3, r2, #4, #1
 80065b6:	723b      	strb	r3, [r7, #8]
 80065b8:	f107 0208 	add.w	r2, r7, #8
 80065bc:	2301      	movs	r3, #1
 80065be:	2111      	movs	r1, #17
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f7ff fe1c 	bl	80061fe <lps22hh_write_reg>
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	4618      	mov	r0, r3
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <lps22hh_lp_bandwidth_set>:
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b084      	sub	sp, #16
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
 80065da:	460b      	mov	r3, r1
 80065dc:	70fb      	strb	r3, [r7, #3]
 80065de:	f107 0208 	add.w	r2, r7, #8
 80065e2:	2301      	movs	r3, #1
 80065e4:	2110      	movs	r1, #16
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7ff fdf1 	bl	80061ce <lps22hh_read_reg>
 80065ec:	60f8      	str	r0, [r7, #12]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10f      	bne.n	8006614 <lps22hh_lp_bandwidth_set+0x42>
 80065f4:	78fb      	ldrb	r3, [r7, #3]
 80065f6:	f003 0303 	and.w	r3, r3, #3
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	7a3b      	ldrb	r3, [r7, #8]
 80065fe:	f362 0383 	bfi	r3, r2, #2, #2
 8006602:	723b      	strb	r3, [r7, #8]
 8006604:	f107 0208 	add.w	r2, r7, #8
 8006608:	2301      	movs	r3, #1
 800660a:	2110      	movs	r1, #16
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f7ff fdf6 	bl	80061fe <lps22hh_write_reg>
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <lps22hh_i3c_interface_set>:
 800661e:	b580      	push	{r7, lr}
 8006620:	b084      	sub	sp, #16
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
 8006626:	460b      	mov	r3, r1
 8006628:	70fb      	strb	r3, [r7, #3]
 800662a:	f107 0208 	add.w	r2, r7, #8
 800662e:	2301      	movs	r3, #1
 8006630:	210e      	movs	r1, #14
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f7ff fdcb 	bl	80061ce <lps22hh_read_reg>
 8006638:	60f8      	str	r0, [r7, #12]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d118      	bne.n	8006672 <lps22hh_i3c_interface_set+0x54>
 8006640:	78fb      	ldrb	r3, [r7, #3]
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	b2da      	uxtb	r2, r3
 8006648:	7a3b      	ldrb	r3, [r7, #8]
 800664a:	f362 0341 	bfi	r3, r2, #1, #1
 800664e:	723b      	strb	r3, [r7, #8]
 8006650:	78fb      	ldrb	r3, [r7, #3]
 8006652:	091b      	lsrs	r3, r3, #4
 8006654:	f003 0301 	and.w	r3, r3, #1
 8006658:	b2da      	uxtb	r2, r3
 800665a:	7a3b      	ldrb	r3, [r7, #8]
 800665c:	f362 13c7 	bfi	r3, r2, #7, #1
 8006660:	723b      	strb	r3, [r7, #8]
 8006662:	f107 0208 	add.w	r2, r7, #8
 8006666:	2301      	movs	r3, #1
 8006668:	210e      	movs	r1, #14
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f7ff fdc7 	bl	80061fe <lps22hh_write_reg>
 8006670:	60f8      	str	r0, [r7, #12]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	4618      	mov	r0, r3
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <LSM6DSO_RegisterBusIO>:
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
 8006686:	2300      	movs	r3, #0
 8006688:	60fb      	str	r3, [r7, #12]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d103      	bne.n	8006698 <LSM6DSO_RegisterBusIO+0x1c>
 8006690:	f04f 33ff 	mov.w	r3, #4294967295
 8006694:	60fb      	str	r3, [r7, #12]
 8006696:	e04d      	b.n	8006734 <LSM6DSO_RegisterBusIO+0xb8>
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	601a      	str	r2, [r3, #0]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	605a      	str	r2, [r3, #4]
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	689a      	ldr	r2, [r3, #8]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	609a      	str	r2, [r3, #8]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	7b1a      	ldrb	r2, [r3, #12]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	731a      	strb	r2, [r3, #12]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	691a      	ldr	r2, [r3, #16]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	611a      	str	r2, [r3, #16]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	695a      	ldr	r2, [r3, #20]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	615a      	str	r2, [r3, #20]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	699a      	ldr	r2, [r3, #24]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	619a      	str	r2, [r3, #24]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a1b      	ldr	r2, [pc, #108]	; (8006740 <LSM6DSO_RegisterBusIO+0xc4>)
 80066d4:	621a      	str	r2, [r3, #32]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a1a      	ldr	r2, [pc, #104]	; (8006744 <LSM6DSO_RegisterBusIO+0xc8>)
 80066da:	61da      	str	r2, [r3, #28]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	625a      	str	r2, [r3, #36]	; 0x24
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d103      	bne.n	80066f2 <LSM6DSO_RegisterBusIO+0x76>
 80066ea:	f04f 33ff 	mov.w	r3, #4294967295
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	e020      	b.n	8006734 <LSM6DSO_RegisterBusIO+0xb8>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4798      	blx	r3
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d003      	beq.n	8006706 <LSM6DSO_RegisterBusIO+0x8a>
 80066fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006702:	60fb      	str	r3, [r7, #12]
 8006704:	e016      	b.n	8006734 <LSM6DSO_RegisterBusIO+0xb8>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	2b02      	cmp	r3, #2
 800670c:	d112      	bne.n	8006734 <LSM6DSO_RegisterBusIO+0xb8>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10d      	bne.n	8006734 <LSM6DSO_RegisterBusIO+0xb8>
 8006718:	230c      	movs	r3, #12
 800671a:	72fb      	strb	r3, [r7, #11]
 800671c:	7afb      	ldrb	r3, [r7, #11]
 800671e:	461a      	mov	r2, r3
 8006720:	2112      	movs	r1, #18
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 ff57 	bl	80075d6 <LSM6DSO_Write_Reg>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d002      	beq.n	8006734 <LSM6DSO_RegisterBusIO+0xb8>
 800672e:	f04f 33ff 	mov.w	r3, #4294967295
 8006732:	60fb      	str	r3, [r7, #12]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	4618      	mov	r0, r3
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	08007a79 	.word	0x08007a79
 8006744:	08007aaf 	.word	0x08007aaf

08006748 <LSM6DSO_Init>:
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	331c      	adds	r3, #28
 8006754:	2180      	movs	r1, #128	; 0x80
 8006756:	4618      	mov	r0, r3
 8006758:	f001 fe21 	bl	800839e <lsm6dso_i3c_disable_set>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d002      	beq.n	8006768 <LSM6DSO_Init+0x20>
 8006762:	f04f 33ff 	mov.w	r3, #4294967295
 8006766:	e060      	b.n	800682a <LSM6DSO_Init+0xe2>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	331c      	adds	r3, #28
 800676c:	2101      	movs	r1, #1
 800676e:	4618      	mov	r0, r3
 8006770:	f001 fdef 	bl	8008352 <lsm6dso_auto_increment_set>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d002      	beq.n	8006780 <LSM6DSO_Init+0x38>
 800677a:	f04f 33ff 	mov.w	r3, #4294967295
 800677e:	e054      	b.n	800682a <LSM6DSO_Init+0xe2>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	331c      	adds	r3, #28
 8006784:	2101      	movs	r1, #1
 8006786:	4618      	mov	r0, r3
 8006788:	f001 fd64 	bl	8008254 <lsm6dso_block_data_update_set>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d002      	beq.n	8006798 <LSM6DSO_Init+0x50>
 8006792:	f04f 33ff 	mov.w	r3, #4294967295
 8006796:	e048      	b.n	800682a <LSM6DSO_Init+0xe2>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	331c      	adds	r3, #28
 800679c:	2100      	movs	r1, #0
 800679e:	4618      	mov	r0, r3
 80067a0:	f001 fe43 	bl	800842a <lsm6dso_fifo_mode_set>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d002      	beq.n	80067b0 <LSM6DSO_Init+0x68>
 80067aa:	f04f 33ff 	mov.w	r3, #4294967295
 80067ae:	e03c      	b.n	800682a <LSM6DSO_Init+0xe2>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2204      	movs	r2, #4
 80067b4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	331c      	adds	r3, #28
 80067bc:	2100      	movs	r1, #0
 80067be:	4618      	mov	r0, r3
 80067c0:	f001 fa1e 	bl	8007c00 <lsm6dso_xl_data_rate_set>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d002      	beq.n	80067d0 <LSM6DSO_Init+0x88>
 80067ca:	f04f 33ff 	mov.w	r3, #4294967295
 80067ce:	e02c      	b.n	800682a <LSM6DSO_Init+0xe2>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	331c      	adds	r3, #28
 80067d4:	2100      	movs	r1, #0
 80067d6:	4618      	mov	r0, r3
 80067d8:	f001 f9b4 	bl	8007b44 <lsm6dso_xl_full_scale_set>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d002      	beq.n	80067e8 <LSM6DSO_Init+0xa0>
 80067e2:	f04f 33ff 	mov.w	r3, #4294967295
 80067e6:	e020      	b.n	800682a <LSM6DSO_Init+0xe2>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2204      	movs	r2, #4
 80067ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	331c      	adds	r3, #28
 80067f4:	2100      	movs	r1, #0
 80067f6:	4618      	mov	r0, r3
 80067f8:	f001 fbce 	bl	8007f98 <lsm6dso_gy_data_rate_set>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d002      	beq.n	8006808 <LSM6DSO_Init+0xc0>
 8006802:	f04f 33ff 	mov.w	r3, #4294967295
 8006806:	e010      	b.n	800682a <LSM6DSO_Init+0xe2>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	331c      	adds	r3, #28
 800680c:	2106      	movs	r1, #6
 800680e:	4618      	mov	r0, r3
 8006810:	f001 fb5a 	bl	8007ec8 <lsm6dso_gy_full_scale_set>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d002      	beq.n	8006820 <LSM6DSO_Init+0xd8>
 800681a:	f04f 33ff 	mov.w	r3, #4294967295
 800681e:	e004      	b.n	800682a <LSM6DSO_Init+0xe2>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006828:	2300      	movs	r3, #0
 800682a:	4618      	mov	r0, r3
 800682c:	3708      	adds	r7, #8
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <LSM6DSO_DeInit>:
 8006832:	b580      	push	{r7, lr}
 8006834:	b082      	sub	sp, #8
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f888 	bl	8006950 <LSM6DSO_ACC_Disable>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d002      	beq.n	800684c <LSM6DSO_DeInit+0x1a>
 8006846:	f04f 33ff 	mov.w	r3, #4294967295
 800684a:	e015      	b.n	8006878 <LSM6DSO_DeInit+0x46>
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fc2c 	bl	80070aa <LSM6DSO_GYRO_Disable>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d002      	beq.n	800685e <LSM6DSO_DeInit+0x2c>
 8006858:	f04f 33ff 	mov.w	r3, #4294967295
 800685c:	e00c      	b.n	8006878 <LSM6DSO_DeInit+0x46>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006876:	2300      	movs	r3, #0
 8006878:	4618      	mov	r0, r3
 800687a:	3708      	adds	r7, #8
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <LSM6DSO_ReadID>:
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	331c      	adds	r3, #28
 800688e:	6839      	ldr	r1, [r7, #0]
 8006890:	4618      	mov	r0, r3
 8006892:	f001 fd4d 	bl	8008330 <lsm6dso_device_id_get>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d002      	beq.n	80068a2 <LSM6DSO_ReadID+0x22>
 800689c:	f04f 33ff 	mov.w	r3, #4294967295
 80068a0:	e000      	b.n	80068a4 <LSM6DSO_ReadID+0x24>
 80068a2:	2300      	movs	r3, #0
 80068a4:	4618      	mov	r0, r3
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <LSM6DSO_GetCapabilities>:
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	2201      	movs	r2, #1
 80068ba:	701a      	strb	r2, [r3, #0]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	2201      	movs	r2, #1
 80068c0:	705a      	strb	r2, [r3, #1]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	2200      	movs	r2, #0
 80068c6:	709a      	strb	r2, [r3, #2]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	2200      	movs	r2, #0
 80068cc:	70da      	strb	r2, [r3, #3]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80068d4:	605a      	str	r2, [r3, #4]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2210      	movs	r2, #16
 80068da:	609a      	str	r2, [r3, #8]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	2200      	movs	r2, #0
 80068e0:	60da      	str	r2, [r3, #12]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	4a07      	ldr	r2, [pc, #28]	; (8006904 <LSM6DSO_GetCapabilities+0x58>)
 80068e6:	611a      	str	r2, [r3, #16]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	4a06      	ldr	r2, [pc, #24]	; (8006904 <LSM6DSO_GetCapabilities+0x58>)
 80068ec:	615a      	str	r2, [r3, #20]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	f04f 0200 	mov.w	r2, #0
 80068f4:	619a      	str	r2, [r3, #24]
 80068f6:	2300      	movs	r3, #0
 80068f8:	4618      	mov	r0, r3
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	45d02000 	.word	0x45d02000

08006908 <LSM6DSO_ACC_Enable>:
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006916:	2b01      	cmp	r3, #1
 8006918:	d101      	bne.n	800691e <LSM6DSO_ACC_Enable+0x16>
 800691a:	2300      	movs	r3, #0
 800691c:	e014      	b.n	8006948 <LSM6DSO_ACC_Enable+0x40>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f103 021c 	add.w	r2, r3, #28
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800692a:	4619      	mov	r1, r3
 800692c:	4610      	mov	r0, r2
 800692e:	f001 f967 	bl	8007c00 <lsm6dso_xl_data_rate_set>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d002      	beq.n	800693e <LSM6DSO_ACC_Enable+0x36>
 8006938:	f04f 33ff 	mov.w	r3, #4294967295
 800693c:	e004      	b.n	8006948 <LSM6DSO_ACC_Enable+0x40>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8006946:	2300      	movs	r3, #0
 8006948:	4618      	mov	r0, r3
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <LSM6DSO_ACC_Disable>:
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800695e:	2b00      	cmp	r3, #0
 8006960:	d101      	bne.n	8006966 <LSM6DSO_ACC_Disable+0x16>
 8006962:	2300      	movs	r3, #0
 8006964:	e01f      	b.n	80069a6 <LSM6DSO_ACC_Disable+0x56>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f103 021c 	add.w	r2, r3, #28
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	332b      	adds	r3, #43	; 0x2b
 8006970:	4619      	mov	r1, r3
 8006972:	4610      	mov	r0, r2
 8006974:	f001 fa40 	bl	8007df8 <lsm6dso_xl_data_rate_get>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d002      	beq.n	8006984 <LSM6DSO_ACC_Disable+0x34>
 800697e:	f04f 33ff 	mov.w	r3, #4294967295
 8006982:	e010      	b.n	80069a6 <LSM6DSO_ACC_Disable+0x56>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	331c      	adds	r3, #28
 8006988:	2100      	movs	r1, #0
 800698a:	4618      	mov	r0, r3
 800698c:	f001 f938 	bl	8007c00 <lsm6dso_xl_data_rate_set>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d002      	beq.n	800699c <LSM6DSO_ACC_Disable+0x4c>
 8006996:	f04f 33ff 	mov.w	r3, #4294967295
 800699a:	e004      	b.n	80069a6 <LSM6DSO_ACC_Disable+0x56>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80069a4:	2300      	movs	r3, #0
 80069a6:	4618      	mov	r0, r3
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
	...

080069b0 <LSM6DSO_ACC_GetSensitivity>:
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
 80069ba:	2300      	movs	r3, #0
 80069bc:	60fb      	str	r3, [r7, #12]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	331c      	adds	r3, #28
 80069c2:	f107 020b 	add.w	r2, r7, #11
 80069c6:	4611      	mov	r1, r2
 80069c8:	4618      	mov	r0, r3
 80069ca:	f001 f8e1 	bl	8007b90 <lsm6dso_xl_full_scale_get>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d002      	beq.n	80069da <LSM6DSO_ACC_GetSensitivity+0x2a>
 80069d4:	f04f 33ff 	mov.w	r3, #4294967295
 80069d8:	e023      	b.n	8006a22 <LSM6DSO_ACC_GetSensitivity+0x72>
 80069da:	7afb      	ldrb	r3, [r7, #11]
 80069dc:	2b03      	cmp	r3, #3
 80069de:	d81b      	bhi.n	8006a18 <LSM6DSO_ACC_GetSensitivity+0x68>
 80069e0:	a201      	add	r2, pc, #4	; (adr r2, 80069e8 <LSM6DSO_ACC_GetSensitivity+0x38>)
 80069e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e6:	bf00      	nop
 80069e8:	080069f9 	.word	0x080069f9
 80069ec:	08006a11 	.word	0x08006a11
 80069f0:	08006a01 	.word	0x08006a01
 80069f4:	08006a09 	.word	0x08006a09
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	4a0c      	ldr	r2, [pc, #48]	; (8006a2c <LSM6DSO_ACC_GetSensitivity+0x7c>)
 80069fc:	601a      	str	r2, [r3, #0]
 80069fe:	e00f      	b.n	8006a20 <LSM6DSO_ACC_GetSensitivity+0x70>
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	4a0b      	ldr	r2, [pc, #44]	; (8006a30 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8006a04:	601a      	str	r2, [r3, #0]
 8006a06:	e00b      	b.n	8006a20 <LSM6DSO_ACC_GetSensitivity+0x70>
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	4a0a      	ldr	r2, [pc, #40]	; (8006a34 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8006a0c:	601a      	str	r2, [r3, #0]
 8006a0e:	e007      	b.n	8006a20 <LSM6DSO_ACC_GetSensitivity+0x70>
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	4a09      	ldr	r2, [pc, #36]	; (8006a38 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8006a14:	601a      	str	r2, [r3, #0]
 8006a16:	e003      	b.n	8006a20 <LSM6DSO_ACC_GetSensitivity+0x70>
 8006a18:	f04f 33ff 	mov.w	r3, #4294967295
 8006a1c:	60fb      	str	r3, [r7, #12]
 8006a1e:	bf00      	nop
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	3d79db23 	.word	0x3d79db23
 8006a30:	3df9db23 	.word	0x3df9db23
 8006a34:	3e79db23 	.word	0x3e79db23
 8006a38:	3ef9db23 	.word	0x3ef9db23

08006a3c <LSM6DSO_ACC_GetOutputDataRate>:
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
 8006a46:	2300      	movs	r3, #0
 8006a48:	60fb      	str	r3, [r7, #12]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	331c      	adds	r3, #28
 8006a4e:	f107 020b 	add.w	r2, r7, #11
 8006a52:	4611      	mov	r1, r2
 8006a54:	4618      	mov	r0, r3
 8006a56:	f001 f9cf 	bl	8007df8 <lsm6dso_xl_data_rate_get>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d002      	beq.n	8006a66 <LSM6DSO_ACC_GetOutputDataRate+0x2a>
 8006a60:	f04f 33ff 	mov.w	r3, #4294967295
 8006a64:	e054      	b.n	8006b10 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
 8006a66:	7afb      	ldrb	r3, [r7, #11]
 8006a68:	2b0b      	cmp	r3, #11
 8006a6a:	d84c      	bhi.n	8006b06 <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8006a6c:	a201      	add	r2, pc, #4	; (adr r2, 8006a74 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 8006a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a72:	bf00      	nop
 8006a74:	08006aa5 	.word	0x08006aa5
 8006a78:	08006ab7 	.word	0x08006ab7
 8006a7c:	08006abf 	.word	0x08006abf
 8006a80:	08006ac7 	.word	0x08006ac7
 8006a84:	08006acf 	.word	0x08006acf
 8006a88:	08006ad7 	.word	0x08006ad7
 8006a8c:	08006adf 	.word	0x08006adf
 8006a90:	08006ae7 	.word	0x08006ae7
 8006a94:	08006aef 	.word	0x08006aef
 8006a98:	08006af7 	.word	0x08006af7
 8006a9c:	08006aff 	.word	0x08006aff
 8006aa0:	08006aaf 	.word	0x08006aaf
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	f04f 0200 	mov.w	r2, #0
 8006aaa:	601a      	str	r2, [r3, #0]
 8006aac:	e02f      	b.n	8006b0e <LSM6DSO_ACC_GetOutputDataRate+0xd2>
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	4a19      	ldr	r2, [pc, #100]	; (8006b18 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	e02b      	b.n	8006b0e <LSM6DSO_ACC_GetOutputDataRate+0xd2>
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	4a18      	ldr	r2, [pc, #96]	; (8006b1c <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 8006aba:	601a      	str	r2, [r3, #0]
 8006abc:	e027      	b.n	8006b0e <LSM6DSO_ACC_GetOutputDataRate+0xd2>
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	4a17      	ldr	r2, [pc, #92]	; (8006b20 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 8006ac2:	601a      	str	r2, [r3, #0]
 8006ac4:	e023      	b.n	8006b0e <LSM6DSO_ACC_GetOutputDataRate+0xd2>
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	4a16      	ldr	r2, [pc, #88]	; (8006b24 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8006aca:	601a      	str	r2, [r3, #0]
 8006acc:	e01f      	b.n	8006b0e <LSM6DSO_ACC_GetOutputDataRate+0xd2>
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	4a15      	ldr	r2, [pc, #84]	; (8006b28 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	e01b      	b.n	8006b0e <LSM6DSO_ACC_GetOutputDataRate+0xd2>
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	4a14      	ldr	r2, [pc, #80]	; (8006b2c <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8006ada:	601a      	str	r2, [r3, #0]
 8006adc:	e017      	b.n	8006b0e <LSM6DSO_ACC_GetOutputDataRate+0xd2>
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	4a13      	ldr	r2, [pc, #76]	; (8006b30 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	e013      	b.n	8006b0e <LSM6DSO_ACC_GetOutputDataRate+0xd2>
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	4a12      	ldr	r2, [pc, #72]	; (8006b34 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8006aea:	601a      	str	r2, [r3, #0]
 8006aec:	e00f      	b.n	8006b0e <LSM6DSO_ACC_GetOutputDataRate+0xd2>
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	4a11      	ldr	r2, [pc, #68]	; (8006b38 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 8006af2:	601a      	str	r2, [r3, #0]
 8006af4:	e00b      	b.n	8006b0e <LSM6DSO_ACC_GetOutputDataRate+0xd2>
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	4a10      	ldr	r2, [pc, #64]	; (8006b3c <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 8006afa:	601a      	str	r2, [r3, #0]
 8006afc:	e007      	b.n	8006b0e <LSM6DSO_ACC_GetOutputDataRate+0xd2>
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	4a0f      	ldr	r2, [pc, #60]	; (8006b40 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 8006b02:	601a      	str	r2, [r3, #0]
 8006b04:	e003      	b.n	8006b0e <LSM6DSO_ACC_GetOutputDataRate+0xd2>
 8006b06:	f04f 33ff 	mov.w	r3, #4294967295
 8006b0a:	60fb      	str	r3, [r7, #12]
 8006b0c:	bf00      	nop
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	4618      	mov	r0, r3
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	3fcccccd 	.word	0x3fcccccd
 8006b1c:	41480000 	.word	0x41480000
 8006b20:	41d00000 	.word	0x41d00000
 8006b24:	42500000 	.word	0x42500000
 8006b28:	42d00000 	.word	0x42d00000
 8006b2c:	43500000 	.word	0x43500000
 8006b30:	43d08000 	.word	0x43d08000
 8006b34:	44504000 	.word	0x44504000
 8006b38:	44d06000 	.word	0x44d06000
 8006b3c:	45505000 	.word	0x45505000
 8006b40:	45d05800 	.word	0x45d05800

08006b44 <LSM6DSO_ACC_SetOutputDataRate>:
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	ed87 0a00 	vstr	s0, [r7]
 8006b50:	2100      	movs	r1, #0
 8006b52:	ed97 0a00 	vldr	s0, [r7]
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f806 	bl	8006b68 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
	...

08006b68 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b08c      	sub	sp, #48	; 0x30
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	ed87 0a02 	vstr	s0, [r7, #8]
 8006b74:	460b      	mov	r3, r1
 8006b76:	71fb      	strb	r3, [r7, #7]
 8006b78:	2300      	movs	r3, #0
 8006b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b80:	79fb      	ldrb	r3, [r7, #7]
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d079      	beq.n	8006c7a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	f000 80e5 	beq.w	8006d56 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f040 815e 	bne.w	8006e4e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f103 001c 	add.w	r0, r3, #28
 8006b98:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	2114      	movs	r1, #20
 8006ba0:	f000 ffa0 	bl	8007ae4 <lsm6dso_read_reg>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d002      	beq.n	8006bb0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x48>
 8006baa:	f04f 33ff 	mov.w	r3, #4294967295
 8006bae:	e16c      	b.n	8006e8a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
 8006bb0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006bb4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d025      	beq.n	8006c0a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa2>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d10b      	bne.n	8006be0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x78>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	331c      	adds	r3, #28
 8006bcc:	2100      	movs	r1, #0
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f001 f816 	bl	8007c00 <lsm6dso_xl_data_rate_set>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d002      	beq.n	8006be0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x78>
 8006bda:	f04f 33ff 	mov.w	r3, #4294967295
 8006bde:	e154      	b.n	8006e8a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
 8006be0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006be4:	f36f 13c7 	bfc	r3, #7, #1
 8006be8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f103 001c 	add.w	r0, r3, #28
 8006bf2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	2114      	movs	r1, #20
 8006bfa:	f000 ff8b 	bl	8007b14 <lsm6dso_write_reg>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d002      	beq.n	8006c0a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa2>
 8006c04:	f04f 33ff 	mov.w	r3, #4294967295
 8006c08:	e13f      	b.n	8006e8a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f103 001c 	add.w	r0, r3, #28
 8006c10:	f107 0220 	add.w	r2, r7, #32
 8006c14:	2301      	movs	r3, #1
 8006c16:	2115      	movs	r1, #21
 8006c18:	f000 ff64 	bl	8007ae4 <lsm6dso_read_reg>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d002      	beq.n	8006c28 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc0>
 8006c22:	f04f 33ff 	mov.w	r3, #4294967295
 8006c26:	e130      	b.n	8006e8a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
 8006c28:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006c2c:	f003 0310 	and.w	r3, r3, #16
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d014      	beq.n	8006c60 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xf8>
 8006c36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006c3a:	f36f 1304 	bfc	r3, #4, #1
 8006c3e:	f887 3020 	strb.w	r3, [r7, #32]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f103 001c 	add.w	r0, r3, #28
 8006c48:	f107 0220 	add.w	r2, r7, #32
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	2115      	movs	r1, #21
 8006c50:	f000 ff60 	bl	8007b14 <lsm6dso_write_reg>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d002      	beq.n	8006c60 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xf8>
 8006c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c5e:	e114      	b.n	8006e8a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
 8006c60:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006c64:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006c68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c70:	d400      	bmi.n	8006c74 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x10c>
 8006c72:	e0f0      	b.n	8006e56 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
 8006c74:	4b87      	ldr	r3, [pc, #540]	; (8006e94 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x32c>)
 8006c76:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c78:	e0ed      	b.n	8006e56 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f103 001c 	add.w	r0, r3, #28
 8006c80:	f107 021c 	add.w	r2, r7, #28
 8006c84:	2301      	movs	r3, #1
 8006c86:	2114      	movs	r1, #20
 8006c88:	f000 ff2c 	bl	8007ae4 <lsm6dso_read_reg>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d002      	beq.n	8006c98 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x130>
 8006c92:	f04f 33ff 	mov.w	r3, #4294967295
 8006c96:	e0f8      	b.n	8006e8a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
 8006c98:	7f3b      	ldrb	r3, [r7, #28]
 8006c9a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d023      	beq.n	8006cec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x184>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d10b      	bne.n	8006cc6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x15e>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	331c      	adds	r3, #28
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 ffa3 	bl	8007c00 <lsm6dso_xl_data_rate_set>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d002      	beq.n	8006cc6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x15e>
 8006cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8006cc4:	e0e1      	b.n	8006e8a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
 8006cc6:	7f3b      	ldrb	r3, [r7, #28]
 8006cc8:	f36f 13c7 	bfc	r3, #7, #1
 8006ccc:	773b      	strb	r3, [r7, #28]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f103 001c 	add.w	r0, r3, #28
 8006cd4:	f107 021c 	add.w	r2, r7, #28
 8006cd8:	2301      	movs	r3, #1
 8006cda:	2114      	movs	r1, #20
 8006cdc:	f000 ff1a 	bl	8007b14 <lsm6dso_write_reg>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d002      	beq.n	8006cec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x184>
 8006ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8006cea:	e0ce      	b.n	8006e8a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f103 001c 	add.w	r0, r3, #28
 8006cf2:	f107 0218 	add.w	r2, r7, #24
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	2115      	movs	r1, #21
 8006cfa:	f000 fef3 	bl	8007ae4 <lsm6dso_read_reg>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a2>
 8006d04:	f04f 33ff 	mov.w	r3, #4294967295
 8006d08:	e0bf      	b.n	8006e8a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
 8006d0a:	7e3b      	ldrb	r3, [r7, #24]
 8006d0c:	f003 0310 	and.w	r3, r3, #16
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d112      	bne.n	8006d3c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1d4>
 8006d16:	7e3b      	ldrb	r3, [r7, #24]
 8006d18:	f043 0310 	orr.w	r3, r3, #16
 8006d1c:	763b      	strb	r3, [r7, #24]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f103 001c 	add.w	r0, r3, #28
 8006d24:	f107 0218 	add.w	r2, r7, #24
 8006d28:	2301      	movs	r3, #1
 8006d2a:	2115      	movs	r1, #21
 8006d2c:	f000 fef2 	bl	8007b14 <lsm6dso_write_reg>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d002      	beq.n	8006d3c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1d4>
 8006d36:	f04f 33ff 	mov.w	r3, #4294967295
 8006d3a:	e0a6      	b.n	8006e8a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
 8006d3c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006d40:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8006e98 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>
 8006d44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d4c:	dc00      	bgt.n	8006d50 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1e8>
 8006d4e:	e082      	b.n	8006e56 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
 8006d50:	4b52      	ldr	r3, [pc, #328]	; (8006e9c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>)
 8006d52:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d54:	e07f      	b.n	8006e56 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f103 001c 	add.w	r0, r3, #28
 8006d5c:	f107 0210 	add.w	r2, r7, #16
 8006d60:	2301      	movs	r3, #1
 8006d62:	2115      	movs	r1, #21
 8006d64:	f000 febe 	bl	8007ae4 <lsm6dso_read_reg>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d002      	beq.n	8006d74 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x20c>
 8006d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d72:	e08a      	b.n	8006e8a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
 8006d74:	7c3b      	ldrb	r3, [r7, #16]
 8006d76:	f003 0310 	and.w	r3, r3, #16
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d012      	beq.n	8006da6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x23e>
 8006d80:	7c3b      	ldrb	r3, [r7, #16]
 8006d82:	f36f 1304 	bfc	r3, #4, #1
 8006d86:	743b      	strb	r3, [r7, #16]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f103 001c 	add.w	r0, r3, #28
 8006d8e:	f107 0210 	add.w	r2, r7, #16
 8006d92:	2301      	movs	r3, #1
 8006d94:	2115      	movs	r1, #21
 8006d96:	f000 febd 	bl	8007b14 <lsm6dso_write_reg>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d002      	beq.n	8006da6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x23e>
 8006da0:	f04f 33ff 	mov.w	r3, #4294967295
 8006da4:	e071      	b.n	8006e8a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d108      	bne.n	8006dc2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x25a>
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f000 f97a 	bl	80070aa <LSM6DSO_GYRO_Disable>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d002      	beq.n	8006dc2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x25a>
 8006dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8006dc0:	e063      	b.n	8006e8a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f103 001c 	add.w	r0, r3, #28
 8006dc8:	f107 0214 	add.w	r2, r7, #20
 8006dcc:	2301      	movs	r3, #1
 8006dce:	2114      	movs	r1, #20
 8006dd0:	f000 fe88 	bl	8007ae4 <lsm6dso_read_reg>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d002      	beq.n	8006de0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x278>
 8006dda:	f04f 33ff 	mov.w	r3, #4294967295
 8006dde:	e054      	b.n	8006e8a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
 8006de0:	7d3b      	ldrb	r3, [r7, #20]
 8006de2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d123      	bne.n	8006e34 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2cc>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d10b      	bne.n	8006e0e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2a6>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	331c      	adds	r3, #28
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f000 feff 	bl	8007c00 <lsm6dso_xl_data_rate_set>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d002      	beq.n	8006e0e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2a6>
 8006e08:	f04f 33ff 	mov.w	r3, #4294967295
 8006e0c:	e03d      	b.n	8006e8a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
 8006e0e:	7d3b      	ldrb	r3, [r7, #20]
 8006e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e14:	753b      	strb	r3, [r7, #20]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f103 001c 	add.w	r0, r3, #28
 8006e1c:	f107 0214 	add.w	r2, r7, #20
 8006e20:	2301      	movs	r3, #1
 8006e22:	2114      	movs	r1, #20
 8006e24:	f000 fe76 	bl	8007b14 <lsm6dso_write_reg>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d002      	beq.n	8006e34 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2cc>
 8006e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e32:	e02a      	b.n	8006e8a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
 8006e34:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006e38:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006e98 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>
 8006e3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e44:	dc00      	bgt.n	8006e48 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e0>
 8006e46:	e006      	b.n	8006e56 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
 8006e48:	4b14      	ldr	r3, [pc, #80]	; (8006e9c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>)
 8006e4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e4c:	e003      	b.n	8006e56 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
 8006e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e54:	bf00      	nop
 8006e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e5c:	d102      	bne.n	8006e64 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2fc>
 8006e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e62:	e012      	b.n	8006e8a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d106      	bne.n	8006e7c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x314>
 8006e6e:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f000 fbca 	bl	800760c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8006e78:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006e7a:	e005      	b.n	8006e88 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x320>
 8006e7c:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f000 fc5b 	bl	800773c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8006e86:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3730      	adds	r7, #48	; 0x30
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	41480000 	.word	0x41480000
 8006e98:	43500000 	.word	0x43500000
 8006e9c:	43500000 	.word	0x43500000

08006ea0 <LSM6DSO_ACC_GetFullScale>:
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
 8006eaa:	2300      	movs	r3, #0
 8006eac:	60fb      	str	r3, [r7, #12]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	331c      	adds	r3, #28
 8006eb2:	f107 020b 	add.w	r2, r7, #11
 8006eb6:	4611      	mov	r1, r2
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 fe69 	bl	8007b90 <lsm6dso_xl_full_scale_get>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d002      	beq.n	8006eca <LSM6DSO_ACC_GetFullScale+0x2a>
 8006ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ec8:	e023      	b.n	8006f12 <LSM6DSO_ACC_GetFullScale+0x72>
 8006eca:	7afb      	ldrb	r3, [r7, #11]
 8006ecc:	2b03      	cmp	r3, #3
 8006ece:	d81b      	bhi.n	8006f08 <LSM6DSO_ACC_GetFullScale+0x68>
 8006ed0:	a201      	add	r2, pc, #4	; (adr r2, 8006ed8 <LSM6DSO_ACC_GetFullScale+0x38>)
 8006ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed6:	bf00      	nop
 8006ed8:	08006ee9 	.word	0x08006ee9
 8006edc:	08006f01 	.word	0x08006f01
 8006ee0:	08006ef1 	.word	0x08006ef1
 8006ee4:	08006ef9 	.word	0x08006ef9
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2202      	movs	r2, #2
 8006eec:	601a      	str	r2, [r3, #0]
 8006eee:	e00f      	b.n	8006f10 <LSM6DSO_ACC_GetFullScale+0x70>
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	2204      	movs	r2, #4
 8006ef4:	601a      	str	r2, [r3, #0]
 8006ef6:	e00b      	b.n	8006f10 <LSM6DSO_ACC_GetFullScale+0x70>
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	2208      	movs	r2, #8
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	e007      	b.n	8006f10 <LSM6DSO_ACC_GetFullScale+0x70>
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	2210      	movs	r2, #16
 8006f04:	601a      	str	r2, [r3, #0]
 8006f06:	e003      	b.n	8006f10 <LSM6DSO_ACC_GetFullScale+0x70>
 8006f08:	f04f 33ff 	mov.w	r3, #4294967295
 8006f0c:	60fb      	str	r3, [r7, #12]
 8006f0e:	bf00      	nop
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop

08006f1c <LSM6DSO_ACC_SetFullScale>:
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	dd0b      	ble.n	8006f44 <LSM6DSO_ACC_SetFullScale+0x28>
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	2b04      	cmp	r3, #4
 8006f30:	dd06      	ble.n	8006f40 <LSM6DSO_ACC_SetFullScale+0x24>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b08      	cmp	r3, #8
 8006f36:	dc01      	bgt.n	8006f3c <LSM6DSO_ACC_SetFullScale+0x20>
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e004      	b.n	8006f46 <LSM6DSO_ACC_SetFullScale+0x2a>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e002      	b.n	8006f46 <LSM6DSO_ACC_SetFullScale+0x2a>
 8006f40:	2302      	movs	r3, #2
 8006f42:	e000      	b.n	8006f46 <LSM6DSO_ACC_SetFullScale+0x2a>
 8006f44:	2300      	movs	r3, #0
 8006f46:	73fb      	strb	r3, [r7, #15]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	331c      	adds	r3, #28
 8006f4c:	7bfa      	ldrb	r2, [r7, #15]
 8006f4e:	4611      	mov	r1, r2
 8006f50:	4618      	mov	r0, r3
 8006f52:	f000 fdf7 	bl	8007b44 <lsm6dso_xl_full_scale_set>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <LSM6DSO_ACC_SetFullScale+0x46>
 8006f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f60:	e000      	b.n	8006f64 <LSM6DSO_ACC_SetFullScale+0x48>
 8006f62:	2300      	movs	r3, #0
 8006f64:	4618      	mov	r0, r3
 8006f66:	3710      	adds	r7, #16
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <LSM6DSO_ACC_GetAxesRaw>:
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	331c      	adds	r3, #28
 8006f7a:	f107 0208 	add.w	r2, r7, #8
 8006f7e:	4611      	mov	r1, r2
 8006f80:	4618      	mov	r0, r3
 8006f82:	f001 f99e 	bl	80082c2 <lsm6dso_acceleration_raw_get>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d002      	beq.n	8006f92 <LSM6DSO_ACC_GetAxesRaw+0x26>
 8006f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f90:	e00c      	b.n	8006fac <LSM6DSO_ACC_GetAxesRaw+0x40>
 8006f92:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	801a      	strh	r2, [r3, #0]
 8006f9a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	805a      	strh	r2, [r3, #2]
 8006fa2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	809a      	strh	r2, [r3, #4]
 8006faa:	2300      	movs	r3, #0
 8006fac:	4618      	mov	r0, r3
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <LSM6DSO_ACC_GetAxes>:
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b086      	sub	sp, #24
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
 8006fbe:	f04f 0300 	mov.w	r3, #0
 8006fc2:	60fb      	str	r3, [r7, #12]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	331c      	adds	r3, #28
 8006fc8:	f107 0210 	add.w	r2, r7, #16
 8006fcc:	4611      	mov	r1, r2
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f001 f977 	bl	80082c2 <lsm6dso_acceleration_raw_get>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d002      	beq.n	8006fe0 <LSM6DSO_ACC_GetAxes+0x2c>
 8006fda:	f04f 33ff 	mov.w	r3, #4294967295
 8006fde:	e03c      	b.n	800705a <LSM6DSO_ACC_GetAxes+0xa6>
 8006fe0:	f107 030c 	add.w	r3, r7, #12
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7ff fce2 	bl	80069b0 <LSM6DSO_ACC_GetSensitivity>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d002      	beq.n	8006ff8 <LSM6DSO_ACC_GetAxes+0x44>
 8006ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ff6:	e030      	b.n	800705a <LSM6DSO_ACC_GetAxes+0xa6>
 8006ff8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006ffc:	ee07 3a90 	vmov	s15, r3
 8007000:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007004:	edd7 7a03 	vldr	s15, [r7, #12]
 8007008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800700c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007010:	ee17 2a90 	vmov	r2, s15
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	601a      	str	r2, [r3, #0]
 8007018:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800701c:	ee07 3a90 	vmov	s15, r3
 8007020:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007024:	edd7 7a03 	vldr	s15, [r7, #12]
 8007028:	ee67 7a27 	vmul.f32	s15, s14, s15
 800702c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007030:	ee17 2a90 	vmov	r2, s15
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	605a      	str	r2, [r3, #4]
 8007038:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800703c:	ee07 3a90 	vmov	s15, r3
 8007040:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007044:	edd7 7a03 	vldr	s15, [r7, #12]
 8007048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800704c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007050:	ee17 2a90 	vmov	r2, s15
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	609a      	str	r2, [r3, #8]
 8007058:	2300      	movs	r3, #0
 800705a:	4618      	mov	r0, r3
 800705c:	3718      	adds	r7, #24
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <LSM6DSO_GYRO_Enable>:
 8007062:	b580      	push	{r7, lr}
 8007064:	b082      	sub	sp, #8
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8007070:	2b01      	cmp	r3, #1
 8007072:	d101      	bne.n	8007078 <LSM6DSO_GYRO_Enable+0x16>
 8007074:	2300      	movs	r3, #0
 8007076:	e014      	b.n	80070a2 <LSM6DSO_GYRO_Enable+0x40>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f103 021c 	add.w	r2, r3, #28
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007084:	4619      	mov	r1, r3
 8007086:	4610      	mov	r0, r2
 8007088:	f000 ff86 	bl	8007f98 <lsm6dso_gy_data_rate_set>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d002      	beq.n	8007098 <LSM6DSO_GYRO_Enable+0x36>
 8007092:	f04f 33ff 	mov.w	r3, #4294967295
 8007096:	e004      	b.n	80070a2 <LSM6DSO_GYRO_Enable+0x40>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 80070a0:	2300      	movs	r3, #0
 80070a2:	4618      	mov	r0, r3
 80070a4:	3708      	adds	r7, #8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <LSM6DSO_GYRO_Disable>:
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b082      	sub	sp, #8
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d101      	bne.n	80070c0 <LSM6DSO_GYRO_Disable+0x16>
 80070bc:	2300      	movs	r3, #0
 80070be:	e01f      	b.n	8007100 <LSM6DSO_GYRO_Disable+0x56>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f103 021c 	add.w	r2, r3, #28
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	332c      	adds	r3, #44	; 0x2c
 80070ca:	4619      	mov	r1, r3
 80070cc:	4610      	mov	r0, r2
 80070ce:	f001 f85f 	bl	8008190 <lsm6dso_gy_data_rate_get>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <LSM6DSO_GYRO_Disable+0x34>
 80070d8:	f04f 33ff 	mov.w	r3, #4294967295
 80070dc:	e010      	b.n	8007100 <LSM6DSO_GYRO_Disable+0x56>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	331c      	adds	r3, #28
 80070e2:	2100      	movs	r1, #0
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 ff57 	bl	8007f98 <lsm6dso_gy_data_rate_set>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d002      	beq.n	80070f6 <LSM6DSO_GYRO_Disable+0x4c>
 80070f0:	f04f 33ff 	mov.w	r3, #4294967295
 80070f4:	e004      	b.n	8007100 <LSM6DSO_GYRO_Disable+0x56>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 80070fe:	2300      	movs	r3, #0
 8007100:	4618      	mov	r0, r3
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <LSM6DSO_GYRO_GetSensitivity>:
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
 8007112:	2300      	movs	r3, #0
 8007114:	60fb      	str	r3, [r7, #12]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	331c      	adds	r3, #28
 800711a:	f107 020b 	add.w	r2, r7, #11
 800711e:	4611      	mov	r1, r2
 8007120:	4618      	mov	r0, r3
 8007122:	f000 fef7 	bl	8007f14 <lsm6dso_gy_full_scale_get>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <LSM6DSO_GYRO_GetSensitivity+0x2a>
 800712c:	f04f 33ff 	mov.w	r3, #4294967295
 8007130:	e02d      	b.n	800718e <LSM6DSO_GYRO_GetSensitivity+0x86>
 8007132:	7afb      	ldrb	r3, [r7, #11]
 8007134:	2b06      	cmp	r3, #6
 8007136:	d825      	bhi.n	8007184 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8007138:	a201      	add	r2, pc, #4	; (adr r2, 8007140 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 800713a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713e:	bf00      	nop
 8007140:	08007165 	.word	0x08007165
 8007144:	0800715d 	.word	0x0800715d
 8007148:	0800716d 	.word	0x0800716d
 800714c:	08007185 	.word	0x08007185
 8007150:	08007175 	.word	0x08007175
 8007154:	08007185 	.word	0x08007185
 8007158:	0800717d 	.word	0x0800717d
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	4a0e      	ldr	r2, [pc, #56]	; (8007198 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8007160:	601a      	str	r2, [r3, #0]
 8007162:	e013      	b.n	800718c <LSM6DSO_GYRO_GetSensitivity+0x84>
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	4a0d      	ldr	r2, [pc, #52]	; (800719c <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8007168:	601a      	str	r2, [r3, #0]
 800716a:	e00f      	b.n	800718c <LSM6DSO_GYRO_GetSensitivity+0x84>
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	4a0c      	ldr	r2, [pc, #48]	; (80071a0 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8007170:	601a      	str	r2, [r3, #0]
 8007172:	e00b      	b.n	800718c <LSM6DSO_GYRO_GetSensitivity+0x84>
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	4a0b      	ldr	r2, [pc, #44]	; (80071a4 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8007178:	601a      	str	r2, [r3, #0]
 800717a:	e007      	b.n	800718c <LSM6DSO_GYRO_GetSensitivity+0x84>
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	4a0a      	ldr	r2, [pc, #40]	; (80071a8 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8007180:	601a      	str	r2, [r3, #0]
 8007182:	e003      	b.n	800718c <LSM6DSO_GYRO_GetSensitivity+0x84>
 8007184:	f04f 33ff 	mov.w	r3, #4294967295
 8007188:	60fb      	str	r3, [r7, #12]
 800718a:	bf00      	nop
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	4618      	mov	r0, r3
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	408c0000 	.word	0x408c0000
 800719c:	410c0000 	.word	0x410c0000
 80071a0:	418c0000 	.word	0x418c0000
 80071a4:	420c0000 	.word	0x420c0000
 80071a8:	428c0000 	.word	0x428c0000

080071ac <LSM6DSO_GYRO_GetOutputDataRate>:
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
 80071b6:	2300      	movs	r3, #0
 80071b8:	60fb      	str	r3, [r7, #12]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	331c      	adds	r3, #28
 80071be:	f107 020b 	add.w	r2, r7, #11
 80071c2:	4611      	mov	r1, r2
 80071c4:	4618      	mov	r0, r3
 80071c6:	f000 ffe3 	bl	8008190 <lsm6dso_gy_data_rate_get>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d002      	beq.n	80071d6 <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
 80071d0:	f04f 33ff 	mov.w	r3, #4294967295
 80071d4:	e04e      	b.n	8007274 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
 80071d6:	7afb      	ldrb	r3, [r7, #11]
 80071d8:	2b0a      	cmp	r3, #10
 80071da:	d846      	bhi.n	800726a <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 80071dc:	a201      	add	r2, pc, #4	; (adr r2, 80071e4 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 80071de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e2:	bf00      	nop
 80071e4:	08007211 	.word	0x08007211
 80071e8:	0800721b 	.word	0x0800721b
 80071ec:	08007223 	.word	0x08007223
 80071f0:	0800722b 	.word	0x0800722b
 80071f4:	08007233 	.word	0x08007233
 80071f8:	0800723b 	.word	0x0800723b
 80071fc:	08007243 	.word	0x08007243
 8007200:	0800724b 	.word	0x0800724b
 8007204:	08007253 	.word	0x08007253
 8007208:	0800725b 	.word	0x0800725b
 800720c:	08007263 	.word	0x08007263
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	f04f 0200 	mov.w	r2, #0
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	e02b      	b.n	8007272 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	4a17      	ldr	r2, [pc, #92]	; (800727c <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 800721e:	601a      	str	r2, [r3, #0]
 8007220:	e027      	b.n	8007272 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	4a16      	ldr	r2, [pc, #88]	; (8007280 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8007226:	601a      	str	r2, [r3, #0]
 8007228:	e023      	b.n	8007272 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	4a15      	ldr	r2, [pc, #84]	; (8007284 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 800722e:	601a      	str	r2, [r3, #0]
 8007230:	e01f      	b.n	8007272 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	4a14      	ldr	r2, [pc, #80]	; (8007288 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8007236:	601a      	str	r2, [r3, #0]
 8007238:	e01b      	b.n	8007272 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	4a13      	ldr	r2, [pc, #76]	; (800728c <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 800723e:	601a      	str	r2, [r3, #0]
 8007240:	e017      	b.n	8007272 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	4a12      	ldr	r2, [pc, #72]	; (8007290 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8007246:	601a      	str	r2, [r3, #0]
 8007248:	e013      	b.n	8007272 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	4a11      	ldr	r2, [pc, #68]	; (8007294 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 800724e:	601a      	str	r2, [r3, #0]
 8007250:	e00f      	b.n	8007272 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	4a10      	ldr	r2, [pc, #64]	; (8007298 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8007256:	601a      	str	r2, [r3, #0]
 8007258:	e00b      	b.n	8007272 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	4a0f      	ldr	r2, [pc, #60]	; (800729c <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 800725e:	601a      	str	r2, [r3, #0]
 8007260:	e007      	b.n	8007272 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	4a0e      	ldr	r2, [pc, #56]	; (80072a0 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8007266:	601a      	str	r2, [r3, #0]
 8007268:	e003      	b.n	8007272 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>
 800726a:	f04f 33ff 	mov.w	r3, #4294967295
 800726e:	60fb      	str	r3, [r7, #12]
 8007270:	bf00      	nop
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	41480000 	.word	0x41480000
 8007280:	41d00000 	.word	0x41d00000
 8007284:	42500000 	.word	0x42500000
 8007288:	42d00000 	.word	0x42d00000
 800728c:	43500000 	.word	0x43500000
 8007290:	43d08000 	.word	0x43d08000
 8007294:	44504000 	.word	0x44504000
 8007298:	44d06000 	.word	0x44d06000
 800729c:	45505000 	.word	0x45505000
 80072a0:	45d05800 	.word	0x45d05800

080072a4 <LSM6DSO_GYRO_SetOutputDataRate>:
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	ed87 0a00 	vstr	s0, [r7]
 80072b0:	2100      	movs	r1, #0
 80072b2:	ed97 0a00 	vldr	s0, [r7]
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f806 	bl	80072c8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 80072bc:	4603      	mov	r3, r0
 80072be:	4618      	mov	r0, r3
 80072c0:	3708      	adds	r7, #8
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
	...

080072c8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b088      	sub	sp, #32
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80072d4:	460b      	mov	r3, r1
 80072d6:	71fb      	strb	r3, [r7, #7]
 80072d8:	2300      	movs	r3, #0
 80072da:	61fb      	str	r3, [r7, #28]
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	61bb      	str	r3, [r7, #24]
 80072e0:	79fb      	ldrb	r3, [r7, #7]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d002      	beq.n	80072ec <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d028      	beq.n	800733c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 80072ea:	e05c      	b.n	80073a6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f103 001c 	add.w	r0, r3, #28
 80072f2:	f107 0214 	add.w	r2, r7, #20
 80072f6:	2301      	movs	r3, #1
 80072f8:	2116      	movs	r1, #22
 80072fa:	f000 fbf3 	bl	8007ae4 <lsm6dso_read_reg>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d002      	beq.n	800730a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
 8007304:	f04f 33ff 	mov.w	r3, #4294967295
 8007308:	e06c      	b.n	80073e4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
 800730a:	7d3b      	ldrb	r3, [r7, #20]
 800730c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007310:	b2db      	uxtb	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d04b      	beq.n	80073ae <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
 8007316:	7d3b      	ldrb	r3, [r7, #20]
 8007318:	f36f 13c7 	bfc	r3, #7, #1
 800731c:	753b      	strb	r3, [r7, #20]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f103 001c 	add.w	r0, r3, #28
 8007324:	f107 0214 	add.w	r2, r7, #20
 8007328:	2301      	movs	r3, #1
 800732a:	2116      	movs	r1, #22
 800732c:	f000 fbf2 	bl	8007b14 <lsm6dso_write_reg>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d03b      	beq.n	80073ae <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
 8007336:	f04f 33ff 	mov.w	r3, #4294967295
 800733a:	e053      	b.n	80073e4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f103 001c 	add.w	r0, r3, #28
 8007342:	f107 0210 	add.w	r2, r7, #16
 8007346:	2301      	movs	r3, #1
 8007348:	2116      	movs	r1, #22
 800734a:	f000 fbcb 	bl	8007ae4 <lsm6dso_read_reg>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d002      	beq.n	800735a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
 8007354:	f04f 33ff 	mov.w	r3, #4294967295
 8007358:	e044      	b.n	80073e4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
 800735a:	7c3b      	ldrb	r3, [r7, #16]
 800735c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007360:	b2db      	uxtb	r3, r3
 8007362:	2b00      	cmp	r3, #0
 8007364:	d112      	bne.n	800738c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
 8007366:	7c3b      	ldrb	r3, [r7, #16]
 8007368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800736c:	743b      	strb	r3, [r7, #16]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f103 001c 	add.w	r0, r3, #28
 8007374:	f107 0210 	add.w	r2, r7, #16
 8007378:	2301      	movs	r3, #1
 800737a:	2116      	movs	r1, #22
 800737c:	f000 fbca 	bl	8007b14 <lsm6dso_write_reg>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d002      	beq.n	800738c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
 8007386:	f04f 33ff 	mov.w	r3, #4294967295
 800738a:	e02b      	b.n	80073e4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
 800738c:	edd7 7a06 	vldr	s15, [r7, #24]
 8007390:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80073ec <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8007394:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800739c:	dc00      	bgt.n	80073a0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
 800739e:	e007      	b.n	80073b0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
 80073a0:	4b13      	ldr	r3, [pc, #76]	; (80073f0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 80073a2:	61bb      	str	r3, [r7, #24]
 80073a4:	e004      	b.n	80073b0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
 80073a6:	f04f 33ff 	mov.w	r3, #4294967295
 80073aa:	61fb      	str	r3, [r7, #28]
 80073ac:	e000      	b.n	80073b0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
 80073ae:	bf00      	nop
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b6:	d102      	bne.n	80073be <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
 80073b8:	f04f 33ff 	mov.w	r3, #4294967295
 80073bc:	e012      	b.n	80073e4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d106      	bne.n	80073d6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
 80073c8:	ed97 0a06 	vldr	s0, [r7, #24]
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f000 fa45 	bl	800785c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 80073d2:	61f8      	str	r0, [r7, #28]
 80073d4:	e005      	b.n	80073e2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
 80073d6:	ed97 0a06 	vldr	s0, [r7, #24]
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f000 faca 	bl	8007974 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 80073e0:	61f8      	str	r0, [r7, #28]
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	4618      	mov	r0, r3
 80073e6:	3720      	adds	r7, #32
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	43500000 	.word	0x43500000
 80073f0:	43500000 	.word	0x43500000

080073f4 <LSM6DSO_GYRO_GetFullScale>:
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
 80073fe:	2300      	movs	r3, #0
 8007400:	60fb      	str	r3, [r7, #12]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	331c      	adds	r3, #28
 8007406:	f107 020b 	add.w	r2, r7, #11
 800740a:	4611      	mov	r1, r2
 800740c:	4618      	mov	r0, r3
 800740e:	f000 fd81 	bl	8007f14 <lsm6dso_gy_full_scale_get>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d002      	beq.n	800741e <LSM6DSO_GYRO_GetFullScale+0x2a>
 8007418:	f04f 33ff 	mov.w	r3, #4294967295
 800741c:	e030      	b.n	8007480 <LSM6DSO_GYRO_GetFullScale+0x8c>
 800741e:	7afb      	ldrb	r3, [r7, #11]
 8007420:	2b06      	cmp	r3, #6
 8007422:	d828      	bhi.n	8007476 <LSM6DSO_GYRO_GetFullScale+0x82>
 8007424:	a201      	add	r2, pc, #4	; (adr r2, 800742c <LSM6DSO_GYRO_GetFullScale+0x38>)
 8007426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742a:	bf00      	nop
 800742c:	08007451 	.word	0x08007451
 8007430:	08007449 	.word	0x08007449
 8007434:	08007459 	.word	0x08007459
 8007438:	08007477 	.word	0x08007477
 800743c:	08007463 	.word	0x08007463
 8007440:	08007477 	.word	0x08007477
 8007444:	0800746d 	.word	0x0800746d
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	227d      	movs	r2, #125	; 0x7d
 800744c:	601a      	str	r2, [r3, #0]
 800744e:	e016      	b.n	800747e <LSM6DSO_GYRO_GetFullScale+0x8a>
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	22fa      	movs	r2, #250	; 0xfa
 8007454:	601a      	str	r2, [r3, #0]
 8007456:	e012      	b.n	800747e <LSM6DSO_GYRO_GetFullScale+0x8a>
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800745e:	601a      	str	r2, [r3, #0]
 8007460:	e00d      	b.n	800747e <LSM6DSO_GYRO_GetFullScale+0x8a>
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007468:	601a      	str	r2, [r3, #0]
 800746a:	e008      	b.n	800747e <LSM6DSO_GYRO_GetFullScale+0x8a>
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007472:	601a      	str	r2, [r3, #0]
 8007474:	e003      	b.n	800747e <LSM6DSO_GYRO_GetFullScale+0x8a>
 8007476:	f04f 33ff 	mov.w	r3, #4294967295
 800747a:	60fb      	str	r3, [r7, #12]
 800747c:	bf00      	nop
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	4618      	mov	r0, r3
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <LSM6DSO_GYRO_SetFullScale>:
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	2b7d      	cmp	r3, #125	; 0x7d
 8007496:	dd12      	ble.n	80074be <LSM6DSO_GYRO_SetFullScale+0x36>
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	2bfa      	cmp	r3, #250	; 0xfa
 800749c:	dd0d      	ble.n	80074ba <LSM6DSO_GYRO_SetFullScale+0x32>
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80074a4:	dd07      	ble.n	80074b6 <LSM6DSO_GYRO_SetFullScale+0x2e>
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074ac:	dc01      	bgt.n	80074b2 <LSM6DSO_GYRO_SetFullScale+0x2a>
 80074ae:	2304      	movs	r3, #4
 80074b0:	e006      	b.n	80074c0 <LSM6DSO_GYRO_SetFullScale+0x38>
 80074b2:	2306      	movs	r3, #6
 80074b4:	e004      	b.n	80074c0 <LSM6DSO_GYRO_SetFullScale+0x38>
 80074b6:	2302      	movs	r3, #2
 80074b8:	e002      	b.n	80074c0 <LSM6DSO_GYRO_SetFullScale+0x38>
 80074ba:	2300      	movs	r3, #0
 80074bc:	e000      	b.n	80074c0 <LSM6DSO_GYRO_SetFullScale+0x38>
 80074be:	2301      	movs	r3, #1
 80074c0:	73fb      	strb	r3, [r7, #15]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	331c      	adds	r3, #28
 80074c6:	7bfa      	ldrb	r2, [r7, #15]
 80074c8:	4611      	mov	r1, r2
 80074ca:	4618      	mov	r0, r3
 80074cc:	f000 fcfc 	bl	8007ec8 <lsm6dso_gy_full_scale_set>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d002      	beq.n	80074dc <LSM6DSO_GYRO_SetFullScale+0x54>
 80074d6:	f04f 33ff 	mov.w	r3, #4294967295
 80074da:	e000      	b.n	80074de <LSM6DSO_GYRO_SetFullScale+0x56>
 80074dc:	2300      	movs	r3, #0
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <LSM6DSO_GYRO_GetAxesRaw>:
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b084      	sub	sp, #16
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
 80074ee:	6039      	str	r1, [r7, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	331c      	adds	r3, #28
 80074f4:	f107 0208 	add.w	r2, r7, #8
 80074f8:	4611      	mov	r1, r2
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 fed0 	bl	80082a0 <lsm6dso_angular_rate_raw_get>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d002      	beq.n	800750c <LSM6DSO_GYRO_GetAxesRaw+0x26>
 8007506:	f04f 33ff 	mov.w	r3, #4294967295
 800750a:	e00c      	b.n	8007526 <LSM6DSO_GYRO_GetAxesRaw+0x40>
 800750c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	801a      	strh	r2, [r3, #0]
 8007514:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	805a      	strh	r2, [r3, #2]
 800751c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	809a      	strh	r2, [r3, #4]
 8007524:	2300      	movs	r3, #0
 8007526:	4618      	mov	r0, r3
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <LSM6DSO_GYRO_GetAxes>:
 800752e:	b580      	push	{r7, lr}
 8007530:	b086      	sub	sp, #24
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	6039      	str	r1, [r7, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	331c      	adds	r3, #28
 800753c:	f107 0210 	add.w	r2, r7, #16
 8007540:	4611      	mov	r1, r2
 8007542:	4618      	mov	r0, r3
 8007544:	f000 feac 	bl	80082a0 <lsm6dso_angular_rate_raw_get>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d002      	beq.n	8007554 <LSM6DSO_GYRO_GetAxes+0x26>
 800754e:	f04f 33ff 	mov.w	r3, #4294967295
 8007552:	e03c      	b.n	80075ce <LSM6DSO_GYRO_GetAxes+0xa0>
 8007554:	f107 030c 	add.w	r3, r7, #12
 8007558:	4619      	mov	r1, r3
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f7ff fdd4 	bl	8007108 <LSM6DSO_GYRO_GetSensitivity>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d002      	beq.n	800756c <LSM6DSO_GYRO_GetAxes+0x3e>
 8007566:	f04f 33ff 	mov.w	r3, #4294967295
 800756a:	e030      	b.n	80075ce <LSM6DSO_GYRO_GetAxes+0xa0>
 800756c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007570:	ee07 3a90 	vmov	s15, r3
 8007574:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007578:	edd7 7a03 	vldr	s15, [r7, #12]
 800757c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007580:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007584:	ee17 2a90 	vmov	r2, s15
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	601a      	str	r2, [r3, #0]
 800758c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007590:	ee07 3a90 	vmov	s15, r3
 8007594:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007598:	edd7 7a03 	vldr	s15, [r7, #12]
 800759c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075a4:	ee17 2a90 	vmov	r2, s15
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	605a      	str	r2, [r3, #4]
 80075ac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80075b0:	ee07 3a90 	vmov	s15, r3
 80075b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80075bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075c4:	ee17 2a90 	vmov	r2, s15
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	609a      	str	r2, [r3, #8]
 80075cc:	2300      	movs	r3, #0
 80075ce:	4618      	mov	r0, r3
 80075d0:	3718      	adds	r7, #24
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <LSM6DSO_Write_Reg>:
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b082      	sub	sp, #8
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	460b      	mov	r3, r1
 80075e0:	70fb      	strb	r3, [r7, #3]
 80075e2:	4613      	mov	r3, r2
 80075e4:	70bb      	strb	r3, [r7, #2]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f103 001c 	add.w	r0, r3, #28
 80075ec:	1cba      	adds	r2, r7, #2
 80075ee:	78f9      	ldrb	r1, [r7, #3]
 80075f0:	2301      	movs	r3, #1
 80075f2:	f000 fa8f 	bl	8007b14 <lsm6dso_write_reg>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d002      	beq.n	8007602 <LSM6DSO_Write_Reg+0x2c>
 80075fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007600:	e000      	b.n	8007604 <LSM6DSO_Write_Reg+0x2e>
 8007602:	2300      	movs	r3, #0
 8007604:	4618      	mov	r0, r3
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	ed87 0a00 	vstr	s0, [r7]
 8007618:	edd7 7a00 	vldr	s15, [r7]
 800761c:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800771c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8007620:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007628:	d801      	bhi.n	800762e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 800762a:	230b      	movs	r3, #11
 800762c:	e063      	b.n	80076f6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800762e:	edd7 7a00 	vldr	s15, [r7]
 8007632:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8007636:	eef4 7ac7 	vcmpe.f32	s15, s14
 800763a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800763e:	d801      	bhi.n	8007644 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8007640:	2301      	movs	r3, #1
 8007642:	e058      	b.n	80076f6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8007644:	edd7 7a00 	vldr	s15, [r7]
 8007648:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800764c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007654:	d801      	bhi.n	800765a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8007656:	2302      	movs	r3, #2
 8007658:	e04d      	b.n	80076f6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800765a:	edd7 7a00 	vldr	s15, [r7]
 800765e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8007720 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 8007662:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800766a:	d801      	bhi.n	8007670 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 800766c:	2303      	movs	r3, #3
 800766e:	e042      	b.n	80076f6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8007670:	edd7 7a00 	vldr	s15, [r7]
 8007674:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8007724 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8007678:	eef4 7ac7 	vcmpe.f32	s15, s14
 800767c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007680:	d801      	bhi.n	8007686 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8007682:	2304      	movs	r3, #4
 8007684:	e037      	b.n	80076f6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8007686:	edd7 7a00 	vldr	s15, [r7]
 800768a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8007728 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 800768e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007696:	d801      	bhi.n	800769c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8007698:	2305      	movs	r3, #5
 800769a:	e02c      	b.n	80076f6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800769c:	edd7 7a00 	vldr	s15, [r7]
 80076a0:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800772c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 80076a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ac:	d801      	bhi.n	80076b2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80076ae:	2306      	movs	r3, #6
 80076b0:	e021      	b.n	80076f6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80076b2:	edd7 7a00 	vldr	s15, [r7]
 80076b6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8007730 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 80076ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076c2:	d801      	bhi.n	80076c8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80076c4:	2307      	movs	r3, #7
 80076c6:	e016      	b.n	80076f6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80076c8:	edd7 7a00 	vldr	s15, [r7]
 80076cc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8007734 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 80076d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076d8:	d801      	bhi.n	80076de <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80076da:	2308      	movs	r3, #8
 80076dc:	e00b      	b.n	80076f6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80076de:	edd7 7a00 	vldr	s15, [r7]
 80076e2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8007738 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 80076e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ee:	d801      	bhi.n	80076f4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 80076f0:	2309      	movs	r3, #9
 80076f2:	e000      	b.n	80076f6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80076f4:	230a      	movs	r3, #10
 80076f6:	73fb      	strb	r3, [r7, #15]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	331c      	adds	r3, #28
 80076fc:	7bfa      	ldrb	r2, [r7, #15]
 80076fe:	4611      	mov	r1, r2
 8007700:	4618      	mov	r0, r3
 8007702:	f000 fa7d 	bl	8007c00 <lsm6dso_xl_data_rate_set>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d002      	beq.n	8007712 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
 800770c:	f04f 33ff 	mov.w	r3, #4294967295
 8007710:	e000      	b.n	8007714 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
 8007712:	2300      	movs	r3, #0
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	3fcccccd 	.word	0x3fcccccd
 8007720:	42500000 	.word	0x42500000
 8007724:	42d00000 	.word	0x42d00000
 8007728:	43500000 	.word	0x43500000
 800772c:	43d08000 	.word	0x43d08000
 8007730:	44504000 	.word	0x44504000
 8007734:	44d06000 	.word	0x44d06000
 8007738:	45505000 	.word	0x45505000

0800773c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	ed87 0a00 	vstr	s0, [r7]
 8007748:	edd7 7a00 	vldr	s15, [r7]
 800774c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800783c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8007750:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007758:	d801      	bhi.n	800775e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 800775a:	230b      	movs	r3, #11
 800775c:	e063      	b.n	8007826 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800775e:	edd7 7a00 	vldr	s15, [r7]
 8007762:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8007766:	eef4 7ac7 	vcmpe.f32	s15, s14
 800776a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800776e:	d801      	bhi.n	8007774 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8007770:	2301      	movs	r3, #1
 8007772:	e058      	b.n	8007826 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007774:	edd7 7a00 	vldr	s15, [r7]
 8007778:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800777c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007784:	d801      	bhi.n	800778a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8007786:	2302      	movs	r3, #2
 8007788:	e04d      	b.n	8007826 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800778a:	edd7 7a00 	vldr	s15, [r7]
 800778e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8007840 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 8007792:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800779a:	d801      	bhi.n	80077a0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 800779c:	2303      	movs	r3, #3
 800779e:	e042      	b.n	8007826 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80077a0:	edd7 7a00 	vldr	s15, [r7]
 80077a4:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8007844 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 80077a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077b0:	d801      	bhi.n	80077b6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80077b2:	2304      	movs	r3, #4
 80077b4:	e037      	b.n	8007826 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80077b6:	edd7 7a00 	vldr	s15, [r7]
 80077ba:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8007848 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 80077be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077c6:	d801      	bhi.n	80077cc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 80077c8:	2305      	movs	r3, #5
 80077ca:	e02c      	b.n	8007826 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80077cc:	edd7 7a00 	vldr	s15, [r7]
 80077d0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800784c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 80077d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077dc:	d801      	bhi.n	80077e2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80077de:	2306      	movs	r3, #6
 80077e0:	e021      	b.n	8007826 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80077e2:	edd7 7a00 	vldr	s15, [r7]
 80077e6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8007850 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 80077ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077f2:	d801      	bhi.n	80077f8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80077f4:	2307      	movs	r3, #7
 80077f6:	e016      	b.n	8007826 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80077f8:	edd7 7a00 	vldr	s15, [r7]
 80077fc:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8007854 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8007800:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007808:	d801      	bhi.n	800780e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800780a:	2308      	movs	r3, #8
 800780c:	e00b      	b.n	8007826 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800780e:	edd7 7a00 	vldr	s15, [r7]
 8007812:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8007858 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8007816:	eef4 7ac7 	vcmpe.f32	s15, s14
 800781a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800781e:	d801      	bhi.n	8007824 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8007820:	2309      	movs	r3, #9
 8007822:	e000      	b.n	8007826 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007824:	230a      	movs	r3, #10
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
 800782c:	2300      	movs	r3, #0
 800782e:	4618      	mov	r0, r3
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	3fcccccd 	.word	0x3fcccccd
 8007840:	42500000 	.word	0x42500000
 8007844:	42d00000 	.word	0x42d00000
 8007848:	43500000 	.word	0x43500000
 800784c:	43d08000 	.word	0x43d08000
 8007850:	44504000 	.word	0x44504000
 8007854:	44d06000 	.word	0x44d06000
 8007858:	45505000 	.word	0x45505000

0800785c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	ed87 0a00 	vstr	s0, [r7]
 8007868:	edd7 7a00 	vldr	s15, [r7]
 800786c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8007870:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007878:	d801      	bhi.n	800787e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800787a:	2301      	movs	r3, #1
 800787c:	e058      	b.n	8007930 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800787e:	edd7 7a00 	vldr	s15, [r7]
 8007882:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8007886:	eef4 7ac7 	vcmpe.f32	s15, s14
 800788a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800788e:	d801      	bhi.n	8007894 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8007890:	2302      	movs	r3, #2
 8007892:	e04d      	b.n	8007930 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007894:	edd7 7a00 	vldr	s15, [r7]
 8007898:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8007958 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 800789c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078a4:	d801      	bhi.n	80078aa <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80078a6:	2303      	movs	r3, #3
 80078a8:	e042      	b.n	8007930 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80078aa:	edd7 7a00 	vldr	s15, [r7]
 80078ae:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800795c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80078b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078ba:	d801      	bhi.n	80078c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80078bc:	2304      	movs	r3, #4
 80078be:	e037      	b.n	8007930 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80078c0:	edd7 7a00 	vldr	s15, [r7]
 80078c4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007960 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80078c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078d0:	d801      	bhi.n	80078d6 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 80078d2:	2305      	movs	r3, #5
 80078d4:	e02c      	b.n	8007930 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80078d6:	edd7 7a00 	vldr	s15, [r7]
 80078da:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8007964 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80078de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078e6:	d801      	bhi.n	80078ec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 80078e8:	2306      	movs	r3, #6
 80078ea:	e021      	b.n	8007930 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80078ec:	edd7 7a00 	vldr	s15, [r7]
 80078f0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8007968 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80078f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078fc:	d801      	bhi.n	8007902 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80078fe:	2307      	movs	r3, #7
 8007900:	e016      	b.n	8007930 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007902:	edd7 7a00 	vldr	s15, [r7]
 8007906:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800796c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800790a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800790e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007912:	d801      	bhi.n	8007918 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8007914:	2308      	movs	r3, #8
 8007916:	e00b      	b.n	8007930 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007918:	edd7 7a00 	vldr	s15, [r7]
 800791c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007970 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8007920:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007928:	d801      	bhi.n	800792e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800792a:	2309      	movs	r3, #9
 800792c:	e000      	b.n	8007930 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800792e:	230a      	movs	r3, #10
 8007930:	73fb      	strb	r3, [r7, #15]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	331c      	adds	r3, #28
 8007936:	7bfa      	ldrb	r2, [r7, #15]
 8007938:	4611      	mov	r1, r2
 800793a:	4618      	mov	r0, r3
 800793c:	f000 fb2c 	bl	8007f98 <lsm6dso_gy_data_rate_set>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d002      	beq.n	800794c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
 8007946:	f04f 33ff 	mov.w	r3, #4294967295
 800794a:	e000      	b.n	800794e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
 800794c:	2300      	movs	r3, #0
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	42500000 	.word	0x42500000
 800795c:	42d00000 	.word	0x42d00000
 8007960:	43500000 	.word	0x43500000
 8007964:	43d08000 	.word	0x43d08000
 8007968:	44504000 	.word	0x44504000
 800796c:	44d06000 	.word	0x44d06000
 8007970:	45505000 	.word	0x45505000

08007974 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	ed87 0a00 	vstr	s0, [r7]
 8007980:	edd7 7a00 	vldr	s15, [r7]
 8007984:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8007988:	eef4 7ac7 	vcmpe.f32	s15, s14
 800798c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007990:	d801      	bhi.n	8007996 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8007992:	2301      	movs	r3, #1
 8007994:	e058      	b.n	8007a48 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007996:	edd7 7a00 	vldr	s15, [r7]
 800799a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800799e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80079a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079a6:	d801      	bhi.n	80079ac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80079a8:	2302      	movs	r3, #2
 80079aa:	e04d      	b.n	8007a48 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80079ac:	edd7 7a00 	vldr	s15, [r7]
 80079b0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8007a5c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80079b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80079b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079bc:	d801      	bhi.n	80079c2 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80079be:	2303      	movs	r3, #3
 80079c0:	e042      	b.n	8007a48 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80079c2:	edd7 7a00 	vldr	s15, [r7]
 80079c6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007a60 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80079ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80079ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079d2:	d801      	bhi.n	80079d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80079d4:	2304      	movs	r3, #4
 80079d6:	e037      	b.n	8007a48 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80079d8:	edd7 7a00 	vldr	s15, [r7]
 80079dc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8007a64 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 80079e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80079e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079e8:	d801      	bhi.n	80079ee <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80079ea:	2305      	movs	r3, #5
 80079ec:	e02c      	b.n	8007a48 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80079ee:	edd7 7a00 	vldr	s15, [r7]
 80079f2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8007a68 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80079f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80079fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079fe:	d801      	bhi.n	8007a04 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8007a00:	2306      	movs	r3, #6
 8007a02:	e021      	b.n	8007a48 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007a04:	edd7 7a00 	vldr	s15, [r7]
 8007a08:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8007a6c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8007a0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a14:	d801      	bhi.n	8007a1a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8007a16:	2307      	movs	r3, #7
 8007a18:	e016      	b.n	8007a48 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007a1a:	edd7 7a00 	vldr	s15, [r7]
 8007a1e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007a70 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8007a22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a2a:	d801      	bhi.n	8007a30 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8007a2c:	2308      	movs	r3, #8
 8007a2e:	e00b      	b.n	8007a48 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007a30:	edd7 7a00 	vldr	s15, [r7]
 8007a34:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8007a74 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8007a38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a40:	d801      	bhi.n	8007a46 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8007a42:	2309      	movs	r3, #9
 8007a44:	e000      	b.n	8007a48 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007a46:	230a      	movs	r3, #10
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
 8007a4e:	2300      	movs	r3, #0
 8007a50:	4618      	mov	r0, r3
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr
 8007a5c:	42500000 	.word	0x42500000
 8007a60:	42d00000 	.word	0x42d00000
 8007a64:	43500000 	.word	0x43500000
 8007a68:	43d08000 	.word	0x43d08000
 8007a6c:	44504000 	.word	0x44504000
 8007a70:	44d06000 	.word	0x44d06000
 8007a74:	45505000 	.word	0x45505000

08007a78 <ReadRegWrap>:
 8007a78:	b590      	push	{r4, r7, lr}
 8007a7a:	b087      	sub	sp, #28
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	607a      	str	r2, [r7, #4]
 8007a82:	461a      	mov	r2, r3
 8007a84:	460b      	mov	r3, r1
 8007a86:	72fb      	strb	r3, [r7, #11]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	813b      	strh	r3, [r7, #8]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	617b      	str	r3, [r7, #20]
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	695c      	ldr	r4, [r3, #20]
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	7b1b      	ldrb	r3, [r3, #12]
 8007a98:	b298      	uxth	r0, r3
 8007a9a:	7afb      	ldrb	r3, [r7, #11]
 8007a9c:	b299      	uxth	r1, r3
 8007a9e:	893b      	ldrh	r3, [r7, #8]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	47a0      	blx	r4
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	371c      	adds	r7, #28
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd90      	pop	{r4, r7, pc}

08007aae <WriteRegWrap>:
 8007aae:	b590      	push	{r4, r7, lr}
 8007ab0:	b087      	sub	sp, #28
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	60f8      	str	r0, [r7, #12]
 8007ab6:	607a      	str	r2, [r7, #4]
 8007ab8:	461a      	mov	r2, r3
 8007aba:	460b      	mov	r3, r1
 8007abc:	72fb      	strb	r3, [r7, #11]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	813b      	strh	r3, [r7, #8]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	617b      	str	r3, [r7, #20]
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	691c      	ldr	r4, [r3, #16]
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	7b1b      	ldrb	r3, [r3, #12]
 8007ace:	b298      	uxth	r0, r3
 8007ad0:	7afb      	ldrb	r3, [r7, #11]
 8007ad2:	b299      	uxth	r1, r3
 8007ad4:	893b      	ldrh	r3, [r7, #8]
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	47a0      	blx	r4
 8007ada:	4603      	mov	r3, r0
 8007adc:	4618      	mov	r0, r3
 8007ade:	371c      	adds	r7, #28
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd90      	pop	{r4, r7, pc}

08007ae4 <lsm6dso_read_reg>:
 8007ae4:	b590      	push	{r4, r7, lr}
 8007ae6:	b087      	sub	sp, #28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	607a      	str	r2, [r7, #4]
 8007aee:	461a      	mov	r2, r3
 8007af0:	460b      	mov	r3, r1
 8007af2:	72fb      	strb	r3, [r7, #11]
 8007af4:	4613      	mov	r3, r2
 8007af6:	813b      	strh	r3, [r7, #8]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	685c      	ldr	r4, [r3, #4]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6898      	ldr	r0, [r3, #8]
 8007b00:	893b      	ldrh	r3, [r7, #8]
 8007b02:	7af9      	ldrb	r1, [r7, #11]
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	47a0      	blx	r4
 8007b08:	6178      	str	r0, [r7, #20]
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	371c      	adds	r7, #28
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd90      	pop	{r4, r7, pc}

08007b14 <lsm6dso_write_reg>:
 8007b14:	b590      	push	{r4, r7, lr}
 8007b16:	b087      	sub	sp, #28
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	607a      	str	r2, [r7, #4]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	460b      	mov	r3, r1
 8007b22:	72fb      	strb	r3, [r7, #11]
 8007b24:	4613      	mov	r3, r2
 8007b26:	813b      	strh	r3, [r7, #8]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681c      	ldr	r4, [r3, #0]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6898      	ldr	r0, [r3, #8]
 8007b30:	893b      	ldrh	r3, [r7, #8]
 8007b32:	7af9      	ldrb	r1, [r7, #11]
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	47a0      	blx	r4
 8007b38:	6178      	str	r0, [r7, #20]
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	371c      	adds	r7, #28
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd90      	pop	{r4, r7, pc}

08007b44 <lsm6dso_xl_full_scale_set>:
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	70fb      	strb	r3, [r7, #3]
 8007b50:	f107 0208 	add.w	r2, r7, #8
 8007b54:	2301      	movs	r3, #1
 8007b56:	2110      	movs	r1, #16
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f7ff ffc3 	bl	8007ae4 <lsm6dso_read_reg>
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d10f      	bne.n	8007b86 <lsm6dso_xl_full_scale_set+0x42>
 8007b66:	78fb      	ldrb	r3, [r7, #3]
 8007b68:	f003 0303 	and.w	r3, r3, #3
 8007b6c:	b2da      	uxtb	r2, r3
 8007b6e:	7a3b      	ldrb	r3, [r7, #8]
 8007b70:	f362 0383 	bfi	r3, r2, #2, #2
 8007b74:	723b      	strb	r3, [r7, #8]
 8007b76:	f107 0208 	add.w	r2, r7, #8
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	2110      	movs	r1, #16
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f7ff ffc8 	bl	8007b14 <lsm6dso_write_reg>
 8007b84:	60f8      	str	r0, [r7, #12]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <lsm6dso_xl_full_scale_get>:
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
 8007b9a:	f107 0208 	add.w	r2, r7, #8
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	2110      	movs	r1, #16
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f7ff ff9e 	bl	8007ae4 <lsm6dso_read_reg>
 8007ba8:	60f8      	str	r0, [r7, #12]
 8007baa:	7a3b      	ldrb	r3, [r7, #8]
 8007bac:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b03      	cmp	r3, #3
 8007bb4:	d81a      	bhi.n	8007bec <lsm6dso_xl_full_scale_get+0x5c>
 8007bb6:	a201      	add	r2, pc, #4	; (adr r2, 8007bbc <lsm6dso_xl_full_scale_get+0x2c>)
 8007bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bbc:	08007bcd 	.word	0x08007bcd
 8007bc0:	08007bd5 	.word	0x08007bd5
 8007bc4:	08007bdd 	.word	0x08007bdd
 8007bc8:	08007be5 	.word	0x08007be5
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	701a      	strb	r2, [r3, #0]
 8007bd2:	e00f      	b.n	8007bf4 <lsm6dso_xl_full_scale_get+0x64>
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	701a      	strb	r2, [r3, #0]
 8007bda:	e00b      	b.n	8007bf4 <lsm6dso_xl_full_scale_get+0x64>
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	2202      	movs	r2, #2
 8007be0:	701a      	strb	r2, [r3, #0]
 8007be2:	e007      	b.n	8007bf4 <lsm6dso_xl_full_scale_get+0x64>
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	2203      	movs	r2, #3
 8007be8:	701a      	strb	r2, [r3, #0]
 8007bea:	e003      	b.n	8007bf4 <lsm6dso_xl_full_scale_get+0x64>
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	701a      	strb	r2, [r3, #0]
 8007bf2:	bf00      	nop
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop

08007c00 <lsm6dso_xl_data_rate_set>:
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b086      	sub	sp, #24
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	460b      	mov	r3, r1
 8007c0a:	70fb      	strb	r3, [r7, #3]
 8007c0c:	78fb      	ldrb	r3, [r7, #3]
 8007c0e:	75fb      	strb	r3, [r7, #23]
 8007c10:	f107 030c 	add.w	r3, r7, #12
 8007c14:	4619      	mov	r1, r3
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 fc2d 	bl	8008476 <lsm6dso_fsm_enable_get>
 8007c1c:	6138      	str	r0, [r7, #16]
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f040 80c4 	bne.w	8007dae <lsm6dso_xl_data_rate_set+0x1ae>
 8007c26:	7b3b      	ldrb	r3, [r7, #12]
 8007c28:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007c2c:	b2da      	uxtb	r2, r3
 8007c2e:	7b3b      	ldrb	r3, [r7, #12]
 8007c30:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	4313      	orrs	r3, r2
 8007c38:	b2da      	uxtb	r2, r3
 8007c3a:	7b3b      	ldrb	r3, [r7, #12]
 8007c3c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	4313      	orrs	r3, r2
 8007c44:	b2da      	uxtb	r2, r3
 8007c46:	7b3b      	ldrb	r3, [r7, #12]
 8007c48:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	b2da      	uxtb	r2, r3
 8007c52:	7b3b      	ldrb	r3, [r7, #12]
 8007c54:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	b2da      	uxtb	r2, r3
 8007c5e:	7b3b      	ldrb	r3, [r7, #12]
 8007c60:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	4313      	orrs	r3, r2
 8007c68:	b2da      	uxtb	r2, r3
 8007c6a:	7b3b      	ldrb	r3, [r7, #12]
 8007c6c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	4313      	orrs	r3, r2
 8007c74:	b2da      	uxtb	r2, r3
 8007c76:	7b3b      	ldrb	r3, [r7, #12]
 8007c78:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	b2da      	uxtb	r2, r3
 8007c82:	7b7b      	ldrb	r3, [r7, #13]
 8007c84:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	b2da      	uxtb	r2, r3
 8007c8e:	7b7b      	ldrb	r3, [r7, #13]
 8007c90:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	4313      	orrs	r3, r2
 8007c98:	b2da      	uxtb	r2, r3
 8007c9a:	7b7b      	ldrb	r3, [r7, #13]
 8007c9c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	7b7b      	ldrb	r3, [r7, #13]
 8007ca8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	b2da      	uxtb	r2, r3
 8007cb2:	7b7b      	ldrb	r3, [r7, #13]
 8007cb4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	7b7b      	ldrb	r3, [r7, #13]
 8007cc0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	b2da      	uxtb	r2, r3
 8007cca:	7b7b      	ldrb	r3, [r7, #13]
 8007ccc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	b2da      	uxtb	r2, r3
 8007cd6:	7b7b      	ldrb	r3, [r7, #13]
 8007cd8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d163      	bne.n	8007dae <lsm6dso_xl_data_rate_set+0x1ae>
 8007ce6:	f107 030b 	add.w	r3, r7, #11
 8007cea:	4619      	mov	r1, r3
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fbe3 	bl	80084b8 <lsm6dso_fsm_data_rate_get>
 8007cf2:	6138      	str	r0, [r7, #16]
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d159      	bne.n	8007dae <lsm6dso_xl_data_rate_set+0x1ae>
 8007cfa:	7afb      	ldrb	r3, [r7, #11]
 8007cfc:	2b03      	cmp	r3, #3
 8007cfe:	d853      	bhi.n	8007da8 <lsm6dso_xl_data_rate_set+0x1a8>
 8007d00:	a201      	add	r2, pc, #4	; (adr r2, 8007d08 <lsm6dso_xl_data_rate_set+0x108>)
 8007d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d06:	bf00      	nop
 8007d08:	08007d19 	.word	0x08007d19
 8007d0c:	08007d2b 	.word	0x08007d2b
 8007d10:	08007d49 	.word	0x08007d49
 8007d14:	08007d73 	.word	0x08007d73
 8007d18:	78fb      	ldrb	r3, [r7, #3]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d102      	bne.n	8007d24 <lsm6dso_xl_data_rate_set+0x124>
 8007d1e:	2301      	movs	r3, #1
 8007d20:	75fb      	strb	r3, [r7, #23]
 8007d22:	e045      	b.n	8007db0 <lsm6dso_xl_data_rate_set+0x1b0>
 8007d24:	78fb      	ldrb	r3, [r7, #3]
 8007d26:	75fb      	strb	r3, [r7, #23]
 8007d28:	e042      	b.n	8007db0 <lsm6dso_xl_data_rate_set+0x1b0>
 8007d2a:	78fb      	ldrb	r3, [r7, #3]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d102      	bne.n	8007d36 <lsm6dso_xl_data_rate_set+0x136>
 8007d30:	2302      	movs	r3, #2
 8007d32:	75fb      	strb	r3, [r7, #23]
 8007d34:	e03c      	b.n	8007db0 <lsm6dso_xl_data_rate_set+0x1b0>
 8007d36:	78fb      	ldrb	r3, [r7, #3]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d102      	bne.n	8007d42 <lsm6dso_xl_data_rate_set+0x142>
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	75fb      	strb	r3, [r7, #23]
 8007d40:	e036      	b.n	8007db0 <lsm6dso_xl_data_rate_set+0x1b0>
 8007d42:	78fb      	ldrb	r3, [r7, #3]
 8007d44:	75fb      	strb	r3, [r7, #23]
 8007d46:	e033      	b.n	8007db0 <lsm6dso_xl_data_rate_set+0x1b0>
 8007d48:	78fb      	ldrb	r3, [r7, #3]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d102      	bne.n	8007d54 <lsm6dso_xl_data_rate_set+0x154>
 8007d4e:	2303      	movs	r3, #3
 8007d50:	75fb      	strb	r3, [r7, #23]
 8007d52:	e02d      	b.n	8007db0 <lsm6dso_xl_data_rate_set+0x1b0>
 8007d54:	78fb      	ldrb	r3, [r7, #3]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d102      	bne.n	8007d60 <lsm6dso_xl_data_rate_set+0x160>
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	75fb      	strb	r3, [r7, #23]
 8007d5e:	e027      	b.n	8007db0 <lsm6dso_xl_data_rate_set+0x1b0>
 8007d60:	78fb      	ldrb	r3, [r7, #3]
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d102      	bne.n	8007d6c <lsm6dso_xl_data_rate_set+0x16c>
 8007d66:	2303      	movs	r3, #3
 8007d68:	75fb      	strb	r3, [r7, #23]
 8007d6a:	e021      	b.n	8007db0 <lsm6dso_xl_data_rate_set+0x1b0>
 8007d6c:	78fb      	ldrb	r3, [r7, #3]
 8007d6e:	75fb      	strb	r3, [r7, #23]
 8007d70:	e01e      	b.n	8007db0 <lsm6dso_xl_data_rate_set+0x1b0>
 8007d72:	78fb      	ldrb	r3, [r7, #3]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d102      	bne.n	8007d7e <lsm6dso_xl_data_rate_set+0x17e>
 8007d78:	2304      	movs	r3, #4
 8007d7a:	75fb      	strb	r3, [r7, #23]
 8007d7c:	e018      	b.n	8007db0 <lsm6dso_xl_data_rate_set+0x1b0>
 8007d7e:	78fb      	ldrb	r3, [r7, #3]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d102      	bne.n	8007d8a <lsm6dso_xl_data_rate_set+0x18a>
 8007d84:	2304      	movs	r3, #4
 8007d86:	75fb      	strb	r3, [r7, #23]
 8007d88:	e012      	b.n	8007db0 <lsm6dso_xl_data_rate_set+0x1b0>
 8007d8a:	78fb      	ldrb	r3, [r7, #3]
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d102      	bne.n	8007d96 <lsm6dso_xl_data_rate_set+0x196>
 8007d90:	2304      	movs	r3, #4
 8007d92:	75fb      	strb	r3, [r7, #23]
 8007d94:	e00c      	b.n	8007db0 <lsm6dso_xl_data_rate_set+0x1b0>
 8007d96:	78fb      	ldrb	r3, [r7, #3]
 8007d98:	2b03      	cmp	r3, #3
 8007d9a:	d102      	bne.n	8007da2 <lsm6dso_xl_data_rate_set+0x1a2>
 8007d9c:	2304      	movs	r3, #4
 8007d9e:	75fb      	strb	r3, [r7, #23]
 8007da0:	e006      	b.n	8007db0 <lsm6dso_xl_data_rate_set+0x1b0>
 8007da2:	78fb      	ldrb	r3, [r7, #3]
 8007da4:	75fb      	strb	r3, [r7, #23]
 8007da6:	e003      	b.n	8007db0 <lsm6dso_xl_data_rate_set+0x1b0>
 8007da8:	78fb      	ldrb	r3, [r7, #3]
 8007daa:	75fb      	strb	r3, [r7, #23]
 8007dac:	e000      	b.n	8007db0 <lsm6dso_xl_data_rate_set+0x1b0>
 8007dae:	bf00      	nop
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d107      	bne.n	8007dc6 <lsm6dso_xl_data_rate_set+0x1c6>
 8007db6:	f107 0208 	add.w	r2, r7, #8
 8007dba:	2301      	movs	r3, #1
 8007dbc:	2110      	movs	r1, #16
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f7ff fe90 	bl	8007ae4 <lsm6dso_read_reg>
 8007dc4:	6138      	str	r0, [r7, #16]
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d10f      	bne.n	8007dec <lsm6dso_xl_data_rate_set+0x1ec>
 8007dcc:	7dfb      	ldrb	r3, [r7, #23]
 8007dce:	f003 030f 	and.w	r3, r3, #15
 8007dd2:	b2da      	uxtb	r2, r3
 8007dd4:	7a3b      	ldrb	r3, [r7, #8]
 8007dd6:	f362 1307 	bfi	r3, r2, #4, #4
 8007dda:	723b      	strb	r3, [r7, #8]
 8007ddc:	f107 0208 	add.w	r2, r7, #8
 8007de0:	2301      	movs	r3, #1
 8007de2:	2110      	movs	r1, #16
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f7ff fe95 	bl	8007b14 <lsm6dso_write_reg>
 8007dea:	6138      	str	r0, [r7, #16]
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	4618      	mov	r0, r3
 8007df0:	3718      	adds	r7, #24
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop

08007df8 <lsm6dso_xl_data_rate_get>:
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
 8007e02:	f107 0208 	add.w	r2, r7, #8
 8007e06:	2301      	movs	r3, #1
 8007e08:	2110      	movs	r1, #16
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f7ff fe6a 	bl	8007ae4 <lsm6dso_read_reg>
 8007e10:	60f8      	str	r0, [r7, #12]
 8007e12:	7a3b      	ldrb	r3, [r7, #8]
 8007e14:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	2b0b      	cmp	r3, #11
 8007e1c:	d84a      	bhi.n	8007eb4 <lsm6dso_xl_data_rate_get+0xbc>
 8007e1e:	a201      	add	r2, pc, #4	; (adr r2, 8007e24 <lsm6dso_xl_data_rate_get+0x2c>)
 8007e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e24:	08007e55 	.word	0x08007e55
 8007e28:	08007e5d 	.word	0x08007e5d
 8007e2c:	08007e65 	.word	0x08007e65
 8007e30:	08007e6d 	.word	0x08007e6d
 8007e34:	08007e75 	.word	0x08007e75
 8007e38:	08007e7d 	.word	0x08007e7d
 8007e3c:	08007e85 	.word	0x08007e85
 8007e40:	08007e8d 	.word	0x08007e8d
 8007e44:	08007e95 	.word	0x08007e95
 8007e48:	08007e9d 	.word	0x08007e9d
 8007e4c:	08007ea5 	.word	0x08007ea5
 8007e50:	08007ead 	.word	0x08007ead
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	2200      	movs	r2, #0
 8007e58:	701a      	strb	r2, [r3, #0]
 8007e5a:	e02f      	b.n	8007ebc <lsm6dso_xl_data_rate_get+0xc4>
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	701a      	strb	r2, [r3, #0]
 8007e62:	e02b      	b.n	8007ebc <lsm6dso_xl_data_rate_get+0xc4>
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	2202      	movs	r2, #2
 8007e68:	701a      	strb	r2, [r3, #0]
 8007e6a:	e027      	b.n	8007ebc <lsm6dso_xl_data_rate_get+0xc4>
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	2203      	movs	r2, #3
 8007e70:	701a      	strb	r2, [r3, #0]
 8007e72:	e023      	b.n	8007ebc <lsm6dso_xl_data_rate_get+0xc4>
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	2204      	movs	r2, #4
 8007e78:	701a      	strb	r2, [r3, #0]
 8007e7a:	e01f      	b.n	8007ebc <lsm6dso_xl_data_rate_get+0xc4>
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	2205      	movs	r2, #5
 8007e80:	701a      	strb	r2, [r3, #0]
 8007e82:	e01b      	b.n	8007ebc <lsm6dso_xl_data_rate_get+0xc4>
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	2206      	movs	r2, #6
 8007e88:	701a      	strb	r2, [r3, #0]
 8007e8a:	e017      	b.n	8007ebc <lsm6dso_xl_data_rate_get+0xc4>
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	2207      	movs	r2, #7
 8007e90:	701a      	strb	r2, [r3, #0]
 8007e92:	e013      	b.n	8007ebc <lsm6dso_xl_data_rate_get+0xc4>
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	2208      	movs	r2, #8
 8007e98:	701a      	strb	r2, [r3, #0]
 8007e9a:	e00f      	b.n	8007ebc <lsm6dso_xl_data_rate_get+0xc4>
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	2209      	movs	r2, #9
 8007ea0:	701a      	strb	r2, [r3, #0]
 8007ea2:	e00b      	b.n	8007ebc <lsm6dso_xl_data_rate_get+0xc4>
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	220a      	movs	r2, #10
 8007ea8:	701a      	strb	r2, [r3, #0]
 8007eaa:	e007      	b.n	8007ebc <lsm6dso_xl_data_rate_get+0xc4>
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	220b      	movs	r2, #11
 8007eb0:	701a      	strb	r2, [r3, #0]
 8007eb2:	e003      	b.n	8007ebc <lsm6dso_xl_data_rate_get+0xc4>
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	701a      	strb	r2, [r3, #0]
 8007eba:	bf00      	nop
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop

08007ec8 <lsm6dso_gy_full_scale_set>:
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	70fb      	strb	r3, [r7, #3]
 8007ed4:	f107 0208 	add.w	r2, r7, #8
 8007ed8:	2301      	movs	r3, #1
 8007eda:	2111      	movs	r1, #17
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f7ff fe01 	bl	8007ae4 <lsm6dso_read_reg>
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d10f      	bne.n	8007f0a <lsm6dso_gy_full_scale_set+0x42>
 8007eea:	78fb      	ldrb	r3, [r7, #3]
 8007eec:	f003 0307 	and.w	r3, r3, #7
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	7a3b      	ldrb	r3, [r7, #8]
 8007ef4:	f362 0343 	bfi	r3, r2, #1, #3
 8007ef8:	723b      	strb	r3, [r7, #8]
 8007efa:	f107 0208 	add.w	r2, r7, #8
 8007efe:	2301      	movs	r3, #1
 8007f00:	2111      	movs	r1, #17
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f7ff fe06 	bl	8007b14 <lsm6dso_write_reg>
 8007f08:	60f8      	str	r0, [r7, #12]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <lsm6dso_gy_full_scale_get>:
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
 8007f1e:	f107 0208 	add.w	r2, r7, #8
 8007f22:	2301      	movs	r3, #1
 8007f24:	2111      	movs	r1, #17
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f7ff fddc 	bl	8007ae4 <lsm6dso_read_reg>
 8007f2c:	60f8      	str	r0, [r7, #12]
 8007f2e:	7a3b      	ldrb	r3, [r7, #8]
 8007f30:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b06      	cmp	r3, #6
 8007f38:	d824      	bhi.n	8007f84 <lsm6dso_gy_full_scale_get+0x70>
 8007f3a:	a201      	add	r2, pc, #4	; (adr r2, 8007f40 <lsm6dso_gy_full_scale_get+0x2c>)
 8007f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f40:	08007f5d 	.word	0x08007f5d
 8007f44:	08007f65 	.word	0x08007f65
 8007f48:	08007f6d 	.word	0x08007f6d
 8007f4c:	08007f85 	.word	0x08007f85
 8007f50:	08007f75 	.word	0x08007f75
 8007f54:	08007f85 	.word	0x08007f85
 8007f58:	08007f7d 	.word	0x08007f7d
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	701a      	strb	r2, [r3, #0]
 8007f62:	e013      	b.n	8007f8c <lsm6dso_gy_full_scale_get+0x78>
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	2201      	movs	r2, #1
 8007f68:	701a      	strb	r2, [r3, #0]
 8007f6a:	e00f      	b.n	8007f8c <lsm6dso_gy_full_scale_get+0x78>
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	2202      	movs	r2, #2
 8007f70:	701a      	strb	r2, [r3, #0]
 8007f72:	e00b      	b.n	8007f8c <lsm6dso_gy_full_scale_get+0x78>
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	2204      	movs	r2, #4
 8007f78:	701a      	strb	r2, [r3, #0]
 8007f7a:	e007      	b.n	8007f8c <lsm6dso_gy_full_scale_get+0x78>
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	2206      	movs	r2, #6
 8007f80:	701a      	strb	r2, [r3, #0]
 8007f82:	e003      	b.n	8007f8c <lsm6dso_gy_full_scale_get+0x78>
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	2200      	movs	r2, #0
 8007f88:	701a      	strb	r2, [r3, #0]
 8007f8a:	bf00      	nop
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop

08007f98 <lsm6dso_gy_data_rate_set>:
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b086      	sub	sp, #24
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	70fb      	strb	r3, [r7, #3]
 8007fa4:	78fb      	ldrb	r3, [r7, #3]
 8007fa6:	75fb      	strb	r3, [r7, #23]
 8007fa8:	f107 030c 	add.w	r3, r7, #12
 8007fac:	4619      	mov	r1, r3
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 fa61 	bl	8008476 <lsm6dso_fsm_enable_get>
 8007fb4:	6138      	str	r0, [r7, #16]
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f040 80c4 	bne.w	8008146 <lsm6dso_gy_data_rate_set+0x1ae>
 8007fbe:	7b3b      	ldrb	r3, [r7, #12]
 8007fc0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007fc4:	b2da      	uxtb	r2, r3
 8007fc6:	7b3b      	ldrb	r3, [r7, #12]
 8007fc8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	b2da      	uxtb	r2, r3
 8007fd2:	7b3b      	ldrb	r3, [r7, #12]
 8007fd4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	b2da      	uxtb	r2, r3
 8007fde:	7b3b      	ldrb	r3, [r7, #12]
 8007fe0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	7b3b      	ldrb	r3, [r7, #12]
 8007fec:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	b2da      	uxtb	r2, r3
 8007ff6:	7b3b      	ldrb	r3, [r7, #12]
 8007ff8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	4313      	orrs	r3, r2
 8008000:	b2da      	uxtb	r2, r3
 8008002:	7b3b      	ldrb	r3, [r7, #12]
 8008004:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008008:	b2db      	uxtb	r3, r3
 800800a:	4313      	orrs	r3, r2
 800800c:	b2da      	uxtb	r2, r3
 800800e:	7b3b      	ldrb	r3, [r7, #12]
 8008010:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008014:	b2db      	uxtb	r3, r3
 8008016:	4313      	orrs	r3, r2
 8008018:	b2da      	uxtb	r2, r3
 800801a:	7b7b      	ldrb	r3, [r7, #13]
 800801c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008020:	b2db      	uxtb	r3, r3
 8008022:	4313      	orrs	r3, r2
 8008024:	b2da      	uxtb	r2, r3
 8008026:	7b7b      	ldrb	r3, [r7, #13]
 8008028:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800802c:	b2db      	uxtb	r3, r3
 800802e:	4313      	orrs	r3, r2
 8008030:	b2da      	uxtb	r2, r3
 8008032:	7b7b      	ldrb	r3, [r7, #13]
 8008034:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008038:	b2db      	uxtb	r3, r3
 800803a:	4313      	orrs	r3, r2
 800803c:	b2da      	uxtb	r2, r3
 800803e:	7b7b      	ldrb	r3, [r7, #13]
 8008040:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008044:	b2db      	uxtb	r3, r3
 8008046:	4313      	orrs	r3, r2
 8008048:	b2da      	uxtb	r2, r3
 800804a:	7b7b      	ldrb	r3, [r7, #13]
 800804c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008050:	b2db      	uxtb	r3, r3
 8008052:	4313      	orrs	r3, r2
 8008054:	b2da      	uxtb	r2, r3
 8008056:	7b7b      	ldrb	r3, [r7, #13]
 8008058:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800805c:	b2db      	uxtb	r3, r3
 800805e:	4313      	orrs	r3, r2
 8008060:	b2da      	uxtb	r2, r3
 8008062:	7b7b      	ldrb	r3, [r7, #13]
 8008064:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008068:	b2db      	uxtb	r3, r3
 800806a:	4313      	orrs	r3, r2
 800806c:	b2da      	uxtb	r2, r3
 800806e:	7b7b      	ldrb	r3, [r7, #13]
 8008070:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008074:	b2db      	uxtb	r3, r3
 8008076:	4313      	orrs	r3, r2
 8008078:	b2db      	uxtb	r3, r3
 800807a:	2b01      	cmp	r3, #1
 800807c:	d163      	bne.n	8008146 <lsm6dso_gy_data_rate_set+0x1ae>
 800807e:	f107 030b 	add.w	r3, r7, #11
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fa17 	bl	80084b8 <lsm6dso_fsm_data_rate_get>
 800808a:	6138      	str	r0, [r7, #16]
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d159      	bne.n	8008146 <lsm6dso_gy_data_rate_set+0x1ae>
 8008092:	7afb      	ldrb	r3, [r7, #11]
 8008094:	2b03      	cmp	r3, #3
 8008096:	d853      	bhi.n	8008140 <lsm6dso_gy_data_rate_set+0x1a8>
 8008098:	a201      	add	r2, pc, #4	; (adr r2, 80080a0 <lsm6dso_gy_data_rate_set+0x108>)
 800809a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800809e:	bf00      	nop
 80080a0:	080080b1 	.word	0x080080b1
 80080a4:	080080c3 	.word	0x080080c3
 80080a8:	080080e1 	.word	0x080080e1
 80080ac:	0800810b 	.word	0x0800810b
 80080b0:	78fb      	ldrb	r3, [r7, #3]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d102      	bne.n	80080bc <lsm6dso_gy_data_rate_set+0x124>
 80080b6:	2301      	movs	r3, #1
 80080b8:	75fb      	strb	r3, [r7, #23]
 80080ba:	e045      	b.n	8008148 <lsm6dso_gy_data_rate_set+0x1b0>
 80080bc:	78fb      	ldrb	r3, [r7, #3]
 80080be:	75fb      	strb	r3, [r7, #23]
 80080c0:	e042      	b.n	8008148 <lsm6dso_gy_data_rate_set+0x1b0>
 80080c2:	78fb      	ldrb	r3, [r7, #3]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d102      	bne.n	80080ce <lsm6dso_gy_data_rate_set+0x136>
 80080c8:	2302      	movs	r3, #2
 80080ca:	75fb      	strb	r3, [r7, #23]
 80080cc:	e03c      	b.n	8008148 <lsm6dso_gy_data_rate_set+0x1b0>
 80080ce:	78fb      	ldrb	r3, [r7, #3]
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d102      	bne.n	80080da <lsm6dso_gy_data_rate_set+0x142>
 80080d4:	2302      	movs	r3, #2
 80080d6:	75fb      	strb	r3, [r7, #23]
 80080d8:	e036      	b.n	8008148 <lsm6dso_gy_data_rate_set+0x1b0>
 80080da:	78fb      	ldrb	r3, [r7, #3]
 80080dc:	75fb      	strb	r3, [r7, #23]
 80080de:	e033      	b.n	8008148 <lsm6dso_gy_data_rate_set+0x1b0>
 80080e0:	78fb      	ldrb	r3, [r7, #3]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d102      	bne.n	80080ec <lsm6dso_gy_data_rate_set+0x154>
 80080e6:	2303      	movs	r3, #3
 80080e8:	75fb      	strb	r3, [r7, #23]
 80080ea:	e02d      	b.n	8008148 <lsm6dso_gy_data_rate_set+0x1b0>
 80080ec:	78fb      	ldrb	r3, [r7, #3]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d102      	bne.n	80080f8 <lsm6dso_gy_data_rate_set+0x160>
 80080f2:	2303      	movs	r3, #3
 80080f4:	75fb      	strb	r3, [r7, #23]
 80080f6:	e027      	b.n	8008148 <lsm6dso_gy_data_rate_set+0x1b0>
 80080f8:	78fb      	ldrb	r3, [r7, #3]
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d102      	bne.n	8008104 <lsm6dso_gy_data_rate_set+0x16c>
 80080fe:	2303      	movs	r3, #3
 8008100:	75fb      	strb	r3, [r7, #23]
 8008102:	e021      	b.n	8008148 <lsm6dso_gy_data_rate_set+0x1b0>
 8008104:	78fb      	ldrb	r3, [r7, #3]
 8008106:	75fb      	strb	r3, [r7, #23]
 8008108:	e01e      	b.n	8008148 <lsm6dso_gy_data_rate_set+0x1b0>
 800810a:	78fb      	ldrb	r3, [r7, #3]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d102      	bne.n	8008116 <lsm6dso_gy_data_rate_set+0x17e>
 8008110:	2304      	movs	r3, #4
 8008112:	75fb      	strb	r3, [r7, #23]
 8008114:	e018      	b.n	8008148 <lsm6dso_gy_data_rate_set+0x1b0>
 8008116:	78fb      	ldrb	r3, [r7, #3]
 8008118:	2b01      	cmp	r3, #1
 800811a:	d102      	bne.n	8008122 <lsm6dso_gy_data_rate_set+0x18a>
 800811c:	2304      	movs	r3, #4
 800811e:	75fb      	strb	r3, [r7, #23]
 8008120:	e012      	b.n	8008148 <lsm6dso_gy_data_rate_set+0x1b0>
 8008122:	78fb      	ldrb	r3, [r7, #3]
 8008124:	2b02      	cmp	r3, #2
 8008126:	d102      	bne.n	800812e <lsm6dso_gy_data_rate_set+0x196>
 8008128:	2304      	movs	r3, #4
 800812a:	75fb      	strb	r3, [r7, #23]
 800812c:	e00c      	b.n	8008148 <lsm6dso_gy_data_rate_set+0x1b0>
 800812e:	78fb      	ldrb	r3, [r7, #3]
 8008130:	2b03      	cmp	r3, #3
 8008132:	d102      	bne.n	800813a <lsm6dso_gy_data_rate_set+0x1a2>
 8008134:	2304      	movs	r3, #4
 8008136:	75fb      	strb	r3, [r7, #23]
 8008138:	e006      	b.n	8008148 <lsm6dso_gy_data_rate_set+0x1b0>
 800813a:	78fb      	ldrb	r3, [r7, #3]
 800813c:	75fb      	strb	r3, [r7, #23]
 800813e:	e003      	b.n	8008148 <lsm6dso_gy_data_rate_set+0x1b0>
 8008140:	78fb      	ldrb	r3, [r7, #3]
 8008142:	75fb      	strb	r3, [r7, #23]
 8008144:	e000      	b.n	8008148 <lsm6dso_gy_data_rate_set+0x1b0>
 8008146:	bf00      	nop
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d107      	bne.n	800815e <lsm6dso_gy_data_rate_set+0x1c6>
 800814e:	f107 0208 	add.w	r2, r7, #8
 8008152:	2301      	movs	r3, #1
 8008154:	2111      	movs	r1, #17
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f7ff fcc4 	bl	8007ae4 <lsm6dso_read_reg>
 800815c:	6138      	str	r0, [r7, #16]
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d10f      	bne.n	8008184 <lsm6dso_gy_data_rate_set+0x1ec>
 8008164:	7dfb      	ldrb	r3, [r7, #23]
 8008166:	f003 030f 	and.w	r3, r3, #15
 800816a:	b2da      	uxtb	r2, r3
 800816c:	7a3b      	ldrb	r3, [r7, #8]
 800816e:	f362 1307 	bfi	r3, r2, #4, #4
 8008172:	723b      	strb	r3, [r7, #8]
 8008174:	f107 0208 	add.w	r2, r7, #8
 8008178:	2301      	movs	r3, #1
 800817a:	2111      	movs	r1, #17
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f7ff fcc9 	bl	8007b14 <lsm6dso_write_reg>
 8008182:	6138      	str	r0, [r7, #16]
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	4618      	mov	r0, r3
 8008188:	3718      	adds	r7, #24
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop

08008190 <lsm6dso_gy_data_rate_get>:
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
 800819a:	f107 0208 	add.w	r2, r7, #8
 800819e:	2301      	movs	r3, #1
 80081a0:	2111      	movs	r1, #17
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f7ff fc9e 	bl	8007ae4 <lsm6dso_read_reg>
 80081a8:	60f8      	str	r0, [r7, #12]
 80081aa:	7a3b      	ldrb	r3, [r7, #8]
 80081ac:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	2b0a      	cmp	r3, #10
 80081b4:	d844      	bhi.n	8008240 <lsm6dso_gy_data_rate_get+0xb0>
 80081b6:	a201      	add	r2, pc, #4	; (adr r2, 80081bc <lsm6dso_gy_data_rate_get+0x2c>)
 80081b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081bc:	080081e9 	.word	0x080081e9
 80081c0:	080081f1 	.word	0x080081f1
 80081c4:	080081f9 	.word	0x080081f9
 80081c8:	08008201 	.word	0x08008201
 80081cc:	08008209 	.word	0x08008209
 80081d0:	08008211 	.word	0x08008211
 80081d4:	08008219 	.word	0x08008219
 80081d8:	08008221 	.word	0x08008221
 80081dc:	08008229 	.word	0x08008229
 80081e0:	08008231 	.word	0x08008231
 80081e4:	08008239 	.word	0x08008239
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	2200      	movs	r2, #0
 80081ec:	701a      	strb	r2, [r3, #0]
 80081ee:	e02b      	b.n	8008248 <lsm6dso_gy_data_rate_get+0xb8>
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	2201      	movs	r2, #1
 80081f4:	701a      	strb	r2, [r3, #0]
 80081f6:	e027      	b.n	8008248 <lsm6dso_gy_data_rate_get+0xb8>
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	2202      	movs	r2, #2
 80081fc:	701a      	strb	r2, [r3, #0]
 80081fe:	e023      	b.n	8008248 <lsm6dso_gy_data_rate_get+0xb8>
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	2203      	movs	r2, #3
 8008204:	701a      	strb	r2, [r3, #0]
 8008206:	e01f      	b.n	8008248 <lsm6dso_gy_data_rate_get+0xb8>
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	2204      	movs	r2, #4
 800820c:	701a      	strb	r2, [r3, #0]
 800820e:	e01b      	b.n	8008248 <lsm6dso_gy_data_rate_get+0xb8>
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	2205      	movs	r2, #5
 8008214:	701a      	strb	r2, [r3, #0]
 8008216:	e017      	b.n	8008248 <lsm6dso_gy_data_rate_get+0xb8>
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	2206      	movs	r2, #6
 800821c:	701a      	strb	r2, [r3, #0]
 800821e:	e013      	b.n	8008248 <lsm6dso_gy_data_rate_get+0xb8>
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	2207      	movs	r2, #7
 8008224:	701a      	strb	r2, [r3, #0]
 8008226:	e00f      	b.n	8008248 <lsm6dso_gy_data_rate_get+0xb8>
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	2208      	movs	r2, #8
 800822c:	701a      	strb	r2, [r3, #0]
 800822e:	e00b      	b.n	8008248 <lsm6dso_gy_data_rate_get+0xb8>
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	2209      	movs	r2, #9
 8008234:	701a      	strb	r2, [r3, #0]
 8008236:	e007      	b.n	8008248 <lsm6dso_gy_data_rate_get+0xb8>
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	220a      	movs	r2, #10
 800823c:	701a      	strb	r2, [r3, #0]
 800823e:	e003      	b.n	8008248 <lsm6dso_gy_data_rate_get+0xb8>
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	2200      	movs	r2, #0
 8008244:	701a      	strb	r2, [r3, #0]
 8008246:	bf00      	nop
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	4618      	mov	r0, r3
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop

08008254 <lsm6dso_block_data_update_set>:
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	460b      	mov	r3, r1
 800825e:	70fb      	strb	r3, [r7, #3]
 8008260:	f107 0208 	add.w	r2, r7, #8
 8008264:	2301      	movs	r3, #1
 8008266:	2112      	movs	r1, #18
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f7ff fc3b 	bl	8007ae4 <lsm6dso_read_reg>
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d10f      	bne.n	8008296 <lsm6dso_block_data_update_set+0x42>
 8008276:	78fb      	ldrb	r3, [r7, #3]
 8008278:	f003 0301 	and.w	r3, r3, #1
 800827c:	b2da      	uxtb	r2, r3
 800827e:	7a3b      	ldrb	r3, [r7, #8]
 8008280:	f362 1386 	bfi	r3, r2, #6, #1
 8008284:	723b      	strb	r3, [r7, #8]
 8008286:	f107 0208 	add.w	r2, r7, #8
 800828a:	2301      	movs	r3, #1
 800828c:	2112      	movs	r1, #18
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f7ff fc40 	bl	8007b14 <lsm6dso_write_reg>
 8008294:	60f8      	str	r0, [r7, #12]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	4618      	mov	r0, r3
 800829a:	3710      	adds	r7, #16
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <lsm6dso_angular_rate_raw_get>:
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
 80082aa:	2306      	movs	r3, #6
 80082ac:	683a      	ldr	r2, [r7, #0]
 80082ae:	2122      	movs	r1, #34	; 0x22
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f7ff fc17 	bl	8007ae4 <lsm6dso_read_reg>
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	4618      	mov	r0, r3
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <lsm6dso_acceleration_raw_get>:
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b084      	sub	sp, #16
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
 80082ca:	6039      	str	r1, [r7, #0]
 80082cc:	2306      	movs	r3, #6
 80082ce:	683a      	ldr	r2, [r7, #0]
 80082d0:	2128      	movs	r1, #40	; 0x28
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f7ff fc06 	bl	8007ae4 <lsm6dso_read_reg>
 80082d8:	60f8      	str	r0, [r7, #12]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	4618      	mov	r0, r3
 80082de:	3710      	adds	r7, #16
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <lsm6dso_mem_bank_set>:
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	460b      	mov	r3, r1
 80082ee:	70fb      	strb	r3, [r7, #3]
 80082f0:	f107 0208 	add.w	r2, r7, #8
 80082f4:	2301      	movs	r3, #1
 80082f6:	2101      	movs	r1, #1
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f7ff fbf3 	bl	8007ae4 <lsm6dso_read_reg>
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d10f      	bne.n	8008326 <lsm6dso_mem_bank_set+0x42>
 8008306:	78fb      	ldrb	r3, [r7, #3]
 8008308:	f003 0303 	and.w	r3, r3, #3
 800830c:	b2da      	uxtb	r2, r3
 800830e:	7a3b      	ldrb	r3, [r7, #8]
 8008310:	f362 1387 	bfi	r3, r2, #6, #2
 8008314:	723b      	strb	r3, [r7, #8]
 8008316:	f107 0208 	add.w	r2, r7, #8
 800831a:	2301      	movs	r3, #1
 800831c:	2101      	movs	r1, #1
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f7ff fbf8 	bl	8007b14 <lsm6dso_write_reg>
 8008324:	60f8      	str	r0, [r7, #12]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	4618      	mov	r0, r3
 800832a:	3710      	adds	r7, #16
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <lsm6dso_device_id_get>:
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
 800833a:	2301      	movs	r3, #1
 800833c:	683a      	ldr	r2, [r7, #0]
 800833e:	210f      	movs	r1, #15
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f7ff fbcf 	bl	8007ae4 <lsm6dso_read_reg>
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	4618      	mov	r0, r3
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <lsm6dso_auto_increment_set>:
 8008352:	b580      	push	{r7, lr}
 8008354:	b084      	sub	sp, #16
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
 800835a:	460b      	mov	r3, r1
 800835c:	70fb      	strb	r3, [r7, #3]
 800835e:	f107 0208 	add.w	r2, r7, #8
 8008362:	2301      	movs	r3, #1
 8008364:	2112      	movs	r1, #18
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f7ff fbbc 	bl	8007ae4 <lsm6dso_read_reg>
 800836c:	60f8      	str	r0, [r7, #12]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d10f      	bne.n	8008394 <lsm6dso_auto_increment_set+0x42>
 8008374:	78fb      	ldrb	r3, [r7, #3]
 8008376:	f003 0301 	and.w	r3, r3, #1
 800837a:	b2da      	uxtb	r2, r3
 800837c:	7a3b      	ldrb	r3, [r7, #8]
 800837e:	f362 0382 	bfi	r3, r2, #2, #1
 8008382:	723b      	strb	r3, [r7, #8]
 8008384:	f107 0208 	add.w	r2, r7, #8
 8008388:	2301      	movs	r3, #1
 800838a:	2112      	movs	r1, #18
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f7ff fbc1 	bl	8007b14 <lsm6dso_write_reg>
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	4618      	mov	r0, r3
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <lsm6dso_i3c_disable_set>:
 800839e:	b580      	push	{r7, lr}
 80083a0:	b086      	sub	sp, #24
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
 80083a6:	460b      	mov	r3, r1
 80083a8:	70fb      	strb	r3, [r7, #3]
 80083aa:	f107 020c 	add.w	r2, r7, #12
 80083ae:	2301      	movs	r3, #1
 80083b0:	2118      	movs	r1, #24
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f7ff fb96 	bl	8007ae4 <lsm6dso_read_reg>
 80083b8:	6178      	str	r0, [r7, #20]
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d111      	bne.n	80083e4 <lsm6dso_i3c_disable_set+0x46>
 80083c0:	78fb      	ldrb	r3, [r7, #3]
 80083c2:	09db      	lsrs	r3, r3, #7
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	f003 0301 	and.w	r3, r3, #1
 80083ca:	b2da      	uxtb	r2, r3
 80083cc:	7b3b      	ldrb	r3, [r7, #12]
 80083ce:	f362 0341 	bfi	r3, r2, #1, #1
 80083d2:	733b      	strb	r3, [r7, #12]
 80083d4:	f107 020c 	add.w	r2, r7, #12
 80083d8:	2301      	movs	r3, #1
 80083da:	2118      	movs	r1, #24
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f7ff fb99 	bl	8007b14 <lsm6dso_write_reg>
 80083e2:	6178      	str	r0, [r7, #20]
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d107      	bne.n	80083fa <lsm6dso_i3c_disable_set+0x5c>
 80083ea:	f107 0210 	add.w	r2, r7, #16
 80083ee:	2301      	movs	r3, #1
 80083f0:	2162      	movs	r1, #98	; 0x62
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f7ff fb76 	bl	8007ae4 <lsm6dso_read_reg>
 80083f8:	6178      	str	r0, [r7, #20]
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d10f      	bne.n	8008420 <lsm6dso_i3c_disable_set+0x82>
 8008400:	78fb      	ldrb	r3, [r7, #3]
 8008402:	f003 0303 	and.w	r3, r3, #3
 8008406:	b2da      	uxtb	r2, r3
 8008408:	7c3b      	ldrb	r3, [r7, #16]
 800840a:	f362 03c4 	bfi	r3, r2, #3, #2
 800840e:	743b      	strb	r3, [r7, #16]
 8008410:	f107 0210 	add.w	r2, r7, #16
 8008414:	2301      	movs	r3, #1
 8008416:	2162      	movs	r1, #98	; 0x62
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7ff fb7b 	bl	8007b14 <lsm6dso_write_reg>
 800841e:	6178      	str	r0, [r7, #20]
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	4618      	mov	r0, r3
 8008424:	3718      	adds	r7, #24
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <lsm6dso_fifo_mode_set>:
 800842a:	b580      	push	{r7, lr}
 800842c:	b084      	sub	sp, #16
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	460b      	mov	r3, r1
 8008434:	70fb      	strb	r3, [r7, #3]
 8008436:	f107 0208 	add.w	r2, r7, #8
 800843a:	2301      	movs	r3, #1
 800843c:	210a      	movs	r1, #10
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f7ff fb50 	bl	8007ae4 <lsm6dso_read_reg>
 8008444:	60f8      	str	r0, [r7, #12]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d10f      	bne.n	800846c <lsm6dso_fifo_mode_set+0x42>
 800844c:	78fb      	ldrb	r3, [r7, #3]
 800844e:	f003 0307 	and.w	r3, r3, #7
 8008452:	b2da      	uxtb	r2, r3
 8008454:	7a3b      	ldrb	r3, [r7, #8]
 8008456:	f362 0302 	bfi	r3, r2, #0, #3
 800845a:	723b      	strb	r3, [r7, #8]
 800845c:	f107 0208 	add.w	r2, r7, #8
 8008460:	2301      	movs	r3, #1
 8008462:	210a      	movs	r1, #10
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f7ff fb55 	bl	8007b14 <lsm6dso_write_reg>
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	4618      	mov	r0, r3
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <lsm6dso_fsm_enable_get>:
 8008476:	b580      	push	{r7, lr}
 8008478:	b084      	sub	sp, #16
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
 800847e:	6039      	str	r1, [r7, #0]
 8008480:	2102      	movs	r1, #2
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7ff ff2e 	bl	80082e4 <lsm6dso_mem_bank_set>
 8008488:	60f8      	str	r0, [r7, #12]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d106      	bne.n	800849e <lsm6dso_fsm_enable_get+0x28>
 8008490:	2302      	movs	r3, #2
 8008492:	683a      	ldr	r2, [r7, #0]
 8008494:	2146      	movs	r1, #70	; 0x46
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7ff fb24 	bl	8007ae4 <lsm6dso_read_reg>
 800849c:	60f8      	str	r0, [r7, #12]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d104      	bne.n	80084ae <lsm6dso_fsm_enable_get+0x38>
 80084a4:	2100      	movs	r1, #0
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f7ff ff1c 	bl	80082e4 <lsm6dso_mem_bank_set>
 80084ac:	60f8      	str	r0, [r7, #12]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	4618      	mov	r0, r3
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <lsm6dso_fsm_data_rate_get>:
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
 80084c2:	2102      	movs	r1, #2
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f7ff ff0d 	bl	80082e4 <lsm6dso_mem_bank_set>
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d107      	bne.n	80084e2 <lsm6dso_fsm_data_rate_get+0x2a>
 80084d2:	f107 0208 	add.w	r2, r7, #8
 80084d6:	2301      	movs	r3, #1
 80084d8:	215f      	movs	r1, #95	; 0x5f
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f7ff fb02 	bl	8007ae4 <lsm6dso_read_reg>
 80084e0:	60f8      	str	r0, [r7, #12]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d12a      	bne.n	800853e <lsm6dso_fsm_data_rate_get+0x86>
 80084e8:	7a3b      	ldrb	r3, [r7, #8]
 80084ea:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	2b03      	cmp	r3, #3
 80084f2:	d81b      	bhi.n	800852c <lsm6dso_fsm_data_rate_get+0x74>
 80084f4:	a201      	add	r2, pc, #4	; (adr r2, 80084fc <lsm6dso_fsm_data_rate_get+0x44>)
 80084f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084fa:	bf00      	nop
 80084fc:	0800850d 	.word	0x0800850d
 8008500:	08008515 	.word	0x08008515
 8008504:	0800851d 	.word	0x0800851d
 8008508:	08008525 	.word	0x08008525
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	2200      	movs	r2, #0
 8008510:	701a      	strb	r2, [r3, #0]
 8008512:	e00f      	b.n	8008534 <lsm6dso_fsm_data_rate_get+0x7c>
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	2201      	movs	r2, #1
 8008518:	701a      	strb	r2, [r3, #0]
 800851a:	e00b      	b.n	8008534 <lsm6dso_fsm_data_rate_get+0x7c>
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	2202      	movs	r2, #2
 8008520:	701a      	strb	r2, [r3, #0]
 8008522:	e007      	b.n	8008534 <lsm6dso_fsm_data_rate_get+0x7c>
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	2203      	movs	r2, #3
 8008528:	701a      	strb	r2, [r3, #0]
 800852a:	e003      	b.n	8008534 <lsm6dso_fsm_data_rate_get+0x7c>
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	2200      	movs	r2, #0
 8008530:	701a      	strb	r2, [r3, #0]
 8008532:	bf00      	nop
 8008534:	2100      	movs	r1, #0
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f7ff fed4 	bl	80082e4 <lsm6dso_mem_bank_set>
 800853c:	60f8      	str	r0, [r7, #12]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	4618      	mov	r0, r3
 8008542:	3710      	adds	r7, #16
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <STTS751_RegisterBusIO>:
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d103      	bne.n	8008560 <STTS751_RegisterBusIO+0x18>
 8008558:	f04f 33ff 	mov.w	r3, #4294967295
 800855c:	60fb      	str	r3, [r7, #12]
 800855e:	e030      	b.n	80085c2 <STTS751_RegisterBusIO+0x7a>
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	601a      	str	r2, [r3, #0]
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	685a      	ldr	r2, [r3, #4]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	605a      	str	r2, [r3, #4]
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	689a      	ldr	r2, [r3, #8]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	609a      	str	r2, [r3, #8]
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	7b1a      	ldrb	r2, [r3, #12]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	731a      	strb	r2, [r3, #12]
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	691a      	ldr	r2, [r3, #16]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	611a      	str	r2, [r3, #16]
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	695a      	ldr	r2, [r3, #20]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	615a      	str	r2, [r3, #20]
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	699a      	ldr	r2, [r3, #24]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	619a      	str	r2, [r3, #24]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4a0c      	ldr	r2, [pc, #48]	; (80085cc <STTS751_RegisterBusIO+0x84>)
 800859c:	621a      	str	r2, [r3, #32]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a0b      	ldr	r2, [pc, #44]	; (80085d0 <STTS751_RegisterBusIO+0x88>)
 80085a2:	61da      	str	r2, [r3, #28]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	625a      	str	r2, [r3, #36]	; 0x24
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d004      	beq.n	80085bc <STTS751_RegisterBusIO+0x74>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4798      	blx	r3
 80085b8:	60f8      	str	r0, [r7, #12]
 80085ba:	e002      	b.n	80085c2 <STTS751_RegisterBusIO+0x7a>
 80085bc:	f04f 33ff 	mov.w	r3, #4294967295
 80085c0:	60fb      	str	r3, [r7, #12]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	08008a51 	.word	0x08008a51
 80085d0:	08008abf 	.word	0x08008abf

080085d4 <STTS751_Init>:
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d127      	bne.n	8008636 <STTS751_Init+0x62>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	331c      	adds	r3, #28
 80085ea:	2101      	movs	r1, #1
 80085ec:	4618      	mov	r0, r3
 80085ee:	f000 fc42 	bl	8008e76 <stts751_pin_event_route_set>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d002      	beq.n	80085fe <STTS751_Init+0x2a>
 80085f8:	f04f 33ff 	mov.w	r3, #4294967295
 80085fc:	e020      	b.n	8008640 <STTS751_Init+0x6c>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008604:	62da      	str	r2, [r3, #44]	; 0x2c
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	331c      	adds	r3, #28
 800860a:	2103      	movs	r1, #3
 800860c:	4618      	mov	r0, r3
 800860e:	f000 fbaa 	bl	8008d66 <stts751_resolution_set>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d002      	beq.n	800861e <STTS751_Init+0x4a>
 8008618:	f04f 33ff 	mov.w	r3, #4294967295
 800861c:	e010      	b.n	8008640 <STTS751_Init+0x6c>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	331c      	adds	r3, #28
 8008622:	2180      	movs	r1, #128	; 0x80
 8008624:	4618      	mov	r0, r3
 8008626:	f000 facb 	bl	8008bc0 <stts751_temp_data_rate_set>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d002      	beq.n	8008636 <STTS751_Init+0x62>
 8008630:	f04f 33ff 	mov.w	r3, #4294967295
 8008634:	e004      	b.n	8008640 <STTS751_Init+0x6c>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2201      	movs	r2, #1
 800863a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800863e:	2300      	movs	r3, #0
 8008640:	4618      	mov	r0, r3
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <STTS751_DeInit>:
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008656:	2b01      	cmp	r3, #1
 8008658:	d108      	bne.n	800866c <STTS751_DeInit+0x24>
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 f870 	bl	8008740 <STTS751_TEMP_Disable>
 8008660:	4603      	mov	r3, r0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d002      	beq.n	800866c <STTS751_DeInit+0x24>
 8008666:	f04f 33ff 	mov.w	r3, #4294967295
 800866a:	e004      	b.n	8008676 <STTS751_DeInit+0x2e>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008674:	2300      	movs	r3, #0
 8008676:	4618      	mov	r0, r3
 8008678:	3708      	adds	r7, #8
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <STTS751_ReadID>:
 800867e:	b580      	push	{r7, lr}
 8008680:	b084      	sub	sp, #16
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
 8008686:	6039      	str	r1, [r7, #0]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	331c      	adds	r3, #28
 800868c:	f107 020c 	add.w	r2, r7, #12
 8008690:	4611      	mov	r1, r2
 8008692:	4618      	mov	r0, r3
 8008694:	f000 fc15 	bl	8008ec2 <stts751_device_id_get>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d002      	beq.n	80086a4 <STTS751_ReadID+0x26>
 800869e:	f04f 33ff 	mov.w	r3, #4294967295
 80086a2:	e003      	b.n	80086ac <STTS751_ReadID+0x2e>
 80086a4:	7b7a      	ldrb	r2, [r7, #13]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	701a      	strb	r2, [r3, #0]
 80086aa:	2300      	movs	r3, #0
 80086ac:	4618      	mov	r0, r3
 80086ae:	3710      	adds	r7, #16
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <STTS751_GetCapabilities>:
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	2200      	movs	r2, #0
 80086c2:	709a      	strb	r2, [r3, #2]
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	2200      	movs	r2, #0
 80086c8:	705a      	strb	r2, [r3, #1]
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	2201      	movs	r2, #1
 80086ce:	701a      	strb	r2, [r3, #0]
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	2200      	movs	r2, #0
 80086d4:	70da      	strb	r2, [r3, #3]
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	f04f 0200 	mov.w	r2, #0
 80086dc:	605a      	str	r2, [r3, #4]
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80086e4:	609a      	str	r2, [r3, #8]
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	f04f 0200 	mov.w	r2, #0
 80086ec:	60da      	str	r2, [r3, #12]
 80086ee:	2300      	movs	r3, #0
 80086f0:	4618      	mov	r0, r3
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <STTS751_TEMP_Enable>:
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800870a:	2b01      	cmp	r3, #1
 800870c:	d101      	bne.n	8008712 <STTS751_TEMP_Enable+0x16>
 800870e:	2300      	movs	r3, #0
 8008710:	e012      	b.n	8008738 <STTS751_TEMP_Enable+0x3c>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008718:	eeb0 0a67 	vmov.f32	s0, s15
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 f8b3 	bl	8008888 <STTS751_TEMP_SetOutputDataRate>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d002      	beq.n	800872e <STTS751_TEMP_Enable+0x32>
 8008728:	f04f 33ff 	mov.w	r3, #4294967295
 800872c:	e004      	b.n	8008738 <STTS751_TEMP_Enable+0x3c>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2201      	movs	r2, #1
 8008732:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8008736:	2300      	movs	r3, #0
 8008738:	4618      	mov	r0, r3
 800873a:	3708      	adds	r7, #8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <STTS751_TEMP_Disable>:
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800874e:	2b00      	cmp	r3, #0
 8008750:	d101      	bne.n	8008756 <STTS751_TEMP_Disable+0x16>
 8008752:	2300      	movs	r3, #0
 8008754:	e01c      	b.n	8008790 <STTS751_TEMP_Disable+0x50>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	332c      	adds	r3, #44	; 0x2c
 800875a:	4619      	mov	r1, r3
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 f81b 	bl	8008798 <STTS751_TEMP_GetOutputDataRate>
 8008762:	4603      	mov	r3, r0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d002      	beq.n	800876e <STTS751_TEMP_Disable+0x2e>
 8008768:	f04f 33ff 	mov.w	r3, #4294967295
 800876c:	e010      	b.n	8008790 <STTS751_TEMP_Disable+0x50>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	331c      	adds	r3, #28
 8008772:	2180      	movs	r1, #128	; 0x80
 8008774:	4618      	mov	r0, r3
 8008776:	f000 fa23 	bl	8008bc0 <stts751_temp_data_rate_set>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d002      	beq.n	8008786 <STTS751_TEMP_Disable+0x46>
 8008780:	f04f 33ff 	mov.w	r3, #4294967295
 8008784:	e004      	b.n	8008790 <STTS751_TEMP_Disable+0x50>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800878e:	2300      	movs	r3, #0
 8008790:	4618      	mov	r0, r3
 8008792:	3708      	adds	r7, #8
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <STTS751_TEMP_GetOutputDataRate>:
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
 80087a2:	2300      	movs	r3, #0
 80087a4:	60fb      	str	r3, [r7, #12]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	331c      	adds	r3, #28
 80087aa:	f107 020b 	add.w	r2, r7, #11
 80087ae:	4611      	mov	r1, r2
 80087b0:	4618      	mov	r0, r3
 80087b2:	f000 fa5b 	bl	8008c6c <stts751_temp_data_rate_get>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d002      	beq.n	80087c2 <STTS751_TEMP_GetOutputDataRate+0x2a>
 80087bc:	f04f 33ff 	mov.w	r3, #4294967295
 80087c0:	e05e      	b.n	8008880 <STTS751_TEMP_GetOutputDataRate+0xe8>
 80087c2:	7afb      	ldrb	r3, [r7, #11]
 80087c4:	2b05      	cmp	r3, #5
 80087c6:	d03d      	beq.n	8008844 <STTS751_TEMP_GetOutputDataRate+0xac>
 80087c8:	2b05      	cmp	r3, #5
 80087ca:	dc0d      	bgt.n	80087e8 <STTS751_TEMP_GetOutputDataRate+0x50>
 80087cc:	2b02      	cmp	r3, #2
 80087ce:	d02a      	beq.n	8008826 <STTS751_TEMP_GetOutputDataRate+0x8e>
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	dc04      	bgt.n	80087de <STTS751_TEMP_GetOutputDataRate+0x46>
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d01c      	beq.n	8008812 <STTS751_TEMP_GetOutputDataRate+0x7a>
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d01f      	beq.n	800881c <STTS751_TEMP_GetOutputDataRate+0x84>
 80087dc:	e04b      	b.n	8008876 <STTS751_TEMP_GetOutputDataRate+0xde>
 80087de:	2b03      	cmp	r3, #3
 80087e0:	d026      	beq.n	8008830 <STTS751_TEMP_GetOutputDataRate+0x98>
 80087e2:	2b04      	cmp	r3, #4
 80087e4:	d029      	beq.n	800883a <STTS751_TEMP_GetOutputDataRate+0xa2>
 80087e6:	e046      	b.n	8008876 <STTS751_TEMP_GetOutputDataRate+0xde>
 80087e8:	2b08      	cmp	r3, #8
 80087ea:	d03a      	beq.n	8008862 <STTS751_TEMP_GetOutputDataRate+0xca>
 80087ec:	2b08      	cmp	r3, #8
 80087ee:	dc04      	bgt.n	80087fa <STTS751_TEMP_GetOutputDataRate+0x62>
 80087f0:	2b06      	cmp	r3, #6
 80087f2:	d02c      	beq.n	800884e <STTS751_TEMP_GetOutputDataRate+0xb6>
 80087f4:	2b07      	cmp	r3, #7
 80087f6:	d02f      	beq.n	8008858 <STTS751_TEMP_GetOutputDataRate+0xc0>
 80087f8:	e03d      	b.n	8008876 <STTS751_TEMP_GetOutputDataRate+0xde>
 80087fa:	2b80      	cmp	r3, #128	; 0x80
 80087fc:	d004      	beq.n	8008808 <STTS751_TEMP_GetOutputDataRate+0x70>
 80087fe:	2b90      	cmp	r3, #144	; 0x90
 8008800:	d002      	beq.n	8008808 <STTS751_TEMP_GetOutputDataRate+0x70>
 8008802:	2b09      	cmp	r3, #9
 8008804:	d032      	beq.n	800886c <STTS751_TEMP_GetOutputDataRate+0xd4>
 8008806:	e036      	b.n	8008876 <STTS751_TEMP_GetOutputDataRate+0xde>
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	f04f 0200 	mov.w	r2, #0
 800880e:	601a      	str	r2, [r3, #0]
 8008810:	e035      	b.n	800887e <STTS751_TEMP_GetOutputDataRate+0xe6>
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 8008818:	601a      	str	r2, [r3, #0]
 800881a:	e030      	b.n	800887e <STTS751_TEMP_GetOutputDataRate+0xe6>
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
 8008822:	601a      	str	r2, [r3, #0]
 8008824:	e02b      	b.n	800887e <STTS751_TEMP_GetOutputDataRate+0xe6>
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800882c:	601a      	str	r2, [r3, #0]
 800882e:	e026      	b.n	800887e <STTS751_TEMP_GetOutputDataRate+0xe6>
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8008836:	601a      	str	r2, [r3, #0]
 8008838:	e021      	b.n	800887e <STTS751_TEMP_GetOutputDataRate+0xe6>
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008840:	601a      	str	r2, [r3, #0]
 8008842:	e01c      	b.n	800887e <STTS751_TEMP_GetOutputDataRate+0xe6>
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800884a:	601a      	str	r2, [r3, #0]
 800884c:	e017      	b.n	800887e <STTS751_TEMP_GetOutputDataRate+0xe6>
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8008854:	601a      	str	r2, [r3, #0]
 8008856:	e012      	b.n	800887e <STTS751_TEMP_GetOutputDataRate+0xe6>
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800885e:	601a      	str	r2, [r3, #0]
 8008860:	e00d      	b.n	800887e <STTS751_TEMP_GetOutputDataRate+0xe6>
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8008868:	601a      	str	r2, [r3, #0]
 800886a:	e008      	b.n	800887e <STTS751_TEMP_GetOutputDataRate+0xe6>
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8008872:	601a      	str	r2, [r3, #0]
 8008874:	e003      	b.n	800887e <STTS751_TEMP_GetOutputDataRate+0xe6>
 8008876:	f04f 33ff 	mov.w	r3, #4294967295
 800887a:	60fb      	str	r3, [r7, #12]
 800887c:	bf00      	nop
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	4618      	mov	r0, r3
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <STTS751_TEMP_SetOutputDataRate>:
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	ed87 0a00 	vstr	s0, [r7]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	331c      	adds	r3, #28
 8008898:	f107 020e 	add.w	r2, r7, #14
 800889c:	4611      	mov	r1, r2
 800889e:	4618      	mov	r0, r3
 80088a0:	f000 fa88 	bl	8008db4 <stts751_resolution_get>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d002      	beq.n	80088b0 <STTS751_TEMP_SetOutputDataRate+0x28>
 80088aa:	f04f 33ff 	mov.w	r3, #4294967295
 80088ae:	e0a5      	b.n	80089fc <STTS751_TEMP_SetOutputDataRate+0x174>
 80088b0:	edd7 7a00 	vldr	s15, [r7]
 80088b4:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80088b8:	eef4 7a47 	vcmp.f32	s15, s14
 80088bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088c0:	d10e      	bne.n	80088e0 <STTS751_TEMP_SetOutputDataRate+0x58>
 80088c2:	7bbb      	ldrb	r3, [r7, #14]
 80088c4:	2b03      	cmp	r3, #3
 80088c6:	d10b      	bne.n	80088e0 <STTS751_TEMP_SetOutputDataRate+0x58>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	331c      	adds	r3, #28
 80088cc:	2101      	movs	r1, #1
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 fa49 	bl	8008d66 <stts751_resolution_set>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d002      	beq.n	80088e0 <STTS751_TEMP_SetOutputDataRate+0x58>
 80088da:	f04f 33ff 	mov.w	r3, #4294967295
 80088de:	e08d      	b.n	80089fc <STTS751_TEMP_SetOutputDataRate+0x174>
 80088e0:	edd7 7a00 	vldr	s15, [r7]
 80088e4:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8008a04 <STTS751_TEMP_SetOutputDataRate+0x17c>
 80088e8:	eef4 7a47 	vcmp.f32	s15, s14
 80088ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088f0:	d111      	bne.n	8008916 <STTS751_TEMP_SetOutputDataRate+0x8e>
 80088f2:	7bbb      	ldrb	r3, [r7, #14]
 80088f4:	2b03      	cmp	r3, #3
 80088f6:	d002      	beq.n	80088fe <STTS751_TEMP_SetOutputDataRate+0x76>
 80088f8:	7bbb      	ldrb	r3, [r7, #14]
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d10b      	bne.n	8008916 <STTS751_TEMP_SetOutputDataRate+0x8e>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	331c      	adds	r3, #28
 8008902:	2100      	movs	r1, #0
 8008904:	4618      	mov	r0, r3
 8008906:	f000 fa2e 	bl	8008d66 <stts751_resolution_set>
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d002      	beq.n	8008916 <STTS751_TEMP_SetOutputDataRate+0x8e>
 8008910:	f04f 33ff 	mov.w	r3, #4294967295
 8008914:	e072      	b.n	80089fc <STTS751_TEMP_SetOutputDataRate+0x174>
 8008916:	edd7 7a00 	vldr	s15, [r7]
 800891a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8008a08 <STTS751_TEMP_SetOutputDataRate+0x180>
 800891e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008926:	d801      	bhi.n	800892c <STTS751_TEMP_SetOutputDataRate+0xa4>
 8008928:	2300      	movs	r3, #0
 800892a:	e058      	b.n	80089de <STTS751_TEMP_SetOutputDataRate+0x156>
 800892c:	edd7 7a00 	vldr	s15, [r7]
 8008930:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8008934:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800893c:	d801      	bhi.n	8008942 <STTS751_TEMP_SetOutputDataRate+0xba>
 800893e:	2301      	movs	r3, #1
 8008940:	e04d      	b.n	80089de <STTS751_TEMP_SetOutputDataRate+0x156>
 8008942:	edd7 7a00 	vldr	s15, [r7]
 8008946:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800894a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800894e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008952:	d801      	bhi.n	8008958 <STTS751_TEMP_SetOutputDataRate+0xd0>
 8008954:	2302      	movs	r3, #2
 8008956:	e042      	b.n	80089de <STTS751_TEMP_SetOutputDataRate+0x156>
 8008958:	edd7 7a00 	vldr	s15, [r7]
 800895c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008960:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008968:	d801      	bhi.n	800896e <STTS751_TEMP_SetOutputDataRate+0xe6>
 800896a:	2303      	movs	r3, #3
 800896c:	e037      	b.n	80089de <STTS751_TEMP_SetOutputDataRate+0x156>
 800896e:	edd7 7a00 	vldr	s15, [r7]
 8008972:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008976:	eef4 7ac7 	vcmpe.f32	s15, s14
 800897a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800897e:	d801      	bhi.n	8008984 <STTS751_TEMP_SetOutputDataRate+0xfc>
 8008980:	2304      	movs	r3, #4
 8008982:	e02c      	b.n	80089de <STTS751_TEMP_SetOutputDataRate+0x156>
 8008984:	edd7 7a00 	vldr	s15, [r7]
 8008988:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800898c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008994:	d801      	bhi.n	800899a <STTS751_TEMP_SetOutputDataRate+0x112>
 8008996:	2305      	movs	r3, #5
 8008998:	e021      	b.n	80089de <STTS751_TEMP_SetOutputDataRate+0x156>
 800899a:	edd7 7a00 	vldr	s15, [r7]
 800899e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80089a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089aa:	d801      	bhi.n	80089b0 <STTS751_TEMP_SetOutputDataRate+0x128>
 80089ac:	2306      	movs	r3, #6
 80089ae:	e016      	b.n	80089de <STTS751_TEMP_SetOutputDataRate+0x156>
 80089b0:	edd7 7a00 	vldr	s15, [r7]
 80089b4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80089b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089c0:	d801      	bhi.n	80089c6 <STTS751_TEMP_SetOutputDataRate+0x13e>
 80089c2:	2307      	movs	r3, #7
 80089c4:	e00b      	b.n	80089de <STTS751_TEMP_SetOutputDataRate+0x156>
 80089c6:	edd7 7a00 	vldr	s15, [r7]
 80089ca:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80089ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089d6:	d801      	bhi.n	80089dc <STTS751_TEMP_SetOutputDataRate+0x154>
 80089d8:	2308      	movs	r3, #8
 80089da:	e000      	b.n	80089de <STTS751_TEMP_SetOutputDataRate+0x156>
 80089dc:	2309      	movs	r3, #9
 80089de:	73fb      	strb	r3, [r7, #15]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	331c      	adds	r3, #28
 80089e4:	7bfa      	ldrb	r2, [r7, #15]
 80089e6:	4611      	mov	r1, r2
 80089e8:	4618      	mov	r0, r3
 80089ea:	f000 f8e9 	bl	8008bc0 <stts751_temp_data_rate_set>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d002      	beq.n	80089fa <STTS751_TEMP_SetOutputDataRate+0x172>
 80089f4:	f04f 33ff 	mov.w	r3, #4294967295
 80089f8:	e000      	b.n	80089fc <STTS751_TEMP_SetOutputDataRate+0x174>
 80089fa:	2300      	movs	r3, #0
 80089fc:	4618      	mov	r0, r3
 80089fe:	3710      	adds	r7, #16
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	42000000 	.word	0x42000000
 8008a08:	3d800000 	.word	0x3d800000

08008a0c <STTS751_TEMP_GetTemperature>:
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	331c      	adds	r3, #28
 8008a1a:	f107 020e 	add.w	r2, r7, #14
 8008a1e:	4611      	mov	r1, r2
 8008a20:	4618      	mov	r0, r3
 8008a22:	f000 f9ff 	bl	8008e24 <stts751_temperature_raw_get>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d002      	beq.n	8008a32 <STTS751_TEMP_GetTemperature+0x26>
 8008a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8008a30:	e00a      	b.n	8008a48 <STTS751_TEMP_GetTemperature+0x3c>
 8008a32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008a36:	4618      	mov	r0, r3
 8008a38:	f000 f8a8 	bl	8008b8c <stts751_from_lsb_to_celsius>
 8008a3c:	eef0 7a40 	vmov.f32	s15, s0
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	edc3 7a00 	vstr	s15, [r3]
 8008a46:	2300      	movs	r3, #0
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <ReadRegWrap>:
 8008a50:	b590      	push	{r4, r7, lr}
 8008a52:	b089      	sub	sp, #36	; 0x24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	607a      	str	r2, [r7, #4]
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	72fb      	strb	r3, [r7, #11]
 8008a60:	4613      	mov	r3, r2
 8008a62:	813b      	strh	r3, [r7, #8]
 8008a64:	2300      	movs	r3, #0
 8008a66:	61bb      	str	r3, [r7, #24]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	617b      	str	r3, [r7, #20]
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d11f      	bne.n	8008ab4 <ReadRegWrap+0x64>
 8008a74:	2300      	movs	r3, #0
 8008a76:	83fb      	strh	r3, [r7, #30]
 8008a78:	e018      	b.n	8008aac <ReadRegWrap+0x5c>
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	695c      	ldr	r4, [r3, #20]
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	7b1b      	ldrb	r3, [r3, #12]
 8008a82:	b298      	uxth	r0, r3
 8008a84:	7afb      	ldrb	r3, [r7, #11]
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	8bfb      	ldrh	r3, [r7, #30]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	b299      	uxth	r1, r3
 8008a8e:	8bfb      	ldrh	r3, [r7, #30]
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	441a      	add	r2, r3
 8008a94:	2301      	movs	r3, #1
 8008a96:	47a0      	blx	r4
 8008a98:	61b8      	str	r0, [r7, #24]
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d002      	beq.n	8008aa6 <ReadRegWrap+0x56>
 8008aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8008aa4:	e007      	b.n	8008ab6 <ReadRegWrap+0x66>
 8008aa6:	8bfb      	ldrh	r3, [r7, #30]
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	83fb      	strh	r3, [r7, #30]
 8008aac:	8bfa      	ldrh	r2, [r7, #30]
 8008aae:	893b      	ldrh	r3, [r7, #8]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d3e2      	bcc.n	8008a7a <ReadRegWrap+0x2a>
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3724      	adds	r7, #36	; 0x24
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd90      	pop	{r4, r7, pc}

08008abe <WriteRegWrap>:
 8008abe:	b590      	push	{r4, r7, lr}
 8008ac0:	b089      	sub	sp, #36	; 0x24
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	60f8      	str	r0, [r7, #12]
 8008ac6:	607a      	str	r2, [r7, #4]
 8008ac8:	461a      	mov	r2, r3
 8008aca:	460b      	mov	r3, r1
 8008acc:	72fb      	strb	r3, [r7, #11]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	813b      	strh	r3, [r7, #8]
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	61bb      	str	r3, [r7, #24]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	617b      	str	r3, [r7, #20]
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d11f      	bne.n	8008b22 <WriteRegWrap+0x64>
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	83fb      	strh	r3, [r7, #30]
 8008ae6:	e018      	b.n	8008b1a <WriteRegWrap+0x5c>
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	691c      	ldr	r4, [r3, #16]
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	7b1b      	ldrb	r3, [r3, #12]
 8008af0:	b298      	uxth	r0, r3
 8008af2:	7afb      	ldrb	r3, [r7, #11]
 8008af4:	b29a      	uxth	r2, r3
 8008af6:	8bfb      	ldrh	r3, [r7, #30]
 8008af8:	4413      	add	r3, r2
 8008afa:	b299      	uxth	r1, r3
 8008afc:	8bfb      	ldrh	r3, [r7, #30]
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	441a      	add	r2, r3
 8008b02:	2301      	movs	r3, #1
 8008b04:	47a0      	blx	r4
 8008b06:	61b8      	str	r0, [r7, #24]
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d002      	beq.n	8008b14 <WriteRegWrap+0x56>
 8008b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b12:	e007      	b.n	8008b24 <WriteRegWrap+0x66>
 8008b14:	8bfb      	ldrh	r3, [r7, #30]
 8008b16:	3301      	adds	r3, #1
 8008b18:	83fb      	strh	r3, [r7, #30]
 8008b1a:	8bfa      	ldrh	r2, [r7, #30]
 8008b1c:	893b      	ldrh	r3, [r7, #8]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d3e2      	bcc.n	8008ae8 <WriteRegWrap+0x2a>
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	4618      	mov	r0, r3
 8008b26:	3724      	adds	r7, #36	; 0x24
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd90      	pop	{r4, r7, pc}

08008b2c <stts751_read_reg>:
 8008b2c:	b590      	push	{r4, r7, lr}
 8008b2e:	b087      	sub	sp, #28
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	607a      	str	r2, [r7, #4]
 8008b36:	461a      	mov	r2, r3
 8008b38:	460b      	mov	r3, r1
 8008b3a:	72fb      	strb	r3, [r7, #11]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	813b      	strh	r3, [r7, #8]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	685c      	ldr	r4, [r3, #4]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6898      	ldr	r0, [r3, #8]
 8008b48:	893b      	ldrh	r3, [r7, #8]
 8008b4a:	7af9      	ldrb	r1, [r7, #11]
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	47a0      	blx	r4
 8008b50:	6178      	str	r0, [r7, #20]
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	4618      	mov	r0, r3
 8008b56:	371c      	adds	r7, #28
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd90      	pop	{r4, r7, pc}

08008b5c <stts751_write_reg>:
 8008b5c:	b590      	push	{r4, r7, lr}
 8008b5e:	b087      	sub	sp, #28
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	607a      	str	r2, [r7, #4]
 8008b66:	461a      	mov	r2, r3
 8008b68:	460b      	mov	r3, r1
 8008b6a:	72fb      	strb	r3, [r7, #11]
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	813b      	strh	r3, [r7, #8]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681c      	ldr	r4, [r3, #0]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6898      	ldr	r0, [r3, #8]
 8008b78:	893b      	ldrh	r3, [r7, #8]
 8008b7a:	7af9      	ldrb	r1, [r7, #11]
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	47a0      	blx	r4
 8008b80:	6178      	str	r0, [r7, #20]
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	4618      	mov	r0, r3
 8008b86:	371c      	adds	r7, #28
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd90      	pop	{r4, r7, pc}

08008b8c <stts751_from_lsb_to_celsius>:
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	4603      	mov	r3, r0
 8008b94:	80fb      	strh	r3, [r7, #6]
 8008b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b9a:	ee07 3a90 	vmov	s15, r3
 8008b9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ba2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8008bbc <stts751_from_lsb_to_celsius+0x30>
 8008ba6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008baa:	eef0 7a66 	vmov.f32	s15, s13
 8008bae:	eeb0 0a67 	vmov.f32	s0, s15
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr
 8008bbc:	43800000 	.word	0x43800000

08008bc0 <stts751_temp_data_rate_set>:
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b086      	sub	sp, #24
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	460b      	mov	r3, r1
 8008bca:	70fb      	strb	r3, [r7, #3]
 8008bcc:	23aa      	movs	r3, #170	; 0xaa
 8008bce:	72fb      	strb	r3, [r7, #11]
 8008bd0:	f107 020c 	add.w	r2, r7, #12
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	2104      	movs	r1, #4
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f7ff ffa7 	bl	8008b2c <stts751_read_reg>
 8008bde:	6178      	str	r0, [r7, #20]
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10f      	bne.n	8008c06 <stts751_temp_data_rate_set+0x46>
 8008be6:	78fb      	ldrb	r3, [r7, #3]
 8008be8:	f003 030f 	and.w	r3, r3, #15
 8008bec:	b2da      	uxtb	r2, r3
 8008bee:	7b3b      	ldrb	r3, [r7, #12]
 8008bf0:	f362 0303 	bfi	r3, r2, #0, #4
 8008bf4:	733b      	strb	r3, [r7, #12]
 8008bf6:	f107 020c 	add.w	r2, r7, #12
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	2104      	movs	r1, #4
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f7ff ffac 	bl	8008b5c <stts751_write_reg>
 8008c04:	6178      	str	r0, [r7, #20]
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d107      	bne.n	8008c1c <stts751_temp_data_rate_set+0x5c>
 8008c0c:	f107 0210 	add.w	r2, r7, #16
 8008c10:	2301      	movs	r3, #1
 8008c12:	2103      	movs	r1, #3
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f7ff ff89 	bl	8008b2c <stts751_read_reg>
 8008c1a:	6178      	str	r0, [r7, #20]
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d111      	bne.n	8008c46 <stts751_temp_data_rate_set+0x86>
 8008c22:	78fb      	ldrb	r3, [r7, #3]
 8008c24:	09db      	lsrs	r3, r3, #7
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	f003 0301 	and.w	r3, r3, #1
 8008c2c:	b2da      	uxtb	r2, r3
 8008c2e:	7c3b      	ldrb	r3, [r7, #16]
 8008c30:	f362 1386 	bfi	r3, r2, #6, #1
 8008c34:	743b      	strb	r3, [r7, #16]
 8008c36:	f107 0210 	add.w	r2, r7, #16
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	2103      	movs	r1, #3
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f7ff ff8c 	bl	8008b5c <stts751_write_reg>
 8008c44:	6178      	str	r0, [r7, #20]
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d10a      	bne.n	8008c62 <stts751_temp_data_rate_set+0xa2>
 8008c4c:	78fb      	ldrb	r3, [r7, #3]
 8008c4e:	2b90      	cmp	r3, #144	; 0x90
 8008c50:	d107      	bne.n	8008c62 <stts751_temp_data_rate_set+0xa2>
 8008c52:	f107 020b 	add.w	r2, r7, #11
 8008c56:	2301      	movs	r3, #1
 8008c58:	210f      	movs	r1, #15
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f7ff ff7e 	bl	8008b5c <stts751_write_reg>
 8008c60:	6178      	str	r0, [r7, #20]
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	4618      	mov	r0, r3
 8008c66:	3718      	adds	r7, #24
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <stts751_temp_data_rate_get>:
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b086      	sub	sp, #24
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
 8008c76:	f107 0210 	add.w	r2, r7, #16
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	2104      	movs	r1, #4
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f7ff ff54 	bl	8008b2c <stts751_read_reg>
 8008c84:	6178      	str	r0, [r7, #20]
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d107      	bne.n	8008c9c <stts751_temp_data_rate_get+0x30>
 8008c8c:	f107 020c 	add.w	r2, r7, #12
 8008c90:	2301      	movs	r3, #1
 8008c92:	2103      	movs	r1, #3
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f7ff ff49 	bl	8008b2c <stts751_read_reg>
 8008c9a:	6178      	str	r0, [r7, #20]
 8008c9c:	7b3b      	ldrb	r3, [r7, #12]
 8008c9e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	01db      	lsls	r3, r3, #7
 8008ca6:	7c3a      	ldrb	r2, [r7, #16]
 8008ca8:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8008cac:	b2d2      	uxtb	r2, r2
 8008cae:	4413      	add	r3, r2
 8008cb0:	2b05      	cmp	r3, #5
 8008cb2:	d03b      	beq.n	8008d2c <stts751_temp_data_rate_get+0xc0>
 8008cb4:	2b05      	cmp	r3, #5
 8008cb6:	dc0d      	bgt.n	8008cd4 <stts751_temp_data_rate_get+0x68>
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d02b      	beq.n	8008d14 <stts751_temp_data_rate_get+0xa8>
 8008cbc:	2b02      	cmp	r3, #2
 8008cbe:	dc04      	bgt.n	8008cca <stts751_temp_data_rate_get+0x5e>
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d01f      	beq.n	8008d04 <stts751_temp_data_rate_get+0x98>
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d021      	beq.n	8008d0c <stts751_temp_data_rate_get+0xa0>
 8008cc8:	e044      	b.n	8008d54 <stts751_temp_data_rate_get+0xe8>
 8008cca:	2b03      	cmp	r3, #3
 8008ccc:	d026      	beq.n	8008d1c <stts751_temp_data_rate_get+0xb0>
 8008cce:	2b04      	cmp	r3, #4
 8008cd0:	d028      	beq.n	8008d24 <stts751_temp_data_rate_get+0xb8>
 8008cd2:	e03f      	b.n	8008d54 <stts751_temp_data_rate_get+0xe8>
 8008cd4:	2b08      	cmp	r3, #8
 8008cd6:	d035      	beq.n	8008d44 <stts751_temp_data_rate_get+0xd8>
 8008cd8:	2b08      	cmp	r3, #8
 8008cda:	dc04      	bgt.n	8008ce6 <stts751_temp_data_rate_get+0x7a>
 8008cdc:	2b06      	cmp	r3, #6
 8008cde:	d029      	beq.n	8008d34 <stts751_temp_data_rate_get+0xc8>
 8008ce0:	2b07      	cmp	r3, #7
 8008ce2:	d02b      	beq.n	8008d3c <stts751_temp_data_rate_get+0xd0>
 8008ce4:	e036      	b.n	8008d54 <stts751_temp_data_rate_get+0xe8>
 8008ce6:	2b80      	cmp	r3, #128	; 0x80
 8008ce8:	d004      	beq.n	8008cf4 <stts751_temp_data_rate_get+0x88>
 8008cea:	2b90      	cmp	r3, #144	; 0x90
 8008cec:	d006      	beq.n	8008cfc <stts751_temp_data_rate_get+0x90>
 8008cee:	2b09      	cmp	r3, #9
 8008cf0:	d02c      	beq.n	8008d4c <stts751_temp_data_rate_get+0xe0>
 8008cf2:	e02f      	b.n	8008d54 <stts751_temp_data_rate_get+0xe8>
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	2280      	movs	r2, #128	; 0x80
 8008cf8:	701a      	strb	r2, [r3, #0]
 8008cfa:	e02f      	b.n	8008d5c <stts751_temp_data_rate_get+0xf0>
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	2290      	movs	r2, #144	; 0x90
 8008d00:	701a      	strb	r2, [r3, #0]
 8008d02:	e02b      	b.n	8008d5c <stts751_temp_data_rate_get+0xf0>
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	2200      	movs	r2, #0
 8008d08:	701a      	strb	r2, [r3, #0]
 8008d0a:	e027      	b.n	8008d5c <stts751_temp_data_rate_get+0xf0>
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	701a      	strb	r2, [r3, #0]
 8008d12:	e023      	b.n	8008d5c <stts751_temp_data_rate_get+0xf0>
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	2202      	movs	r2, #2
 8008d18:	701a      	strb	r2, [r3, #0]
 8008d1a:	e01f      	b.n	8008d5c <stts751_temp_data_rate_get+0xf0>
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	2203      	movs	r2, #3
 8008d20:	701a      	strb	r2, [r3, #0]
 8008d22:	e01b      	b.n	8008d5c <stts751_temp_data_rate_get+0xf0>
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	2204      	movs	r2, #4
 8008d28:	701a      	strb	r2, [r3, #0]
 8008d2a:	e017      	b.n	8008d5c <stts751_temp_data_rate_get+0xf0>
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	2205      	movs	r2, #5
 8008d30:	701a      	strb	r2, [r3, #0]
 8008d32:	e013      	b.n	8008d5c <stts751_temp_data_rate_get+0xf0>
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	2206      	movs	r2, #6
 8008d38:	701a      	strb	r2, [r3, #0]
 8008d3a:	e00f      	b.n	8008d5c <stts751_temp_data_rate_get+0xf0>
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	2207      	movs	r2, #7
 8008d40:	701a      	strb	r2, [r3, #0]
 8008d42:	e00b      	b.n	8008d5c <stts751_temp_data_rate_get+0xf0>
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	2208      	movs	r2, #8
 8008d48:	701a      	strb	r2, [r3, #0]
 8008d4a:	e007      	b.n	8008d5c <stts751_temp_data_rate_get+0xf0>
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	2209      	movs	r2, #9
 8008d50:	701a      	strb	r2, [r3, #0]
 8008d52:	e003      	b.n	8008d5c <stts751_temp_data_rate_get+0xf0>
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	2280      	movs	r2, #128	; 0x80
 8008d58:	701a      	strb	r2, [r3, #0]
 8008d5a:	bf00      	nop
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3718      	adds	r7, #24
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <stts751_resolution_set>:
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b084      	sub	sp, #16
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
 8008d6e:	460b      	mov	r3, r1
 8008d70:	70fb      	strb	r3, [r7, #3]
 8008d72:	f107 0208 	add.w	r2, r7, #8
 8008d76:	2301      	movs	r3, #1
 8008d78:	2103      	movs	r1, #3
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f7ff fed6 	bl	8008b2c <stts751_read_reg>
 8008d80:	60f8      	str	r0, [r7, #12]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d10f      	bne.n	8008da8 <stts751_resolution_set+0x42>
 8008d88:	78fb      	ldrb	r3, [r7, #3]
 8008d8a:	f003 0303 	and.w	r3, r3, #3
 8008d8e:	b2da      	uxtb	r2, r3
 8008d90:	7a3b      	ldrb	r3, [r7, #8]
 8008d92:	f362 0383 	bfi	r3, r2, #2, #2
 8008d96:	723b      	strb	r3, [r7, #8]
 8008d98:	f107 0208 	add.w	r2, r7, #8
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	2103      	movs	r1, #3
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f7ff fedb 	bl	8008b5c <stts751_write_reg>
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	4618      	mov	r0, r3
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
	...

08008db4 <stts751_resolution_get>:
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
 8008dbe:	f107 0208 	add.w	r2, r7, #8
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	2103      	movs	r1, #3
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7ff feb0 	bl	8008b2c <stts751_read_reg>
 8008dcc:	60f8      	str	r0, [r7, #12]
 8008dce:	7a3b      	ldrb	r3, [r7, #8]
 8008dd0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	2b03      	cmp	r3, #3
 8008dd8:	d81a      	bhi.n	8008e10 <stts751_resolution_get+0x5c>
 8008dda:	a201      	add	r2, pc, #4	; (adr r2, 8008de0 <stts751_resolution_get+0x2c>)
 8008ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de0:	08008df9 	.word	0x08008df9
 8008de4:	08008e01 	.word	0x08008e01
 8008de8:	08008df1 	.word	0x08008df1
 8008dec:	08008e09 	.word	0x08008e09
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	2202      	movs	r2, #2
 8008df4:	701a      	strb	r2, [r3, #0]
 8008df6:	e00f      	b.n	8008e18 <stts751_resolution_get+0x64>
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	701a      	strb	r2, [r3, #0]
 8008dfe:	e00b      	b.n	8008e18 <stts751_resolution_get+0x64>
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	2201      	movs	r2, #1
 8008e04:	701a      	strb	r2, [r3, #0]
 8008e06:	e007      	b.n	8008e18 <stts751_resolution_get+0x64>
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	2203      	movs	r2, #3
 8008e0c:	701a      	strb	r2, [r3, #0]
 8008e0e:	e003      	b.n	8008e18 <stts751_resolution_get+0x64>
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	2202      	movs	r2, #2
 8008e14:	701a      	strb	r2, [r3, #0]
 8008e16:	bf00      	nop
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop

08008e24 <stts751_temperature_raw_get>:
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
 8008e2e:	f107 020a 	add.w	r2, r7, #10
 8008e32:	2301      	movs	r3, #1
 8008e34:	2100      	movs	r1, #0
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f7ff fe78 	bl	8008b2c <stts751_read_reg>
 8008e3c:	60f8      	str	r0, [r7, #12]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d113      	bne.n	8008e6c <stts751_temperature_raw_get+0x48>
 8008e44:	f107 0209 	add.w	r2, r7, #9
 8008e48:	2301      	movs	r3, #1
 8008e4a:	2102      	movs	r1, #2
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f7ff fe6d 	bl	8008b2c <stts751_read_reg>
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	897b      	ldrh	r3, [r7, #10]
 8008e56:	021b      	lsls	r3, r3, #8
 8008e58:	b29a      	uxth	r2, r3
 8008e5a:	7a7b      	ldrb	r3, [r7, #9]
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	4413      	add	r3, r2
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	817b      	strh	r3, [r7, #10]
 8008e64:	897b      	ldrh	r3, [r7, #10]
 8008e66:	b21a      	sxth	r2, r3
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	801a      	strh	r2, [r3, #0]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <stts751_pin_event_route_set>:
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b084      	sub	sp, #16
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
 8008e7e:	460b      	mov	r3, r1
 8008e80:	70fb      	strb	r3, [r7, #3]
 8008e82:	f107 0208 	add.w	r2, r7, #8
 8008e86:	2301      	movs	r3, #1
 8008e88:	2103      	movs	r1, #3
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f7ff fe4e 	bl	8008b2c <stts751_read_reg>
 8008e90:	60f8      	str	r0, [r7, #12]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d10f      	bne.n	8008eb8 <stts751_pin_event_route_set+0x42>
 8008e98:	78fb      	ldrb	r3, [r7, #3]
 8008e9a:	f003 0301 	and.w	r3, r3, #1
 8008e9e:	b2da      	uxtb	r2, r3
 8008ea0:	7a3b      	ldrb	r3, [r7, #8]
 8008ea2:	f362 13c7 	bfi	r3, r2, #7, #1
 8008ea6:	723b      	strb	r3, [r7, #8]
 8008ea8:	f107 0208 	add.w	r2, r7, #8
 8008eac:	2301      	movs	r3, #1
 8008eae:	2103      	movs	r1, #3
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f7ff fe53 	bl	8008b5c <stts751_write_reg>
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <stts751_device_id_get>:
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b084      	sub	sp, #16
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
 8008eca:	6039      	str	r1, [r7, #0]
 8008ecc:	683a      	ldr	r2, [r7, #0]
 8008ece:	2301      	movs	r3, #1
 8008ed0:	21fd      	movs	r1, #253	; 0xfd
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f7ff fe2a 	bl	8008b2c <stts751_read_reg>
 8008ed8:	60f8      	str	r0, [r7, #12]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d107      	bne.n	8008ef0 <stts751_device_id_get+0x2e>
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	1c5a      	adds	r2, r3, #1
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	21fe      	movs	r1, #254	; 0xfe
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f7ff fe1f 	bl	8008b2c <stts751_read_reg>
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d107      	bne.n	8008f06 <stts751_device_id_get+0x44>
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	1c9a      	adds	r2, r3, #2
 8008efa:	2301      	movs	r3, #1
 8008efc:	21ff      	movs	r1, #255	; 0xff
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f7ff fe14 	bl	8008b2c <stts751_read_reg>
 8008f04:	60f8      	str	r0, [r7, #12]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <IKS01A3_ENV_SENSOR_Init>:
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
 *         - ENV_TEMPERATURE for instance 2
 * @retval BSP status
 */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b08a      	sub	sp, #40	; 0x28
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 8008f22:	2300      	movs	r3, #0
 8008f24:	61bb      	str	r3, [r7, #24]
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d036      	beq.n	8008f9a <IKS01A3_ENV_SENSOR_Init+0x8a>
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d302      	bcc.n	8008f36 <IKS01A3_ENV_SENSOR_Init+0x26>
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	d064      	beq.n	8008ffe <IKS01A3_ENV_SENSOR_Init+0xee>
 8008f34:	e095      	b.n	8009062 <IKS01A3_ENV_SENSOR_Init+0x152>
  {
#if (USE_IKS01A3_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A3_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8008f36:	6838      	ldr	r0, [r7, #0]
 8008f38:	f000 f94e 	bl	80091d8 <HTS221_0_Probe>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d002      	beq.n	8008f48 <IKS01A3_ENV_SENSOR_Init+0x38>
      {
        return BSP_ERROR_NO_INIT;
 8008f42:	f04f 33ff 	mov.w	r3, #4294967295
 8008f46:	e0cc      	b.n	80090e2 <IKS01A3_ENV_SENSOR_Init+0x1d2>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008f48:	4a68      	ldr	r2, [pc, #416]	; (80090ec <IKS01A3_ENV_SENSOR_Init+0x1dc>)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	4967      	ldr	r1, [pc, #412]	; (80090f0 <IKS01A3_ENV_SENSOR_Init+0x1e0>)
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008f5a:	f107 0108 	add.w	r1, r7, #8
 8008f5e:	4610      	mov	r0, r2
 8008f60:	4798      	blx	r3
 8008f62:	4603      	mov	r3, r0
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d002      	beq.n	8008f6e <IKS01A3_ENV_SENSOR_Init+0x5e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008f68:	f06f 0306 	mvn.w	r3, #6
 8008f6c:	e0b9      	b.n	80090e2 <IKS01A3_ENV_SENSOR_Init+0x1d2>
      }
      if (cap.Temperature == 1U)
 8008f6e:	7a3b      	ldrb	r3, [r7, #8]
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d103      	bne.n	8008f7c <IKS01A3_ENV_SENSOR_Init+0x6c>
      {
        component_functions |= ENV_TEMPERATURE;
 8008f74:	69bb      	ldr	r3, [r7, #24]
 8008f76:	f043 0301 	orr.w	r3, r3, #1
 8008f7a:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8008f7c:	7abb      	ldrb	r3, [r7, #10]
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d103      	bne.n	8008f8a <IKS01A3_ENV_SENSOR_Init+0x7a>
      {
        component_functions |= ENV_HUMIDITY;
 8008f82:	69bb      	ldr	r3, [r7, #24]
 8008f84:	f043 0304 	orr.w	r3, r3, #4
 8008f88:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8008f8a:	7a7b      	ldrb	r3, [r7, #9]
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d16c      	bne.n	800906a <IKS01A3_ENV_SENSOR_Init+0x15a>
      {
        component_functions |= ENV_PRESSURE;
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	f043 0302 	orr.w	r3, r3, #2
 8008f96:	61bb      	str	r3, [r7, #24]
      }
      break;
 8008f98:	e067      	b.n	800906a <IKS01A3_ENV_SENSOR_Init+0x15a>
#endif

#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
    case IKS01A3_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 8008f9a:	6838      	ldr	r0, [r7, #0]
 8008f9c:	f000 f9d6 	bl	800934c <LPS22HH_0_Probe>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d002      	beq.n	8008fac <IKS01A3_ENV_SENSOR_Init+0x9c>
      {
        return BSP_ERROR_NO_INIT;
 8008fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8008faa:	e09a      	b.n	80090e2 <IKS01A3_ENV_SENSOR_Init+0x1d2>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008fac:	4a4f      	ldr	r2, [pc, #316]	; (80090ec <IKS01A3_ENV_SENSOR_Init+0x1dc>)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	494e      	ldr	r1, [pc, #312]	; (80090f0 <IKS01A3_ENV_SENSOR_Init+0x1e0>)
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008fbe:	f107 0108 	add.w	r1, r7, #8
 8008fc2:	4610      	mov	r0, r2
 8008fc4:	4798      	blx	r3
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d002      	beq.n	8008fd2 <IKS01A3_ENV_SENSOR_Init+0xc2>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008fcc:	f06f 0306 	mvn.w	r3, #6
 8008fd0:	e087      	b.n	80090e2 <IKS01A3_ENV_SENSOR_Init+0x1d2>
      }
      if (cap.Temperature == 1U)
 8008fd2:	7a3b      	ldrb	r3, [r7, #8]
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d103      	bne.n	8008fe0 <IKS01A3_ENV_SENSOR_Init+0xd0>
      {
        component_functions |= ENV_TEMPERATURE;
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	f043 0301 	orr.w	r3, r3, #1
 8008fde:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8008fe0:	7abb      	ldrb	r3, [r7, #10]
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d103      	bne.n	8008fee <IKS01A3_ENV_SENSOR_Init+0xde>
      {
        component_functions |= ENV_HUMIDITY;
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	f043 0304 	orr.w	r3, r3, #4
 8008fec:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8008fee:	7a7b      	ldrb	r3, [r7, #9]
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d13c      	bne.n	800906e <IKS01A3_ENV_SENSOR_Init+0x15e>
      {
        component_functions |= ENV_PRESSURE;
 8008ff4:	69bb      	ldr	r3, [r7, #24]
 8008ff6:	f043 0302 	orr.w	r3, r3, #2
 8008ffa:	61bb      	str	r3, [r7, #24]
      }
      break;
 8008ffc:	e037      	b.n	800906e <IKS01A3_ENV_SENSOR_Init+0x15e>
#endif

#if (USE_IKS01A3_ENV_SENSOR_STTS751_0 == 1)
    case IKS01A3_STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 8008ffe:	6838      	ldr	r0, [r7, #0]
 8009000:	f000 fa60 	bl	80094c4 <STTS751_0_Probe>
 8009004:	4603      	mov	r3, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d002      	beq.n	8009010 <IKS01A3_ENV_SENSOR_Init+0x100>
      {
        return BSP_ERROR_NO_INIT;
 800900a:	f04f 33ff 	mov.w	r3, #4294967295
 800900e:	e068      	b.n	80090e2 <IKS01A3_ENV_SENSOR_Init+0x1d2>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009010:	4a36      	ldr	r2, [pc, #216]	; (80090ec <IKS01A3_ENV_SENSOR_Init+0x1dc>)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	4935      	ldr	r1, [pc, #212]	; (80090f0 <IKS01A3_ENV_SENSOR_Init+0x1e0>)
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009022:	f107 0108 	add.w	r1, r7, #8
 8009026:	4610      	mov	r0, r2
 8009028:	4798      	blx	r3
 800902a:	4603      	mov	r3, r0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d002      	beq.n	8009036 <IKS01A3_ENV_SENSOR_Init+0x126>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009030:	f06f 0306 	mvn.w	r3, #6
 8009034:	e055      	b.n	80090e2 <IKS01A3_ENV_SENSOR_Init+0x1d2>
      }
      if (cap.Temperature == 1U)
 8009036:	7a3b      	ldrb	r3, [r7, #8]
 8009038:	2b01      	cmp	r3, #1
 800903a:	d103      	bne.n	8009044 <IKS01A3_ENV_SENSOR_Init+0x134>
      {
        component_functions |= ENV_TEMPERATURE;
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	f043 0301 	orr.w	r3, r3, #1
 8009042:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8009044:	7abb      	ldrb	r3, [r7, #10]
 8009046:	2b01      	cmp	r3, #1
 8009048:	d103      	bne.n	8009052 <IKS01A3_ENV_SENSOR_Init+0x142>
      {
        component_functions |= ENV_HUMIDITY;
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	f043 0304 	orr.w	r3, r3, #4
 8009050:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8009052:	7a7b      	ldrb	r3, [r7, #9]
 8009054:	2b01      	cmp	r3, #1
 8009056:	d10c      	bne.n	8009072 <IKS01A3_ENV_SENSOR_Init+0x162>
      {
        component_functions |= ENV_PRESSURE;
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	f043 0302 	orr.w	r3, r3, #2
 800905e:	61bb      	str	r3, [r7, #24]
      }
      break;
 8009060:	e007      	b.n	8009072 <IKS01A3_ENV_SENSOR_Init+0x162>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8009062:	f06f 0301 	mvn.w	r3, #1
 8009066:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009068:	e004      	b.n	8009074 <IKS01A3_ENV_SENSOR_Init+0x164>
      break;
 800906a:	bf00      	nop
 800906c:	e002      	b.n	8009074 <IKS01A3_ENV_SENSOR_Init+0x164>
      break;
 800906e:	bf00      	nop
 8009070:	e000      	b.n	8009074 <IKS01A3_ENV_SENSOR_Init+0x164>
      break;
 8009072:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8009074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009076:	2b00      	cmp	r3, #0
 8009078:	d001      	beq.n	800907e <IKS01A3_ENV_SENSOR_Init+0x16e>
  {
    return ret;
 800907a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907c:	e031      	b.n	80090e2 <IKS01A3_ENV_SENSOR_Init+0x1d2>
  }

  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 800907e:	2300      	movs	r3, #0
 8009080:	61fb      	str	r3, [r7, #28]
 8009082:	e02a      	b.n	80090da <IKS01A3_ENV_SENSOR_Init+0x1ca>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	6a3b      	ldr	r3, [r7, #32]
 8009088:	4013      	ands	r3, r2
 800908a:	6a3a      	ldr	r2, [r7, #32]
 800908c:	429a      	cmp	r2, r3
 800908e:	d11e      	bne.n	80090ce <IKS01A3_ENV_SENSOR_Init+0x1be>
 8009090:	69ba      	ldr	r2, [r7, #24]
 8009092:	6a3b      	ldr	r3, [r7, #32]
 8009094:	4013      	ands	r3, r2
 8009096:	6a3a      	ldr	r2, [r7, #32]
 8009098:	429a      	cmp	r2, r3
 800909a:	d118      	bne.n	80090ce <IKS01A3_ENV_SENSOR_Init+0x1be>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800909c:	4a15      	ldr	r2, [pc, #84]	; (80090f4 <IKS01A3_ENV_SENSOR_Init+0x1e4>)
 800909e:	6a3b      	ldr	r3, [r7, #32]
 80090a0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80090a4:	4814      	ldr	r0, [pc, #80]	; (80090f8 <IKS01A3_ENV_SENSOR_Init+0x1e8>)
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	4613      	mov	r3, r2
 80090aa:	005b      	lsls	r3, r3, #1
 80090ac:	4413      	add	r3, r2
 80090ae:	440b      	add	r3, r1
 80090b0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	490e      	ldr	r1, [pc, #56]	; (80090f0 <IKS01A3_ENV_SENSOR_Init+0x1e0>)
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80090be:	4610      	mov	r0, r2
 80090c0:	4798      	blx	r3
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d002      	beq.n	80090ce <IKS01A3_ENV_SENSOR_Init+0x1be>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80090c8:	f06f 0304 	mvn.w	r3, #4
 80090cc:	e009      	b.n	80090e2 <IKS01A3_ENV_SENSOR_Init+0x1d2>
      }
    }
    function = function << 1;
 80090ce:	6a3b      	ldr	r3, [r7, #32]
 80090d0:	005b      	lsls	r3, r3, #1
 80090d2:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	3301      	adds	r3, #1
 80090d8:	61fb      	str	r3, [r7, #28]
 80090da:	69fb      	ldr	r3, [r7, #28]
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d9d1      	bls.n	8009084 <IKS01A3_ENV_SENSOR_Init+0x174>
  }

  return ret;
 80090e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3728      	adds	r7, #40	; 0x28
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	2000027c 	.word	0x2000027c
 80090f0:	20005e6c 	.word	0x20005e6c
 80090f4:	2000015c 	.word	0x2000015c
 80090f8:	20000258 	.word	0x20000258

080090fc <IKS01A3_ENV_SENSOR_GetCapabilities>:
 * @param  Instance Environmental sensor instance
 * @param  Capabilities pointer to Environmental sensor capabilities
 * @retval BSP status
 */
int32_t IKS01A3_ENV_SENSOR_GetCapabilities(uint32_t Instance, IKS01A3_ENV_SENSOR_Capabilities_t *Capabilities)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2b02      	cmp	r3, #2
 800910a:	d903      	bls.n	8009114 <IKS01A3_ENV_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800910c:	f06f 0301 	mvn.w	r3, #1
 8009110:	60fb      	str	r3, [r7, #12]
 8009112:	e014      	b.n	800913e <IKS01A3_ENV_SENSOR_GetCapabilities+0x42>
  }
  else if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 8009114:	4a0c      	ldr	r2, [pc, #48]	; (8009148 <IKS01A3_ENV_SENSOR_GetCapabilities+0x4c>)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	490b      	ldr	r1, [pc, #44]	; (800914c <IKS01A3_ENV_SENSOR_GetCapabilities+0x50>)
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009126:	6839      	ldr	r1, [r7, #0]
 8009128:	4610      	mov	r0, r2
 800912a:	4798      	blx	r3
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d003      	beq.n	800913a <IKS01A3_ENV_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009132:	f06f 0306 	mvn.w	r3, #6
 8009136:	60fb      	str	r3, [r7, #12]
 8009138:	e001      	b.n	800913e <IKS01A3_ENV_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800913a:	2300      	movs	r3, #0
 800913c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800913e:	68fb      	ldr	r3, [r7, #12]
}
 8009140:	4618      	mov	r0, r3
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	2000027c 	.word	0x2000027c
 800914c:	20005e6c 	.word	0x20005e6c

08009150 <IKS01A3_ENV_SENSOR_GetValue>:
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @param  Value pointer to environmental sensor value
 * @retval BSP status
 */
int32_t IKS01A3_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b086      	sub	sp, #24
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2b02      	cmp	r3, #2
 8009160:	d903      	bls.n	800916a <IKS01A3_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009162:	f06f 0301 	mvn.w	r3, #1
 8009166:	617b      	str	r3, [r7, #20]
 8009168:	e029      	b.n	80091be <IKS01A3_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800916a:	4a17      	ldr	r2, [pc, #92]	; (80091c8 <IKS01A3_ENV_SENSOR_GetValue+0x78>)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	4013      	ands	r3, r2
 8009176:	68ba      	ldr	r2, [r7, #8]
 8009178:	429a      	cmp	r2, r3
 800917a:	d11d      	bne.n	80091b8 <IKS01A3_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 800917c:	4a13      	ldr	r2, [pc, #76]	; (80091cc <IKS01A3_ENV_SENSOR_GetValue+0x7c>)
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009184:	4812      	ldr	r0, [pc, #72]	; (80091d0 <IKS01A3_ENV_SENSOR_GetValue+0x80>)
 8009186:	68fa      	ldr	r2, [r7, #12]
 8009188:	4613      	mov	r3, r2
 800918a:	005b      	lsls	r3, r3, #1
 800918c:	4413      	add	r3, r2
 800918e:	440b      	add	r3, r1
 8009190:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009194:	691b      	ldr	r3, [r3, #16]
 8009196:	490f      	ldr	r1, [pc, #60]	; (80091d4 <IKS01A3_ENV_SENSOR_GetValue+0x84>)
 8009198:	68fa      	ldr	r2, [r7, #12]
 800919a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800919e:	6879      	ldr	r1, [r7, #4]
 80091a0:	4610      	mov	r0, r2
 80091a2:	4798      	blx	r3
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d003      	beq.n	80091b2 <IKS01A3_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80091aa:	f06f 0304 	mvn.w	r3, #4
 80091ae:	617b      	str	r3, [r7, #20]
 80091b0:	e005      	b.n	80091be <IKS01A3_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80091b2:	2300      	movs	r3, #0
 80091b4:	617b      	str	r3, [r7, #20]
 80091b6:	e002      	b.n	80091be <IKS01A3_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80091b8:	f06f 0301 	mvn.w	r3, #1
 80091bc:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80091be:	697b      	ldr	r3, [r7, #20]
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3718      	adds	r7, #24
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	20000288 	.word	0x20000288
 80091cc:	2000015c 	.word	0x2000015c
 80091d0:	20000258 	.word	0x20000258
 80091d4:	20005e6c 	.word	0x20005e6c

080091d8 <HTS221_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
 * @retval BSP status
 */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b090      	sub	sp, #64	; 0x40
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t              id;
  int32_t              ret = BSP_ERROR_NONE;
 80091e0:	2300      	movs	r3, #0
 80091e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 80091e4:	2300      	movs	r3, #0
 80091e6:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 80091e8:	23bf      	movs	r3, #191	; 0xbf
 80091ea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A3_I2C_Init;
 80091ee:	4b49      	ldr	r3, [pc, #292]	; (8009314 <HTS221_0_Probe+0x13c>)
 80091f0:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80091f2:	4b49      	ldr	r3, [pc, #292]	; (8009318 <HTS221_0_Probe+0x140>)
 80091f4:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80091f6:	4b49      	ldr	r3, [pc, #292]	; (800931c <HTS221_0_Probe+0x144>)
 80091f8:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80091fa:	4b49      	ldr	r3, [pc, #292]	; (8009320 <HTS221_0_Probe+0x148>)
 80091fc:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A3_GetTick;
 80091fe:	4b49      	ldr	r3, [pc, #292]	; (8009324 <HTS221_0_Probe+0x14c>)
 8009200:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8009202:	f107 0320 	add.w	r3, r7, #32
 8009206:	4619      	mov	r1, r3
 8009208:	4847      	ldr	r0, [pc, #284]	; (8009328 <HTS221_0_Probe+0x150>)
 800920a:	f7f9 fe05 	bl	8002e18 <HTS221_RegisterBusIO>
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d003      	beq.n	800921c <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009214:	f06f 0306 	mvn.w	r3, #6
 8009218:	63fb      	str	r3, [r7, #60]	; 0x3c
 800921a:	e076      	b.n	800930a <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 800921c:	f107 031f 	add.w	r3, r7, #31
 8009220:	4619      	mov	r1, r3
 8009222:	4841      	ldr	r0, [pc, #260]	; (8009328 <HTS221_0_Probe+0x150>)
 8009224:	f7f9 fe7d 	bl	8002f22 <HTS221_ReadID>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d003      	beq.n	8009236 <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800922e:	f06f 0306 	mvn.w	r3, #6
 8009232:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009234:	e069      	b.n	800930a <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 8009236:	7ffb      	ldrb	r3, [r7, #31]
 8009238:	2bbc      	cmp	r3, #188	; 0xbc
 800923a:	d003      	beq.n	8009244 <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800923c:	f06f 0306 	mvn.w	r3, #6
 8009240:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009242:	e062      	b.n	800930a <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8009244:	f107 030c 	add.w	r3, r7, #12
 8009248:	4619      	mov	r1, r3
 800924a:	4837      	ldr	r0, [pc, #220]	; (8009328 <HTS221_0_Probe+0x150>)
 800924c:	f7f9 fe80 	bl	8002f50 <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8009250:	7b3b      	ldrb	r3, [r7, #12]
 8009252:	461a      	mov	r2, r3
 8009254:	7b7b      	ldrb	r3, [r7, #13]
 8009256:	005b      	lsls	r3, r3, #1
 8009258:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 800925a:	7bbb      	ldrb	r3, [r7, #14]
 800925c:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800925e:	4313      	orrs	r3, r2
 8009260:	4a32      	ldr	r2, [pc, #200]	; (800932c <HTS221_0_Probe+0x154>)
 8009262:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 8009264:	4b32      	ldr	r3, [pc, #200]	; (8009330 <HTS221_0_Probe+0x158>)
 8009266:	4a30      	ldr	r2, [pc, #192]	; (8009328 <HTS221_0_Probe+0x150>)
 8009268:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 800926a:	4b32      	ldr	r3, [pc, #200]	; (8009334 <HTS221_0_Probe+0x15c>)
 800926c:	4a32      	ldr	r2, [pc, #200]	; (8009338 <HTS221_0_Probe+0x160>)
 800926e:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8009270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009272:	2b00      	cmp	r3, #0
 8009274:	d11d      	bne.n	80092b2 <HTS221_0_Probe+0xda>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f003 0301 	and.w	r3, r3, #1
 800927c:	2b00      	cmp	r3, #0
 800927e:	d018      	beq.n	80092b2 <HTS221_0_Probe+0xda>
 8009280:	7b3b      	ldrb	r3, [r7, #12]
 8009282:	2b01      	cmp	r3, #1
 8009284:	d115      	bne.n	80092b2 <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8009286:	4b2d      	ldr	r3, [pc, #180]	; (800933c <HTS221_0_Probe+0x164>)
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	4a2d      	ldr	r2, [pc, #180]	; (8009340 <HTS221_0_Probe+0x168>)
 800928c:	492d      	ldr	r1, [pc, #180]	; (8009344 <HTS221_0_Probe+0x16c>)
 800928e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8009292:	4b28      	ldr	r3, [pc, #160]	; (8009334 <HTS221_0_Probe+0x15c>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a25      	ldr	r2, [pc, #148]	; (8009330 <HTS221_0_Probe+0x158>)
 800929a:	6812      	ldr	r2, [r2, #0]
 800929c:	4610      	mov	r0, r2
 800929e:	4798      	blx	r3
 80092a0:	4603      	mov	r3, r0
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d003      	beq.n	80092ae <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80092a6:	f06f 0304 	mvn.w	r3, #4
 80092aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092ac:	e001      	b.n	80092b2 <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80092ae:	2300      	movs	r3, #0
 80092b0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 80092b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d11d      	bne.n	80092f4 <HTS221_0_Probe+0x11c>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f003 0304 	and.w	r3, r3, #4
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d018      	beq.n	80092f4 <HTS221_0_Probe+0x11c>
 80092c2:	7bbb      	ldrb	r3, [r7, #14]
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d115      	bne.n	80092f4 <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 80092c8:	4b1c      	ldr	r3, [pc, #112]	; (800933c <HTS221_0_Probe+0x164>)
 80092ca:	691b      	ldr	r3, [r3, #16]
 80092cc:	4a1c      	ldr	r2, [pc, #112]	; (8009340 <HTS221_0_Probe+0x168>)
 80092ce:	491e      	ldr	r1, [pc, #120]	; (8009348 <HTS221_0_Probe+0x170>)
 80092d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 80092d4:	4b17      	ldr	r3, [pc, #92]	; (8009334 <HTS221_0_Probe+0x15c>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a15      	ldr	r2, [pc, #84]	; (8009330 <HTS221_0_Probe+0x158>)
 80092dc:	6812      	ldr	r2, [r2, #0]
 80092de:	4610      	mov	r0, r2
 80092e0:	4798      	blx	r3
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d003      	beq.n	80092f0 <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80092e8:	f06f 0304 	mvn.w	r3, #4
 80092ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092ee:	e001      	b.n	80092f4 <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80092f0:	2300      	movs	r3, #0
 80092f2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 80092f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d107      	bne.n	800930a <HTS221_0_Probe+0x132>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f003 0302 	and.w	r3, r3, #2
 8009300:	2b00      	cmp	r3, #0
 8009302:	d002      	beq.n	800930a <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009304:	f06f 0304 	mvn.w	r3, #4
 8009308:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 800930a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800930c:	4618      	mov	r0, r3
 800930e:	3740      	adds	r7, #64	; 0x40
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}
 8009314:	08002921 	.word	0x08002921
 8009318:	0800299d 	.word	0x0800299d
 800931c:	08002a51 	.word	0x08002a51
 8009320:	080029ed 	.word	0x080029ed
 8009324:	08002ab5 	.word	0x08002ab5
 8009328:	20000294 	.word	0x20000294
 800932c:	20000288 	.word	0x20000288
 8009330:	20005e6c 	.word	0x20005e6c
 8009334:	2000027c 	.word	0x2000027c
 8009338:	20000008 	.word	0x20000008
 800933c:	2000015c 	.word	0x2000015c
 8009340:	20000258 	.word	0x20000258
 8009344:	2000002c 	.word	0x2000002c
 8009348:	20000018 	.word	0x20000018

0800934c <LPS22HH_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE
 * @retval BSP status
 */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b090      	sub	sp, #64	; 0x40
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8009354:	2300      	movs	r3, #0
 8009356:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 8009358:	2300      	movs	r3, #0
 800935a:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 800935c:	23bb      	movs	r3, #187	; 0xbb
 800935e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A3_I2C_Init;
 8009362:	4b4a      	ldr	r3, [pc, #296]	; (800948c <LPS22HH_0_Probe+0x140>)
 8009364:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009366:	4b4a      	ldr	r3, [pc, #296]	; (8009490 <LPS22HH_0_Probe+0x144>)
 8009368:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800936a:	4b4a      	ldr	r3, [pc, #296]	; (8009494 <LPS22HH_0_Probe+0x148>)
 800936c:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800936e:	4b4a      	ldr	r3, [pc, #296]	; (8009498 <LPS22HH_0_Probe+0x14c>)
 8009370:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A3_GetTick;
 8009372:	4b4a      	ldr	r3, [pc, #296]	; (800949c <LPS22HH_0_Probe+0x150>)
 8009374:	63bb      	str	r3, [r7, #56]	; 0x38

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 8009376:	f107 0320 	add.w	r3, r7, #32
 800937a:	4619      	mov	r1, r3
 800937c:	4848      	ldr	r0, [pc, #288]	; (80094a0 <LPS22HH_0_Probe+0x154>)
 800937e:	f7fc fb27 	bl	80059d0 <LPS22HH_RegisterBusIO>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d003      	beq.n	8009390 <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009388:	f06f 0306 	mvn.w	r3, #6
 800938c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800938e:	e078      	b.n	8009482 <LPS22HH_0_Probe+0x136>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 8009390:	f107 031f 	add.w	r3, r7, #31
 8009394:	4619      	mov	r1, r3
 8009396:	4842      	ldr	r0, [pc, #264]	; (80094a0 <LPS22HH_0_Probe+0x154>)
 8009398:	f7fc fbbf 	bl	8005b1a <LPS22HH_ReadID>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d003      	beq.n	80093aa <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80093a2:	f06f 0306 	mvn.w	r3, #6
 80093a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093a8:	e06b      	b.n	8009482 <LPS22HH_0_Probe+0x136>
  }
  else if (id != LPS22HH_ID)
 80093aa:	7ffb      	ldrb	r3, [r7, #31]
 80093ac:	2bb3      	cmp	r3, #179	; 0xb3
 80093ae:	d003      	beq.n	80093b8 <LPS22HH_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80093b0:	f06f 0306 	mvn.w	r3, #6
 80093b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093b6:	e064      	b.n	8009482 <LPS22HH_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 80093b8:	f107 030c 	add.w	r3, r7, #12
 80093bc:	4619      	mov	r1, r3
 80093be:	4838      	ldr	r0, [pc, #224]	; (80094a0 <LPS22HH_0_Probe+0x154>)
 80093c0:	f7fc fbc2 	bl	8005b48 <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80093c4:	7b3b      	ldrb	r3, [r7, #12]
 80093c6:	461a      	mov	r2, r3
 80093c8:	7b7b      	ldrb	r3, [r7, #13]
 80093ca:	005b      	lsls	r3, r3, #1
 80093cc:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 80093ce:	7bbb      	ldrb	r3, [r7, #14]
 80093d0:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80093d2:	4313      	orrs	r3, r2
 80093d4:	4a33      	ldr	r2, [pc, #204]	; (80094a4 <LPS22HH_0_Probe+0x158>)
 80093d6:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 80093d8:	4b33      	ldr	r3, [pc, #204]	; (80094a8 <LPS22HH_0_Probe+0x15c>)
 80093da:	4a31      	ldr	r2, [pc, #196]	; (80094a0 <LPS22HH_0_Probe+0x154>)
 80093dc:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 80093de:	4b33      	ldr	r3, [pc, #204]	; (80094ac <LPS22HH_0_Probe+0x160>)
 80093e0:	4a33      	ldr	r2, [pc, #204]	; (80094b0 <LPS22HH_0_Probe+0x164>)
 80093e2:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80093e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d11e      	bne.n	8009428 <LPS22HH_0_Probe+0xdc>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f003 0301 	and.w	r3, r3, #1
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d019      	beq.n	8009428 <LPS22HH_0_Probe+0xdc>
 80093f4:	7b3b      	ldrb	r3, [r7, #12]
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d116      	bne.n	8009428 <LPS22HH_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 80093fa:	4b2e      	ldr	r3, [pc, #184]	; (80094b4 <LPS22HH_0_Probe+0x168>)
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	4a2e      	ldr	r2, [pc, #184]	; (80094b8 <LPS22HH_0_Probe+0x16c>)
 8009400:	3303      	adds	r3, #3
 8009402:	492e      	ldr	r1, [pc, #184]	; (80094bc <LPS22HH_0_Probe+0x170>)
 8009404:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8009408:	4b28      	ldr	r3, [pc, #160]	; (80094ac <LPS22HH_0_Probe+0x160>)
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a26      	ldr	r2, [pc, #152]	; (80094a8 <LPS22HH_0_Probe+0x15c>)
 8009410:	6852      	ldr	r2, [r2, #4]
 8009412:	4610      	mov	r0, r2
 8009414:	4798      	blx	r3
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d003      	beq.n	8009424 <LPS22HH_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800941c:	f06f 0304 	mvn.w	r3, #4
 8009420:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009422:	e001      	b.n	8009428 <LPS22HH_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009424:	2300      	movs	r3, #0
 8009426:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8009428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800942a:	2b00      	cmp	r3, #0
 800942c:	d11e      	bne.n	800946c <LPS22HH_0_Probe+0x120>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f003 0302 	and.w	r3, r3, #2
 8009434:	2b00      	cmp	r3, #0
 8009436:	d019      	beq.n	800946c <LPS22HH_0_Probe+0x120>
 8009438:	7b7b      	ldrb	r3, [r7, #13]
 800943a:	2b01      	cmp	r3, #1
 800943c:	d116      	bne.n	800946c <LPS22HH_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 800943e:	4b1d      	ldr	r3, [pc, #116]	; (80094b4 <LPS22HH_0_Probe+0x168>)
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	4a1d      	ldr	r2, [pc, #116]	; (80094b8 <LPS22HH_0_Probe+0x16c>)
 8009444:	3303      	adds	r3, #3
 8009446:	491e      	ldr	r1, [pc, #120]	; (80094c0 <LPS22HH_0_Probe+0x174>)
 8009448:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 800944c:	4b17      	ldr	r3, [pc, #92]	; (80094ac <LPS22HH_0_Probe+0x160>)
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a15      	ldr	r2, [pc, #84]	; (80094a8 <LPS22HH_0_Probe+0x15c>)
 8009454:	6852      	ldr	r2, [r2, #4]
 8009456:	4610      	mov	r0, r2
 8009458:	4798      	blx	r3
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d003      	beq.n	8009468 <LPS22HH_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009460:	f06f 0304 	mvn.w	r3, #4
 8009464:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009466:	e001      	b.n	800946c <LPS22HH_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009468:	2300      	movs	r3, #0
 800946a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800946c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800946e:	2b00      	cmp	r3, #0
 8009470:	d107      	bne.n	8009482 <LPS22HH_0_Probe+0x136>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f003 0304 	and.w	r3, r3, #4
 8009478:	2b00      	cmp	r3, #0
 800947a:	d002      	beq.n	8009482 <LPS22HH_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800947c:	f06f 0304 	mvn.w	r3, #4
 8009480:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 8009482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009484:	4618      	mov	r0, r3
 8009486:	3740      	adds	r7, #64	; 0x40
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}
 800948c:	08002921 	.word	0x08002921
 8009490:	0800299d 	.word	0x0800299d
 8009494:	08002a51 	.word	0x08002a51
 8009498:	080029ed 	.word	0x080029ed
 800949c:	08002ab5 	.word	0x08002ab5
 80094a0:	200002c0 	.word	0x200002c0
 80094a4:	20000288 	.word	0x20000288
 80094a8:	20005e6c 	.word	0x20005e6c
 80094ac:	2000027c 	.word	0x2000027c
 80094b0:	200000a8 	.word	0x200000a8
 80094b4:	2000015c 	.word	0x2000015c
 80094b8:	20000258 	.word	0x20000258
 80094bc:	200000cc 	.word	0x200000cc
 80094c0:	200000b8 	.word	0x200000b8

080094c4 <STTS751_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE
 * @retval BSP status
 */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b090      	sub	sp, #64	; 0x40
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 80094cc:	2300      	movs	r3, #0
 80094ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 80094d0:	2300      	movs	r3, #0
 80094d2:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 80094d4:	2395      	movs	r3, #149	; 0x95
 80094d6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A3_I2C_Init;
 80094da:	4b3f      	ldr	r3, [pc, #252]	; (80095d8 <STTS751_0_Probe+0x114>)
 80094dc:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80094de:	4b3f      	ldr	r3, [pc, #252]	; (80095dc <STTS751_0_Probe+0x118>)
 80094e0:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80094e2:	4b3f      	ldr	r3, [pc, #252]	; (80095e0 <STTS751_0_Probe+0x11c>)
 80094e4:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80094e6:	4b3f      	ldr	r3, [pc, #252]	; (80095e4 <STTS751_0_Probe+0x120>)
 80094e8:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A3_GetTick;
 80094ea:	4b3f      	ldr	r3, [pc, #252]	; (80095e8 <STTS751_0_Probe+0x124>)
 80094ec:	63bb      	str	r3, [r7, #56]	; 0x38

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 80094ee:	f107 0320 	add.w	r3, r7, #32
 80094f2:	4619      	mov	r1, r3
 80094f4:	483d      	ldr	r0, [pc, #244]	; (80095ec <STTS751_0_Probe+0x128>)
 80094f6:	f7ff f827 	bl	8008548 <STTS751_RegisterBusIO>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d003      	beq.n	8009508 <STTS751_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009500:	f06f 0306 	mvn.w	r3, #6
 8009504:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009506:	e061      	b.n	80095cc <STTS751_0_Probe+0x108>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 8009508:	f107 031f 	add.w	r3, r7, #31
 800950c:	4619      	mov	r1, r3
 800950e:	4837      	ldr	r0, [pc, #220]	; (80095ec <STTS751_0_Probe+0x128>)
 8009510:	f7ff f8b5 	bl	800867e <STTS751_ReadID>
 8009514:	4603      	mov	r3, r0
 8009516:	2b00      	cmp	r3, #0
 8009518:	d003      	beq.n	8009522 <STTS751_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800951a:	f06f 0306 	mvn.w	r3, #6
 800951e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009520:	e054      	b.n	80095cc <STTS751_0_Probe+0x108>
  }
  else if (id != STTS751_ID_MAN)
 8009522:	7ffb      	ldrb	r3, [r7, #31]
 8009524:	2b53      	cmp	r3, #83	; 0x53
 8009526:	d003      	beq.n	8009530 <STTS751_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009528:	f06f 0306 	mvn.w	r3, #6
 800952c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800952e:	e04d      	b.n	80095cc <STTS751_0_Probe+0x108>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 8009530:	f107 030c 	add.w	r3, r7, #12
 8009534:	4619      	mov	r1, r3
 8009536:	482d      	ldr	r0, [pc, #180]	; (80095ec <STTS751_0_Probe+0x128>)
 8009538:	f7ff f8bc 	bl	80086b4 <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800953c:	7b3b      	ldrb	r3, [r7, #12]
 800953e:	461a      	mov	r2, r3
 8009540:	7b7b      	ldrb	r3, [r7, #13]
 8009542:	005b      	lsls	r3, r3, #1
 8009544:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 8009546:	7bbb      	ldrb	r3, [r7, #14]
 8009548:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800954a:	4313      	orrs	r3, r2
 800954c:	4a28      	ldr	r2, [pc, #160]	; (80095f0 <STTS751_0_Probe+0x12c>)
 800954e:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 8009550:	4b28      	ldr	r3, [pc, #160]	; (80095f4 <STTS751_0_Probe+0x130>)
 8009552:	4a26      	ldr	r2, [pc, #152]	; (80095ec <STTS751_0_Probe+0x128>)
 8009554:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 8009556:	4b28      	ldr	r3, [pc, #160]	; (80095f8 <STTS751_0_Probe+0x134>)
 8009558:	4a28      	ldr	r2, [pc, #160]	; (80095fc <STTS751_0_Probe+0x138>)
 800955a:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800955c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800955e:	2b00      	cmp	r3, #0
 8009560:	d11e      	bne.n	80095a0 <STTS751_0_Probe+0xdc>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f003 0301 	and.w	r3, r3, #1
 8009568:	2b00      	cmp	r3, #0
 800956a:	d019      	beq.n	80095a0 <STTS751_0_Probe+0xdc>
 800956c:	7b3b      	ldrb	r3, [r7, #12]
 800956e:	2b01      	cmp	r3, #1
 8009570:	d116      	bne.n	80095a0 <STTS751_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 8009572:	4b23      	ldr	r3, [pc, #140]	; (8009600 <STTS751_0_Probe+0x13c>)
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	4a23      	ldr	r2, [pc, #140]	; (8009604 <STTS751_0_Probe+0x140>)
 8009578:	3306      	adds	r3, #6
 800957a:	4923      	ldr	r1, [pc, #140]	; (8009608 <STTS751_0_Probe+0x144>)
 800957c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 8009580:	4b1d      	ldr	r3, [pc, #116]	; (80095f8 <STTS751_0_Probe+0x134>)
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a1b      	ldr	r2, [pc, #108]	; (80095f4 <STTS751_0_Probe+0x130>)
 8009588:	6892      	ldr	r2, [r2, #8]
 800958a:	4610      	mov	r0, r2
 800958c:	4798      	blx	r3
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d003      	beq.n	800959c <STTS751_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009594:	f06f 0304 	mvn.w	r3, #4
 8009598:	63fb      	str	r3, [r7, #60]	; 0x3c
 800959a:	e001      	b.n	80095a0 <STTS751_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800959c:	2300      	movs	r3, #0
 800959e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 80095a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d107      	bne.n	80095b6 <STTS751_0_Probe+0xf2>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f003 0304 	and.w	r3, r3, #4
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d002      	beq.n	80095b6 <STTS751_0_Probe+0xf2>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80095b0:	f06f 0304 	mvn.w	r3, #4
 80095b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 80095b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d107      	bne.n	80095cc <STTS751_0_Probe+0x108>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f003 0302 	and.w	r3, r3, #2
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d002      	beq.n	80095cc <STTS751_0_Probe+0x108>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80095c6:	f06f 0304 	mvn.w	r3, #4
 80095ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 80095cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3740      	adds	r7, #64	; 0x40
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	08002921 	.word	0x08002921
 80095dc:	0800299d 	.word	0x0800299d
 80095e0:	08002a51 	.word	0x08002a51
 80095e4:	080029ed 	.word	0x080029ed
 80095e8:	08002ab5 	.word	0x08002ab5
 80095ec:	200002ec 	.word	0x200002ec
 80095f0:	20000288 	.word	0x20000288
 80095f4:	20005e6c 	.word	0x20005e6c
 80095f8:	2000027c 	.word	0x2000027c
 80095fc:	20000138 	.word	0x20000138
 8009600:	2000015c 	.word	0x2000015c
 8009604:	20000258 	.word	0x20000258
 8009608:	20000148 	.word	0x20000148

0800960c <IKS01A3_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b08e      	sub	sp, #56	; 0x38
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8009616:	2300      	movs	r3, #0
 8009618:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 800961a:	2301      	movs	r3, #1
 800961c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800961e:	2300      	movs	r3, #0
 8009620:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2b01      	cmp	r3, #1
 8009626:	d036      	beq.n	8009696 <IKS01A3_MOTION_SENSOR_Init+0x8a>
 8009628:	2b01      	cmp	r3, #1
 800962a:	d302      	bcc.n	8009632 <IKS01A3_MOTION_SENSOR_Init+0x26>
 800962c:	2b02      	cmp	r3, #2
 800962e:	d064      	beq.n	80096fa <IKS01A3_MOTION_SENSOR_Init+0xee>
 8009630:	e095      	b.n	800975e <IKS01A3_MOTION_SENSOR_Init+0x152>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 8009632:	6838      	ldr	r0, [r7, #0]
 8009634:	f000 f94e 	bl	80098d4 <LSM6DSO_0_Probe>
 8009638:	4603      	mov	r3, r0
 800963a:	2b00      	cmp	r3, #0
 800963c:	d002      	beq.n	8009644 <IKS01A3_MOTION_SENSOR_Init+0x38>
      {
        return BSP_ERROR_NO_INIT;
 800963e:	f04f 33ff 	mov.w	r3, #4294967295
 8009642:	e0cc      	b.n	80097de <IKS01A3_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009644:	4a68      	ldr	r2, [pc, #416]	; (80097e8 <IKS01A3_MOTION_SENSOR_Init+0x1dc>)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	4967      	ldr	r1, [pc, #412]	; (80097ec <IKS01A3_MOTION_SENSOR_Init+0x1e0>)
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009656:	f107 010c 	add.w	r1, r7, #12
 800965a:	4610      	mov	r0, r2
 800965c:	4798      	blx	r3
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d002      	beq.n	800966a <IKS01A3_MOTION_SENSOR_Init+0x5e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009664:	f06f 0306 	mvn.w	r3, #6
 8009668:	e0b9      	b.n	80097de <IKS01A3_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 800966a:	7b3b      	ldrb	r3, [r7, #12]
 800966c:	2b01      	cmp	r3, #1
 800966e:	d103      	bne.n	8009678 <IKS01A3_MOTION_SENSOR_Init+0x6c>
      {
        component_functions |= MOTION_ACCELERO;
 8009670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009672:	f043 0302 	orr.w	r3, r3, #2
 8009676:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8009678:	7b7b      	ldrb	r3, [r7, #13]
 800967a:	2b01      	cmp	r3, #1
 800967c:	d103      	bne.n	8009686 <IKS01A3_MOTION_SENSOR_Init+0x7a>
      {
        component_functions |= MOTION_GYRO;
 800967e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009680:	f043 0301 	orr.w	r3, r3, #1
 8009684:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8009686:	7bbb      	ldrb	r3, [r7, #14]
 8009688:	2b01      	cmp	r3, #1
 800968a:	d16c      	bne.n	8009766 <IKS01A3_MOTION_SENSOR_Init+0x15a>
      {
        component_functions |= MOTION_MAGNETO;
 800968c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968e:	f043 0304 	orr.w	r3, r3, #4
 8009692:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8009694:	e067      	b.n	8009766 <IKS01A3_MOTION_SENSOR_Init+0x15a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 8009696:	6838      	ldr	r0, [r7, #0]
 8009698:	f000 f9d8 	bl	8009a4c <LIS2DW12_0_Probe>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d002      	beq.n	80096a8 <IKS01A3_MOTION_SENSOR_Init+0x9c>
      {
        return BSP_ERROR_NO_INIT;
 80096a2:	f04f 33ff 	mov.w	r3, #4294967295
 80096a6:	e09a      	b.n	80097de <IKS01A3_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80096a8:	4a4f      	ldr	r2, [pc, #316]	; (80097e8 <IKS01A3_MOTION_SENSOR_Init+0x1dc>)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	494e      	ldr	r1, [pc, #312]	; (80097ec <IKS01A3_MOTION_SENSOR_Init+0x1e0>)
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80096ba:	f107 010c 	add.w	r1, r7, #12
 80096be:	4610      	mov	r0, r2
 80096c0:	4798      	blx	r3
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d002      	beq.n	80096ce <IKS01A3_MOTION_SENSOR_Init+0xc2>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80096c8:	f06f 0306 	mvn.w	r3, #6
 80096cc:	e087      	b.n	80097de <IKS01A3_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 80096ce:	7b3b      	ldrb	r3, [r7, #12]
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d103      	bne.n	80096dc <IKS01A3_MOTION_SENSOR_Init+0xd0>
      {
        component_functions |= MOTION_ACCELERO;
 80096d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d6:	f043 0302 	orr.w	r3, r3, #2
 80096da:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80096dc:	7b7b      	ldrb	r3, [r7, #13]
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d103      	bne.n	80096ea <IKS01A3_MOTION_SENSOR_Init+0xde>
      {
        component_functions |= MOTION_GYRO;
 80096e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e4:	f043 0301 	orr.w	r3, r3, #1
 80096e8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80096ea:	7bbb      	ldrb	r3, [r7, #14]
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d13c      	bne.n	800976a <IKS01A3_MOTION_SENSOR_Init+0x15e>
      {
        component_functions |= MOTION_MAGNETO;
 80096f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f2:	f043 0304 	orr.w	r3, r3, #4
 80096f6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80096f8:	e037      	b.n	800976a <IKS01A3_MOTION_SENSOR_Init+0x15e>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 80096fa:	6838      	ldr	r0, [r7, #0]
 80096fc:	f000 fa4a 	bl	8009b94 <LIS2MDL_0_Probe>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d002      	beq.n	800970c <IKS01A3_MOTION_SENSOR_Init+0x100>
      {
        return BSP_ERROR_NO_INIT;
 8009706:	f04f 33ff 	mov.w	r3, #4294967295
 800970a:	e068      	b.n	80097de <IKS01A3_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800970c:	4a36      	ldr	r2, [pc, #216]	; (80097e8 <IKS01A3_MOTION_SENSOR_Init+0x1dc>)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	4935      	ldr	r1, [pc, #212]	; (80097ec <IKS01A3_MOTION_SENSOR_Init+0x1e0>)
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800971e:	f107 010c 	add.w	r1, r7, #12
 8009722:	4610      	mov	r0, r2
 8009724:	4798      	blx	r3
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d002      	beq.n	8009732 <IKS01A3_MOTION_SENSOR_Init+0x126>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800972c:	f06f 0306 	mvn.w	r3, #6
 8009730:	e055      	b.n	80097de <IKS01A3_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 8009732:	7b3b      	ldrb	r3, [r7, #12]
 8009734:	2b01      	cmp	r3, #1
 8009736:	d103      	bne.n	8009740 <IKS01A3_MOTION_SENSOR_Init+0x134>
      {
        component_functions |= MOTION_ACCELERO;
 8009738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973a:	f043 0302 	orr.w	r3, r3, #2
 800973e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8009740:	7b7b      	ldrb	r3, [r7, #13]
 8009742:	2b01      	cmp	r3, #1
 8009744:	d103      	bne.n	800974e <IKS01A3_MOTION_SENSOR_Init+0x142>
      {
        component_functions |= MOTION_GYRO;
 8009746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009748:	f043 0301 	orr.w	r3, r3, #1
 800974c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800974e:	7bbb      	ldrb	r3, [r7, #14]
 8009750:	2b01      	cmp	r3, #1
 8009752:	d10c      	bne.n	800976e <IKS01A3_MOTION_SENSOR_Init+0x162>
      {
        component_functions |= MOTION_MAGNETO;
 8009754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009756:	f043 0304 	orr.w	r3, r3, #4
 800975a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800975c:	e007      	b.n	800976e <IKS01A3_MOTION_SENSOR_Init+0x162>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800975e:	f06f 0301 	mvn.w	r3, #1
 8009762:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8009764:	e004      	b.n	8009770 <IKS01A3_MOTION_SENSOR_Init+0x164>
      break;
 8009766:	bf00      	nop
 8009768:	e002      	b.n	8009770 <IKS01A3_MOTION_SENSOR_Init+0x164>
      break;
 800976a:	bf00      	nop
 800976c:	e000      	b.n	8009770 <IKS01A3_MOTION_SENSOR_Init+0x164>
      break;
 800976e:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8009770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009772:	2b00      	cmp	r3, #0
 8009774:	d001      	beq.n	800977a <IKS01A3_MOTION_SENSOR_Init+0x16e>
  {
    return ret;
 8009776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009778:	e031      	b.n	80097de <IKS01A3_MOTION_SENSOR_Init+0x1d2>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 800977a:	2300      	movs	r3, #0
 800977c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800977e:	e02a      	b.n	80097d6 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8009780:	683a      	ldr	r2, [r7, #0]
 8009782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009784:	4013      	ands	r3, r2
 8009786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009788:	429a      	cmp	r2, r3
 800978a:	d11e      	bne.n	80097ca <IKS01A3_MOTION_SENSOR_Init+0x1be>
 800978c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800978e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009790:	4013      	ands	r3, r2
 8009792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009794:	429a      	cmp	r2, r3
 8009796:	d118      	bne.n	80097ca <IKS01A3_MOTION_SENSOR_Init+0x1be>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8009798:	4a15      	ldr	r2, [pc, #84]	; (80097f0 <IKS01A3_MOTION_SENSOR_Init+0x1e4>)
 800979a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80097a0:	4814      	ldr	r0, [pc, #80]	; (80097f4 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	4613      	mov	r3, r2
 80097a6:	005b      	lsls	r3, r3, #1
 80097a8:	4413      	add	r3, r2
 80097aa:	440b      	add	r3, r1
 80097ac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	490e      	ldr	r1, [pc, #56]	; (80097ec <IKS01A3_MOTION_SENSOR_Init+0x1e0>)
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80097ba:	4610      	mov	r0, r2
 80097bc:	4798      	blx	r3
 80097be:	4603      	mov	r3, r0
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d002      	beq.n	80097ca <IKS01A3_MOTION_SENSOR_Init+0x1be>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80097c4:	f06f 0304 	mvn.w	r3, #4
 80097c8:	e009      	b.n	80097de <IKS01A3_MOTION_SENSOR_Init+0x1d2>
      }
    }
    function = function << 1;
 80097ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097cc:	005b      	lsls	r3, r3, #1
 80097ce:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 80097d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d2:	3301      	adds	r3, #1
 80097d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d8:	2b02      	cmp	r3, #2
 80097da:	d9d1      	bls.n	8009780 <IKS01A3_MOTION_SENSOR_Init+0x174>
  }

  return ret;
 80097dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3738      	adds	r7, #56	; 0x38
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	20000340 	.word	0x20000340
 80097ec:	20005e78 	.word	0x20005e78
 80097f0:	20000170 	.word	0x20000170
 80097f4:	2000031c 	.word	0x2000031c

080097f8 <IKS01A3_MOTION_SENSOR_GetCapabilities>:
 * @param  Instance Motion sensor instance
 * @param  Capabilities pointer to motion sensor capabilities
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_GetCapabilities(uint32_t Instance, IKS01A3_MOTION_SENSOR_Capabilities_t *Capabilities)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2b02      	cmp	r3, #2
 8009806:	d903      	bls.n	8009810 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009808:	f06f 0301 	mvn.w	r3, #1
 800980c:	60fb      	str	r3, [r7, #12]
 800980e:	e014      	b.n	800983a <IKS01A3_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 8009810:	4a0c      	ldr	r2, [pc, #48]	; (8009844 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x4c>)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	490b      	ldr	r1, [pc, #44]	; (8009848 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x50>)
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009822:	6839      	ldr	r1, [r7, #0]
 8009824:	4610      	mov	r0, r2
 8009826:	4798      	blx	r3
 8009828:	4603      	mov	r3, r0
 800982a:	2b00      	cmp	r3, #0
 800982c:	d003      	beq.n	8009836 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800982e:	f06f 0306 	mvn.w	r3, #6
 8009832:	60fb      	str	r3, [r7, #12]
 8009834:	e001      	b.n	800983a <IKS01A3_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8009836:	2300      	movs	r3, #0
 8009838:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800983a:	68fb      	ldr	r3, [r7, #12]
}
 800983c:	4618      	mov	r0, r3
 800983e:	3710      	adds	r7, #16
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	20000340 	.word	0x20000340
 8009848:	20005e78 	.word	0x20005e78

0800984c <IKS01A3_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b086      	sub	sp, #24
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2b02      	cmp	r3, #2
 800985c:	d903      	bls.n	8009866 <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800985e:	f06f 0301 	mvn.w	r3, #1
 8009862:	617b      	str	r3, [r7, #20]
 8009864:	e029      	b.n	80098ba <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8009866:	4a17      	ldr	r2, [pc, #92]	; (80098c4 <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	4013      	ands	r3, r2
 8009872:	68ba      	ldr	r2, [r7, #8]
 8009874:	429a      	cmp	r2, r3
 8009876:	d11d      	bne.n	80098b4 <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8009878:	4a13      	ldr	r2, [pc, #76]	; (80098c8 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009880:	4812      	ldr	r0, [pc, #72]	; (80098cc <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	4613      	mov	r3, r2
 8009886:	005b      	lsls	r3, r3, #1
 8009888:	4413      	add	r3, r2
 800988a:	440b      	add	r3, r1
 800988c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009890:	69db      	ldr	r3, [r3, #28]
 8009892:	490f      	ldr	r1, [pc, #60]	; (80098d0 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 8009894:	68fa      	ldr	r2, [r7, #12]
 8009896:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800989a:	6879      	ldr	r1, [r7, #4]
 800989c:	4610      	mov	r0, r2
 800989e:	4798      	blx	r3
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d003      	beq.n	80098ae <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80098a6:	f06f 0304 	mvn.w	r3, #4
 80098aa:	617b      	str	r3, [r7, #20]
 80098ac:	e005      	b.n	80098ba <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80098ae:	2300      	movs	r3, #0
 80098b0:	617b      	str	r3, [r7, #20]
 80098b2:	e002      	b.n	80098ba <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80098b4:	f06f 0301 	mvn.w	r3, #1
 80098b8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80098ba:	697b      	ldr	r3, [r7, #20]
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3718      	adds	r7, #24
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	2000034c 	.word	0x2000034c
 80098c8:	20000170 	.word	0x20000170
 80098cc:	2000031c 	.word	0x2000031c
 80098d0:	20005e78 	.word	0x20005e78

080098d4 <LSM6DSO_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b092      	sub	sp, #72	; 0x48
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80098dc:	2300      	movs	r3, #0
 80098de:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 80098e0:	2300      	movs	r3, #0
 80098e2:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 80098e4:	23d7      	movs	r3, #215	; 0xd7
 80098e6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 80098ea:	4b4a      	ldr	r3, [pc, #296]	; (8009a14 <LSM6DSO_0_Probe+0x140>)
 80098ec:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80098ee:	4b4a      	ldr	r3, [pc, #296]	; (8009a18 <LSM6DSO_0_Probe+0x144>)
 80098f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80098f2:	4b4a      	ldr	r3, [pc, #296]	; (8009a1c <LSM6DSO_0_Probe+0x148>)
 80098f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80098f6:	4b4a      	ldr	r3, [pc, #296]	; (8009a20 <LSM6DSO_0_Probe+0x14c>)
 80098f8:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 80098fa:	4b4a      	ldr	r3, [pc, #296]	; (8009a24 <LSM6DSO_0_Probe+0x150>)
 80098fc:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 80098fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009902:	4619      	mov	r1, r3
 8009904:	4848      	ldr	r0, [pc, #288]	; (8009a28 <LSM6DSO_0_Probe+0x154>)
 8009906:	f7fc feb9 	bl	800667c <LSM6DSO_RegisterBusIO>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d003      	beq.n	8009918 <LSM6DSO_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009910:	f06f 0306 	mvn.w	r3, #6
 8009914:	647b      	str	r3, [r7, #68]	; 0x44
 8009916:	e077      	b.n	8009a08 <LSM6DSO_0_Probe+0x134>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 8009918:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800991c:	4619      	mov	r1, r3
 800991e:	4842      	ldr	r0, [pc, #264]	; (8009a28 <LSM6DSO_0_Probe+0x154>)
 8009920:	f7fc ffae 	bl	8006880 <LSM6DSO_ReadID>
 8009924:	4603      	mov	r3, r0
 8009926:	2b00      	cmp	r3, #0
 8009928:	d003      	beq.n	8009932 <LSM6DSO_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800992a:	f06f 0306 	mvn.w	r3, #6
 800992e:	647b      	str	r3, [r7, #68]	; 0x44
 8009930:	e06a      	b.n	8009a08 <LSM6DSO_0_Probe+0x134>
  }
  else if (id != LSM6DSO_ID)
 8009932:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009936:	2b6c      	cmp	r3, #108	; 0x6c
 8009938:	d003      	beq.n	8009942 <LSM6DSO_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800993a:	f06f 0306 	mvn.w	r3, #6
 800993e:	647b      	str	r3, [r7, #68]	; 0x44
 8009940:	e062      	b.n	8009a08 <LSM6DSO_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 8009942:	f107 0308 	add.w	r3, r7, #8
 8009946:	4619      	mov	r1, r3
 8009948:	4837      	ldr	r0, [pc, #220]	; (8009a28 <LSM6DSO_0_Probe+0x154>)
 800994a:	f7fc ffaf 	bl	80068ac <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800994e:	7a7b      	ldrb	r3, [r7, #9]
 8009950:	461a      	mov	r2, r3
 8009952:	7a3b      	ldrb	r3, [r7, #8]
 8009954:	005b      	lsls	r3, r3, #1
 8009956:	431a      	orrs	r2, r3
 8009958:	7abb      	ldrb	r3, [r7, #10]
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	4313      	orrs	r3, r2
 800995e:	4a33      	ldr	r2, [pc, #204]	; (8009a2c <LSM6DSO_0_Probe+0x158>)
 8009960:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 8009962:	4b33      	ldr	r3, [pc, #204]	; (8009a30 <LSM6DSO_0_Probe+0x15c>)
 8009964:	4a30      	ldr	r2, [pc, #192]	; (8009a28 <LSM6DSO_0_Probe+0x154>)
 8009966:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8009968:	4b32      	ldr	r3, [pc, #200]	; (8009a34 <LSM6DSO_0_Probe+0x160>)
 800996a:	4a33      	ldr	r2, [pc, #204]	; (8009a38 <LSM6DSO_0_Probe+0x164>)
 800996c:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800996e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009970:	2b00      	cmp	r3, #0
 8009972:	d11d      	bne.n	80099b0 <LSM6DSO_0_Probe+0xdc>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f003 0301 	and.w	r3, r3, #1
 800997a:	2b00      	cmp	r3, #0
 800997c:	d018      	beq.n	80099b0 <LSM6DSO_0_Probe+0xdc>
 800997e:	7a7b      	ldrb	r3, [r7, #9]
 8009980:	2b01      	cmp	r3, #1
 8009982:	d115      	bne.n	80099b0 <LSM6DSO_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8009984:	4b2d      	ldr	r3, [pc, #180]	; (8009a3c <LSM6DSO_0_Probe+0x168>)
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	4a2d      	ldr	r2, [pc, #180]	; (8009a40 <LSM6DSO_0_Probe+0x16c>)
 800998a:	492e      	ldr	r1, [pc, #184]	; (8009a44 <LSM6DSO_0_Probe+0x170>)
 800998c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8009990:	4b28      	ldr	r3, [pc, #160]	; (8009a34 <LSM6DSO_0_Probe+0x160>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a26      	ldr	r2, [pc, #152]	; (8009a30 <LSM6DSO_0_Probe+0x15c>)
 8009998:	6812      	ldr	r2, [r2, #0]
 800999a:	4610      	mov	r0, r2
 800999c:	4798      	blx	r3
 800999e:	4603      	mov	r3, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d003      	beq.n	80099ac <LSM6DSO_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80099a4:	f06f 0304 	mvn.w	r3, #4
 80099a8:	647b      	str	r3, [r7, #68]	; 0x44
 80099aa:	e001      	b.n	80099b0 <LSM6DSO_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80099ac:	2300      	movs	r3, #0
 80099ae:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80099b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d11d      	bne.n	80099f2 <LSM6DSO_0_Probe+0x11e>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f003 0302 	and.w	r3, r3, #2
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d018      	beq.n	80099f2 <LSM6DSO_0_Probe+0x11e>
 80099c0:	7a3b      	ldrb	r3, [r7, #8]
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d115      	bne.n	80099f2 <LSM6DSO_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80099c6:	4b1d      	ldr	r3, [pc, #116]	; (8009a3c <LSM6DSO_0_Probe+0x168>)
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	4a1d      	ldr	r2, [pc, #116]	; (8009a40 <LSM6DSO_0_Probe+0x16c>)
 80099cc:	491e      	ldr	r1, [pc, #120]	; (8009a48 <LSM6DSO_0_Probe+0x174>)
 80099ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 80099d2:	4b18      	ldr	r3, [pc, #96]	; (8009a34 <LSM6DSO_0_Probe+0x160>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a15      	ldr	r2, [pc, #84]	; (8009a30 <LSM6DSO_0_Probe+0x15c>)
 80099da:	6812      	ldr	r2, [r2, #0]
 80099dc:	4610      	mov	r0, r2
 80099de:	4798      	blx	r3
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d003      	beq.n	80099ee <LSM6DSO_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80099e6:	f06f 0304 	mvn.w	r3, #4
 80099ea:	647b      	str	r3, [r7, #68]	; 0x44
 80099ec:	e001      	b.n	80099f2 <LSM6DSO_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80099ee:	2300      	movs	r3, #0
 80099f0:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80099f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d107      	bne.n	8009a08 <LSM6DSO_0_Probe+0x134>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f003 0304 	and.w	r3, r3, #4
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d002      	beq.n	8009a08 <LSM6DSO_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009a02:	f06f 0304 	mvn.w	r3, #4
 8009a06:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8009a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3748      	adds	r7, #72	; 0x48
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	08002921 	.word	0x08002921
 8009a18:	0800299d 	.word	0x0800299d
 8009a1c:	08002a51 	.word	0x08002a51
 8009a20:	080029ed 	.word	0x080029ed
 8009a24:	08002ab5 	.word	0x08002ab5
 8009a28:	20000358 	.word	0x20000358
 8009a2c:	2000034c 	.word	0x2000034c
 8009a30:	20005e78 	.word	0x20005e78
 8009a34:	20000340 	.word	0x20000340
 8009a38:	200000e0 	.word	0x200000e0
 8009a3c:	20000170 	.word	0x20000170
 8009a40:	2000031c 	.word	0x2000031c
 8009a44:	20000114 	.word	0x20000114
 8009a48:	200000f0 	.word	0x200000f0

08009a4c <LIS2DW12_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval BSP status
 */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b092      	sub	sp, #72	; 0x48
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8009a54:	2300      	movs	r3, #0
 8009a56:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8009a58:	2300      	movs	r3, #0
 8009a5a:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8009a5c:	2333      	movs	r3, #51	; 0x33
 8009a5e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 8009a62:	4b3f      	ldr	r3, [pc, #252]	; (8009b60 <LIS2DW12_0_Probe+0x114>)
 8009a64:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009a66:	4b3f      	ldr	r3, [pc, #252]	; (8009b64 <LIS2DW12_0_Probe+0x118>)
 8009a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8009a6a:	4b3f      	ldr	r3, [pc, #252]	; (8009b68 <LIS2DW12_0_Probe+0x11c>)
 8009a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8009a6e:	4b3f      	ldr	r3, [pc, #252]	; (8009b6c <LIS2DW12_0_Probe+0x120>)
 8009a70:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 8009a72:	4b3f      	ldr	r3, [pc, #252]	; (8009b70 <LIS2DW12_0_Probe+0x124>)
 8009a74:	643b      	str	r3, [r7, #64]	; 0x40

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8009a76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	483d      	ldr	r0, [pc, #244]	; (8009b74 <LIS2DW12_0_Probe+0x128>)
 8009a7e:	f7f9 ffe9 	bl	8003a54 <LIS2DW12_RegisterBusIO>
 8009a82:	4603      	mov	r3, r0
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d003      	beq.n	8009a90 <LIS2DW12_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009a88:	f06f 0306 	mvn.w	r3, #6
 8009a8c:	647b      	str	r3, [r7, #68]	; 0x44
 8009a8e:	e062      	b.n	8009b56 <LIS2DW12_0_Probe+0x10a>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8009a90:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8009a94:	4619      	mov	r1, r3
 8009a96:	4837      	ldr	r0, [pc, #220]	; (8009b74 <LIS2DW12_0_Probe+0x128>)
 8009a98:	f7fa f8c6 	bl	8003c28 <LIS2DW12_ReadID>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d003      	beq.n	8009aaa <LIS2DW12_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009aa2:	f06f 0306 	mvn.w	r3, #6
 8009aa6:	647b      	str	r3, [r7, #68]	; 0x44
 8009aa8:	e055      	b.n	8009b56 <LIS2DW12_0_Probe+0x10a>
  }
  else if (id != LIS2DW12_ID)
 8009aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009aae:	2b44      	cmp	r3, #68	; 0x44
 8009ab0:	d003      	beq.n	8009aba <LIS2DW12_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009ab2:	f06f 0306 	mvn.w	r3, #6
 8009ab6:	647b      	str	r3, [r7, #68]	; 0x44
 8009ab8:	e04d      	b.n	8009b56 <LIS2DW12_0_Probe+0x10a>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8009aba:	f107 0308 	add.w	r3, r7, #8
 8009abe:	4619      	mov	r1, r3
 8009ac0:	482c      	ldr	r0, [pc, #176]	; (8009b74 <LIS2DW12_0_Probe+0x128>)
 8009ac2:	f7fa f8c7 	bl	8003c54 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8009ac6:	7a7b      	ldrb	r3, [r7, #9]
 8009ac8:	461a      	mov	r2, r3
 8009aca:	7a3b      	ldrb	r3, [r7, #8]
 8009acc:	005b      	lsls	r3, r3, #1
 8009ace:	431a      	orrs	r2, r3
 8009ad0:	7abb      	ldrb	r3, [r7, #10]
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	4a28      	ldr	r2, [pc, #160]	; (8009b78 <LIS2DW12_0_Probe+0x12c>)
 8009ad8:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 8009ada:	4b28      	ldr	r3, [pc, #160]	; (8009b7c <LIS2DW12_0_Probe+0x130>)
 8009adc:	4a25      	ldr	r2, [pc, #148]	; (8009b74 <LIS2DW12_0_Probe+0x128>)
 8009ade:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8009ae0:	4b27      	ldr	r3, [pc, #156]	; (8009b80 <LIS2DW12_0_Probe+0x134>)
 8009ae2:	4a28      	ldr	r2, [pc, #160]	; (8009b84 <LIS2DW12_0_Probe+0x138>)
 8009ae4:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8009ae6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d11e      	bne.n	8009b2a <LIS2DW12_0_Probe+0xde>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f003 0302 	and.w	r3, r3, #2
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d019      	beq.n	8009b2a <LIS2DW12_0_Probe+0xde>
 8009af6:	7a3b      	ldrb	r3, [r7, #8]
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d116      	bne.n	8009b2a <LIS2DW12_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8009afc:	4b22      	ldr	r3, [pc, #136]	; (8009b88 <LIS2DW12_0_Probe+0x13c>)
 8009afe:	689b      	ldr	r3, [r3, #8]
 8009b00:	4a22      	ldr	r2, [pc, #136]	; (8009b8c <LIS2DW12_0_Probe+0x140>)
 8009b02:	3303      	adds	r3, #3
 8009b04:	4922      	ldr	r1, [pc, #136]	; (8009b90 <LIS2DW12_0_Probe+0x144>)
 8009b06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 8009b0a:	4b1d      	ldr	r3, [pc, #116]	; (8009b80 <LIS2DW12_0_Probe+0x134>)
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a1a      	ldr	r2, [pc, #104]	; (8009b7c <LIS2DW12_0_Probe+0x130>)
 8009b12:	6852      	ldr	r2, [r2, #4]
 8009b14:	4610      	mov	r0, r2
 8009b16:	4798      	blx	r3
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d003      	beq.n	8009b26 <LIS2DW12_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009b1e:	f06f 0304 	mvn.w	r3, #4
 8009b22:	647b      	str	r3, [r7, #68]	; 0x44
 8009b24:	e001      	b.n	8009b2a <LIS2DW12_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009b26:	2300      	movs	r3, #0
 8009b28:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8009b2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d107      	bne.n	8009b40 <LIS2DW12_0_Probe+0xf4>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f003 0301 	and.w	r3, r3, #1
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d002      	beq.n	8009b40 <LIS2DW12_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009b3a:	f06f 0304 	mvn.w	r3, #4
 8009b3e:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8009b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d107      	bne.n	8009b56 <LIS2DW12_0_Probe+0x10a>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f003 0304 	and.w	r3, r3, #4
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d002      	beq.n	8009b56 <LIS2DW12_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009b50:	f06f 0304 	mvn.w	r3, #4
 8009b54:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8009b56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3748      	adds	r7, #72	; 0x48
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	08002921 	.word	0x08002921
 8009b64:	0800299d 	.word	0x0800299d
 8009b68:	08002a51 	.word	0x08002a51
 8009b6c:	080029ed 	.word	0x080029ed
 8009b70:	08002ab5 	.word	0x08002ab5
 8009b74:	20000388 	.word	0x20000388
 8009b78:	2000034c 	.word	0x2000034c
 8009b7c:	20005e78 	.word	0x20005e78
 8009b80:	20000340 	.word	0x20000340
 8009b84:	20000040 	.word	0x20000040
 8009b88:	20000170 	.word	0x20000170
 8009b8c:	2000031c 	.word	0x2000031c
 8009b90:	20000050 	.word	0x20000050

08009b94 <LIS2MDL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval BSP status
 */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b092      	sub	sp, #72	; 0x48
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8009ba4:	233d      	movs	r3, #61	; 0x3d
 8009ba6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 8009baa:	4b3f      	ldr	r3, [pc, #252]	; (8009ca8 <LIS2MDL_0_Probe+0x114>)
 8009bac:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009bae:	4b3f      	ldr	r3, [pc, #252]	; (8009cac <LIS2MDL_0_Probe+0x118>)
 8009bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8009bb2:	4b3f      	ldr	r3, [pc, #252]	; (8009cb0 <LIS2MDL_0_Probe+0x11c>)
 8009bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8009bb6:	4b3f      	ldr	r3, [pc, #252]	; (8009cb4 <LIS2MDL_0_Probe+0x120>)
 8009bb8:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 8009bba:	4b3f      	ldr	r3, [pc, #252]	; (8009cb8 <LIS2MDL_0_Probe+0x124>)
 8009bbc:	643b      	str	r3, [r7, #64]	; 0x40

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8009bbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	483d      	ldr	r0, [pc, #244]	; (8009cbc <LIS2MDL_0_Probe+0x128>)
 8009bc6:	f7fb fa95 	bl	80050f4 <LIS2MDL_RegisterBusIO>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d003      	beq.n	8009bd8 <LIS2MDL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009bd0:	f06f 0306 	mvn.w	r3, #6
 8009bd4:	647b      	str	r3, [r7, #68]	; 0x44
 8009bd6:	e062      	b.n	8009c9e <LIS2MDL_0_Probe+0x10a>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8009bd8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8009bdc:	4619      	mov	r1, r3
 8009bde:	4837      	ldr	r0, [pc, #220]	; (8009cbc <LIS2MDL_0_Probe+0x128>)
 8009be0:	f7fb fb51 	bl	8005286 <LIS2MDL_ReadID>
 8009be4:	4603      	mov	r3, r0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d003      	beq.n	8009bf2 <LIS2MDL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009bea:	f06f 0306 	mvn.w	r3, #6
 8009bee:	647b      	str	r3, [r7, #68]	; 0x44
 8009bf0:	e055      	b.n	8009c9e <LIS2MDL_0_Probe+0x10a>
  }
  else if (id != LIS2MDL_ID)
 8009bf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bf6:	2b40      	cmp	r3, #64	; 0x40
 8009bf8:	d003      	beq.n	8009c02 <LIS2MDL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009bfa:	f06f 0306 	mvn.w	r3, #6
 8009bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8009c00:	e04d      	b.n	8009c9e <LIS2MDL_0_Probe+0x10a>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 8009c02:	f107 0308 	add.w	r3, r7, #8
 8009c06:	4619      	mov	r1, r3
 8009c08:	482c      	ldr	r0, [pc, #176]	; (8009cbc <LIS2MDL_0_Probe+0x128>)
 8009c0a:	f7fb fb53 	bl	80052b4 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8009c0e:	7a7b      	ldrb	r3, [r7, #9]
 8009c10:	461a      	mov	r2, r3
 8009c12:	7a3b      	ldrb	r3, [r7, #8]
 8009c14:	005b      	lsls	r3, r3, #1
 8009c16:	431a      	orrs	r2, r3
 8009c18:	7abb      	ldrb	r3, [r7, #10]
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	4a28      	ldr	r2, [pc, #160]	; (8009cc0 <LIS2MDL_0_Probe+0x12c>)
 8009c20:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8009c22:	4b28      	ldr	r3, [pc, #160]	; (8009cc4 <LIS2MDL_0_Probe+0x130>)
 8009c24:	4a25      	ldr	r2, [pc, #148]	; (8009cbc <LIS2MDL_0_Probe+0x128>)
 8009c26:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 8009c28:	4b27      	ldr	r3, [pc, #156]	; (8009cc8 <LIS2MDL_0_Probe+0x134>)
 8009c2a:	4a28      	ldr	r2, [pc, #160]	; (8009ccc <LIS2MDL_0_Probe+0x138>)
 8009c2c:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8009c2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d11e      	bne.n	8009c72 <LIS2MDL_0_Probe+0xde>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f003 0304 	and.w	r3, r3, #4
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d019      	beq.n	8009c72 <LIS2MDL_0_Probe+0xde>
 8009c3e:	7abb      	ldrb	r3, [r7, #10]
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d116      	bne.n	8009c72 <LIS2MDL_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8009c44:	4b22      	ldr	r3, [pc, #136]	; (8009cd0 <LIS2MDL_0_Probe+0x13c>)
 8009c46:	691b      	ldr	r3, [r3, #16]
 8009c48:	4a22      	ldr	r2, [pc, #136]	; (8009cd4 <LIS2MDL_0_Probe+0x140>)
 8009c4a:	3306      	adds	r3, #6
 8009c4c:	4922      	ldr	r1, [pc, #136]	; (8009cd8 <LIS2MDL_0_Probe+0x144>)
 8009c4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8009c52:	4b1d      	ldr	r3, [pc, #116]	; (8009cc8 <LIS2MDL_0_Probe+0x134>)
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a1a      	ldr	r2, [pc, #104]	; (8009cc4 <LIS2MDL_0_Probe+0x130>)
 8009c5a:	6892      	ldr	r2, [r2, #8]
 8009c5c:	4610      	mov	r0, r2
 8009c5e:	4798      	blx	r3
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d003      	beq.n	8009c6e <LIS2MDL_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009c66:	f06f 0304 	mvn.w	r3, #4
 8009c6a:	647b      	str	r3, [r7, #68]	; 0x44
 8009c6c:	e001      	b.n	8009c72 <LIS2MDL_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8009c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d107      	bne.n	8009c88 <LIS2MDL_0_Probe+0xf4>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f003 0302 	and.w	r3, r3, #2
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d002      	beq.n	8009c88 <LIS2MDL_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009c82:	f06f 0304 	mvn.w	r3, #4
 8009c86:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8009c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d107      	bne.n	8009c9e <LIS2MDL_0_Probe+0x10a>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f003 0301 	and.w	r3, r3, #1
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d002      	beq.n	8009c9e <LIS2MDL_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009c98:	f06f 0304 	mvn.w	r3, #4
 8009c9c:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8009c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3748      	adds	r7, #72	; 0x48
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	08002921 	.word	0x08002921
 8009cac:	0800299d 	.word	0x0800299d
 8009cb0:	08002a51 	.word	0x08002a51
 8009cb4:	080029ed 	.word	0x080029ed
 8009cb8:	08002ab5 	.word	0x08002ab5
 8009cbc:	200003bc 	.word	0x200003bc
 8009cc0:	2000034c 	.word	0x2000034c
 8009cc4:	20005e78 	.word	0x20005e78
 8009cc8:	20000340 	.word	0x20000340
 8009ccc:	20000074 	.word	0x20000074
 8009cd0:	20000170 	.word	0x20000170
 8009cd4:	2000031c 	.word	0x2000031c
 8009cd8:	20000084 	.word	0x20000084

08009cdc <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) /* For IAR and MDK-ARM */
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* __GNUC__ */
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8009ce4:	4b07      	ldr	r3, [pc, #28]	; (8009d04 <__io_putchar+0x28>)
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	01db      	lsls	r3, r3, #7
 8009cea:	4a07      	ldr	r2, [pc, #28]	; (8009d08 <__io_putchar+0x2c>)
 8009cec:	1898      	adds	r0, r3, r2
 8009cee:	1d39      	adds	r1, r7, #4
 8009cf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	f007 fe51 	bl	801199c <HAL_UART_Transmit>
  return ch;
 8009cfa:	687b      	ldr	r3, [r7, #4]
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3708      	adds	r7, #8
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	200003e8 	.word	0x200003e8
 8009d08:	20005e84 	.word	0x20005e84

08009d0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009d12:	2300      	movs	r3, #0
 8009d14:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009d16:	4b0c      	ldr	r3, [pc, #48]	; (8009d48 <HAL_Init+0x3c>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a0b      	ldr	r2, [pc, #44]	; (8009d48 <HAL_Init+0x3c>)
 8009d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d20:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009d22:	2003      	movs	r0, #3
 8009d24:	f001 fb65 	bl	800b3f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009d28:	2000      	movs	r0, #0
 8009d2a:	f7f8 fd35 	bl	8002798 <HAL_InitTick>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d002      	beq.n	8009d3a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8009d34:	2301      	movs	r3, #1
 8009d36:	71fb      	strb	r3, [r7, #7]
 8009d38:	e001      	b.n	8009d3e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009d3a:	f7f8 fa5d 	bl	80021f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009d3e:	79fb      	ldrb	r3, [r7, #7]
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3708      	adds	r7, #8
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}
 8009d48:	40022000 	.word	0x40022000

08009d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009d50:	4b06      	ldr	r3, [pc, #24]	; (8009d6c <HAL_IncTick+0x20>)
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	461a      	mov	r2, r3
 8009d56:	4b06      	ldr	r3, [pc, #24]	; (8009d70 <HAL_IncTick+0x24>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4413      	add	r3, r2
 8009d5c:	4a04      	ldr	r2, [pc, #16]	; (8009d70 <HAL_IncTick+0x24>)
 8009d5e:	6013      	str	r3, [r2, #0]
}
 8009d60:	bf00      	nop
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr
 8009d6a:	bf00      	nop
 8009d6c:	20000188 	.word	0x20000188
 8009d70:	20005f04 	.word	0x20005f04

08009d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009d74:	b480      	push	{r7}
 8009d76:	af00      	add	r7, sp, #0
  return uwTick;
 8009d78:	4b03      	ldr	r3, [pc, #12]	; (8009d88 <HAL_GetTick+0x14>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr
 8009d86:	bf00      	nop
 8009d88:	20005f04 	.word	0x20005f04

08009d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009d94:	f7ff ffee 	bl	8009d74 <HAL_GetTick>
 8009d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009da4:	d005      	beq.n	8009db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8009da6:	4b09      	ldr	r3, [pc, #36]	; (8009dcc <HAL_Delay+0x40>)
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	461a      	mov	r2, r3
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	4413      	add	r3, r2
 8009db0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009db2:	bf00      	nop
 8009db4:	f7ff ffde 	bl	8009d74 <HAL_GetTick>
 8009db8:	4602      	mov	r2, r0
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	1ad3      	subs	r3, r2, r3
 8009dbe:	68fa      	ldr	r2, [r7, #12]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d8f7      	bhi.n	8009db4 <HAL_Delay+0x28>
  {
  }
}
 8009dc4:	bf00      	nop
 8009dc6:	3710      	adds	r7, #16
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	20000188 	.word	0x20000188

08009dd0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	431a      	orrs	r2, r3
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	609a      	str	r2, [r3, #8]
}
 8009dea:	bf00      	nop
 8009dec:	370c      	adds	r7, #12
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr

08009df6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8009df6:	b480      	push	{r7}
 8009df8:	b083      	sub	sp, #12
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	6078      	str	r0, [r7, #4]
 8009dfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	689b      	ldr	r3, [r3, #8]
 8009e04:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	431a      	orrs	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	609a      	str	r2, [r3, #8]
}
 8009e10:	bf00      	nop
 8009e12:	370c      	adds	r7, #12
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	370c      	adds	r7, #12
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b087      	sub	sp, #28
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	607a      	str	r2, [r7, #4]
 8009e44:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	3360      	adds	r3, #96	; 0x60
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	4413      	add	r3, r2
 8009e52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	4b08      	ldr	r3, [pc, #32]	; (8009e7c <LL_ADC_SetOffset+0x44>)
 8009e5a:	4013      	ands	r3, r2
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8009e62:	683a      	ldr	r2, [r7, #0]
 8009e64:	430a      	orrs	r2, r1
 8009e66:	4313      	orrs	r3, r2
 8009e68:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8009e70:	bf00      	nop
 8009e72:	371c      	adds	r7, #28
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr
 8009e7c:	03fff000 	.word	0x03fff000

08009e80 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b085      	sub	sp, #20
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	3360      	adds	r3, #96	; 0x60
 8009e8e:	461a      	mov	r2, r3
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	4413      	add	r3, r2
 8009e96:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3714      	adds	r7, #20
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr

08009eac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b087      	sub	sp, #28
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	3360      	adds	r3, #96	; 0x60
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	4413      	add	r3, r2
 8009ec4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	431a      	orrs	r2, r3
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8009ed6:	bf00      	nop
 8009ed8:	371c      	adds	r7, #28
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr

08009ee2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8009ee2:	b480      	push	{r7}
 8009ee4:	b083      	sub	sp, #12
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d101      	bne.n	8009efa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e000      	b.n	8009efc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8009efa:	2300      	movs	r3, #0
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	370c      	adds	r7, #12
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b087      	sub	sp, #28
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	3330      	adds	r3, #48	; 0x30
 8009f18:	461a      	mov	r2, r3
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	0a1b      	lsrs	r3, r3, #8
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	f003 030c 	and.w	r3, r3, #12
 8009f24:	4413      	add	r3, r2
 8009f26:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	f003 031f 	and.w	r3, r3, #31
 8009f32:	211f      	movs	r1, #31
 8009f34:	fa01 f303 	lsl.w	r3, r1, r3
 8009f38:	43db      	mvns	r3, r3
 8009f3a:	401a      	ands	r2, r3
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	0e9b      	lsrs	r3, r3, #26
 8009f40:	f003 011f 	and.w	r1, r3, #31
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	f003 031f 	and.w	r3, r3, #31
 8009f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8009f4e:	431a      	orrs	r2, r3
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8009f54:	bf00      	nop
 8009f56:	371c      	adds	r7, #28
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b087      	sub	sp, #28
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	60b9      	str	r1, [r7, #8]
 8009f6a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	3314      	adds	r3, #20
 8009f70:	461a      	mov	r2, r3
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	0e5b      	lsrs	r3, r3, #25
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	f003 0304 	and.w	r3, r3, #4
 8009f7c:	4413      	add	r3, r2
 8009f7e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	0d1b      	lsrs	r3, r3, #20
 8009f88:	f003 031f 	and.w	r3, r3, #31
 8009f8c:	2107      	movs	r1, #7
 8009f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8009f92:	43db      	mvns	r3, r3
 8009f94:	401a      	ands	r2, r3
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	0d1b      	lsrs	r3, r3, #20
 8009f9a:	f003 031f 	and.w	r3, r3, #31
 8009f9e:	6879      	ldr	r1, [r7, #4]
 8009fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8009fa4:	431a      	orrs	r2, r3
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8009faa:	bf00      	nop
 8009fac:	371c      	adds	r7, #28
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr
	...

08009fb8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b085      	sub	sp, #20
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fd0:	43db      	mvns	r3, r3
 8009fd2:	401a      	ands	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f003 0318 	and.w	r3, r3, #24
 8009fda:	4908      	ldr	r1, [pc, #32]	; (8009ffc <LL_ADC_SetChannelSingleDiff+0x44>)
 8009fdc:	40d9      	lsrs	r1, r3
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	400b      	ands	r3, r1
 8009fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fe6:	431a      	orrs	r2, r3
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8009fee:	bf00      	nop
 8009ff0:	3714      	adds	r7, #20
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr
 8009ffa:	bf00      	nop
 8009ffc:	0007ffff 	.word	0x0007ffff

0800a000 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	f003 031f 	and.w	r3, r3, #31
}
 800a010:	4618      	mov	r0, r3
 800a012:	370c      	adds	r7, #12
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b083      	sub	sp, #12
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	689b      	ldr	r3, [r3, #8]
 800a028:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800a02c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a030:	687a      	ldr	r2, [r7, #4]
 800a032:	6093      	str	r3, [r2, #8]
}
 800a034:	bf00      	nop
 800a036:	370c      	adds	r7, #12
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	689b      	ldr	r3, [r3, #8]
 800a04c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a050:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a054:	d101      	bne.n	800a05a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800a056:	2301      	movs	r3, #1
 800a058:	e000      	b.n	800a05c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800a05a:	2300      	movs	r3, #0
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	370c      	adds	r7, #12
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	689b      	ldr	r3, [r3, #8]
 800a074:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800a078:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a07c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800a084:	bf00      	nop
 800a086:	370c      	adds	r7, #12
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr

0800a090 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800a090:	b480      	push	{r7}
 800a092:	b083      	sub	sp, #12
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0a4:	d101      	bne.n	800a0aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	e000      	b.n	800a0ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800a0aa:	2300      	movs	r3, #0
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	370c      	adds	r7, #12
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr

0800a0b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b083      	sub	sp, #12
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a0cc:	f043 0201 	orr.w	r2, r3, #1
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800a0d4:	bf00      	nop
 800a0d6:	370c      	adds	r7, #12
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr

0800a0e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	689b      	ldr	r3, [r3, #8]
 800a0ec:	f003 0301 	and.w	r3, r3, #1
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d101      	bne.n	800a0f8 <LL_ADC_IsEnabled+0x18>
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	e000      	b.n	800a0fa <LL_ADC_IsEnabled+0x1a>
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	370c      	adds	r7, #12
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr

0800a106 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800a106:	b480      	push	{r7}
 800a108:	b083      	sub	sp, #12
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	689b      	ldr	r3, [r3, #8]
 800a112:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a116:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a11a:	f043 0204 	orr.w	r2, r3, #4
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800a122:	bf00      	nop
 800a124:	370c      	adds	r7, #12
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr

0800a12e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800a12e:	b480      	push	{r7}
 800a130:	b083      	sub	sp, #12
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	689b      	ldr	r3, [r3, #8]
 800a13a:	f003 0304 	and.w	r3, r3, #4
 800a13e:	2b04      	cmp	r3, #4
 800a140:	d101      	bne.n	800a146 <LL_ADC_REG_IsConversionOngoing+0x18>
 800a142:	2301      	movs	r3, #1
 800a144:	e000      	b.n	800a148 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a146:	2300      	movs	r3, #0
}
 800a148:	4618      	mov	r0, r3
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	689b      	ldr	r3, [r3, #8]
 800a160:	f003 0308 	and.w	r3, r3, #8
 800a164:	2b08      	cmp	r3, #8
 800a166:	d101      	bne.n	800a16c <LL_ADC_INJ_IsConversionOngoing+0x18>
 800a168:	2301      	movs	r3, #1
 800a16a:	e000      	b.n	800a16e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800a16c:	2300      	movs	r3, #0
}
 800a16e:	4618      	mov	r0, r3
 800a170:	370c      	adds	r7, #12
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr
	...

0800a17c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a17c:	b590      	push	{r4, r7, lr}
 800a17e:	b089      	sub	sp, #36	; 0x24
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a184:	2300      	movs	r3, #0
 800a186:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800a188:	2300      	movs	r3, #0
 800a18a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d101      	bne.n	800a196 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800a192:	2301      	movs	r3, #1
 800a194:	e134      	b.n	800a400 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	691b      	ldr	r3, [r3, #16]
 800a19a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d109      	bne.n	800a1b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f7f8 f84f 	bl	8002248 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f7ff ff3f 	bl	800a040 <LL_ADC_IsDeepPowerDownEnabled>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d004      	beq.n	800a1d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f7ff ff25 	bl	800a01c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7ff ff5a 	bl	800a090 <LL_ADC_IsInternalRegulatorEnabled>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d113      	bne.n	800a20a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7ff ff3e 	bl	800a068 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800a1ec:	4b86      	ldr	r3, [pc, #536]	; (800a408 <HAL_ADC_Init+0x28c>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	099b      	lsrs	r3, r3, #6
 800a1f2:	4a86      	ldr	r2, [pc, #536]	; (800a40c <HAL_ADC_Init+0x290>)
 800a1f4:	fba2 2303 	umull	r2, r3, r2, r3
 800a1f8:	099b      	lsrs	r3, r3, #6
 800a1fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800a1fc:	e002      	b.n	800a204 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	3b01      	subs	r3, #1
 800a202:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d1f9      	bne.n	800a1fe <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4618      	mov	r0, r3
 800a210:	f7ff ff3e 	bl	800a090 <LL_ADC_IsInternalRegulatorEnabled>
 800a214:	4603      	mov	r3, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d10d      	bne.n	800a236 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a21e:	f043 0210 	orr.w	r2, r3, #16
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a22a:	f043 0201 	orr.w	r2, r3, #1
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800a232:	2301      	movs	r3, #1
 800a234:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7ff ff77 	bl	800a12e <LL_ADC_REG_IsConversionOngoing>
 800a240:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a246:	f003 0310 	and.w	r3, r3, #16
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	f040 80cf 	bne.w	800a3ee <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	2b00      	cmp	r3, #0
 800a254:	f040 80cb 	bne.w	800a3ee <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a25c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800a260:	f043 0202 	orr.w	r2, r3, #2
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4618      	mov	r0, r3
 800a26e:	f7ff ff37 	bl	800a0e0 <LL_ADC_IsEnabled>
 800a272:	4603      	mov	r3, r0
 800a274:	2b00      	cmp	r3, #0
 800a276:	d115      	bne.n	800a2a4 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a278:	4865      	ldr	r0, [pc, #404]	; (800a410 <HAL_ADC_Init+0x294>)
 800a27a:	f7ff ff31 	bl	800a0e0 <LL_ADC_IsEnabled>
 800a27e:	4604      	mov	r4, r0
 800a280:	4864      	ldr	r0, [pc, #400]	; (800a414 <HAL_ADC_Init+0x298>)
 800a282:	f7ff ff2d 	bl	800a0e0 <LL_ADC_IsEnabled>
 800a286:	4603      	mov	r3, r0
 800a288:	431c      	orrs	r4, r3
 800a28a:	4863      	ldr	r0, [pc, #396]	; (800a418 <HAL_ADC_Init+0x29c>)
 800a28c:	f7ff ff28 	bl	800a0e0 <LL_ADC_IsEnabled>
 800a290:	4603      	mov	r3, r0
 800a292:	4323      	orrs	r3, r4
 800a294:	2b00      	cmp	r3, #0
 800a296:	d105      	bne.n	800a2a4 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	4619      	mov	r1, r3
 800a29e:	485f      	ldr	r0, [pc, #380]	; (800a41c <HAL_ADC_Init+0x2a0>)
 800a2a0:	f7ff fd96 	bl	8009dd0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	7e5b      	ldrb	r3, [r3, #25]
 800a2a8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a2ae:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800a2b4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800a2ba:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a2c2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d106      	bne.n	800a2e0 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	045b      	lsls	r3, r3, #17
 800a2da:	69ba      	ldr	r2, [r7, #24]
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d009      	beq.n	800a2fc <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ec:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a2f6:	69ba      	ldr	r2, [r7, #24]
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	68da      	ldr	r2, [r3, #12]
 800a302:	4b47      	ldr	r3, [pc, #284]	; (800a420 <HAL_ADC_Init+0x2a4>)
 800a304:	4013      	ands	r3, r2
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	6812      	ldr	r2, [r2, #0]
 800a30a:	69b9      	ldr	r1, [r7, #24]
 800a30c:	430b      	orrs	r3, r1
 800a30e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4618      	mov	r0, r3
 800a316:	f7ff ff0a 	bl	800a12e <LL_ADC_REG_IsConversionOngoing>
 800a31a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4618      	mov	r0, r3
 800a322:	f7ff ff17 	bl	800a154 <LL_ADC_INJ_IsConversionOngoing>
 800a326:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d13d      	bne.n	800a3aa <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d13a      	bne.n	800a3aa <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800a338:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a340:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800a342:	4313      	orrs	r3, r2
 800a344:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	68db      	ldr	r3, [r3, #12]
 800a34c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a350:	f023 0302 	bic.w	r3, r3, #2
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	6812      	ldr	r2, [r2, #0]
 800a358:	69b9      	ldr	r1, [r7, #24]
 800a35a:	430b      	orrs	r3, r1
 800a35c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a364:	2b01      	cmp	r3, #1
 800a366:	d118      	bne.n	800a39a <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a372:	f023 0304 	bic.w	r3, r3, #4
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a37e:	4311      	orrs	r1, r2
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a384:	4311      	orrs	r1, r2
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a38a:	430a      	orrs	r2, r1
 800a38c:	431a      	orrs	r2, r3
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f042 0201 	orr.w	r2, r2, #1
 800a396:	611a      	str	r2, [r3, #16]
 800a398:	e007      	b.n	800a3aa <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	691a      	ldr	r2, [r3, #16]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f022 0201 	bic.w	r2, r2, #1
 800a3a8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	691b      	ldr	r3, [r3, #16]
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d10c      	bne.n	800a3cc <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3b8:	f023 010f 	bic.w	r1, r3, #15
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	69db      	ldr	r3, [r3, #28]
 800a3c0:	1e5a      	subs	r2, r3, #1
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	430a      	orrs	r2, r1
 800a3c8:	631a      	str	r2, [r3, #48]	; 0x30
 800a3ca:	e007      	b.n	800a3dc <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f022 020f 	bic.w	r2, r2, #15
 800a3da:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3e0:	f023 0303 	bic.w	r3, r3, #3
 800a3e4:	f043 0201 	orr.w	r2, r3, #1
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	655a      	str	r2, [r3, #84]	; 0x54
 800a3ec:	e007      	b.n	800a3fe <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3f2:	f043 0210 	orr.w	r2, r3, #16
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800a3fe:	7ffb      	ldrb	r3, [r7, #31]
}
 800a400:	4618      	mov	r0, r3
 800a402:	3724      	adds	r7, #36	; 0x24
 800a404:	46bd      	mov	sp, r7
 800a406:	bd90      	pop	{r4, r7, pc}
 800a408:	20000004 	.word	0x20000004
 800a40c:	053e2d63 	.word	0x053e2d63
 800a410:	50040000 	.word	0x50040000
 800a414:	50040100 	.word	0x50040100
 800a418:	50040200 	.word	0x50040200
 800a41c:	50040300 	.word	0x50040300
 800a420:	fff0c007 	.word	0xfff0c007

0800a424 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b086      	sub	sp, #24
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a42c:	4857      	ldr	r0, [pc, #348]	; (800a58c <HAL_ADC_Start+0x168>)
 800a42e:	f7ff fde7 	bl	800a000 <LL_ADC_GetMultimode>
 800a432:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4618      	mov	r0, r3
 800a43a:	f7ff fe78 	bl	800a12e <LL_ADC_REG_IsConversionOngoing>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	f040 809c 	bne.w	800a57e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d101      	bne.n	800a454 <HAL_ADC_Start+0x30>
 800a450:	2302      	movs	r3, #2
 800a452:	e097      	b.n	800a584 <HAL_ADC_Start+0x160>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2201      	movs	r2, #1
 800a458:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f000 fd5b 	bl	800af18 <ADC_Enable>
 800a462:	4603      	mov	r3, r0
 800a464:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800a466:	7dfb      	ldrb	r3, [r7, #23]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	f040 8083 	bne.w	800a574 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a472:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a476:	f023 0301 	bic.w	r3, r3, #1
 800a47a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a42      	ldr	r2, [pc, #264]	; (800a590 <HAL_ADC_Start+0x16c>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d002      	beq.n	800a492 <HAL_ADC_Start+0x6e>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	e000      	b.n	800a494 <HAL_ADC_Start+0x70>
 800a492:	4b40      	ldr	r3, [pc, #256]	; (800a594 <HAL_ADC_Start+0x170>)
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	6812      	ldr	r2, [r2, #0]
 800a498:	4293      	cmp	r3, r2
 800a49a:	d002      	beq.n	800a4a2 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d105      	bne.n	800a4ae <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a4b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4ba:	d106      	bne.n	800a4ca <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4c0:	f023 0206 	bic.w	r2, r3, #6
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	659a      	str	r2, [r3, #88]	; 0x58
 800a4c8:	e002      	b.n	800a4d0 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	221c      	movs	r2, #28
 800a4d6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4a2a      	ldr	r2, [pc, #168]	; (800a590 <HAL_ADC_Start+0x16c>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d002      	beq.n	800a4f0 <HAL_ADC_Start+0xcc>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	e000      	b.n	800a4f2 <HAL_ADC_Start+0xce>
 800a4f0:	4b28      	ldr	r3, [pc, #160]	; (800a594 <HAL_ADC_Start+0x170>)
 800a4f2:	687a      	ldr	r2, [r7, #4]
 800a4f4:	6812      	ldr	r2, [r2, #0]
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d008      	beq.n	800a50c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d005      	beq.n	800a50c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	2b05      	cmp	r3, #5
 800a504:	d002      	beq.n	800a50c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	2b09      	cmp	r3, #9
 800a50a:	d114      	bne.n	800a536 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	68db      	ldr	r3, [r3, #12]
 800a512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a516:	2b00      	cmp	r3, #0
 800a518:	d007      	beq.n	800a52a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a51e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a522:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4618      	mov	r0, r3
 800a530:	f7ff fde9 	bl	800a106 <LL_ADC_REG_StartConversion>
 800a534:	e025      	b.n	800a582 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a53a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a12      	ldr	r2, [pc, #72]	; (800a590 <HAL_ADC_Start+0x16c>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d002      	beq.n	800a552 <HAL_ADC_Start+0x12e>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	e000      	b.n	800a554 <HAL_ADC_Start+0x130>
 800a552:	4b10      	ldr	r3, [pc, #64]	; (800a594 <HAL_ADC_Start+0x170>)
 800a554:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d00f      	beq.n	800a582 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a566:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a56a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	655a      	str	r2, [r3, #84]	; 0x54
 800a572:	e006      	b.n	800a582 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800a57c:	e001      	b.n	800a582 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800a57e:	2302      	movs	r3, #2
 800a580:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800a582:	7dfb      	ldrb	r3, [r7, #23]
}
 800a584:	4618      	mov	r0, r3
 800a586:	3718      	adds	r7, #24
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}
 800a58c:	50040300 	.word	0x50040300
 800a590:	50040100 	.word	0x50040100
 800a594:	50040000 	.word	0x50040000

0800a598 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b086      	sub	sp, #24
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a5a4:	4850      	ldr	r0, [pc, #320]	; (800a6e8 <HAL_ADC_Start_DMA+0x150>)
 800a5a6:	f7ff fd2b 	bl	800a000 <LL_ADC_GetMultimode>
 800a5aa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7ff fdbc 	bl	800a12e <LL_ADC_REG_IsConversionOngoing>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	f040 808e 	bne.w	800a6da <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d101      	bne.n	800a5cc <HAL_ADC_Start_DMA+0x34>
 800a5c8:	2302      	movs	r3, #2
 800a5ca:	e089      	b.n	800a6e0 <HAL_ADC_Start_DMA+0x148>
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d005      	beq.n	800a5e6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	2b05      	cmp	r3, #5
 800a5de:	d002      	beq.n	800a5e6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	2b09      	cmp	r3, #9
 800a5e4:	d172      	bne.n	800a6cc <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800a5e6:	68f8      	ldr	r0, [r7, #12]
 800a5e8:	f000 fc96 	bl	800af18 <ADC_Enable>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800a5f0:	7dfb      	ldrb	r3, [r7, #23]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d165      	bne.n	800a6c2 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a5fe:	f023 0301 	bic.w	r3, r3, #1
 800a602:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4a37      	ldr	r2, [pc, #220]	; (800a6ec <HAL_ADC_Start_DMA+0x154>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d002      	beq.n	800a61a <HAL_ADC_Start_DMA+0x82>
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	e000      	b.n	800a61c <HAL_ADC_Start_DMA+0x84>
 800a61a:	4b35      	ldr	r3, [pc, #212]	; (800a6f0 <HAL_ADC_Start_DMA+0x158>)
 800a61c:	68fa      	ldr	r2, [r7, #12]
 800a61e:	6812      	ldr	r2, [r2, #0]
 800a620:	4293      	cmp	r3, r2
 800a622:	d002      	beq.n	800a62a <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d105      	bne.n	800a636 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a62e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a63a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d006      	beq.n	800a650 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a646:	f023 0206 	bic.w	r2, r3, #6
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	659a      	str	r2, [r3, #88]	; 0x58
 800a64e:	e002      	b.n	800a656 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2200      	movs	r2, #0
 800a654:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a65a:	4a26      	ldr	r2, [pc, #152]	; (800a6f4 <HAL_ADC_Start_DMA+0x15c>)
 800a65c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a662:	4a25      	ldr	r2, [pc, #148]	; (800a6f8 <HAL_ADC_Start_DMA+0x160>)
 800a664:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a66a:	4a24      	ldr	r2, [pc, #144]	; (800a6fc <HAL_ADC_Start_DMA+0x164>)
 800a66c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	221c      	movs	r2, #28
 800a674:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2200      	movs	r2, #0
 800a67a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	685a      	ldr	r2, [r3, #4]
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f042 0210 	orr.w	r2, r2, #16
 800a68c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	68da      	ldr	r2, [r3, #12]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f042 0201 	orr.w	r2, r2, #1
 800a69c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	3340      	adds	r3, #64	; 0x40
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	68ba      	ldr	r2, [r7, #8]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f000 ff8d 	bl	800b5cc <HAL_DMA_Start_IT>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7ff fd23 	bl	800a106 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800a6c0:	e00d      	b.n	800a6de <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800a6ca:	e008      	b.n	800a6de <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800a6d8:	e001      	b.n	800a6de <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800a6da:	2302      	movs	r3, #2
 800a6dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800a6de:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3718      	adds	r7, #24
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	50040300 	.word	0x50040300
 800a6ec:	50040100 	.word	0x50040100
 800a6f0:	50040000 	.word	0x50040000
 800a6f4:	0800afcd 	.word	0x0800afcd
 800a6f8:	0800b0a5 	.word	0x0800b0a5
 800a6fc:	0800b0c1 	.word	0x0800b0c1

0800a700 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800a708:	bf00      	nop
 800a70a:	370c      	adds	r7, #12
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr

0800a714 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a714:	b480      	push	{r7}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800a71c:	bf00      	nop
 800a71e:	370c      	adds	r7, #12
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr

0800a728 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800a730:	bf00      	nop
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b0b6      	sub	sp, #216	; 0xd8
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a746:	2300      	movs	r3, #0
 800a748:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800a74c:	2300      	movs	r3, #0
 800a74e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a756:	2b01      	cmp	r3, #1
 800a758:	d101      	bne.n	800a75e <HAL_ADC_ConfigChannel+0x22>
 800a75a:	2302      	movs	r3, #2
 800a75c:	e3c6      	b.n	800aeec <HAL_ADC_ConfigChannel+0x7b0>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2201      	movs	r2, #1
 800a762:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7ff fcdf 	bl	800a12e <LL_ADC_REG_IsConversionOngoing>
 800a770:	4603      	mov	r3, r0
 800a772:	2b00      	cmp	r3, #0
 800a774:	f040 83a7 	bne.w	800aec6 <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	2b05      	cmp	r3, #5
 800a77e:	d824      	bhi.n	800a7ca <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	3b02      	subs	r3, #2
 800a786:	2b03      	cmp	r3, #3
 800a788:	d81b      	bhi.n	800a7c2 <HAL_ADC_ConfigChannel+0x86>
 800a78a:	a201      	add	r2, pc, #4	; (adr r2, 800a790 <HAL_ADC_ConfigChannel+0x54>)
 800a78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a790:	0800a7a1 	.word	0x0800a7a1
 800a794:	0800a7a9 	.word	0x0800a7a9
 800a798:	0800a7b1 	.word	0x0800a7b1
 800a79c:	0800a7b9 	.word	0x0800a7b9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	220c      	movs	r2, #12
 800a7a4:	605a      	str	r2, [r3, #4]
          break;
 800a7a6:	e011      	b.n	800a7cc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	2212      	movs	r2, #18
 800a7ac:	605a      	str	r2, [r3, #4]
          break;
 800a7ae:	e00d      	b.n	800a7cc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	2218      	movs	r2, #24
 800a7b4:	605a      	str	r2, [r3, #4]
          break;
 800a7b6:	e009      	b.n	800a7cc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a7be:	605a      	str	r2, [r3, #4]
          break;
 800a7c0:	e004      	b.n	800a7cc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	2206      	movs	r2, #6
 800a7c6:	605a      	str	r2, [r3, #4]
          break;
 800a7c8:	e000      	b.n	800a7cc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800a7ca:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6818      	ldr	r0, [r3, #0]
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	6859      	ldr	r1, [r3, #4]
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	461a      	mov	r2, r3
 800a7da:	f7ff fb95 	bl	8009f08 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7ff fca3 	bl	800a12e <LL_ADC_REG_IsConversionOngoing>
 800a7e8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7ff fcaf 	bl	800a154 <LL_ADC_INJ_IsConversionOngoing>
 800a7f6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a7fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f040 81a6 	bne.w	800ab50 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a804:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a808:	2b00      	cmp	r3, #0
 800a80a:	f040 81a1 	bne.w	800ab50 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6818      	ldr	r0, [r3, #0]
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	6819      	ldr	r1, [r3, #0]
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	689b      	ldr	r3, [r3, #8]
 800a81a:	461a      	mov	r2, r3
 800a81c:	f7ff fba0 	bl	8009f60 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	695a      	ldr	r2, [r3, #20]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	08db      	lsrs	r3, r3, #3
 800a82c:	f003 0303 	and.w	r3, r3, #3
 800a830:	005b      	lsls	r3, r3, #1
 800a832:	fa02 f303 	lsl.w	r3, r2, r3
 800a836:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	691b      	ldr	r3, [r3, #16]
 800a83e:	2b04      	cmp	r3, #4
 800a840:	d00a      	beq.n	800a858 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6818      	ldr	r0, [r3, #0]
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	6919      	ldr	r1, [r3, #16]
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a852:	f7ff faf1 	bl	8009e38 <LL_ADC_SetOffset>
 800a856:	e17b      	b.n	800ab50 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	2100      	movs	r1, #0
 800a85e:	4618      	mov	r0, r3
 800a860:	f7ff fb0e 	bl	8009e80 <LL_ADC_GetOffsetChannel>
 800a864:	4603      	mov	r3, r0
 800a866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d10a      	bne.n	800a884 <HAL_ADC_ConfigChannel+0x148>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2100      	movs	r1, #0
 800a874:	4618      	mov	r0, r3
 800a876:	f7ff fb03 	bl	8009e80 <LL_ADC_GetOffsetChannel>
 800a87a:	4603      	mov	r3, r0
 800a87c:	0e9b      	lsrs	r3, r3, #26
 800a87e:	f003 021f 	and.w	r2, r3, #31
 800a882:	e01e      	b.n	800a8c2 <HAL_ADC_ConfigChannel+0x186>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	2100      	movs	r1, #0
 800a88a:	4618      	mov	r0, r3
 800a88c:	f7ff faf8 	bl	8009e80 <LL_ADC_GetOffsetChannel>
 800a890:	4603      	mov	r3, r0
 800a892:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a896:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a89a:	fa93 f3a3 	rbit	r3, r3
 800a89e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800a8a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a8a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800a8aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d101      	bne.n	800a8b6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800a8b2:	2320      	movs	r3, #32
 800a8b4:	e004      	b.n	800a8c0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800a8b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a8ba:	fab3 f383 	clz	r3, r3
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d105      	bne.n	800a8da <HAL_ADC_ConfigChannel+0x19e>
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	0e9b      	lsrs	r3, r3, #26
 800a8d4:	f003 031f 	and.w	r3, r3, #31
 800a8d8:	e018      	b.n	800a90c <HAL_ADC_ConfigChannel+0x1d0>
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a8e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a8e6:	fa93 f3a3 	rbit	r3, r3
 800a8ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800a8ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a8f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800a8f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d101      	bne.n	800a902 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800a8fe:	2320      	movs	r3, #32
 800a900:	e004      	b.n	800a90c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800a902:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a906:	fab3 f383 	clz	r3, r3
 800a90a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d106      	bne.n	800a91e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	2200      	movs	r2, #0
 800a916:	2100      	movs	r1, #0
 800a918:	4618      	mov	r0, r3
 800a91a:	f7ff fac7 	bl	8009eac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	2101      	movs	r1, #1
 800a924:	4618      	mov	r0, r3
 800a926:	f7ff faab 	bl	8009e80 <LL_ADC_GetOffsetChannel>
 800a92a:	4603      	mov	r3, r0
 800a92c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a930:	2b00      	cmp	r3, #0
 800a932:	d10a      	bne.n	800a94a <HAL_ADC_ConfigChannel+0x20e>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	2101      	movs	r1, #1
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7ff faa0 	bl	8009e80 <LL_ADC_GetOffsetChannel>
 800a940:	4603      	mov	r3, r0
 800a942:	0e9b      	lsrs	r3, r3, #26
 800a944:	f003 021f 	and.w	r2, r3, #31
 800a948:	e01e      	b.n	800a988 <HAL_ADC_ConfigChannel+0x24c>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	2101      	movs	r1, #1
 800a950:	4618      	mov	r0, r3
 800a952:	f7ff fa95 	bl	8009e80 <LL_ADC_GetOffsetChannel>
 800a956:	4603      	mov	r3, r0
 800a958:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a95c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a960:	fa93 f3a3 	rbit	r3, r3
 800a964:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800a968:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a96c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800a970:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a974:	2b00      	cmp	r3, #0
 800a976:	d101      	bne.n	800a97c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800a978:	2320      	movs	r3, #32
 800a97a:	e004      	b.n	800a986 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800a97c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a980:	fab3 f383 	clz	r3, r3
 800a984:	b2db      	uxtb	r3, r3
 800a986:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a990:	2b00      	cmp	r3, #0
 800a992:	d105      	bne.n	800a9a0 <HAL_ADC_ConfigChannel+0x264>
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	0e9b      	lsrs	r3, r3, #26
 800a99a:	f003 031f 	and.w	r3, r3, #31
 800a99e:	e018      	b.n	800a9d2 <HAL_ADC_ConfigChannel+0x296>
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a9a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a9ac:	fa93 f3a3 	rbit	r3, r3
 800a9b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800a9b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a9b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800a9bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d101      	bne.n	800a9c8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800a9c4:	2320      	movs	r3, #32
 800a9c6:	e004      	b.n	800a9d2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800a9c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a9cc:	fab3 f383 	clz	r3, r3
 800a9d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d106      	bne.n	800a9e4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	2101      	movs	r1, #1
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7ff fa64 	bl	8009eac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	2102      	movs	r1, #2
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7ff fa48 	bl	8009e80 <LL_ADC_GetOffsetChannel>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d10a      	bne.n	800aa10 <HAL_ADC_ConfigChannel+0x2d4>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	2102      	movs	r1, #2
 800aa00:	4618      	mov	r0, r3
 800aa02:	f7ff fa3d 	bl	8009e80 <LL_ADC_GetOffsetChannel>
 800aa06:	4603      	mov	r3, r0
 800aa08:	0e9b      	lsrs	r3, r3, #26
 800aa0a:	f003 021f 	and.w	r2, r3, #31
 800aa0e:	e01e      	b.n	800aa4e <HAL_ADC_ConfigChannel+0x312>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	2102      	movs	r1, #2
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7ff fa32 	bl	8009e80 <LL_ADC_GetOffsetChannel>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa26:	fa93 f3a3 	rbit	r3, r3
 800aa2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800aa2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aa32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800aa36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d101      	bne.n	800aa42 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800aa3e:	2320      	movs	r3, #32
 800aa40:	e004      	b.n	800aa4c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800aa42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aa46:	fab3 f383 	clz	r3, r3
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d105      	bne.n	800aa66 <HAL_ADC_ConfigChannel+0x32a>
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	0e9b      	lsrs	r3, r3, #26
 800aa60:	f003 031f 	and.w	r3, r3, #31
 800aa64:	e016      	b.n	800aa94 <HAL_ADC_ConfigChannel+0x358>
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aa72:	fa93 f3a3 	rbit	r3, r3
 800aa76:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800aa78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aa7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800aa7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d101      	bne.n	800aa8a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800aa86:	2320      	movs	r3, #32
 800aa88:	e004      	b.n	800aa94 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800aa8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aa8e:	fab3 f383 	clz	r3, r3
 800aa92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d106      	bne.n	800aaa6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	2102      	movs	r1, #2
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f7ff fa03 	bl	8009eac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	2103      	movs	r1, #3
 800aaac:	4618      	mov	r0, r3
 800aaae:	f7ff f9e7 	bl	8009e80 <LL_ADC_GetOffsetChannel>
 800aab2:	4603      	mov	r3, r0
 800aab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d10a      	bne.n	800aad2 <HAL_ADC_ConfigChannel+0x396>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	2103      	movs	r1, #3
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7ff f9dc 	bl	8009e80 <LL_ADC_GetOffsetChannel>
 800aac8:	4603      	mov	r3, r0
 800aaca:	0e9b      	lsrs	r3, r3, #26
 800aacc:	f003 021f 	and.w	r2, r3, #31
 800aad0:	e017      	b.n	800ab02 <HAL_ADC_ConfigChannel+0x3c6>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	2103      	movs	r1, #3
 800aad8:	4618      	mov	r0, r3
 800aada:	f7ff f9d1 	bl	8009e80 <LL_ADC_GetOffsetChannel>
 800aade:	4603      	mov	r3, r0
 800aae0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aae2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aae4:	fa93 f3a3 	rbit	r3, r3
 800aae8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800aaea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aaec:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800aaee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d101      	bne.n	800aaf8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800aaf4:	2320      	movs	r3, #32
 800aaf6:	e003      	b.n	800ab00 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800aaf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aafa:	fab3 f383 	clz	r3, r3
 800aafe:	b2db      	uxtb	r3, r3
 800ab00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d105      	bne.n	800ab1a <HAL_ADC_ConfigChannel+0x3de>
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	0e9b      	lsrs	r3, r3, #26
 800ab14:	f003 031f 	and.w	r3, r3, #31
 800ab18:	e011      	b.n	800ab3e <HAL_ADC_ConfigChannel+0x402>
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab22:	fa93 f3a3 	rbit	r3, r3
 800ab26:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800ab28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab2a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800ab2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d101      	bne.n	800ab36 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800ab32:	2320      	movs	r3, #32
 800ab34:	e003      	b.n	800ab3e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800ab36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab38:	fab3 f383 	clz	r3, r3
 800ab3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d106      	bne.n	800ab50 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	2200      	movs	r2, #0
 800ab48:	2103      	movs	r1, #3
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f7ff f9ae 	bl	8009eac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4618      	mov	r0, r3
 800ab56:	f7ff fac3 	bl	800a0e0 <LL_ADC_IsEnabled>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	f040 813f 	bne.w	800ade0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6818      	ldr	r0, [r3, #0]
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	6819      	ldr	r1, [r3, #0]
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	68db      	ldr	r3, [r3, #12]
 800ab6e:	461a      	mov	r2, r3
 800ab70:	f7ff fa22 	bl	8009fb8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	68db      	ldr	r3, [r3, #12]
 800ab78:	4a8e      	ldr	r2, [pc, #568]	; (800adb4 <HAL_ADC_ConfigChannel+0x678>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	f040 8130 	bne.w	800ade0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d10b      	bne.n	800aba8 <HAL_ADC_ConfigChannel+0x46c>
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	0e9b      	lsrs	r3, r3, #26
 800ab96:	3301      	adds	r3, #1
 800ab98:	f003 031f 	and.w	r3, r3, #31
 800ab9c:	2b09      	cmp	r3, #9
 800ab9e:	bf94      	ite	ls
 800aba0:	2301      	movls	r3, #1
 800aba2:	2300      	movhi	r3, #0
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	e019      	b.n	800abdc <HAL_ADC_ConfigChannel+0x4a0>
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800abae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800abb0:	fa93 f3a3 	rbit	r3, r3
 800abb4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800abb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800abb8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800abba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d101      	bne.n	800abc4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800abc0:	2320      	movs	r3, #32
 800abc2:	e003      	b.n	800abcc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800abc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800abc6:	fab3 f383 	clz	r3, r3
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	3301      	adds	r3, #1
 800abce:	f003 031f 	and.w	r3, r3, #31
 800abd2:	2b09      	cmp	r3, #9
 800abd4:	bf94      	ite	ls
 800abd6:	2301      	movls	r3, #1
 800abd8:	2300      	movhi	r3, #0
 800abda:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d079      	beq.n	800acd4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d107      	bne.n	800abfc <HAL_ADC_ConfigChannel+0x4c0>
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	0e9b      	lsrs	r3, r3, #26
 800abf2:	3301      	adds	r3, #1
 800abf4:	069b      	lsls	r3, r3, #26
 800abf6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800abfa:	e015      	b.n	800ac28 <HAL_ADC_ConfigChannel+0x4ec>
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac04:	fa93 f3a3 	rbit	r3, r3
 800ac08:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800ac0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac0c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800ac0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d101      	bne.n	800ac18 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800ac14:	2320      	movs	r3, #32
 800ac16:	e003      	b.n	800ac20 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800ac18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac1a:	fab3 f383 	clz	r3, r3
 800ac1e:	b2db      	uxtb	r3, r3
 800ac20:	3301      	adds	r3, #1
 800ac22:	069b      	lsls	r3, r3, #26
 800ac24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d109      	bne.n	800ac48 <HAL_ADC_ConfigChannel+0x50c>
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	0e9b      	lsrs	r3, r3, #26
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	f003 031f 	and.w	r3, r3, #31
 800ac40:	2101      	movs	r1, #1
 800ac42:	fa01 f303 	lsl.w	r3, r1, r3
 800ac46:	e017      	b.n	800ac78 <HAL_ADC_ConfigChannel+0x53c>
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac50:	fa93 f3a3 	rbit	r3, r3
 800ac54:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800ac56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac58:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800ac5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d101      	bne.n	800ac64 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800ac60:	2320      	movs	r3, #32
 800ac62:	e003      	b.n	800ac6c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800ac64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac66:	fab3 f383 	clz	r3, r3
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	3301      	adds	r3, #1
 800ac6e:	f003 031f 	and.w	r3, r3, #31
 800ac72:	2101      	movs	r1, #1
 800ac74:	fa01 f303 	lsl.w	r3, r1, r3
 800ac78:	ea42 0103 	orr.w	r1, r2, r3
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10a      	bne.n	800ac9e <HAL_ADC_ConfigChannel+0x562>
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	0e9b      	lsrs	r3, r3, #26
 800ac8e:	3301      	adds	r3, #1
 800ac90:	f003 021f 	and.w	r2, r3, #31
 800ac94:	4613      	mov	r3, r2
 800ac96:	005b      	lsls	r3, r3, #1
 800ac98:	4413      	add	r3, r2
 800ac9a:	051b      	lsls	r3, r3, #20
 800ac9c:	e018      	b.n	800acd0 <HAL_ADC_ConfigChannel+0x594>
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca6:	fa93 f3a3 	rbit	r3, r3
 800acaa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800acac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800acb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d101      	bne.n	800acba <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800acb6:	2320      	movs	r3, #32
 800acb8:	e003      	b.n	800acc2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800acba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acbc:	fab3 f383 	clz	r3, r3
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	3301      	adds	r3, #1
 800acc4:	f003 021f 	and.w	r2, r3, #31
 800acc8:	4613      	mov	r3, r2
 800acca:	005b      	lsls	r3, r3, #1
 800accc:	4413      	add	r3, r2
 800acce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800acd0:	430b      	orrs	r3, r1
 800acd2:	e080      	b.n	800add6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d107      	bne.n	800acf0 <HAL_ADC_ConfigChannel+0x5b4>
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	0e9b      	lsrs	r3, r3, #26
 800ace6:	3301      	adds	r3, #1
 800ace8:	069b      	lsls	r3, r3, #26
 800acea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800acee:	e015      	b.n	800ad1c <HAL_ADC_ConfigChannel+0x5e0>
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800acf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf8:	fa93 f3a3 	rbit	r3, r3
 800acfc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800acfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad00:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800ad02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d101      	bne.n	800ad0c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800ad08:	2320      	movs	r3, #32
 800ad0a:	e003      	b.n	800ad14 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800ad0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad0e:	fab3 f383 	clz	r3, r3
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	3301      	adds	r3, #1
 800ad16:	069b      	lsls	r3, r3, #26
 800ad18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d109      	bne.n	800ad3c <HAL_ADC_ConfigChannel+0x600>
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	0e9b      	lsrs	r3, r3, #26
 800ad2e:	3301      	adds	r3, #1
 800ad30:	f003 031f 	and.w	r3, r3, #31
 800ad34:	2101      	movs	r1, #1
 800ad36:	fa01 f303 	lsl.w	r3, r1, r3
 800ad3a:	e017      	b.n	800ad6c <HAL_ADC_ConfigChannel+0x630>
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad42:	6a3b      	ldr	r3, [r7, #32]
 800ad44:	fa93 f3a3 	rbit	r3, r3
 800ad48:	61fb      	str	r3, [r7, #28]
  return result;
 800ad4a:	69fb      	ldr	r3, [r7, #28]
 800ad4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800ad4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d101      	bne.n	800ad58 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800ad54:	2320      	movs	r3, #32
 800ad56:	e003      	b.n	800ad60 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800ad58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5a:	fab3 f383 	clz	r3, r3
 800ad5e:	b2db      	uxtb	r3, r3
 800ad60:	3301      	adds	r3, #1
 800ad62:	f003 031f 	and.w	r3, r3, #31
 800ad66:	2101      	movs	r1, #1
 800ad68:	fa01 f303 	lsl.w	r3, r1, r3
 800ad6c:	ea42 0103 	orr.w	r1, r2, r3
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d10d      	bne.n	800ad98 <HAL_ADC_ConfigChannel+0x65c>
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	0e9b      	lsrs	r3, r3, #26
 800ad82:	3301      	adds	r3, #1
 800ad84:	f003 021f 	and.w	r2, r3, #31
 800ad88:	4613      	mov	r3, r2
 800ad8a:	005b      	lsls	r3, r3, #1
 800ad8c:	4413      	add	r3, r2
 800ad8e:	3b1e      	subs	r3, #30
 800ad90:	051b      	lsls	r3, r3, #20
 800ad92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ad96:	e01d      	b.n	800add4 <HAL_ADC_ConfigChannel+0x698>
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	fa93 f3a3 	rbit	r3, r3
 800ada4:	613b      	str	r3, [r7, #16]
  return result;
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800adaa:	69bb      	ldr	r3, [r7, #24]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d103      	bne.n	800adb8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800adb0:	2320      	movs	r3, #32
 800adb2:	e005      	b.n	800adc0 <HAL_ADC_ConfigChannel+0x684>
 800adb4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800adb8:	69bb      	ldr	r3, [r7, #24]
 800adba:	fab3 f383 	clz	r3, r3
 800adbe:	b2db      	uxtb	r3, r3
 800adc0:	3301      	adds	r3, #1
 800adc2:	f003 021f 	and.w	r2, r3, #31
 800adc6:	4613      	mov	r3, r2
 800adc8:	005b      	lsls	r3, r3, #1
 800adca:	4413      	add	r3, r2
 800adcc:	3b1e      	subs	r3, #30
 800adce:	051b      	lsls	r3, r3, #20
 800add0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800add4:	430b      	orrs	r3, r1
 800add6:	683a      	ldr	r2, [r7, #0]
 800add8:	6892      	ldr	r2, [r2, #8]
 800adda:	4619      	mov	r1, r3
 800addc:	f7ff f8c0 	bl	8009f60 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	681a      	ldr	r2, [r3, #0]
 800ade4:	4b43      	ldr	r3, [pc, #268]	; (800aef4 <HAL_ADC_ConfigChannel+0x7b8>)
 800ade6:	4013      	ands	r3, r2
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d079      	beq.n	800aee0 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800adec:	4842      	ldr	r0, [pc, #264]	; (800aef8 <HAL_ADC_ConfigChannel+0x7bc>)
 800adee:	f7ff f815 	bl	8009e1c <LL_ADC_GetCommonPathInternalCh>
 800adf2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4a40      	ldr	r2, [pc, #256]	; (800aefc <HAL_ADC_ConfigChannel+0x7c0>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d12b      	bne.n	800ae58 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800ae00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ae04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d125      	bne.n	800ae58 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4a3b      	ldr	r2, [pc, #236]	; (800af00 <HAL_ADC_ConfigChannel+0x7c4>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d004      	beq.n	800ae20 <HAL_ADC_ConfigChannel+0x6e4>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4a3a      	ldr	r2, [pc, #232]	; (800af04 <HAL_ADC_ConfigChannel+0x7c8>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d15c      	bne.n	800aeda <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800ae20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ae24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ae28:	4619      	mov	r1, r3
 800ae2a:	4833      	ldr	r0, [pc, #204]	; (800aef8 <HAL_ADC_ConfigChannel+0x7bc>)
 800ae2c:	f7fe ffe3 	bl	8009df6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800ae30:	4b35      	ldr	r3, [pc, #212]	; (800af08 <HAL_ADC_ConfigChannel+0x7cc>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	099b      	lsrs	r3, r3, #6
 800ae36:	4a35      	ldr	r2, [pc, #212]	; (800af0c <HAL_ADC_ConfigChannel+0x7d0>)
 800ae38:	fba2 2303 	umull	r2, r3, r2, r3
 800ae3c:	099a      	lsrs	r2, r3, #6
 800ae3e:	4613      	mov	r3, r2
 800ae40:	005b      	lsls	r3, r3, #1
 800ae42:	4413      	add	r3, r2
 800ae44:	009b      	lsls	r3, r3, #2
 800ae46:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800ae48:	e002      	b.n	800ae50 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	3b01      	subs	r3, #1
 800ae4e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d1f9      	bne.n	800ae4a <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800ae56:	e040      	b.n	800aeda <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a2c      	ldr	r2, [pc, #176]	; (800af10 <HAL_ADC_ConfigChannel+0x7d4>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d118      	bne.n	800ae94 <HAL_ADC_ConfigChannel+0x758>
 800ae62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ae66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d112      	bne.n	800ae94 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4a23      	ldr	r2, [pc, #140]	; (800af00 <HAL_ADC_ConfigChannel+0x7c4>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d004      	beq.n	800ae82 <HAL_ADC_ConfigChannel+0x746>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a21      	ldr	r2, [pc, #132]	; (800af04 <HAL_ADC_ConfigChannel+0x7c8>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d12d      	bne.n	800aede <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800ae82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ae86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	481a      	ldr	r0, [pc, #104]	; (800aef8 <HAL_ADC_ConfigChannel+0x7bc>)
 800ae8e:	f7fe ffb2 	bl	8009df6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800ae92:	e024      	b.n	800aede <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	4a1e      	ldr	r2, [pc, #120]	; (800af14 <HAL_ADC_ConfigChannel+0x7d8>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d120      	bne.n	800aee0 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800ae9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800aea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d11a      	bne.n	800aee0 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a14      	ldr	r2, [pc, #80]	; (800af00 <HAL_ADC_ConfigChannel+0x7c4>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d115      	bne.n	800aee0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800aeb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800aeb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800aebc:	4619      	mov	r1, r3
 800aebe:	480e      	ldr	r0, [pc, #56]	; (800aef8 <HAL_ADC_ConfigChannel+0x7bc>)
 800aec0:	f7fe ff99 	bl	8009df6 <LL_ADC_SetCommonPathInternalCh>
 800aec4:	e00c      	b.n	800aee0 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeca:	f043 0220 	orr.w	r2, r3, #32
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800aed2:	2301      	movs	r3, #1
 800aed4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800aed8:	e002      	b.n	800aee0 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800aeda:	bf00      	nop
 800aedc:	e000      	b.n	800aee0 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800aede:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2200      	movs	r2, #0
 800aee4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800aee8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	37d8      	adds	r7, #216	; 0xd8
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	80080000 	.word	0x80080000
 800aef8:	50040300 	.word	0x50040300
 800aefc:	c7520000 	.word	0xc7520000
 800af00:	50040000 	.word	0x50040000
 800af04:	50040200 	.word	0x50040200
 800af08:	20000004 	.word	0x20000004
 800af0c:	053e2d63 	.word	0x053e2d63
 800af10:	cb840000 	.word	0xcb840000
 800af14:	80000001 	.word	0x80000001

0800af18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4618      	mov	r0, r3
 800af26:	f7ff f8db 	bl	800a0e0 <LL_ADC_IsEnabled>
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d146      	bne.n	800afbe <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	689a      	ldr	r2, [r3, #8]
 800af36:	4b24      	ldr	r3, [pc, #144]	; (800afc8 <ADC_Enable+0xb0>)
 800af38:	4013      	ands	r3, r2
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d00d      	beq.n	800af5a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af42:	f043 0210 	orr.w	r2, r3, #16
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af4e:	f043 0201 	orr.w	r2, r3, #1
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800af56:	2301      	movs	r3, #1
 800af58:	e032      	b.n	800afc0 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4618      	mov	r0, r3
 800af60:	f7ff f8aa 	bl	800a0b8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800af64:	f7fe ff06 	bl	8009d74 <HAL_GetTick>
 800af68:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800af6a:	e021      	b.n	800afb0 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4618      	mov	r0, r3
 800af72:	f7ff f8b5 	bl	800a0e0 <LL_ADC_IsEnabled>
 800af76:	4603      	mov	r3, r0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d104      	bne.n	800af86 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4618      	mov	r0, r3
 800af82:	f7ff f899 	bl	800a0b8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800af86:	f7fe fef5 	bl	8009d74 <HAL_GetTick>
 800af8a:	4602      	mov	r2, r0
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	1ad3      	subs	r3, r2, r3
 800af90:	2b02      	cmp	r3, #2
 800af92:	d90d      	bls.n	800afb0 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af98:	f043 0210 	orr.w	r2, r3, #16
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afa4:	f043 0201 	orr.w	r2, r3, #1
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800afac:	2301      	movs	r3, #1
 800afae:	e007      	b.n	800afc0 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f003 0301 	and.w	r3, r3, #1
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d1d6      	bne.n	800af6c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800afbe:	2300      	movs	r3, #0
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3710      	adds	r7, #16
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	8000003f 	.word	0x8000003f

0800afcc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afde:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d14b      	bne.n	800b07e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f003 0308 	and.w	r3, r3, #8
 800affc:	2b00      	cmp	r3, #0
 800affe:	d021      	beq.n	800b044 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4618      	mov	r0, r3
 800b006:	f7fe ff6c 	bl	8009ee2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800b00a:	4603      	mov	r3, r0
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d032      	beq.n	800b076 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	68db      	ldr	r3, [r3, #12]
 800b016:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d12b      	bne.n	800b076 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b022:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b02e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b032:	2b00      	cmp	r3, #0
 800b034:	d11f      	bne.n	800b076 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b03a:	f043 0201 	orr.w	r2, r3, #1
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	655a      	str	r2, [r3, #84]	; 0x54
 800b042:	e018      	b.n	800b076 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	f003 0302 	and.w	r3, r3, #2
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d111      	bne.n	800b076 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b056:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b066:	2b00      	cmp	r3, #0
 800b068:	d105      	bne.n	800b076 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b06e:	f043 0201 	orr.w	r2, r3, #1
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b076:	68f8      	ldr	r0, [r7, #12]
 800b078:	f7ff fb42 	bl	800a700 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800b07c:	e00e      	b.n	800b09c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b082:	f003 0310 	and.w	r3, r3, #16
 800b086:	2b00      	cmp	r3, #0
 800b088:	d003      	beq.n	800b092 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800b08a:	68f8      	ldr	r0, [r7, #12]
 800b08c:	f7ff fb4c 	bl	800a728 <HAL_ADC_ErrorCallback>
}
 800b090:	e004      	b.n	800b09c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	4798      	blx	r3
}
 800b09c:	bf00      	nop
 800b09e:	3710      	adds	r7, #16
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b084      	sub	sp, #16
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0b0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800b0b2:	68f8      	ldr	r0, [r7, #12]
 800b0b4:	f7ff fb2e 	bl	800a714 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b0b8:	bf00      	nop
 800b0ba:	3710      	adds	r7, #16
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0cc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0de:	f043 0204 	orr.w	r2, r3, #4
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800b0e6:	68f8      	ldr	r0, [r7, #12]
 800b0e8:	f7ff fb1e 	bl	800a728 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b0ec:	bf00      	nop
 800b0ee:	3710      	adds	r7, #16
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <LL_ADC_IsEnabled>:
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b083      	sub	sp, #12
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	689b      	ldr	r3, [r3, #8]
 800b100:	f003 0301 	and.w	r3, r3, #1
 800b104:	2b01      	cmp	r3, #1
 800b106:	d101      	bne.n	800b10c <LL_ADC_IsEnabled+0x18>
 800b108:	2301      	movs	r3, #1
 800b10a:	e000      	b.n	800b10e <LL_ADC_IsEnabled+0x1a>
 800b10c:	2300      	movs	r3, #0
}
 800b10e:	4618      	mov	r0, r3
 800b110:	370c      	adds	r7, #12
 800b112:	46bd      	mov	sp, r7
 800b114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b118:	4770      	bx	lr

0800b11a <LL_ADC_REG_IsConversionOngoing>:
{
 800b11a:	b480      	push	{r7}
 800b11c:	b083      	sub	sp, #12
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	689b      	ldr	r3, [r3, #8]
 800b126:	f003 0304 	and.w	r3, r3, #4
 800b12a:	2b04      	cmp	r3, #4
 800b12c:	d101      	bne.n	800b132 <LL_ADC_REG_IsConversionOngoing+0x18>
 800b12e:	2301      	movs	r3, #1
 800b130:	e000      	b.n	800b134 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b132:	2300      	movs	r3, #0
}
 800b134:	4618      	mov	r0, r3
 800b136:	370c      	adds	r7, #12
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800b140:	b590      	push	{r4, r7, lr}
 800b142:	b09f      	sub	sp, #124	; 0x7c
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b14a:	2300      	movs	r3, #0
 800b14c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b156:	2b01      	cmp	r3, #1
 800b158:	d101      	bne.n	800b15e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800b15a:	2302      	movs	r3, #2
 800b15c:	e08f      	b.n	800b27e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2201      	movs	r2, #1
 800b162:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4a47      	ldr	r2, [pc, #284]	; (800b288 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d102      	bne.n	800b176 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800b170:	4b46      	ldr	r3, [pc, #280]	; (800b28c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800b172:	60bb      	str	r3, [r7, #8]
 800b174:	e001      	b.n	800b17a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800b176:	2300      	movs	r3, #0
 800b178:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d10b      	bne.n	800b198 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b184:	f043 0220 	orr.w	r2, r3, #32
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800b194:	2301      	movs	r3, #1
 800b196:	e072      	b.n	800b27e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7ff ffbd 	bl	800b11a <LL_ADC_REG_IsConversionOngoing>
 800b1a0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7ff ffb7 	bl	800b11a <LL_ADC_REG_IsConversionOngoing>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d154      	bne.n	800b25c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800b1b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d151      	bne.n	800b25c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800b1b8:	4b35      	ldr	r3, [pc, #212]	; (800b290 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800b1ba:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d02c      	beq.n	800b21e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800b1c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1c6:	689b      	ldr	r3, [r3, #8]
 800b1c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	6859      	ldr	r1, [r3, #4]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b1d6:	035b      	lsls	r3, r3, #13
 800b1d8:	430b      	orrs	r3, r1
 800b1da:	431a      	orrs	r2, r3
 800b1dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1de:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b1e0:	4829      	ldr	r0, [pc, #164]	; (800b288 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800b1e2:	f7ff ff87 	bl	800b0f4 <LL_ADC_IsEnabled>
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	4828      	ldr	r0, [pc, #160]	; (800b28c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800b1ea:	f7ff ff83 	bl	800b0f4 <LL_ADC_IsEnabled>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	431c      	orrs	r4, r3
 800b1f2:	4828      	ldr	r0, [pc, #160]	; (800b294 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800b1f4:	f7ff ff7e 	bl	800b0f4 <LL_ADC_IsEnabled>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	4323      	orrs	r3, r4
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d137      	bne.n	800b270 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800b200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b202:	689b      	ldr	r3, [r3, #8]
 800b204:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800b208:	f023 030f 	bic.w	r3, r3, #15
 800b20c:	683a      	ldr	r2, [r7, #0]
 800b20e:	6811      	ldr	r1, [r2, #0]
 800b210:	683a      	ldr	r2, [r7, #0]
 800b212:	6892      	ldr	r2, [r2, #8]
 800b214:	430a      	orrs	r2, r1
 800b216:	431a      	orrs	r2, r3
 800b218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b21a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800b21c:	e028      	b.n	800b270 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800b21e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b220:	689b      	ldr	r3, [r3, #8]
 800b222:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b228:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b22a:	4817      	ldr	r0, [pc, #92]	; (800b288 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800b22c:	f7ff ff62 	bl	800b0f4 <LL_ADC_IsEnabled>
 800b230:	4604      	mov	r4, r0
 800b232:	4816      	ldr	r0, [pc, #88]	; (800b28c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800b234:	f7ff ff5e 	bl	800b0f4 <LL_ADC_IsEnabled>
 800b238:	4603      	mov	r3, r0
 800b23a:	431c      	orrs	r4, r3
 800b23c:	4815      	ldr	r0, [pc, #84]	; (800b294 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800b23e:	f7ff ff59 	bl	800b0f4 <LL_ADC_IsEnabled>
 800b242:	4603      	mov	r3, r0
 800b244:	4323      	orrs	r3, r4
 800b246:	2b00      	cmp	r3, #0
 800b248:	d112      	bne.n	800b270 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800b24a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b24c:	689b      	ldr	r3, [r3, #8]
 800b24e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800b252:	f023 030f 	bic.w	r3, r3, #15
 800b256:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b258:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800b25a:	e009      	b.n	800b270 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b260:	f043 0220 	orr.w	r2, r3, #32
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800b268:	2301      	movs	r3, #1
 800b26a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800b26e:	e000      	b.n	800b272 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800b270:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2200      	movs	r2, #0
 800b276:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800b27a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800b27e:	4618      	mov	r0, r3
 800b280:	377c      	adds	r7, #124	; 0x7c
 800b282:	46bd      	mov	sp, r7
 800b284:	bd90      	pop	{r4, r7, pc}
 800b286:	bf00      	nop
 800b288:	50040000 	.word	0x50040000
 800b28c:	50040100 	.word	0x50040100
 800b290:	50040300 	.word	0x50040300
 800b294:	50040200 	.word	0x50040200

0800b298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b298:	b480      	push	{r7}
 800b29a:	b085      	sub	sp, #20
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f003 0307 	and.w	r3, r3, #7
 800b2a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b2a8:	4b0c      	ldr	r3, [pc, #48]	; (800b2dc <__NVIC_SetPriorityGrouping+0x44>)
 800b2aa:	68db      	ldr	r3, [r3, #12]
 800b2ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b2ae:	68ba      	ldr	r2, [r7, #8]
 800b2b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b2b4:	4013      	ands	r3, r2
 800b2b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b2c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b2c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b2ca:	4a04      	ldr	r2, [pc, #16]	; (800b2dc <__NVIC_SetPriorityGrouping+0x44>)
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	60d3      	str	r3, [r2, #12]
}
 800b2d0:	bf00      	nop
 800b2d2:	3714      	adds	r7, #20
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr
 800b2dc:	e000ed00 	.word	0xe000ed00

0800b2e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b2e4:	4b04      	ldr	r3, [pc, #16]	; (800b2f8 <__NVIC_GetPriorityGrouping+0x18>)
 800b2e6:	68db      	ldr	r3, [r3, #12]
 800b2e8:	0a1b      	lsrs	r3, r3, #8
 800b2ea:	f003 0307 	and.w	r3, r3, #7
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr
 800b2f8:	e000ed00 	.word	0xe000ed00

0800b2fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b083      	sub	sp, #12
 800b300:	af00      	add	r7, sp, #0
 800b302:	4603      	mov	r3, r0
 800b304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	db0b      	blt.n	800b326 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b30e:	79fb      	ldrb	r3, [r7, #7]
 800b310:	f003 021f 	and.w	r2, r3, #31
 800b314:	4907      	ldr	r1, [pc, #28]	; (800b334 <__NVIC_EnableIRQ+0x38>)
 800b316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b31a:	095b      	lsrs	r3, r3, #5
 800b31c:	2001      	movs	r0, #1
 800b31e:	fa00 f202 	lsl.w	r2, r0, r2
 800b322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800b326:	bf00      	nop
 800b328:	370c      	adds	r7, #12
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop
 800b334:	e000e100 	.word	0xe000e100

0800b338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b338:	b480      	push	{r7}
 800b33a:	b083      	sub	sp, #12
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	4603      	mov	r3, r0
 800b340:	6039      	str	r1, [r7, #0]
 800b342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	db0a      	blt.n	800b362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	b2da      	uxtb	r2, r3
 800b350:	490c      	ldr	r1, [pc, #48]	; (800b384 <__NVIC_SetPriority+0x4c>)
 800b352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b356:	0112      	lsls	r2, r2, #4
 800b358:	b2d2      	uxtb	r2, r2
 800b35a:	440b      	add	r3, r1
 800b35c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b360:	e00a      	b.n	800b378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	b2da      	uxtb	r2, r3
 800b366:	4908      	ldr	r1, [pc, #32]	; (800b388 <__NVIC_SetPriority+0x50>)
 800b368:	79fb      	ldrb	r3, [r7, #7]
 800b36a:	f003 030f 	and.w	r3, r3, #15
 800b36e:	3b04      	subs	r3, #4
 800b370:	0112      	lsls	r2, r2, #4
 800b372:	b2d2      	uxtb	r2, r2
 800b374:	440b      	add	r3, r1
 800b376:	761a      	strb	r2, [r3, #24]
}
 800b378:	bf00      	nop
 800b37a:	370c      	adds	r7, #12
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr
 800b384:	e000e100 	.word	0xe000e100
 800b388:	e000ed00 	.word	0xe000ed00

0800b38c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b089      	sub	sp, #36	; 0x24
 800b390:	af00      	add	r7, sp, #0
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	60b9      	str	r1, [r7, #8]
 800b396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f003 0307 	and.w	r3, r3, #7
 800b39e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b3a0:	69fb      	ldr	r3, [r7, #28]
 800b3a2:	f1c3 0307 	rsb	r3, r3, #7
 800b3a6:	2b04      	cmp	r3, #4
 800b3a8:	bf28      	it	cs
 800b3aa:	2304      	movcs	r3, #4
 800b3ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	3304      	adds	r3, #4
 800b3b2:	2b06      	cmp	r3, #6
 800b3b4:	d902      	bls.n	800b3bc <NVIC_EncodePriority+0x30>
 800b3b6:	69fb      	ldr	r3, [r7, #28]
 800b3b8:	3b03      	subs	r3, #3
 800b3ba:	e000      	b.n	800b3be <NVIC_EncodePriority+0x32>
 800b3bc:	2300      	movs	r3, #0
 800b3be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b3c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b3c4:	69bb      	ldr	r3, [r7, #24]
 800b3c6:	fa02 f303 	lsl.w	r3, r2, r3
 800b3ca:	43da      	mvns	r2, r3
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	401a      	ands	r2, r3
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b3d4:	f04f 31ff 	mov.w	r1, #4294967295
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	fa01 f303 	lsl.w	r3, r1, r3
 800b3de:	43d9      	mvns	r1, r3
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b3e4:	4313      	orrs	r3, r2
         );
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3724      	adds	r7, #36	; 0x24
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr

0800b3f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b3f2:	b580      	push	{r7, lr}
 800b3f4:	b082      	sub	sp, #8
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f7ff ff4c 	bl	800b298 <__NVIC_SetPriorityGrouping>
}
 800b400:	bf00      	nop
 800b402:	3708      	adds	r7, #8
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b086      	sub	sp, #24
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	4603      	mov	r3, r0
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	607a      	str	r2, [r7, #4]
 800b414:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800b416:	2300      	movs	r3, #0
 800b418:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b41a:	f7ff ff61 	bl	800b2e0 <__NVIC_GetPriorityGrouping>
 800b41e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	68b9      	ldr	r1, [r7, #8]
 800b424:	6978      	ldr	r0, [r7, #20]
 800b426:	f7ff ffb1 	bl	800b38c <NVIC_EncodePriority>
 800b42a:	4602      	mov	r2, r0
 800b42c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b430:	4611      	mov	r1, r2
 800b432:	4618      	mov	r0, r3
 800b434:	f7ff ff80 	bl	800b338 <__NVIC_SetPriority>
}
 800b438:	bf00      	nop
 800b43a:	3718      	adds	r7, #24
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0
 800b446:	4603      	mov	r3, r0
 800b448:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b44a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b44e:	4618      	mov	r0, r3
 800b450:	f7ff ff54 	bl	800b2fc <__NVIC_EnableIRQ>
}
 800b454:	bf00      	nop
 800b456:	3708      	adds	r7, #8
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b085      	sub	sp, #20
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d101      	bne.n	800b46e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800b46a:	2301      	movs	r3, #1
 800b46c:	e098      	b.n	800b5a0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	461a      	mov	r2, r3
 800b474:	4b4d      	ldr	r3, [pc, #308]	; (800b5ac <HAL_DMA_Init+0x150>)
 800b476:	429a      	cmp	r2, r3
 800b478:	d80f      	bhi.n	800b49a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	461a      	mov	r2, r3
 800b480:	4b4b      	ldr	r3, [pc, #300]	; (800b5b0 <HAL_DMA_Init+0x154>)
 800b482:	4413      	add	r3, r2
 800b484:	4a4b      	ldr	r2, [pc, #300]	; (800b5b4 <HAL_DMA_Init+0x158>)
 800b486:	fba2 2303 	umull	r2, r3, r2, r3
 800b48a:	091b      	lsrs	r3, r3, #4
 800b48c:	009a      	lsls	r2, r3, #2
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	4a48      	ldr	r2, [pc, #288]	; (800b5b8 <HAL_DMA_Init+0x15c>)
 800b496:	641a      	str	r2, [r3, #64]	; 0x40
 800b498:	e00e      	b.n	800b4b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	461a      	mov	r2, r3
 800b4a0:	4b46      	ldr	r3, [pc, #280]	; (800b5bc <HAL_DMA_Init+0x160>)
 800b4a2:	4413      	add	r3, r2
 800b4a4:	4a43      	ldr	r2, [pc, #268]	; (800b5b4 <HAL_DMA_Init+0x158>)
 800b4a6:	fba2 2303 	umull	r2, r3, r2, r3
 800b4aa:	091b      	lsrs	r3, r3, #4
 800b4ac:	009a      	lsls	r2, r3, #2
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	4a42      	ldr	r2, [pc, #264]	; (800b5c0 <HAL_DMA_Init+0x164>)
 800b4b6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2202      	movs	r2, #2
 800b4bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b4ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800b4dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	691b      	ldr	r3, [r3, #16]
 800b4e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b4e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	699b      	ldr	r3, [r3, #24]
 800b4ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b4f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6a1b      	ldr	r3, [r3, #32]
 800b4fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800b4fc:	68fa      	ldr	r2, [r7, #12]
 800b4fe:	4313      	orrs	r3, r2
 800b500:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	68fa      	ldr	r2, [r7, #12]
 800b508:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	689b      	ldr	r3, [r3, #8]
 800b50e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b512:	d039      	beq.n	800b588 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b518:	4a27      	ldr	r2, [pc, #156]	; (800b5b8 <HAL_DMA_Init+0x15c>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d11a      	bne.n	800b554 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800b51e:	4b29      	ldr	r3, [pc, #164]	; (800b5c4 <HAL_DMA_Init+0x168>)
 800b520:	681a      	ldr	r2, [r3, #0]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b526:	f003 031c 	and.w	r3, r3, #28
 800b52a:	210f      	movs	r1, #15
 800b52c:	fa01 f303 	lsl.w	r3, r1, r3
 800b530:	43db      	mvns	r3, r3
 800b532:	4924      	ldr	r1, [pc, #144]	; (800b5c4 <HAL_DMA_Init+0x168>)
 800b534:	4013      	ands	r3, r2
 800b536:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800b538:	4b22      	ldr	r3, [pc, #136]	; (800b5c4 <HAL_DMA_Init+0x168>)
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6859      	ldr	r1, [r3, #4]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b544:	f003 031c 	and.w	r3, r3, #28
 800b548:	fa01 f303 	lsl.w	r3, r1, r3
 800b54c:	491d      	ldr	r1, [pc, #116]	; (800b5c4 <HAL_DMA_Init+0x168>)
 800b54e:	4313      	orrs	r3, r2
 800b550:	600b      	str	r3, [r1, #0]
 800b552:	e019      	b.n	800b588 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800b554:	4b1c      	ldr	r3, [pc, #112]	; (800b5c8 <HAL_DMA_Init+0x16c>)
 800b556:	681a      	ldr	r2, [r3, #0]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b55c:	f003 031c 	and.w	r3, r3, #28
 800b560:	210f      	movs	r1, #15
 800b562:	fa01 f303 	lsl.w	r3, r1, r3
 800b566:	43db      	mvns	r3, r3
 800b568:	4917      	ldr	r1, [pc, #92]	; (800b5c8 <HAL_DMA_Init+0x16c>)
 800b56a:	4013      	ands	r3, r2
 800b56c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800b56e:	4b16      	ldr	r3, [pc, #88]	; (800b5c8 <HAL_DMA_Init+0x16c>)
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6859      	ldr	r1, [r3, #4]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b57a:	f003 031c 	and.w	r3, r3, #28
 800b57e:	fa01 f303 	lsl.w	r3, r1, r3
 800b582:	4911      	ldr	r1, [pc, #68]	; (800b5c8 <HAL_DMA_Init+0x16c>)
 800b584:	4313      	orrs	r3, r2
 800b586:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2200      	movs	r2, #0
 800b58c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2201      	movs	r2, #1
 800b592:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2200      	movs	r2, #0
 800b59a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b59e:	2300      	movs	r3, #0
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3714      	adds	r7, #20
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr
 800b5ac:	40020407 	.word	0x40020407
 800b5b0:	bffdfff8 	.word	0xbffdfff8
 800b5b4:	cccccccd 	.word	0xcccccccd
 800b5b8:	40020000 	.word	0x40020000
 800b5bc:	bffdfbf8 	.word	0xbffdfbf8
 800b5c0:	40020400 	.word	0x40020400
 800b5c4:	400200a8 	.word	0x400200a8
 800b5c8:	400204a8 	.word	0x400204a8

0800b5cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b086      	sub	sp, #24
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	60f8      	str	r0, [r7, #12]
 800b5d4:	60b9      	str	r1, [r7, #8]
 800b5d6:	607a      	str	r2, [r7, #4]
 800b5d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b5e4:	2b01      	cmp	r3, #1
 800b5e6:	d101      	bne.n	800b5ec <HAL_DMA_Start_IT+0x20>
 800b5e8:	2302      	movs	r3, #2
 800b5ea:	e04b      	b.n	800b684 <HAL_DMA_Start_IT+0xb8>
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d13a      	bne.n	800b676 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2202      	movs	r2, #2
 800b604:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	2200      	movs	r2, #0
 800b60c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f022 0201 	bic.w	r2, r2, #1
 800b61c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	68b9      	ldr	r1, [r7, #8]
 800b624:	68f8      	ldr	r0, [r7, #12]
 800b626:	f000 f8e0 	bl	800b7ea <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d008      	beq.n	800b644 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	681a      	ldr	r2, [r3, #0]
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f042 020e 	orr.w	r2, r2, #14
 800b640:	601a      	str	r2, [r3, #0]
 800b642:	e00f      	b.n	800b664 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	681a      	ldr	r2, [r3, #0]
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f022 0204 	bic.w	r2, r2, #4
 800b652:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	681a      	ldr	r2, [r3, #0]
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f042 020a 	orr.w	r2, r2, #10
 800b662:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	681a      	ldr	r2, [r3, #0]
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f042 0201 	orr.w	r2, r2, #1
 800b672:	601a      	str	r2, [r3, #0]
 800b674:	e005      	b.n	800b682 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2200      	movs	r2, #0
 800b67a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800b67e:	2302      	movs	r3, #2
 800b680:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800b682:	7dfb      	ldrb	r3, [r7, #23]
}
 800b684:	4618      	mov	r0, r3
 800b686:	3718      	adds	r7, #24
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6a8:	f003 031c 	and.w	r3, r3, #28
 800b6ac:	2204      	movs	r2, #4
 800b6ae:	409a      	lsls	r2, r3
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	4013      	ands	r3, r2
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d026      	beq.n	800b706 <HAL_DMA_IRQHandler+0x7a>
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	f003 0304 	and.w	r3, r3, #4
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d021      	beq.n	800b706 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f003 0320 	and.w	r3, r3, #32
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d107      	bne.n	800b6e0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	681a      	ldr	r2, [r3, #0]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f022 0204 	bic.w	r2, r2, #4
 800b6de:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6e4:	f003 021c 	and.w	r2, r3, #28
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ec:	2104      	movs	r1, #4
 800b6ee:	fa01 f202 	lsl.w	r2, r1, r2
 800b6f2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d071      	beq.n	800b7e0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800b704:	e06c      	b.n	800b7e0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b70a:	f003 031c 	and.w	r3, r3, #28
 800b70e:	2202      	movs	r2, #2
 800b710:	409a      	lsls	r2, r3
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	4013      	ands	r3, r2
 800b716:	2b00      	cmp	r3, #0
 800b718:	d02e      	beq.n	800b778 <HAL_DMA_IRQHandler+0xec>
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	f003 0302 	and.w	r3, r3, #2
 800b720:	2b00      	cmp	r3, #0
 800b722:	d029      	beq.n	800b778 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f003 0320 	and.w	r3, r3, #32
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d10b      	bne.n	800b74a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	681a      	ldr	r2, [r3, #0]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f022 020a 	bic.w	r2, r2, #10
 800b740:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2201      	movs	r2, #1
 800b746:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b74e:	f003 021c 	and.w	r2, r3, #28
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b756:	2102      	movs	r1, #2
 800b758:	fa01 f202 	lsl.w	r2, r1, r2
 800b75c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2200      	movs	r2, #0
 800b762:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d038      	beq.n	800b7e0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800b776:	e033      	b.n	800b7e0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b77c:	f003 031c 	and.w	r3, r3, #28
 800b780:	2208      	movs	r2, #8
 800b782:	409a      	lsls	r2, r3
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	4013      	ands	r3, r2
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d02a      	beq.n	800b7e2 <HAL_DMA_IRQHandler+0x156>
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	f003 0308 	and.w	r3, r3, #8
 800b792:	2b00      	cmp	r3, #0
 800b794:	d025      	beq.n	800b7e2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	681a      	ldr	r2, [r3, #0]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f022 020e 	bic.w	r2, r2, #14
 800b7a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7aa:	f003 021c 	and.w	r2, r3, #28
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7b2:	2101      	movs	r1, #1
 800b7b4:	fa01 f202 	lsl.w	r2, r1, r2
 800b7b8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2201      	movs	r2, #1
 800b7be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d004      	beq.n	800b7e2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800b7e0:	bf00      	nop
 800b7e2:	bf00      	nop
}
 800b7e4:	3710      	adds	r7, #16
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b7ea:	b480      	push	{r7}
 800b7ec:	b085      	sub	sp, #20
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	60f8      	str	r0, [r7, #12]
 800b7f2:	60b9      	str	r1, [r7, #8]
 800b7f4:	607a      	str	r2, [r7, #4]
 800b7f6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7fc:	f003 021c 	and.w	r2, r3, #28
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b804:	2101      	movs	r1, #1
 800b806:	fa01 f202 	lsl.w	r2, r1, r2
 800b80a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	683a      	ldr	r2, [r7, #0]
 800b812:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	689b      	ldr	r3, [r3, #8]
 800b818:	2b10      	cmp	r3, #16
 800b81a:	d108      	bne.n	800b82e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	68ba      	ldr	r2, [r7, #8]
 800b82a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800b82c:	e007      	b.n	800b83e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	68ba      	ldr	r2, [r7, #8]
 800b834:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	687a      	ldr	r2, [r7, #4]
 800b83c:	60da      	str	r2, [r3, #12]
}
 800b83e:	bf00      	nop
 800b840:	3714      	adds	r7, #20
 800b842:	46bd      	mov	sp, r7
 800b844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b848:	4770      	bx	lr
	...

0800b84c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b087      	sub	sp, #28
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b856:	2300      	movs	r3, #0
 800b858:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b85a:	e17f      	b.n	800bb5c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	681a      	ldr	r2, [r3, #0]
 800b860:	2101      	movs	r1, #1
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	fa01 f303 	lsl.w	r3, r1, r3
 800b868:	4013      	ands	r3, r2
 800b86a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	f000 8171 	beq.w	800bb56 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	2b01      	cmp	r3, #1
 800b87a:	d00b      	beq.n	800b894 <HAL_GPIO_Init+0x48>
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	2b02      	cmp	r3, #2
 800b882:	d007      	beq.n	800b894 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b888:	2b11      	cmp	r3, #17
 800b88a:	d003      	beq.n	800b894 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	2b12      	cmp	r3, #18
 800b892:	d130      	bne.n	800b8f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	689b      	ldr	r3, [r3, #8]
 800b898:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	005b      	lsls	r3, r3, #1
 800b89e:	2203      	movs	r2, #3
 800b8a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b8a4:	43db      	mvns	r3, r3
 800b8a6:	693a      	ldr	r2, [r7, #16]
 800b8a8:	4013      	ands	r3, r2
 800b8aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	68da      	ldr	r2, [r3, #12]
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	005b      	lsls	r3, r3, #1
 800b8b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b8b8:	693a      	ldr	r2, [r7, #16]
 800b8ba:	4313      	orrs	r3, r2
 800b8bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	693a      	ldr	r2, [r7, #16]
 800b8c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	fa02 f303 	lsl.w	r3, r2, r3
 800b8d2:	43db      	mvns	r3, r3
 800b8d4:	693a      	ldr	r2, [r7, #16]
 800b8d6:	4013      	ands	r3, r2
 800b8d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	685b      	ldr	r3, [r3, #4]
 800b8de:	091b      	lsrs	r3, r3, #4
 800b8e0:	f003 0201 	and.w	r2, r3, #1
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b8ea:	693a      	ldr	r2, [r7, #16]
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	693a      	ldr	r2, [r7, #16]
 800b8f4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	685b      	ldr	r3, [r3, #4]
 800b8fa:	f003 0303 	and.w	r3, r3, #3
 800b8fe:	2b03      	cmp	r3, #3
 800b900:	d118      	bne.n	800b934 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b906:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800b908:	2201      	movs	r2, #1
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	fa02 f303 	lsl.w	r3, r2, r3
 800b910:	43db      	mvns	r3, r3
 800b912:	693a      	ldr	r2, [r7, #16]
 800b914:	4013      	ands	r3, r2
 800b916:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	08db      	lsrs	r3, r3, #3
 800b91e:	f003 0201 	and.w	r2, r3, #1
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	fa02 f303 	lsl.w	r3, r2, r3
 800b928:	693a      	ldr	r2, [r7, #16]
 800b92a:	4313      	orrs	r3, r2
 800b92c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	693a      	ldr	r2, [r7, #16]
 800b932:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	68db      	ldr	r3, [r3, #12]
 800b938:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	005b      	lsls	r3, r3, #1
 800b93e:	2203      	movs	r2, #3
 800b940:	fa02 f303 	lsl.w	r3, r2, r3
 800b944:	43db      	mvns	r3, r3
 800b946:	693a      	ldr	r2, [r7, #16]
 800b948:	4013      	ands	r3, r2
 800b94a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	689a      	ldr	r2, [r3, #8]
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	005b      	lsls	r3, r3, #1
 800b954:	fa02 f303 	lsl.w	r3, r2, r3
 800b958:	693a      	ldr	r2, [r7, #16]
 800b95a:	4313      	orrs	r3, r2
 800b95c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	693a      	ldr	r2, [r7, #16]
 800b962:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	2b02      	cmp	r3, #2
 800b96a:	d003      	beq.n	800b974 <HAL_GPIO_Init+0x128>
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	685b      	ldr	r3, [r3, #4]
 800b970:	2b12      	cmp	r3, #18
 800b972:	d123      	bne.n	800b9bc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	08da      	lsrs	r2, r3, #3
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	3208      	adds	r2, #8
 800b97c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b980:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	f003 0307 	and.w	r3, r3, #7
 800b988:	009b      	lsls	r3, r3, #2
 800b98a:	220f      	movs	r2, #15
 800b98c:	fa02 f303 	lsl.w	r3, r2, r3
 800b990:	43db      	mvns	r3, r3
 800b992:	693a      	ldr	r2, [r7, #16]
 800b994:	4013      	ands	r3, r2
 800b996:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	691a      	ldr	r2, [r3, #16]
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	f003 0307 	and.w	r3, r3, #7
 800b9a2:	009b      	lsls	r3, r3, #2
 800b9a4:	fa02 f303 	lsl.w	r3, r2, r3
 800b9a8:	693a      	ldr	r2, [r7, #16]
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	08da      	lsrs	r2, r3, #3
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	3208      	adds	r2, #8
 800b9b6:	6939      	ldr	r1, [r7, #16]
 800b9b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	005b      	lsls	r3, r3, #1
 800b9c6:	2203      	movs	r2, #3
 800b9c8:	fa02 f303 	lsl.w	r3, r2, r3
 800b9cc:	43db      	mvns	r3, r3
 800b9ce:	693a      	ldr	r2, [r7, #16]
 800b9d0:	4013      	ands	r3, r2
 800b9d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	685b      	ldr	r3, [r3, #4]
 800b9d8:	f003 0203 	and.w	r2, r3, #3
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	005b      	lsls	r3, r3, #1
 800b9e0:	fa02 f303 	lsl.w	r3, r2, r3
 800b9e4:	693a      	ldr	r2, [r7, #16]
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	693a      	ldr	r2, [r7, #16]
 800b9ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	f000 80ac 	beq.w	800bb56 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b9fe:	4b5e      	ldr	r3, [pc, #376]	; (800bb78 <HAL_GPIO_Init+0x32c>)
 800ba00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba02:	4a5d      	ldr	r2, [pc, #372]	; (800bb78 <HAL_GPIO_Init+0x32c>)
 800ba04:	f043 0301 	orr.w	r3, r3, #1
 800ba08:	6613      	str	r3, [r2, #96]	; 0x60
 800ba0a:	4b5b      	ldr	r3, [pc, #364]	; (800bb78 <HAL_GPIO_Init+0x32c>)
 800ba0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba0e:	f003 0301 	and.w	r3, r3, #1
 800ba12:	60bb      	str	r3, [r7, #8]
 800ba14:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800ba16:	4a59      	ldr	r2, [pc, #356]	; (800bb7c <HAL_GPIO_Init+0x330>)
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	089b      	lsrs	r3, r3, #2
 800ba1c:	3302      	adds	r3, #2
 800ba1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba22:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	f003 0303 	and.w	r3, r3, #3
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	220f      	movs	r2, #15
 800ba2e:	fa02 f303 	lsl.w	r3, r2, r3
 800ba32:	43db      	mvns	r3, r3
 800ba34:	693a      	ldr	r2, [r7, #16]
 800ba36:	4013      	ands	r3, r2
 800ba38:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800ba40:	d025      	beq.n	800ba8e <HAL_GPIO_Init+0x242>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	4a4e      	ldr	r2, [pc, #312]	; (800bb80 <HAL_GPIO_Init+0x334>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d01f      	beq.n	800ba8a <HAL_GPIO_Init+0x23e>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	4a4d      	ldr	r2, [pc, #308]	; (800bb84 <HAL_GPIO_Init+0x338>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d019      	beq.n	800ba86 <HAL_GPIO_Init+0x23a>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	4a4c      	ldr	r2, [pc, #304]	; (800bb88 <HAL_GPIO_Init+0x33c>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d013      	beq.n	800ba82 <HAL_GPIO_Init+0x236>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	4a4b      	ldr	r2, [pc, #300]	; (800bb8c <HAL_GPIO_Init+0x340>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d00d      	beq.n	800ba7e <HAL_GPIO_Init+0x232>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	4a4a      	ldr	r2, [pc, #296]	; (800bb90 <HAL_GPIO_Init+0x344>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d007      	beq.n	800ba7a <HAL_GPIO_Init+0x22e>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	4a49      	ldr	r2, [pc, #292]	; (800bb94 <HAL_GPIO_Init+0x348>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d101      	bne.n	800ba76 <HAL_GPIO_Init+0x22a>
 800ba72:	2306      	movs	r3, #6
 800ba74:	e00c      	b.n	800ba90 <HAL_GPIO_Init+0x244>
 800ba76:	2307      	movs	r3, #7
 800ba78:	e00a      	b.n	800ba90 <HAL_GPIO_Init+0x244>
 800ba7a:	2305      	movs	r3, #5
 800ba7c:	e008      	b.n	800ba90 <HAL_GPIO_Init+0x244>
 800ba7e:	2304      	movs	r3, #4
 800ba80:	e006      	b.n	800ba90 <HAL_GPIO_Init+0x244>
 800ba82:	2303      	movs	r3, #3
 800ba84:	e004      	b.n	800ba90 <HAL_GPIO_Init+0x244>
 800ba86:	2302      	movs	r3, #2
 800ba88:	e002      	b.n	800ba90 <HAL_GPIO_Init+0x244>
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	e000      	b.n	800ba90 <HAL_GPIO_Init+0x244>
 800ba8e:	2300      	movs	r3, #0
 800ba90:	697a      	ldr	r2, [r7, #20]
 800ba92:	f002 0203 	and.w	r2, r2, #3
 800ba96:	0092      	lsls	r2, r2, #2
 800ba98:	4093      	lsls	r3, r2
 800ba9a:	693a      	ldr	r2, [r7, #16]
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800baa0:	4936      	ldr	r1, [pc, #216]	; (800bb7c <HAL_GPIO_Init+0x330>)
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	089b      	lsrs	r3, r3, #2
 800baa6:	3302      	adds	r3, #2
 800baa8:	693a      	ldr	r2, [r7, #16]
 800baaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800baae:	4b3a      	ldr	r3, [pc, #232]	; (800bb98 <HAL_GPIO_Init+0x34c>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	43db      	mvns	r3, r3
 800bab8:	693a      	ldr	r2, [r7, #16]
 800baba:	4013      	ands	r3, r2
 800babc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d003      	beq.n	800bad2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800baca:	693a      	ldr	r2, [r7, #16]
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	4313      	orrs	r3, r2
 800bad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800bad2:	4a31      	ldr	r2, [pc, #196]	; (800bb98 <HAL_GPIO_Init+0x34c>)
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800bad8:	4b2f      	ldr	r3, [pc, #188]	; (800bb98 <HAL_GPIO_Init+0x34c>)
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	43db      	mvns	r3, r3
 800bae2:	693a      	ldr	r2, [r7, #16]
 800bae4:	4013      	ands	r3, r2
 800bae6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	685b      	ldr	r3, [r3, #4]
 800baec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d003      	beq.n	800bafc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800baf4:	693a      	ldr	r2, [r7, #16]
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	4313      	orrs	r3, r2
 800bafa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800bafc:	4a26      	ldr	r2, [pc, #152]	; (800bb98 <HAL_GPIO_Init+0x34c>)
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800bb02:	4b25      	ldr	r3, [pc, #148]	; (800bb98 <HAL_GPIO_Init+0x34c>)
 800bb04:	689b      	ldr	r3, [r3, #8]
 800bb06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	43db      	mvns	r3, r3
 800bb0c:	693a      	ldr	r2, [r7, #16]
 800bb0e:	4013      	ands	r3, r2
 800bb10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d003      	beq.n	800bb26 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800bb1e:	693a      	ldr	r2, [r7, #16]
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	4313      	orrs	r3, r2
 800bb24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800bb26:	4a1c      	ldr	r2, [pc, #112]	; (800bb98 <HAL_GPIO_Init+0x34c>)
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800bb2c:	4b1a      	ldr	r3, [pc, #104]	; (800bb98 <HAL_GPIO_Init+0x34c>)
 800bb2e:	68db      	ldr	r3, [r3, #12]
 800bb30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	43db      	mvns	r3, r3
 800bb36:	693a      	ldr	r2, [r7, #16]
 800bb38:	4013      	ands	r3, r2
 800bb3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d003      	beq.n	800bb50 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800bb48:	693a      	ldr	r2, [r7, #16]
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800bb50:	4a11      	ldr	r2, [pc, #68]	; (800bb98 <HAL_GPIO_Init+0x34c>)
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	3301      	adds	r3, #1
 800bb5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	681a      	ldr	r2, [r3, #0]
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	fa22 f303 	lsr.w	r3, r2, r3
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	f47f ae78 	bne.w	800b85c <HAL_GPIO_Init+0x10>
  }
}
 800bb6c:	bf00      	nop
 800bb6e:	371c      	adds	r7, #28
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr
 800bb78:	40021000 	.word	0x40021000
 800bb7c:	40010000 	.word	0x40010000
 800bb80:	48000400 	.word	0x48000400
 800bb84:	48000800 	.word	0x48000800
 800bb88:	48000c00 	.word	0x48000c00
 800bb8c:	48001000 	.word	0x48001000
 800bb90:	48001400 	.word	0x48001400
 800bb94:	48001800 	.word	0x48001800
 800bb98:	40010400 	.word	0x40010400

0800bb9c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b087      	sub	sp, #28
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800bba6:	2300      	movs	r3, #0
 800bba8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800bbaa:	e0cd      	b.n	800bd48 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800bbac:	2201      	movs	r2, #1
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	fa02 f303 	lsl.w	r3, r2, r3
 800bbb4:	683a      	ldr	r2, [r7, #0]
 800bbb6:	4013      	ands	r3, r2
 800bbb8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	f000 80c0 	beq.w	800bd42 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800bbc2:	4a68      	ldr	r2, [pc, #416]	; (800bd64 <HAL_GPIO_DeInit+0x1c8>)
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	089b      	lsrs	r3, r3, #2
 800bbc8:	3302      	adds	r3, #2
 800bbca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbce:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	f003 0303 	and.w	r3, r3, #3
 800bbd6:	009b      	lsls	r3, r3, #2
 800bbd8:	220f      	movs	r2, #15
 800bbda:	fa02 f303 	lsl.w	r3, r2, r3
 800bbde:	68fa      	ldr	r2, [r7, #12]
 800bbe0:	4013      	ands	r3, r2
 800bbe2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800bbea:	d025      	beq.n	800bc38 <HAL_GPIO_DeInit+0x9c>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	4a5e      	ldr	r2, [pc, #376]	; (800bd68 <HAL_GPIO_DeInit+0x1cc>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d01f      	beq.n	800bc34 <HAL_GPIO_DeInit+0x98>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	4a5d      	ldr	r2, [pc, #372]	; (800bd6c <HAL_GPIO_DeInit+0x1d0>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d019      	beq.n	800bc30 <HAL_GPIO_DeInit+0x94>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	4a5c      	ldr	r2, [pc, #368]	; (800bd70 <HAL_GPIO_DeInit+0x1d4>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d013      	beq.n	800bc2c <HAL_GPIO_DeInit+0x90>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	4a5b      	ldr	r2, [pc, #364]	; (800bd74 <HAL_GPIO_DeInit+0x1d8>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d00d      	beq.n	800bc28 <HAL_GPIO_DeInit+0x8c>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	4a5a      	ldr	r2, [pc, #360]	; (800bd78 <HAL_GPIO_DeInit+0x1dc>)
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d007      	beq.n	800bc24 <HAL_GPIO_DeInit+0x88>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	4a59      	ldr	r2, [pc, #356]	; (800bd7c <HAL_GPIO_DeInit+0x1e0>)
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d101      	bne.n	800bc20 <HAL_GPIO_DeInit+0x84>
 800bc1c:	2306      	movs	r3, #6
 800bc1e:	e00c      	b.n	800bc3a <HAL_GPIO_DeInit+0x9e>
 800bc20:	2307      	movs	r3, #7
 800bc22:	e00a      	b.n	800bc3a <HAL_GPIO_DeInit+0x9e>
 800bc24:	2305      	movs	r3, #5
 800bc26:	e008      	b.n	800bc3a <HAL_GPIO_DeInit+0x9e>
 800bc28:	2304      	movs	r3, #4
 800bc2a:	e006      	b.n	800bc3a <HAL_GPIO_DeInit+0x9e>
 800bc2c:	2303      	movs	r3, #3
 800bc2e:	e004      	b.n	800bc3a <HAL_GPIO_DeInit+0x9e>
 800bc30:	2302      	movs	r3, #2
 800bc32:	e002      	b.n	800bc3a <HAL_GPIO_DeInit+0x9e>
 800bc34:	2301      	movs	r3, #1
 800bc36:	e000      	b.n	800bc3a <HAL_GPIO_DeInit+0x9e>
 800bc38:	2300      	movs	r3, #0
 800bc3a:	697a      	ldr	r2, [r7, #20]
 800bc3c:	f002 0203 	and.w	r2, r2, #3
 800bc40:	0092      	lsls	r2, r2, #2
 800bc42:	4093      	lsls	r3, r2
 800bc44:	68fa      	ldr	r2, [r7, #12]
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d132      	bne.n	800bcb0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800bc4a:	4b4d      	ldr	r3, [pc, #308]	; (800bd80 <HAL_GPIO_DeInit+0x1e4>)
 800bc4c:	681a      	ldr	r2, [r3, #0]
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	43db      	mvns	r3, r3
 800bc52:	494b      	ldr	r1, [pc, #300]	; (800bd80 <HAL_GPIO_DeInit+0x1e4>)
 800bc54:	4013      	ands	r3, r2
 800bc56:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800bc58:	4b49      	ldr	r3, [pc, #292]	; (800bd80 <HAL_GPIO_DeInit+0x1e4>)
 800bc5a:	685a      	ldr	r2, [r3, #4]
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	43db      	mvns	r3, r3
 800bc60:	4947      	ldr	r1, [pc, #284]	; (800bd80 <HAL_GPIO_DeInit+0x1e4>)
 800bc62:	4013      	ands	r3, r2
 800bc64:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800bc66:	4b46      	ldr	r3, [pc, #280]	; (800bd80 <HAL_GPIO_DeInit+0x1e4>)
 800bc68:	689a      	ldr	r2, [r3, #8]
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	43db      	mvns	r3, r3
 800bc6e:	4944      	ldr	r1, [pc, #272]	; (800bd80 <HAL_GPIO_DeInit+0x1e4>)
 800bc70:	4013      	ands	r3, r2
 800bc72:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800bc74:	4b42      	ldr	r3, [pc, #264]	; (800bd80 <HAL_GPIO_DeInit+0x1e4>)
 800bc76:	68da      	ldr	r2, [r3, #12]
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	43db      	mvns	r3, r3
 800bc7c:	4940      	ldr	r1, [pc, #256]	; (800bd80 <HAL_GPIO_DeInit+0x1e4>)
 800bc7e:	4013      	ands	r3, r2
 800bc80:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	f003 0303 	and.w	r3, r3, #3
 800bc88:	009b      	lsls	r3, r3, #2
 800bc8a:	220f      	movs	r2, #15
 800bc8c:	fa02 f303 	lsl.w	r3, r2, r3
 800bc90:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800bc92:	4a34      	ldr	r2, [pc, #208]	; (800bd64 <HAL_GPIO_DeInit+0x1c8>)
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	089b      	lsrs	r3, r3, #2
 800bc98:	3302      	adds	r3, #2
 800bc9a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	43da      	mvns	r2, r3
 800bca2:	4830      	ldr	r0, [pc, #192]	; (800bd64 <HAL_GPIO_DeInit+0x1c8>)
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	089b      	lsrs	r3, r3, #2
 800bca8:	400a      	ands	r2, r1
 800bcaa:	3302      	adds	r3, #2
 800bcac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681a      	ldr	r2, [r3, #0]
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	005b      	lsls	r3, r3, #1
 800bcb8:	2103      	movs	r1, #3
 800bcba:	fa01 f303 	lsl.w	r3, r1, r3
 800bcbe:	431a      	orrs	r2, r3
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	08da      	lsrs	r2, r3, #3
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	3208      	adds	r2, #8
 800bccc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	f003 0307 	and.w	r3, r3, #7
 800bcd6:	009b      	lsls	r3, r3, #2
 800bcd8:	220f      	movs	r2, #15
 800bcda:	fa02 f303 	lsl.w	r3, r2, r3
 800bcde:	43db      	mvns	r3, r3
 800bce0:	697a      	ldr	r2, [r7, #20]
 800bce2:	08d2      	lsrs	r2, r2, #3
 800bce4:	4019      	ands	r1, r3
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	3208      	adds	r2, #8
 800bcea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	689a      	ldr	r2, [r3, #8]
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	005b      	lsls	r3, r3, #1
 800bcf6:	2103      	movs	r1, #3
 800bcf8:	fa01 f303 	lsl.w	r3, r1, r3
 800bcfc:	43db      	mvns	r3, r3
 800bcfe:	401a      	ands	r2, r3
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	685a      	ldr	r2, [r3, #4]
 800bd08:	2101      	movs	r1, #1
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	fa01 f303 	lsl.w	r3, r1, r3
 800bd10:	43db      	mvns	r3, r3
 800bd12:	401a      	ands	r2, r3
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	68da      	ldr	r2, [r3, #12]
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	005b      	lsls	r3, r3, #1
 800bd20:	2103      	movs	r1, #3
 800bd22:	fa01 f303 	lsl.w	r3, r1, r3
 800bd26:	43db      	mvns	r3, r3
 800bd28:	401a      	ands	r2, r3
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd32:	2101      	movs	r1, #1
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	fa01 f303 	lsl.w	r3, r1, r3
 800bd3a:	43db      	mvns	r3, r3
 800bd3c:	401a      	ands	r2, r3
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	3301      	adds	r3, #1
 800bd46:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800bd48:	683a      	ldr	r2, [r7, #0]
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	fa22 f303 	lsr.w	r3, r2, r3
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	f47f af2b 	bne.w	800bbac <HAL_GPIO_DeInit+0x10>
  }
}
 800bd56:	bf00      	nop
 800bd58:	371c      	adds	r7, #28
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd60:	4770      	bx	lr
 800bd62:	bf00      	nop
 800bd64:	40010000 	.word	0x40010000
 800bd68:	48000400 	.word	0x48000400
 800bd6c:	48000800 	.word	0x48000800
 800bd70:	48000c00 	.word	0x48000c00
 800bd74:	48001000 	.word	0x48001000
 800bd78:	48001400 	.word	0x48001400
 800bd7c:	48001800 	.word	0x48001800
 800bd80:	40010400 	.word	0x40010400

0800bd84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b085      	sub	sp, #20
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	691a      	ldr	r2, [r3, #16]
 800bd94:	887b      	ldrh	r3, [r7, #2]
 800bd96:	4013      	ands	r3, r2
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d002      	beq.n	800bda2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	73fb      	strb	r3, [r7, #15]
 800bda0:	e001      	b.n	800bda6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800bda2:	2300      	movs	r3, #0
 800bda4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800bda6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3714      	adds	r7, #20
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr

0800bdb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b083      	sub	sp, #12
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	460b      	mov	r3, r1
 800bdbe:	807b      	strh	r3, [r7, #2]
 800bdc0:	4613      	mov	r3, r2
 800bdc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800bdc4:	787b      	ldrb	r3, [r7, #1]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d003      	beq.n	800bdd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800bdca:	887a      	ldrh	r2, [r7, #2]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800bdd0:	e002      	b.n	800bdd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800bdd2:	887a      	ldrh	r2, [r7, #2]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 800bdd8:	bf00      	nop
 800bdda:	370c      	adds	r7, #12
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr

0800bde4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800bde4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bde6:	b08f      	sub	sp, #60	; 0x3c
 800bde8:	af0a      	add	r7, sp, #40	; 0x28
 800bdea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d101      	bne.n	800bdf6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	e054      	b.n	800bea0 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800be02:	b2db      	uxtb	r3, r3
 800be04:	2b00      	cmp	r3, #0
 800be06:	d106      	bne.n	800be16 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2200      	movs	r2, #0
 800be0c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f010 fba7 	bl	801c564 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2203      	movs	r2, #3
 800be1a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be26:	2b00      	cmp	r3, #0
 800be28:	d102      	bne.n	800be30 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2200      	movs	r2, #0
 800be2e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	4618      	mov	r0, r3
 800be36:	f006 fa94 	bl	8012362 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	603b      	str	r3, [r7, #0]
 800be40:	687e      	ldr	r6, [r7, #4]
 800be42:	466d      	mov	r5, sp
 800be44:	f106 0410 	add.w	r4, r6, #16
 800be48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800be4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800be4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800be4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800be50:	e894 0003 	ldmia.w	r4, {r0, r1}
 800be54:	e885 0003 	stmia.w	r5, {r0, r1}
 800be58:	1d33      	adds	r3, r6, #4
 800be5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800be5c:	6838      	ldr	r0, [r7, #0]
 800be5e:	f006 fa1d 	bl	801229c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	2101      	movs	r1, #1
 800be68:	4618      	mov	r0, r3
 800be6a:	f006 fa8b 	bl	8012384 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	603b      	str	r3, [r7, #0]
 800be74:	687e      	ldr	r6, [r7, #4]
 800be76:	466d      	mov	r5, sp
 800be78:	f106 0410 	add.w	r4, r6, #16
 800be7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800be7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800be80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800be82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800be84:	e894 0003 	ldmia.w	r4, {r0, r1}
 800be88:	e885 0003 	stmia.w	r5, {r0, r1}
 800be8c:	1d33      	adds	r3, r6, #4
 800be8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800be90:	6838      	ldr	r0, [r7, #0]
 800be92:	f006 fb99 	bl	80125c8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2201      	movs	r2, #1
 800be9a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800be9e:	2300      	movs	r3, #0
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3714      	adds	r7, #20
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bea8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800bea8:	b590      	push	{r4, r7, lr}
 800beaa:	b089      	sub	sp, #36	; 0x24
 800beac:	af04      	add	r7, sp, #16
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	4608      	mov	r0, r1
 800beb2:	4611      	mov	r1, r2
 800beb4:	461a      	mov	r2, r3
 800beb6:	4603      	mov	r3, r0
 800beb8:	70fb      	strb	r3, [r7, #3]
 800beba:	460b      	mov	r3, r1
 800bebc:	70bb      	strb	r3, [r7, #2]
 800bebe:	4613      	mov	r3, r2
 800bec0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d101      	bne.n	800bed0 <HAL_HCD_HC_Init+0x28>
 800becc:	2302      	movs	r3, #2
 800bece:	e07f      	b.n	800bfd0 <HAL_HCD_HC_Init+0x128>
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2201      	movs	r2, #1
 800bed4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800bed8:	78fa      	ldrb	r2, [r7, #3]
 800beda:	6879      	ldr	r1, [r7, #4]
 800bedc:	4613      	mov	r3, r2
 800bede:	009b      	lsls	r3, r3, #2
 800bee0:	4413      	add	r3, r2
 800bee2:	00db      	lsls	r3, r3, #3
 800bee4:	440b      	add	r3, r1
 800bee6:	333d      	adds	r3, #61	; 0x3d
 800bee8:	2200      	movs	r2, #0
 800beea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800beec:	78fa      	ldrb	r2, [r7, #3]
 800beee:	6879      	ldr	r1, [r7, #4]
 800bef0:	4613      	mov	r3, r2
 800bef2:	009b      	lsls	r3, r3, #2
 800bef4:	4413      	add	r3, r2
 800bef6:	00db      	lsls	r3, r3, #3
 800bef8:	440b      	add	r3, r1
 800befa:	3338      	adds	r3, #56	; 0x38
 800befc:	787a      	ldrb	r2, [r7, #1]
 800befe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800bf00:	78fa      	ldrb	r2, [r7, #3]
 800bf02:	6879      	ldr	r1, [r7, #4]
 800bf04:	4613      	mov	r3, r2
 800bf06:	009b      	lsls	r3, r3, #2
 800bf08:	4413      	add	r3, r2
 800bf0a:	00db      	lsls	r3, r3, #3
 800bf0c:	440b      	add	r3, r1
 800bf0e:	3340      	adds	r3, #64	; 0x40
 800bf10:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800bf12:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800bf14:	78fa      	ldrb	r2, [r7, #3]
 800bf16:	6879      	ldr	r1, [r7, #4]
 800bf18:	4613      	mov	r3, r2
 800bf1a:	009b      	lsls	r3, r3, #2
 800bf1c:	4413      	add	r3, r2
 800bf1e:	00db      	lsls	r3, r3, #3
 800bf20:	440b      	add	r3, r1
 800bf22:	3339      	adds	r3, #57	; 0x39
 800bf24:	78fa      	ldrb	r2, [r7, #3]
 800bf26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800bf28:	78fa      	ldrb	r2, [r7, #3]
 800bf2a:	6879      	ldr	r1, [r7, #4]
 800bf2c:	4613      	mov	r3, r2
 800bf2e:	009b      	lsls	r3, r3, #2
 800bf30:	4413      	add	r3, r2
 800bf32:	00db      	lsls	r3, r3, #3
 800bf34:	440b      	add	r3, r1
 800bf36:	333f      	adds	r3, #63	; 0x3f
 800bf38:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800bf3c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800bf3e:	78fa      	ldrb	r2, [r7, #3]
 800bf40:	78bb      	ldrb	r3, [r7, #2]
 800bf42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf46:	b2d8      	uxtb	r0, r3
 800bf48:	6879      	ldr	r1, [r7, #4]
 800bf4a:	4613      	mov	r3, r2
 800bf4c:	009b      	lsls	r3, r3, #2
 800bf4e:	4413      	add	r3, r2
 800bf50:	00db      	lsls	r3, r3, #3
 800bf52:	440b      	add	r3, r1
 800bf54:	333a      	adds	r3, #58	; 0x3a
 800bf56:	4602      	mov	r2, r0
 800bf58:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800bf5a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	da0a      	bge.n	800bf78 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800bf62:	78fa      	ldrb	r2, [r7, #3]
 800bf64:	6879      	ldr	r1, [r7, #4]
 800bf66:	4613      	mov	r3, r2
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	4413      	add	r3, r2
 800bf6c:	00db      	lsls	r3, r3, #3
 800bf6e:	440b      	add	r3, r1
 800bf70:	333b      	adds	r3, #59	; 0x3b
 800bf72:	2201      	movs	r2, #1
 800bf74:	701a      	strb	r2, [r3, #0]
 800bf76:	e009      	b.n	800bf8c <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800bf78:	78fa      	ldrb	r2, [r7, #3]
 800bf7a:	6879      	ldr	r1, [r7, #4]
 800bf7c:	4613      	mov	r3, r2
 800bf7e:	009b      	lsls	r3, r3, #2
 800bf80:	4413      	add	r3, r2
 800bf82:	00db      	lsls	r3, r3, #3
 800bf84:	440b      	add	r3, r1
 800bf86:	333b      	adds	r3, #59	; 0x3b
 800bf88:	2200      	movs	r2, #0
 800bf8a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800bf8c:	78fa      	ldrb	r2, [r7, #3]
 800bf8e:	6879      	ldr	r1, [r7, #4]
 800bf90:	4613      	mov	r3, r2
 800bf92:	009b      	lsls	r3, r3, #2
 800bf94:	4413      	add	r3, r2
 800bf96:	00db      	lsls	r3, r3, #3
 800bf98:	440b      	add	r3, r1
 800bf9a:	333c      	adds	r3, #60	; 0x3c
 800bf9c:	f897 2020 	ldrb.w	r2, [r7, #32]
 800bfa0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6818      	ldr	r0, [r3, #0]
 800bfa6:	787c      	ldrb	r4, [r7, #1]
 800bfa8:	78ba      	ldrb	r2, [r7, #2]
 800bfaa:	78f9      	ldrb	r1, [r7, #3]
 800bfac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bfae:	9302      	str	r3, [sp, #8]
 800bfb0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bfb4:	9301      	str	r3, [sp, #4]
 800bfb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bfba:	9300      	str	r3, [sp, #0]
 800bfbc:	4623      	mov	r3, r4
 800bfbe:	f006 fc47 	bl	8012850 <USB_HC_Init>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800bfce:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3714      	adds	r7, #20
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd90      	pop	{r4, r7, pc}

0800bfd8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	460b      	mov	r3, r1
 800bfe2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800bfee:	2b01      	cmp	r3, #1
 800bff0:	d101      	bne.n	800bff6 <HAL_HCD_HC_Halt+0x1e>
 800bff2:	2302      	movs	r3, #2
 800bff4:	e00f      	b.n	800c016 <HAL_HCD_HC_Halt+0x3e>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2201      	movs	r2, #1
 800bffa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	78fa      	ldrb	r2, [r7, #3]
 800c004:	4611      	mov	r1, r2
 800c006:	4618      	mov	r0, r3
 800c008:	f006 fe25 	bl	8012c56 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2200      	movs	r2, #0
 800c010:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800c014:	7bfb      	ldrb	r3, [r7, #15]
}
 800c016:	4618      	mov	r0, r3
 800c018:	3710      	adds	r7, #16
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
	...

0800c020 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	4608      	mov	r0, r1
 800c02a:	4611      	mov	r1, r2
 800c02c:	461a      	mov	r2, r3
 800c02e:	4603      	mov	r3, r0
 800c030:	70fb      	strb	r3, [r7, #3]
 800c032:	460b      	mov	r3, r1
 800c034:	70bb      	strb	r3, [r7, #2]
 800c036:	4613      	mov	r3, r2
 800c038:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800c03a:	78fa      	ldrb	r2, [r7, #3]
 800c03c:	6879      	ldr	r1, [r7, #4]
 800c03e:	4613      	mov	r3, r2
 800c040:	009b      	lsls	r3, r3, #2
 800c042:	4413      	add	r3, r2
 800c044:	00db      	lsls	r3, r3, #3
 800c046:	440b      	add	r3, r1
 800c048:	333b      	adds	r3, #59	; 0x3b
 800c04a:	78ba      	ldrb	r2, [r7, #2]
 800c04c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800c04e:	78fa      	ldrb	r2, [r7, #3]
 800c050:	6879      	ldr	r1, [r7, #4]
 800c052:	4613      	mov	r3, r2
 800c054:	009b      	lsls	r3, r3, #2
 800c056:	4413      	add	r3, r2
 800c058:	00db      	lsls	r3, r3, #3
 800c05a:	440b      	add	r3, r1
 800c05c:	333f      	adds	r3, #63	; 0x3f
 800c05e:	787a      	ldrb	r2, [r7, #1]
 800c060:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800c062:	7c3b      	ldrb	r3, [r7, #16]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d114      	bne.n	800c092 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800c068:	78fa      	ldrb	r2, [r7, #3]
 800c06a:	6879      	ldr	r1, [r7, #4]
 800c06c:	4613      	mov	r3, r2
 800c06e:	009b      	lsls	r3, r3, #2
 800c070:	4413      	add	r3, r2
 800c072:	00db      	lsls	r3, r3, #3
 800c074:	440b      	add	r3, r1
 800c076:	3342      	adds	r3, #66	; 0x42
 800c078:	2203      	movs	r2, #3
 800c07a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800c07c:	78fa      	ldrb	r2, [r7, #3]
 800c07e:	6879      	ldr	r1, [r7, #4]
 800c080:	4613      	mov	r3, r2
 800c082:	009b      	lsls	r3, r3, #2
 800c084:	4413      	add	r3, r2
 800c086:	00db      	lsls	r3, r3, #3
 800c088:	440b      	add	r3, r1
 800c08a:	333d      	adds	r3, #61	; 0x3d
 800c08c:	7f3a      	ldrb	r2, [r7, #28]
 800c08e:	701a      	strb	r2, [r3, #0]
 800c090:	e009      	b.n	800c0a6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800c092:	78fa      	ldrb	r2, [r7, #3]
 800c094:	6879      	ldr	r1, [r7, #4]
 800c096:	4613      	mov	r3, r2
 800c098:	009b      	lsls	r3, r3, #2
 800c09a:	4413      	add	r3, r2
 800c09c:	00db      	lsls	r3, r3, #3
 800c09e:	440b      	add	r3, r1
 800c0a0:	3342      	adds	r3, #66	; 0x42
 800c0a2:	2202      	movs	r2, #2
 800c0a4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800c0a6:	787b      	ldrb	r3, [r7, #1]
 800c0a8:	2b03      	cmp	r3, #3
 800c0aa:	f200 80d6 	bhi.w	800c25a <HAL_HCD_HC_SubmitRequest+0x23a>
 800c0ae:	a201      	add	r2, pc, #4	; (adr r2, 800c0b4 <HAL_HCD_HC_SubmitRequest+0x94>)
 800c0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0b4:	0800c0c5 	.word	0x0800c0c5
 800c0b8:	0800c245 	.word	0x0800c245
 800c0bc:	0800c131 	.word	0x0800c131
 800c0c0:	0800c1bb 	.word	0x0800c1bb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800c0c4:	7c3b      	ldrb	r3, [r7, #16]
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	f040 80c9 	bne.w	800c25e <HAL_HCD_HC_SubmitRequest+0x23e>
 800c0cc:	78bb      	ldrb	r3, [r7, #2]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	f040 80c5 	bne.w	800c25e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 800c0d4:	8b3b      	ldrh	r3, [r7, #24]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d109      	bne.n	800c0ee <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800c0da:	78fa      	ldrb	r2, [r7, #3]
 800c0dc:	6879      	ldr	r1, [r7, #4]
 800c0de:	4613      	mov	r3, r2
 800c0e0:	009b      	lsls	r3, r3, #2
 800c0e2:	4413      	add	r3, r2
 800c0e4:	00db      	lsls	r3, r3, #3
 800c0e6:	440b      	add	r3, r1
 800c0e8:	3351      	adds	r3, #81	; 0x51
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800c0ee:	78fa      	ldrb	r2, [r7, #3]
 800c0f0:	6879      	ldr	r1, [r7, #4]
 800c0f2:	4613      	mov	r3, r2
 800c0f4:	009b      	lsls	r3, r3, #2
 800c0f6:	4413      	add	r3, r2
 800c0f8:	00db      	lsls	r3, r3, #3
 800c0fa:	440b      	add	r3, r1
 800c0fc:	3351      	adds	r3, #81	; 0x51
 800c0fe:	781b      	ldrb	r3, [r3, #0]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d10a      	bne.n	800c11a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800c104:	78fa      	ldrb	r2, [r7, #3]
 800c106:	6879      	ldr	r1, [r7, #4]
 800c108:	4613      	mov	r3, r2
 800c10a:	009b      	lsls	r3, r3, #2
 800c10c:	4413      	add	r3, r2
 800c10e:	00db      	lsls	r3, r3, #3
 800c110:	440b      	add	r3, r1
 800c112:	3342      	adds	r3, #66	; 0x42
 800c114:	2200      	movs	r2, #0
 800c116:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800c118:	e0a1      	b.n	800c25e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800c11a:	78fa      	ldrb	r2, [r7, #3]
 800c11c:	6879      	ldr	r1, [r7, #4]
 800c11e:	4613      	mov	r3, r2
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	4413      	add	r3, r2
 800c124:	00db      	lsls	r3, r3, #3
 800c126:	440b      	add	r3, r1
 800c128:	3342      	adds	r3, #66	; 0x42
 800c12a:	2202      	movs	r2, #2
 800c12c:	701a      	strb	r2, [r3, #0]
      break;
 800c12e:	e096      	b.n	800c25e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800c130:	78bb      	ldrb	r3, [r7, #2]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d120      	bne.n	800c178 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800c136:	78fa      	ldrb	r2, [r7, #3]
 800c138:	6879      	ldr	r1, [r7, #4]
 800c13a:	4613      	mov	r3, r2
 800c13c:	009b      	lsls	r3, r3, #2
 800c13e:	4413      	add	r3, r2
 800c140:	00db      	lsls	r3, r3, #3
 800c142:	440b      	add	r3, r1
 800c144:	3351      	adds	r3, #81	; 0x51
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d10a      	bne.n	800c162 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800c14c:	78fa      	ldrb	r2, [r7, #3]
 800c14e:	6879      	ldr	r1, [r7, #4]
 800c150:	4613      	mov	r3, r2
 800c152:	009b      	lsls	r3, r3, #2
 800c154:	4413      	add	r3, r2
 800c156:	00db      	lsls	r3, r3, #3
 800c158:	440b      	add	r3, r1
 800c15a:	3342      	adds	r3, #66	; 0x42
 800c15c:	2200      	movs	r2, #0
 800c15e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800c160:	e07e      	b.n	800c260 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800c162:	78fa      	ldrb	r2, [r7, #3]
 800c164:	6879      	ldr	r1, [r7, #4]
 800c166:	4613      	mov	r3, r2
 800c168:	009b      	lsls	r3, r3, #2
 800c16a:	4413      	add	r3, r2
 800c16c:	00db      	lsls	r3, r3, #3
 800c16e:	440b      	add	r3, r1
 800c170:	3342      	adds	r3, #66	; 0x42
 800c172:	2202      	movs	r2, #2
 800c174:	701a      	strb	r2, [r3, #0]
      break;
 800c176:	e073      	b.n	800c260 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800c178:	78fa      	ldrb	r2, [r7, #3]
 800c17a:	6879      	ldr	r1, [r7, #4]
 800c17c:	4613      	mov	r3, r2
 800c17e:	009b      	lsls	r3, r3, #2
 800c180:	4413      	add	r3, r2
 800c182:	00db      	lsls	r3, r3, #3
 800c184:	440b      	add	r3, r1
 800c186:	3350      	adds	r3, #80	; 0x50
 800c188:	781b      	ldrb	r3, [r3, #0]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d10a      	bne.n	800c1a4 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800c18e:	78fa      	ldrb	r2, [r7, #3]
 800c190:	6879      	ldr	r1, [r7, #4]
 800c192:	4613      	mov	r3, r2
 800c194:	009b      	lsls	r3, r3, #2
 800c196:	4413      	add	r3, r2
 800c198:	00db      	lsls	r3, r3, #3
 800c19a:	440b      	add	r3, r1
 800c19c:	3342      	adds	r3, #66	; 0x42
 800c19e:	2200      	movs	r2, #0
 800c1a0:	701a      	strb	r2, [r3, #0]
      break;
 800c1a2:	e05d      	b.n	800c260 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800c1a4:	78fa      	ldrb	r2, [r7, #3]
 800c1a6:	6879      	ldr	r1, [r7, #4]
 800c1a8:	4613      	mov	r3, r2
 800c1aa:	009b      	lsls	r3, r3, #2
 800c1ac:	4413      	add	r3, r2
 800c1ae:	00db      	lsls	r3, r3, #3
 800c1b0:	440b      	add	r3, r1
 800c1b2:	3342      	adds	r3, #66	; 0x42
 800c1b4:	2202      	movs	r2, #2
 800c1b6:	701a      	strb	r2, [r3, #0]
      break;
 800c1b8:	e052      	b.n	800c260 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800c1ba:	78bb      	ldrb	r3, [r7, #2]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d120      	bne.n	800c202 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800c1c0:	78fa      	ldrb	r2, [r7, #3]
 800c1c2:	6879      	ldr	r1, [r7, #4]
 800c1c4:	4613      	mov	r3, r2
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	4413      	add	r3, r2
 800c1ca:	00db      	lsls	r3, r3, #3
 800c1cc:	440b      	add	r3, r1
 800c1ce:	3351      	adds	r3, #81	; 0x51
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d10a      	bne.n	800c1ec <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800c1d6:	78fa      	ldrb	r2, [r7, #3]
 800c1d8:	6879      	ldr	r1, [r7, #4]
 800c1da:	4613      	mov	r3, r2
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	4413      	add	r3, r2
 800c1e0:	00db      	lsls	r3, r3, #3
 800c1e2:	440b      	add	r3, r1
 800c1e4:	3342      	adds	r3, #66	; 0x42
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800c1ea:	e039      	b.n	800c260 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800c1ec:	78fa      	ldrb	r2, [r7, #3]
 800c1ee:	6879      	ldr	r1, [r7, #4]
 800c1f0:	4613      	mov	r3, r2
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	4413      	add	r3, r2
 800c1f6:	00db      	lsls	r3, r3, #3
 800c1f8:	440b      	add	r3, r1
 800c1fa:	3342      	adds	r3, #66	; 0x42
 800c1fc:	2202      	movs	r2, #2
 800c1fe:	701a      	strb	r2, [r3, #0]
      break;
 800c200:	e02e      	b.n	800c260 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800c202:	78fa      	ldrb	r2, [r7, #3]
 800c204:	6879      	ldr	r1, [r7, #4]
 800c206:	4613      	mov	r3, r2
 800c208:	009b      	lsls	r3, r3, #2
 800c20a:	4413      	add	r3, r2
 800c20c:	00db      	lsls	r3, r3, #3
 800c20e:	440b      	add	r3, r1
 800c210:	3350      	adds	r3, #80	; 0x50
 800c212:	781b      	ldrb	r3, [r3, #0]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d10a      	bne.n	800c22e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800c218:	78fa      	ldrb	r2, [r7, #3]
 800c21a:	6879      	ldr	r1, [r7, #4]
 800c21c:	4613      	mov	r3, r2
 800c21e:	009b      	lsls	r3, r3, #2
 800c220:	4413      	add	r3, r2
 800c222:	00db      	lsls	r3, r3, #3
 800c224:	440b      	add	r3, r1
 800c226:	3342      	adds	r3, #66	; 0x42
 800c228:	2200      	movs	r2, #0
 800c22a:	701a      	strb	r2, [r3, #0]
      break;
 800c22c:	e018      	b.n	800c260 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800c22e:	78fa      	ldrb	r2, [r7, #3]
 800c230:	6879      	ldr	r1, [r7, #4]
 800c232:	4613      	mov	r3, r2
 800c234:	009b      	lsls	r3, r3, #2
 800c236:	4413      	add	r3, r2
 800c238:	00db      	lsls	r3, r3, #3
 800c23a:	440b      	add	r3, r1
 800c23c:	3342      	adds	r3, #66	; 0x42
 800c23e:	2202      	movs	r2, #2
 800c240:	701a      	strb	r2, [r3, #0]
      break;
 800c242:	e00d      	b.n	800c260 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800c244:	78fa      	ldrb	r2, [r7, #3]
 800c246:	6879      	ldr	r1, [r7, #4]
 800c248:	4613      	mov	r3, r2
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	4413      	add	r3, r2
 800c24e:	00db      	lsls	r3, r3, #3
 800c250:	440b      	add	r3, r1
 800c252:	3342      	adds	r3, #66	; 0x42
 800c254:	2200      	movs	r2, #0
 800c256:	701a      	strb	r2, [r3, #0]
      break;
 800c258:	e002      	b.n	800c260 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800c25a:	bf00      	nop
 800c25c:	e000      	b.n	800c260 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800c25e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800c260:	78fa      	ldrb	r2, [r7, #3]
 800c262:	6879      	ldr	r1, [r7, #4]
 800c264:	4613      	mov	r3, r2
 800c266:	009b      	lsls	r3, r3, #2
 800c268:	4413      	add	r3, r2
 800c26a:	00db      	lsls	r3, r3, #3
 800c26c:	440b      	add	r3, r1
 800c26e:	3344      	adds	r3, #68	; 0x44
 800c270:	697a      	ldr	r2, [r7, #20]
 800c272:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800c274:	78fa      	ldrb	r2, [r7, #3]
 800c276:	8b39      	ldrh	r1, [r7, #24]
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	4613      	mov	r3, r2
 800c27c:	009b      	lsls	r3, r3, #2
 800c27e:	4413      	add	r3, r2
 800c280:	00db      	lsls	r3, r3, #3
 800c282:	4403      	add	r3, r0
 800c284:	3348      	adds	r3, #72	; 0x48
 800c286:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800c288:	78fa      	ldrb	r2, [r7, #3]
 800c28a:	6879      	ldr	r1, [r7, #4]
 800c28c:	4613      	mov	r3, r2
 800c28e:	009b      	lsls	r3, r3, #2
 800c290:	4413      	add	r3, r2
 800c292:	00db      	lsls	r3, r3, #3
 800c294:	440b      	add	r3, r1
 800c296:	335c      	adds	r3, #92	; 0x5c
 800c298:	2200      	movs	r2, #0
 800c29a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800c29c:	78fa      	ldrb	r2, [r7, #3]
 800c29e:	6879      	ldr	r1, [r7, #4]
 800c2a0:	4613      	mov	r3, r2
 800c2a2:	009b      	lsls	r3, r3, #2
 800c2a4:	4413      	add	r3, r2
 800c2a6:	00db      	lsls	r3, r3, #3
 800c2a8:	440b      	add	r3, r1
 800c2aa:	334c      	adds	r3, #76	; 0x4c
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800c2b0:	78fa      	ldrb	r2, [r7, #3]
 800c2b2:	6879      	ldr	r1, [r7, #4]
 800c2b4:	4613      	mov	r3, r2
 800c2b6:	009b      	lsls	r3, r3, #2
 800c2b8:	4413      	add	r3, r2
 800c2ba:	00db      	lsls	r3, r3, #3
 800c2bc:	440b      	add	r3, r1
 800c2be:	3339      	adds	r3, #57	; 0x39
 800c2c0:	78fa      	ldrb	r2, [r7, #3]
 800c2c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800c2c4:	78fa      	ldrb	r2, [r7, #3]
 800c2c6:	6879      	ldr	r1, [r7, #4]
 800c2c8:	4613      	mov	r3, r2
 800c2ca:	009b      	lsls	r3, r3, #2
 800c2cc:	4413      	add	r3, r2
 800c2ce:	00db      	lsls	r3, r3, #3
 800c2d0:	440b      	add	r3, r1
 800c2d2:	335d      	adds	r3, #93	; 0x5d
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6818      	ldr	r0, [r3, #0]
 800c2dc:	78fa      	ldrb	r2, [r7, #3]
 800c2de:	4613      	mov	r3, r2
 800c2e0:	009b      	lsls	r3, r3, #2
 800c2e2:	4413      	add	r3, r2
 800c2e4:	00db      	lsls	r3, r3, #3
 800c2e6:	3338      	adds	r3, #56	; 0x38
 800c2e8:	687a      	ldr	r2, [r7, #4]
 800c2ea:	4413      	add	r3, r2
 800c2ec:	4619      	mov	r1, r3
 800c2ee:	f006 fba1 	bl	8012a34 <USB_HC_StartXfer>
 800c2f2:	4603      	mov	r3, r0
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3708      	adds	r7, #8
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b086      	sub	sp, #24
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	4618      	mov	r0, r3
 800c314:	f006 f915 	bl	8012542 <USB_GetMode>
 800c318:	4603      	mov	r3, r0
 800c31a:	2b01      	cmp	r3, #1
 800c31c:	f040 80ef 	bne.w	800c4fe <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4618      	mov	r0, r3
 800c326:	f006 f8f9 	bl	801251c <USB_ReadInterrupts>
 800c32a:	4603      	mov	r3, r0
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	f000 80e5 	beq.w	800c4fc <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	4618      	mov	r0, r3
 800c338:	f006 f8f0 	bl	801251c <USB_ReadInterrupts>
 800c33c:	4603      	mov	r3, r0
 800c33e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c342:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c346:	d104      	bne.n	800c352 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c350:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	4618      	mov	r0, r3
 800c358:	f006 f8e0 	bl	801251c <USB_ReadInterrupts>
 800c35c:	4603      	mov	r3, r0
 800c35e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c362:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c366:	d104      	bne.n	800c372 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c370:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4618      	mov	r0, r3
 800c378:	f006 f8d0 	bl	801251c <USB_ReadInterrupts>
 800c37c:	4603      	mov	r3, r0
 800c37e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c382:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c386:	d104      	bne.n	800c392 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800c390:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	4618      	mov	r0, r3
 800c398:	f006 f8c0 	bl	801251c <USB_ReadInterrupts>
 800c39c:	4603      	mov	r3, r0
 800c39e:	f003 0302 	and.w	r3, r3, #2
 800c3a2:	2b02      	cmp	r3, #2
 800c3a4:	d103      	bne.n	800c3ae <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	2202      	movs	r2, #2
 800c3ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f006 f8b2 	bl	801251c <USB_ReadInterrupts>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3c2:	d115      	bne.n	800c3f0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800c3cc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f003 0301 	and.w	r3, r3, #1
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d108      	bne.n	800c3f0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f010 f942 	bl	801c668 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	2101      	movs	r1, #1
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f006 f96a 	bl	80126c4 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f006 f891 	bl	801251c <USB_ReadInterrupts>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c404:	d102      	bne.n	800c40c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f001 f922 	bl	800d650 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4618      	mov	r0, r3
 800c412:	f006 f883 	bl	801251c <USB_ReadInterrupts>
 800c416:	4603      	mov	r3, r0
 800c418:	f003 0308 	and.w	r3, r3, #8
 800c41c:	2b08      	cmp	r3, #8
 800c41e:	d106      	bne.n	800c42e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f010 f905 	bl	801c630 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	2208      	movs	r2, #8
 800c42c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	4618      	mov	r0, r3
 800c434:	f006 f872 	bl	801251c <USB_ReadInterrupts>
 800c438:	4603      	mov	r3, r0
 800c43a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c43e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c442:	d138      	bne.n	800c4b6 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	4618      	mov	r0, r3
 800c44a:	f006 fbf3 	bl	8012c34 <USB_HC_ReadInterrupt>
 800c44e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800c450:	2300      	movs	r3, #0
 800c452:	617b      	str	r3, [r7, #20]
 800c454:	e025      	b.n	800c4a2 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	f003 030f 	and.w	r3, r3, #15
 800c45c:	68ba      	ldr	r2, [r7, #8]
 800c45e:	fa22 f303 	lsr.w	r3, r2, r3
 800c462:	f003 0301 	and.w	r3, r3, #1
 800c466:	2b00      	cmp	r3, #0
 800c468:	d018      	beq.n	800c49c <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	015a      	lsls	r2, r3, #5
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	4413      	add	r3, r2
 800c472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c47c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c480:	d106      	bne.n	800c490 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	b2db      	uxtb	r3, r3
 800c486:	4619      	mov	r1, r3
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f000 f8cf 	bl	800c62c <HCD_HC_IN_IRQHandler>
 800c48e:	e005      	b.n	800c49c <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800c490:	697b      	ldr	r3, [r7, #20]
 800c492:	b2db      	uxtb	r3, r3
 800c494:	4619      	mov	r1, r3
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 fcd9 	bl	800ce4e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	3301      	adds	r3, #1
 800c4a0:	617b      	str	r3, [r7, #20]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	689b      	ldr	r3, [r3, #8]
 800c4a6:	697a      	ldr	r2, [r7, #20]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d3d4      	bcc.n	800c456 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800c4b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f006 f82e 	bl	801251c <USB_ReadInterrupts>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	f003 0310 	and.w	r3, r3, #16
 800c4c6:	2b10      	cmp	r3, #16
 800c4c8:	d101      	bne.n	800c4ce <HAL_HCD_IRQHandler+0x1d2>
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	e000      	b.n	800c4d0 <HAL_HCD_IRQHandler+0x1d4>
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d014      	beq.n	800c4fe <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	699a      	ldr	r2, [r3, #24]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f022 0210 	bic.w	r2, r2, #16
 800c4e2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f001 f807 	bl	800d4f8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	699a      	ldr	r2, [r3, #24]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f042 0210 	orr.w	r2, r2, #16
 800c4f8:	619a      	str	r2, [r3, #24]
 800c4fa:	e000      	b.n	800c4fe <HAL_HCD_IRQHandler+0x202>
      return;
 800c4fc:	bf00      	nop
    }
  }
}
 800c4fe:	3718      	adds	r7, #24
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b082      	sub	sp, #8
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800c512:	2b01      	cmp	r3, #1
 800c514:	d101      	bne.n	800c51a <HAL_HCD_Start+0x16>
 800c516:	2302      	movs	r3, #2
 800c518:	e013      	b.n	800c542 <HAL_HCD_Start+0x3e>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2201      	movs	r2, #1
 800c51e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	4618      	mov	r0, r3
 800c528:	f005 ff0a 	bl	8012340 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	2101      	movs	r1, #1
 800c532:	4618      	mov	r0, r3
 800c534:	f006 f92a 	bl	801278c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2200      	movs	r2, #0
 800c53c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800c540:	2300      	movs	r3, #0
}
 800c542:	4618      	mov	r0, r3
 800c544:	3708      	adds	r7, #8
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}

0800c54a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800c54a:	b580      	push	{r7, lr}
 800c54c:	b082      	sub	sp, #8
 800c54e:	af00      	add	r7, sp, #0
 800c550:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d101      	bne.n	800c560 <HAL_HCD_Stop+0x16>
 800c55c:	2302      	movs	r3, #2
 800c55e:	e00d      	b.n	800c57c <HAL_HCD_Stop+0x32>
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2201      	movs	r2, #1
 800c564:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	4618      	mov	r0, r3
 800c56e:	f006 fc71 	bl	8012e54 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2200      	movs	r2, #0
 800c576:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800c57a:	2300      	movs	r3, #0
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3708      	adds	r7, #8
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}

0800c584 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b082      	sub	sp, #8
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4618      	mov	r0, r3
 800c592:	f006 f8d1 	bl	8012738 <USB_ResetPort>
 800c596:	4603      	mov	r3, r0
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3708      	adds	r7, #8
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b083      	sub	sp, #12
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
 800c5a8:	460b      	mov	r3, r1
 800c5aa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800c5ac:	78fa      	ldrb	r2, [r7, #3]
 800c5ae:	6879      	ldr	r1, [r7, #4]
 800c5b0:	4613      	mov	r3, r2
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	4413      	add	r3, r2
 800c5b6:	00db      	lsls	r3, r3, #3
 800c5b8:	440b      	add	r3, r1
 800c5ba:	335c      	adds	r3, #92	; 0x5c
 800c5bc:	781b      	ldrb	r3, [r3, #0]
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	370c      	adds	r7, #12
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c8:	4770      	bx	lr

0800c5ca <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800c5ca:	b480      	push	{r7}
 800c5cc:	b083      	sub	sp, #12
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]
 800c5d2:	460b      	mov	r3, r1
 800c5d4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800c5d6:	78fa      	ldrb	r2, [r7, #3]
 800c5d8:	6879      	ldr	r1, [r7, #4]
 800c5da:	4613      	mov	r3, r2
 800c5dc:	009b      	lsls	r3, r3, #2
 800c5de:	4413      	add	r3, r2
 800c5e0:	00db      	lsls	r3, r3, #3
 800c5e2:	440b      	add	r3, r1
 800c5e4:	334c      	adds	r3, #76	; 0x4c
 800c5e6:	681b      	ldr	r3, [r3, #0]
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	370c      	adds	r7, #12
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr

0800c5f4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b082      	sub	sp, #8
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	4618      	mov	r0, r3
 800c602:	f006 f913 	bl	801282c <USB_GetCurrentFrame>
 800c606:	4603      	mov	r3, r0
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3708      	adds	r7, #8
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4618      	mov	r0, r3
 800c61e:	f006 f8ee 	bl	80127fe <USB_GetHostSpeed>
 800c622:	4603      	mov	r3, r0
}
 800c624:	4618      	mov	r0, r3
 800c626:	3708      	adds	r7, #8
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}

0800c62c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b086      	sub	sp, #24
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
 800c634:	460b      	mov	r3, r1
 800c636:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800c642:	78fb      	ldrb	r3, [r7, #3]
 800c644:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	015a      	lsls	r2, r3, #5
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	4413      	add	r3, r2
 800c64e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c652:	689b      	ldr	r3, [r3, #8]
 800c654:	f003 0304 	and.w	r3, r3, #4
 800c658:	2b04      	cmp	r3, #4
 800c65a:	d119      	bne.n	800c690 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	015a      	lsls	r2, r3, #5
 800c660:	693b      	ldr	r3, [r7, #16]
 800c662:	4413      	add	r3, r2
 800c664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c668:	461a      	mov	r2, r3
 800c66a:	2304      	movs	r3, #4
 800c66c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	015a      	lsls	r2, r3, #5
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	4413      	add	r3, r2
 800c676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c67a:	68db      	ldr	r3, [r3, #12]
 800c67c:	68fa      	ldr	r2, [r7, #12]
 800c67e:	0151      	lsls	r1, r2, #5
 800c680:	693a      	ldr	r2, [r7, #16]
 800c682:	440a      	add	r2, r1
 800c684:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c688:	f043 0302 	orr.w	r3, r3, #2
 800c68c:	60d3      	str	r3, [r2, #12]
 800c68e:	e0ce      	b.n	800c82e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	015a      	lsls	r2, r3, #5
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	4413      	add	r3, r2
 800c698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c69c:	689b      	ldr	r3, [r3, #8]
 800c69e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6a6:	d12c      	bne.n	800c702 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	015a      	lsls	r2, r3, #5
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	4413      	add	r3, r2
 800c6b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6b4:	461a      	mov	r2, r3
 800c6b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c6ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800c6bc:	6879      	ldr	r1, [r7, #4]
 800c6be:	68fa      	ldr	r2, [r7, #12]
 800c6c0:	4613      	mov	r3, r2
 800c6c2:	009b      	lsls	r3, r3, #2
 800c6c4:	4413      	add	r3, r2
 800c6c6:	00db      	lsls	r3, r3, #3
 800c6c8:	440b      	add	r3, r1
 800c6ca:	335d      	adds	r3, #93	; 0x5d
 800c6cc:	2207      	movs	r2, #7
 800c6ce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	015a      	lsls	r2, r3, #5
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	4413      	add	r3, r2
 800c6d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6dc:	68db      	ldr	r3, [r3, #12]
 800c6de:	68fa      	ldr	r2, [r7, #12]
 800c6e0:	0151      	lsls	r1, r2, #5
 800c6e2:	693a      	ldr	r2, [r7, #16]
 800c6e4:	440a      	add	r2, r1
 800c6e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c6ea:	f043 0302 	orr.w	r3, r3, #2
 800c6ee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	68fa      	ldr	r2, [r7, #12]
 800c6f6:	b2d2      	uxtb	r2, r2
 800c6f8:	4611      	mov	r1, r2
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f006 faab 	bl	8012c56 <USB_HC_Halt>
 800c700:	e095      	b.n	800c82e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	015a      	lsls	r2, r3, #5
 800c706:	693b      	ldr	r3, [r7, #16]
 800c708:	4413      	add	r3, r2
 800c70a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c70e:	689b      	ldr	r3, [r3, #8]
 800c710:	f003 0320 	and.w	r3, r3, #32
 800c714:	2b20      	cmp	r3, #32
 800c716:	d109      	bne.n	800c72c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	015a      	lsls	r2, r3, #5
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	4413      	add	r3, r2
 800c720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c724:	461a      	mov	r2, r3
 800c726:	2320      	movs	r3, #32
 800c728:	6093      	str	r3, [r2, #8]
 800c72a:	e080      	b.n	800c82e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	015a      	lsls	r2, r3, #5
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	4413      	add	r3, r2
 800c734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c738:	689b      	ldr	r3, [r3, #8]
 800c73a:	f003 0308 	and.w	r3, r3, #8
 800c73e:	2b08      	cmp	r3, #8
 800c740:	d134      	bne.n	800c7ac <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	015a      	lsls	r2, r3, #5
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	4413      	add	r3, r2
 800c74a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c74e:	68db      	ldr	r3, [r3, #12]
 800c750:	68fa      	ldr	r2, [r7, #12]
 800c752:	0151      	lsls	r1, r2, #5
 800c754:	693a      	ldr	r2, [r7, #16]
 800c756:	440a      	add	r2, r1
 800c758:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c75c:	f043 0302 	orr.w	r3, r3, #2
 800c760:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800c762:	6879      	ldr	r1, [r7, #4]
 800c764:	68fa      	ldr	r2, [r7, #12]
 800c766:	4613      	mov	r3, r2
 800c768:	009b      	lsls	r3, r3, #2
 800c76a:	4413      	add	r3, r2
 800c76c:	00db      	lsls	r3, r3, #3
 800c76e:	440b      	add	r3, r1
 800c770:	335d      	adds	r3, #93	; 0x5d
 800c772:	2205      	movs	r2, #5
 800c774:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	015a      	lsls	r2, r3, #5
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	4413      	add	r3, r2
 800c77e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c782:	461a      	mov	r2, r3
 800c784:	2310      	movs	r3, #16
 800c786:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	015a      	lsls	r2, r3, #5
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	4413      	add	r3, r2
 800c790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c794:	461a      	mov	r2, r3
 800c796:	2308      	movs	r3, #8
 800c798:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	68fa      	ldr	r2, [r7, #12]
 800c7a0:	b2d2      	uxtb	r2, r2
 800c7a2:	4611      	mov	r1, r2
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f006 fa56 	bl	8012c56 <USB_HC_Halt>
 800c7aa:	e040      	b.n	800c82e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	015a      	lsls	r2, r3, #5
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	4413      	add	r3, r2
 800c7b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7b8:	689b      	ldr	r3, [r3, #8]
 800c7ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c7be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7c2:	d134      	bne.n	800c82e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	015a      	lsls	r2, r3, #5
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	4413      	add	r3, r2
 800c7cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7d0:	68db      	ldr	r3, [r3, #12]
 800c7d2:	68fa      	ldr	r2, [r7, #12]
 800c7d4:	0151      	lsls	r1, r2, #5
 800c7d6:	693a      	ldr	r2, [r7, #16]
 800c7d8:	440a      	add	r2, r1
 800c7da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c7de:	f043 0302 	orr.w	r3, r3, #2
 800c7e2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	68fa      	ldr	r2, [r7, #12]
 800c7ea:	b2d2      	uxtb	r2, r2
 800c7ec:	4611      	mov	r1, r2
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f006 fa31 	bl	8012c56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	015a      	lsls	r2, r3, #5
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	4413      	add	r3, r2
 800c7fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c800:	461a      	mov	r2, r3
 800c802:	2310      	movs	r3, #16
 800c804:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800c806:	6879      	ldr	r1, [r7, #4]
 800c808:	68fa      	ldr	r2, [r7, #12]
 800c80a:	4613      	mov	r3, r2
 800c80c:	009b      	lsls	r3, r3, #2
 800c80e:	4413      	add	r3, r2
 800c810:	00db      	lsls	r3, r3, #3
 800c812:	440b      	add	r3, r1
 800c814:	335d      	adds	r3, #93	; 0x5d
 800c816:	2208      	movs	r2, #8
 800c818:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	015a      	lsls	r2, r3, #5
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	4413      	add	r3, r2
 800c822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c826:	461a      	mov	r2, r3
 800c828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c82c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	015a      	lsls	r2, r3, #5
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	4413      	add	r3, r2
 800c836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c83a:	689b      	ldr	r3, [r3, #8]
 800c83c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c844:	d122      	bne.n	800c88c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	015a      	lsls	r2, r3, #5
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	4413      	add	r3, r2
 800c84e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c852:	68db      	ldr	r3, [r3, #12]
 800c854:	68fa      	ldr	r2, [r7, #12]
 800c856:	0151      	lsls	r1, r2, #5
 800c858:	693a      	ldr	r2, [r7, #16]
 800c85a:	440a      	add	r2, r1
 800c85c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c860:	f043 0302 	orr.w	r3, r3, #2
 800c864:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	68fa      	ldr	r2, [r7, #12]
 800c86c:	b2d2      	uxtb	r2, r2
 800c86e:	4611      	mov	r1, r2
 800c870:	4618      	mov	r0, r3
 800c872:	f006 f9f0 	bl	8012c56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	015a      	lsls	r2, r3, #5
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	4413      	add	r3, r2
 800c87e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c882:	461a      	mov	r2, r3
 800c884:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c888:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800c88a:	e2dc      	b.n	800ce46 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	015a      	lsls	r2, r3, #5
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	4413      	add	r3, r2
 800c894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c898:	689b      	ldr	r3, [r3, #8]
 800c89a:	f003 0301 	and.w	r3, r3, #1
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	f040 80dd 	bne.w	800ca5e <HCD_HC_IN_IRQHandler+0x432>
    hhcd->hc[ch_num].state = HC_XFRC;
 800c8a4:	6879      	ldr	r1, [r7, #4]
 800c8a6:	68fa      	ldr	r2, [r7, #12]
 800c8a8:	4613      	mov	r3, r2
 800c8aa:	009b      	lsls	r3, r3, #2
 800c8ac:	4413      	add	r3, r2
 800c8ae:	00db      	lsls	r3, r3, #3
 800c8b0:	440b      	add	r3, r1
 800c8b2:	335d      	adds	r3, #93	; 0x5d
 800c8b4:	2201      	movs	r2, #1
 800c8b6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800c8b8:	6879      	ldr	r1, [r7, #4]
 800c8ba:	68fa      	ldr	r2, [r7, #12]
 800c8bc:	4613      	mov	r3, r2
 800c8be:	009b      	lsls	r3, r3, #2
 800c8c0:	4413      	add	r3, r2
 800c8c2:	00db      	lsls	r3, r3, #3
 800c8c4:	440b      	add	r3, r1
 800c8c6:	3358      	adds	r3, #88	; 0x58
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	015a      	lsls	r2, r3, #5
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	4413      	add	r3, r2
 800c8d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8d8:	461a      	mov	r2, r3
 800c8da:	2301      	movs	r3, #1
 800c8dc:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800c8de:	6879      	ldr	r1, [r7, #4]
 800c8e0:	68fa      	ldr	r2, [r7, #12]
 800c8e2:	4613      	mov	r3, r2
 800c8e4:	009b      	lsls	r3, r3, #2
 800c8e6:	4413      	add	r3, r2
 800c8e8:	00db      	lsls	r3, r3, #3
 800c8ea:	440b      	add	r3, r1
 800c8ec:	333f      	adds	r3, #63	; 0x3f
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d00a      	beq.n	800c90a <HCD_HC_IN_IRQHandler+0x2de>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800c8f4:	6879      	ldr	r1, [r7, #4]
 800c8f6:	68fa      	ldr	r2, [r7, #12]
 800c8f8:	4613      	mov	r3, r2
 800c8fa:	009b      	lsls	r3, r3, #2
 800c8fc:	4413      	add	r3, r2
 800c8fe:	00db      	lsls	r3, r3, #3
 800c900:	440b      	add	r3, r1
 800c902:	333f      	adds	r3, #63	; 0x3f
 800c904:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800c906:	2b02      	cmp	r3, #2
 800c908:	d121      	bne.n	800c94e <HCD_HC_IN_IRQHandler+0x322>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	015a      	lsls	r2, r3, #5
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	4413      	add	r3, r2
 800c912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c916:	68db      	ldr	r3, [r3, #12]
 800c918:	68fa      	ldr	r2, [r7, #12]
 800c91a:	0151      	lsls	r1, r2, #5
 800c91c:	693a      	ldr	r2, [r7, #16]
 800c91e:	440a      	add	r2, r1
 800c920:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c924:	f043 0302 	orr.w	r3, r3, #2
 800c928:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	68fa      	ldr	r2, [r7, #12]
 800c930:	b2d2      	uxtb	r2, r2
 800c932:	4611      	mov	r1, r2
 800c934:	4618      	mov	r0, r3
 800c936:	f006 f98e 	bl	8012c56 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	015a      	lsls	r2, r3, #5
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	4413      	add	r3, r2
 800c942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c946:	461a      	mov	r2, r3
 800c948:	2310      	movs	r3, #16
 800c94a:	6093      	str	r3, [r2, #8]
 800c94c:	e070      	b.n	800ca30 <HCD_HC_IN_IRQHandler+0x404>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800c94e:	6879      	ldr	r1, [r7, #4]
 800c950:	68fa      	ldr	r2, [r7, #12]
 800c952:	4613      	mov	r3, r2
 800c954:	009b      	lsls	r3, r3, #2
 800c956:	4413      	add	r3, r2
 800c958:	00db      	lsls	r3, r3, #3
 800c95a:	440b      	add	r3, r1
 800c95c:	333f      	adds	r3, #63	; 0x3f
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	2b03      	cmp	r3, #3
 800c962:	d12a      	bne.n	800c9ba <HCD_HC_IN_IRQHandler+0x38e>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	015a      	lsls	r2, r3, #5
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	4413      	add	r3, r2
 800c96c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	68fa      	ldr	r2, [r7, #12]
 800c974:	0151      	lsls	r1, r2, #5
 800c976:	693a      	ldr	r2, [r7, #16]
 800c978:	440a      	add	r2, r1
 800c97a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c97e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c982:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800c984:	6879      	ldr	r1, [r7, #4]
 800c986:	68fa      	ldr	r2, [r7, #12]
 800c988:	4613      	mov	r3, r2
 800c98a:	009b      	lsls	r3, r3, #2
 800c98c:	4413      	add	r3, r2
 800c98e:	00db      	lsls	r3, r3, #3
 800c990:	440b      	add	r3, r1
 800c992:	335c      	adds	r3, #92	; 0x5c
 800c994:	2201      	movs	r2, #1
 800c996:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	b2d8      	uxtb	r0, r3
 800c99c:	6879      	ldr	r1, [r7, #4]
 800c99e:	68fa      	ldr	r2, [r7, #12]
 800c9a0:	4613      	mov	r3, r2
 800c9a2:	009b      	lsls	r3, r3, #2
 800c9a4:	4413      	add	r3, r2
 800c9a6:	00db      	lsls	r3, r3, #3
 800c9a8:	440b      	add	r3, r1
 800c9aa:	335c      	adds	r3, #92	; 0x5c
 800c9ac:	781b      	ldrb	r3, [r3, #0]
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	4601      	mov	r1, r0
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f00f fe66 	bl	801c684 <HAL_HCD_HC_NotifyURBChange_Callback>
 800c9b8:	e03a      	b.n	800ca30 <HCD_HC_IN_IRQHandler+0x404>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800c9ba:	6879      	ldr	r1, [r7, #4]
 800c9bc:	68fa      	ldr	r2, [r7, #12]
 800c9be:	4613      	mov	r3, r2
 800c9c0:	009b      	lsls	r3, r3, #2
 800c9c2:	4413      	add	r3, r2
 800c9c4:	00db      	lsls	r3, r3, #3
 800c9c6:	440b      	add	r3, r1
 800c9c8:	333f      	adds	r3, #63	; 0x3f
 800c9ca:	781b      	ldrb	r3, [r3, #0]
 800c9cc:	2b01      	cmp	r3, #1
 800c9ce:	d12f      	bne.n	800ca30 <HCD_HC_IN_IRQHandler+0x404>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800c9d0:	6879      	ldr	r1, [r7, #4]
 800c9d2:	68fa      	ldr	r2, [r7, #12]
 800c9d4:	4613      	mov	r3, r2
 800c9d6:	009b      	lsls	r3, r3, #2
 800c9d8:	4413      	add	r3, r2
 800c9da:	00db      	lsls	r3, r3, #3
 800c9dc:	440b      	add	r3, r1
 800c9de:	335c      	adds	r3, #92	; 0x5c
 800c9e0:	2201      	movs	r2, #1
 800c9e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800c9e4:	6879      	ldr	r1, [r7, #4]
 800c9e6:	68fa      	ldr	r2, [r7, #12]
 800c9e8:	4613      	mov	r3, r2
 800c9ea:	009b      	lsls	r3, r3, #2
 800c9ec:	4413      	add	r3, r2
 800c9ee:	00db      	lsls	r3, r3, #3
 800c9f0:	440b      	add	r3, r1
 800c9f2:	3350      	adds	r3, #80	; 0x50
 800c9f4:	781b      	ldrb	r3, [r3, #0]
 800c9f6:	f083 0301 	eor.w	r3, r3, #1
 800c9fa:	b2d8      	uxtb	r0, r3
 800c9fc:	6879      	ldr	r1, [r7, #4]
 800c9fe:	68fa      	ldr	r2, [r7, #12]
 800ca00:	4613      	mov	r3, r2
 800ca02:	009b      	lsls	r3, r3, #2
 800ca04:	4413      	add	r3, r2
 800ca06:	00db      	lsls	r3, r3, #3
 800ca08:	440b      	add	r3, r1
 800ca0a:	3350      	adds	r3, #80	; 0x50
 800ca0c:	4602      	mov	r2, r0
 800ca0e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	b2d8      	uxtb	r0, r3
 800ca14:	6879      	ldr	r1, [r7, #4]
 800ca16:	68fa      	ldr	r2, [r7, #12]
 800ca18:	4613      	mov	r3, r2
 800ca1a:	009b      	lsls	r3, r3, #2
 800ca1c:	4413      	add	r3, r2
 800ca1e:	00db      	lsls	r3, r3, #3
 800ca20:	440b      	add	r3, r1
 800ca22:	335c      	adds	r3, #92	; 0x5c
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	461a      	mov	r2, r3
 800ca28:	4601      	mov	r1, r0
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f00f fe2a 	bl	801c684 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800ca30:	6879      	ldr	r1, [r7, #4]
 800ca32:	68fa      	ldr	r2, [r7, #12]
 800ca34:	4613      	mov	r3, r2
 800ca36:	009b      	lsls	r3, r3, #2
 800ca38:	4413      	add	r3, r2
 800ca3a:	00db      	lsls	r3, r3, #3
 800ca3c:	440b      	add	r3, r1
 800ca3e:	3350      	adds	r3, #80	; 0x50
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	f083 0301 	eor.w	r3, r3, #1
 800ca46:	b2d8      	uxtb	r0, r3
 800ca48:	6879      	ldr	r1, [r7, #4]
 800ca4a:	68fa      	ldr	r2, [r7, #12]
 800ca4c:	4613      	mov	r3, r2
 800ca4e:	009b      	lsls	r3, r3, #2
 800ca50:	4413      	add	r3, r2
 800ca52:	00db      	lsls	r3, r3, #3
 800ca54:	440b      	add	r3, r1
 800ca56:	3350      	adds	r3, #80	; 0x50
 800ca58:	4602      	mov	r2, r0
 800ca5a:	701a      	strb	r2, [r3, #0]
}
 800ca5c:	e1f3      	b.n	800ce46 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	015a      	lsls	r2, r3, #5
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	4413      	add	r3, r2
 800ca66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca6a:	689b      	ldr	r3, [r3, #8]
 800ca6c:	f003 0302 	and.w	r3, r3, #2
 800ca70:	2b02      	cmp	r3, #2
 800ca72:	f040 811a 	bne.w	800ccaa <HCD_HC_IN_IRQHandler+0x67e>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	015a      	lsls	r2, r3, #5
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	4413      	add	r3, r2
 800ca7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca82:	68db      	ldr	r3, [r3, #12]
 800ca84:	68fa      	ldr	r2, [r7, #12]
 800ca86:	0151      	lsls	r1, r2, #5
 800ca88:	693a      	ldr	r2, [r7, #16]
 800ca8a:	440a      	add	r2, r1
 800ca8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ca90:	f023 0302 	bic.w	r3, r3, #2
 800ca94:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800ca96:	6879      	ldr	r1, [r7, #4]
 800ca98:	68fa      	ldr	r2, [r7, #12]
 800ca9a:	4613      	mov	r3, r2
 800ca9c:	009b      	lsls	r3, r3, #2
 800ca9e:	4413      	add	r3, r2
 800caa0:	00db      	lsls	r3, r3, #3
 800caa2:	440b      	add	r3, r1
 800caa4:	335d      	adds	r3, #93	; 0x5d
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	2b01      	cmp	r3, #1
 800caaa:	d10a      	bne.n	800cac2 <HCD_HC_IN_IRQHandler+0x496>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800caac:	6879      	ldr	r1, [r7, #4]
 800caae:	68fa      	ldr	r2, [r7, #12]
 800cab0:	4613      	mov	r3, r2
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	4413      	add	r3, r2
 800cab6:	00db      	lsls	r3, r3, #3
 800cab8:	440b      	add	r3, r1
 800caba:	335c      	adds	r3, #92	; 0x5c
 800cabc:	2201      	movs	r2, #1
 800cabe:	701a      	strb	r2, [r3, #0]
 800cac0:	e0d9      	b.n	800cc76 <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800cac2:	6879      	ldr	r1, [r7, #4]
 800cac4:	68fa      	ldr	r2, [r7, #12]
 800cac6:	4613      	mov	r3, r2
 800cac8:	009b      	lsls	r3, r3, #2
 800caca:	4413      	add	r3, r2
 800cacc:	00db      	lsls	r3, r3, #3
 800cace:	440b      	add	r3, r1
 800cad0:	335d      	adds	r3, #93	; 0x5d
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	2b05      	cmp	r3, #5
 800cad6:	d10a      	bne.n	800caee <HCD_HC_IN_IRQHandler+0x4c2>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800cad8:	6879      	ldr	r1, [r7, #4]
 800cada:	68fa      	ldr	r2, [r7, #12]
 800cadc:	4613      	mov	r3, r2
 800cade:	009b      	lsls	r3, r3, #2
 800cae0:	4413      	add	r3, r2
 800cae2:	00db      	lsls	r3, r3, #3
 800cae4:	440b      	add	r3, r1
 800cae6:	335c      	adds	r3, #92	; 0x5c
 800cae8:	2205      	movs	r2, #5
 800caea:	701a      	strb	r2, [r3, #0]
 800caec:	e0c3      	b.n	800cc76 <HCD_HC_IN_IRQHandler+0x64a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800caee:	6879      	ldr	r1, [r7, #4]
 800caf0:	68fa      	ldr	r2, [r7, #12]
 800caf2:	4613      	mov	r3, r2
 800caf4:	009b      	lsls	r3, r3, #2
 800caf6:	4413      	add	r3, r2
 800caf8:	00db      	lsls	r3, r3, #3
 800cafa:	440b      	add	r3, r1
 800cafc:	335d      	adds	r3, #93	; 0x5d
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	2b06      	cmp	r3, #6
 800cb02:	d00a      	beq.n	800cb1a <HCD_HC_IN_IRQHandler+0x4ee>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800cb04:	6879      	ldr	r1, [r7, #4]
 800cb06:	68fa      	ldr	r2, [r7, #12]
 800cb08:	4613      	mov	r3, r2
 800cb0a:	009b      	lsls	r3, r3, #2
 800cb0c:	4413      	add	r3, r2
 800cb0e:	00db      	lsls	r3, r3, #3
 800cb10:	440b      	add	r3, r1
 800cb12:	335d      	adds	r3, #93	; 0x5d
 800cb14:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800cb16:	2b08      	cmp	r3, #8
 800cb18:	d156      	bne.n	800cbc8 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].ErrCnt++;
 800cb1a:	6879      	ldr	r1, [r7, #4]
 800cb1c:	68fa      	ldr	r2, [r7, #12]
 800cb1e:	4613      	mov	r3, r2
 800cb20:	009b      	lsls	r3, r3, #2
 800cb22:	4413      	add	r3, r2
 800cb24:	00db      	lsls	r3, r3, #3
 800cb26:	440b      	add	r3, r1
 800cb28:	3358      	adds	r3, #88	; 0x58
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	1c59      	adds	r1, r3, #1
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	68fa      	ldr	r2, [r7, #12]
 800cb32:	4613      	mov	r3, r2
 800cb34:	009b      	lsls	r3, r3, #2
 800cb36:	4413      	add	r3, r2
 800cb38:	00db      	lsls	r3, r3, #3
 800cb3a:	4403      	add	r3, r0
 800cb3c:	3358      	adds	r3, #88	; 0x58
 800cb3e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800cb40:	6879      	ldr	r1, [r7, #4]
 800cb42:	68fa      	ldr	r2, [r7, #12]
 800cb44:	4613      	mov	r3, r2
 800cb46:	009b      	lsls	r3, r3, #2
 800cb48:	4413      	add	r3, r2
 800cb4a:	00db      	lsls	r3, r3, #3
 800cb4c:	440b      	add	r3, r1
 800cb4e:	3358      	adds	r3, #88	; 0x58
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	2b03      	cmp	r3, #3
 800cb54:	d914      	bls.n	800cb80 <HCD_HC_IN_IRQHandler+0x554>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800cb56:	6879      	ldr	r1, [r7, #4]
 800cb58:	68fa      	ldr	r2, [r7, #12]
 800cb5a:	4613      	mov	r3, r2
 800cb5c:	009b      	lsls	r3, r3, #2
 800cb5e:	4413      	add	r3, r2
 800cb60:	00db      	lsls	r3, r3, #3
 800cb62:	440b      	add	r3, r1
 800cb64:	3358      	adds	r3, #88	; 0x58
 800cb66:	2200      	movs	r2, #0
 800cb68:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800cb6a:	6879      	ldr	r1, [r7, #4]
 800cb6c:	68fa      	ldr	r2, [r7, #12]
 800cb6e:	4613      	mov	r3, r2
 800cb70:	009b      	lsls	r3, r3, #2
 800cb72:	4413      	add	r3, r2
 800cb74:	00db      	lsls	r3, r3, #3
 800cb76:	440b      	add	r3, r1
 800cb78:	335c      	adds	r3, #92	; 0x5c
 800cb7a:	2204      	movs	r2, #4
 800cb7c:	701a      	strb	r2, [r3, #0]
 800cb7e:	e009      	b.n	800cb94 <HCD_HC_IN_IRQHandler+0x568>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800cb80:	6879      	ldr	r1, [r7, #4]
 800cb82:	68fa      	ldr	r2, [r7, #12]
 800cb84:	4613      	mov	r3, r2
 800cb86:	009b      	lsls	r3, r3, #2
 800cb88:	4413      	add	r3, r2
 800cb8a:	00db      	lsls	r3, r3, #3
 800cb8c:	440b      	add	r3, r1
 800cb8e:	335c      	adds	r3, #92	; 0x5c
 800cb90:	2202      	movs	r2, #2
 800cb92:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	015a      	lsls	r2, r3, #5
 800cb98:	693b      	ldr	r3, [r7, #16]
 800cb9a:	4413      	add	r3, r2
 800cb9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cbaa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cbb2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	015a      	lsls	r2, r3, #5
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	4413      	add	r3, r2
 800cbbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	6013      	str	r3, [r2, #0]
 800cbc6:	e056      	b.n	800cc76 <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800cbc8:	6879      	ldr	r1, [r7, #4]
 800cbca:	68fa      	ldr	r2, [r7, #12]
 800cbcc:	4613      	mov	r3, r2
 800cbce:	009b      	lsls	r3, r3, #2
 800cbd0:	4413      	add	r3, r2
 800cbd2:	00db      	lsls	r3, r3, #3
 800cbd4:	440b      	add	r3, r1
 800cbd6:	335d      	adds	r3, #93	; 0x5d
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	2b03      	cmp	r3, #3
 800cbdc:	d123      	bne.n	800cc26 <HCD_HC_IN_IRQHandler+0x5fa>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800cbde:	6879      	ldr	r1, [r7, #4]
 800cbe0:	68fa      	ldr	r2, [r7, #12]
 800cbe2:	4613      	mov	r3, r2
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	4413      	add	r3, r2
 800cbe8:	00db      	lsls	r3, r3, #3
 800cbea:	440b      	add	r3, r1
 800cbec:	335c      	adds	r3, #92	; 0x5c
 800cbee:	2202      	movs	r2, #2
 800cbf0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	015a      	lsls	r2, r3, #5
 800cbf6:	693b      	ldr	r3, [r7, #16]
 800cbf8:	4413      	add	r3, r2
 800cbfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cc08:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cc10:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	015a      	lsls	r2, r3, #5
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	4413      	add	r3, r2
 800cc1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc1e:	461a      	mov	r2, r3
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	6013      	str	r3, [r2, #0]
 800cc24:	e027      	b.n	800cc76 <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800cc26:	6879      	ldr	r1, [r7, #4]
 800cc28:	68fa      	ldr	r2, [r7, #12]
 800cc2a:	4613      	mov	r3, r2
 800cc2c:	009b      	lsls	r3, r3, #2
 800cc2e:	4413      	add	r3, r2
 800cc30:	00db      	lsls	r3, r3, #3
 800cc32:	440b      	add	r3, r1
 800cc34:	335d      	adds	r3, #93	; 0x5d
 800cc36:	781b      	ldrb	r3, [r3, #0]
 800cc38:	2b07      	cmp	r3, #7
 800cc3a:	d11c      	bne.n	800cc76 <HCD_HC_IN_IRQHandler+0x64a>
      hhcd->hc[ch_num].ErrCnt++;
 800cc3c:	6879      	ldr	r1, [r7, #4]
 800cc3e:	68fa      	ldr	r2, [r7, #12]
 800cc40:	4613      	mov	r3, r2
 800cc42:	009b      	lsls	r3, r3, #2
 800cc44:	4413      	add	r3, r2
 800cc46:	00db      	lsls	r3, r3, #3
 800cc48:	440b      	add	r3, r1
 800cc4a:	3358      	adds	r3, #88	; 0x58
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	1c59      	adds	r1, r3, #1
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	68fa      	ldr	r2, [r7, #12]
 800cc54:	4613      	mov	r3, r2
 800cc56:	009b      	lsls	r3, r3, #2
 800cc58:	4413      	add	r3, r2
 800cc5a:	00db      	lsls	r3, r3, #3
 800cc5c:	4403      	add	r3, r0
 800cc5e:	3358      	adds	r3, #88	; 0x58
 800cc60:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800cc62:	6879      	ldr	r1, [r7, #4]
 800cc64:	68fa      	ldr	r2, [r7, #12]
 800cc66:	4613      	mov	r3, r2
 800cc68:	009b      	lsls	r3, r3, #2
 800cc6a:	4413      	add	r3, r2
 800cc6c:	00db      	lsls	r3, r3, #3
 800cc6e:	440b      	add	r3, r1
 800cc70:	335c      	adds	r3, #92	; 0x5c
 800cc72:	2204      	movs	r2, #4
 800cc74:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	015a      	lsls	r2, r3, #5
 800cc7a:	693b      	ldr	r3, [r7, #16]
 800cc7c:	4413      	add	r3, r2
 800cc7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc82:	461a      	mov	r2, r3
 800cc84:	2302      	movs	r3, #2
 800cc86:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	b2d8      	uxtb	r0, r3
 800cc8c:	6879      	ldr	r1, [r7, #4]
 800cc8e:	68fa      	ldr	r2, [r7, #12]
 800cc90:	4613      	mov	r3, r2
 800cc92:	009b      	lsls	r3, r3, #2
 800cc94:	4413      	add	r3, r2
 800cc96:	00db      	lsls	r3, r3, #3
 800cc98:	440b      	add	r3, r1
 800cc9a:	335c      	adds	r3, #92	; 0x5c
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	461a      	mov	r2, r3
 800cca0:	4601      	mov	r1, r0
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f00f fcee 	bl	801c684 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800cca8:	e0cd      	b.n	800ce46 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	015a      	lsls	r2, r3, #5
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	4413      	add	r3, r2
 800ccb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ccb6:	689b      	ldr	r3, [r3, #8]
 800ccb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccbc:	2b80      	cmp	r3, #128	; 0x80
 800ccbe:	d13e      	bne.n	800cd3e <HCD_HC_IN_IRQHandler+0x712>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	015a      	lsls	r2, r3, #5
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	4413      	add	r3, r2
 800ccc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cccc:	68db      	ldr	r3, [r3, #12]
 800ccce:	68fa      	ldr	r2, [r7, #12]
 800ccd0:	0151      	lsls	r1, r2, #5
 800ccd2:	693a      	ldr	r2, [r7, #16]
 800ccd4:	440a      	add	r2, r1
 800ccd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ccda:	f043 0302 	orr.w	r3, r3, #2
 800ccde:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800cce0:	6879      	ldr	r1, [r7, #4]
 800cce2:	68fa      	ldr	r2, [r7, #12]
 800cce4:	4613      	mov	r3, r2
 800cce6:	009b      	lsls	r3, r3, #2
 800cce8:	4413      	add	r3, r2
 800ccea:	00db      	lsls	r3, r3, #3
 800ccec:	440b      	add	r3, r1
 800ccee:	3358      	adds	r3, #88	; 0x58
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	1c59      	adds	r1, r3, #1
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	68fa      	ldr	r2, [r7, #12]
 800ccf8:	4613      	mov	r3, r2
 800ccfa:	009b      	lsls	r3, r3, #2
 800ccfc:	4413      	add	r3, r2
 800ccfe:	00db      	lsls	r3, r3, #3
 800cd00:	4403      	add	r3, r0
 800cd02:	3358      	adds	r3, #88	; 0x58
 800cd04:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800cd06:	6879      	ldr	r1, [r7, #4]
 800cd08:	68fa      	ldr	r2, [r7, #12]
 800cd0a:	4613      	mov	r3, r2
 800cd0c:	009b      	lsls	r3, r3, #2
 800cd0e:	4413      	add	r3, r2
 800cd10:	00db      	lsls	r3, r3, #3
 800cd12:	440b      	add	r3, r1
 800cd14:	335d      	adds	r3, #93	; 0x5d
 800cd16:	2206      	movs	r2, #6
 800cd18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	68fa      	ldr	r2, [r7, #12]
 800cd20:	b2d2      	uxtb	r2, r2
 800cd22:	4611      	mov	r1, r2
 800cd24:	4618      	mov	r0, r3
 800cd26:	f005 ff96 	bl	8012c56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	015a      	lsls	r2, r3, #5
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	4413      	add	r3, r2
 800cd32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd36:	461a      	mov	r2, r3
 800cd38:	2380      	movs	r3, #128	; 0x80
 800cd3a:	6093      	str	r3, [r2, #8]
}
 800cd3c:	e083      	b.n	800ce46 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	015a      	lsls	r2, r3, #5
 800cd42:	693b      	ldr	r3, [r7, #16]
 800cd44:	4413      	add	r3, r2
 800cd46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd4a:	689b      	ldr	r3, [r3, #8]
 800cd4c:	f003 0310 	and.w	r3, r3, #16
 800cd50:	2b10      	cmp	r3, #16
 800cd52:	d178      	bne.n	800ce46 <HCD_HC_IN_IRQHandler+0x81a>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800cd54:	6879      	ldr	r1, [r7, #4]
 800cd56:	68fa      	ldr	r2, [r7, #12]
 800cd58:	4613      	mov	r3, r2
 800cd5a:	009b      	lsls	r3, r3, #2
 800cd5c:	4413      	add	r3, r2
 800cd5e:	00db      	lsls	r3, r3, #3
 800cd60:	440b      	add	r3, r1
 800cd62:	333f      	adds	r3, #63	; 0x3f
 800cd64:	781b      	ldrb	r3, [r3, #0]
 800cd66:	2b03      	cmp	r3, #3
 800cd68:	d122      	bne.n	800cdb0 <HCD_HC_IN_IRQHandler+0x784>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800cd6a:	6879      	ldr	r1, [r7, #4]
 800cd6c:	68fa      	ldr	r2, [r7, #12]
 800cd6e:	4613      	mov	r3, r2
 800cd70:	009b      	lsls	r3, r3, #2
 800cd72:	4413      	add	r3, r2
 800cd74:	00db      	lsls	r3, r3, #3
 800cd76:	440b      	add	r3, r1
 800cd78:	3358      	adds	r3, #88	; 0x58
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	015a      	lsls	r2, r3, #5
 800cd82:	693b      	ldr	r3, [r7, #16]
 800cd84:	4413      	add	r3, r2
 800cd86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd8a:	68db      	ldr	r3, [r3, #12]
 800cd8c:	68fa      	ldr	r2, [r7, #12]
 800cd8e:	0151      	lsls	r1, r2, #5
 800cd90:	693a      	ldr	r2, [r7, #16]
 800cd92:	440a      	add	r2, r1
 800cd94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cd98:	f043 0302 	orr.w	r3, r3, #2
 800cd9c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	68fa      	ldr	r2, [r7, #12]
 800cda4:	b2d2      	uxtb	r2, r2
 800cda6:	4611      	mov	r1, r2
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f005 ff54 	bl	8012c56 <USB_HC_Halt>
 800cdae:	e041      	b.n	800ce34 <HCD_HC_IN_IRQHandler+0x808>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800cdb0:	6879      	ldr	r1, [r7, #4]
 800cdb2:	68fa      	ldr	r2, [r7, #12]
 800cdb4:	4613      	mov	r3, r2
 800cdb6:	009b      	lsls	r3, r3, #2
 800cdb8:	4413      	add	r3, r2
 800cdba:	00db      	lsls	r3, r3, #3
 800cdbc:	440b      	add	r3, r1
 800cdbe:	333f      	adds	r3, #63	; 0x3f
 800cdc0:	781b      	ldrb	r3, [r3, #0]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d00a      	beq.n	800cddc <HCD_HC_IN_IRQHandler+0x7b0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800cdc6:	6879      	ldr	r1, [r7, #4]
 800cdc8:	68fa      	ldr	r2, [r7, #12]
 800cdca:	4613      	mov	r3, r2
 800cdcc:	009b      	lsls	r3, r3, #2
 800cdce:	4413      	add	r3, r2
 800cdd0:	00db      	lsls	r3, r3, #3
 800cdd2:	440b      	add	r3, r1
 800cdd4:	333f      	adds	r3, #63	; 0x3f
 800cdd6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800cdd8:	2b02      	cmp	r3, #2
 800cdda:	d12b      	bne.n	800ce34 <HCD_HC_IN_IRQHandler+0x808>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800cddc:	6879      	ldr	r1, [r7, #4]
 800cdde:	68fa      	ldr	r2, [r7, #12]
 800cde0:	4613      	mov	r3, r2
 800cde2:	009b      	lsls	r3, r3, #2
 800cde4:	4413      	add	r3, r2
 800cde6:	00db      	lsls	r3, r3, #3
 800cde8:	440b      	add	r3, r1
 800cdea:	3358      	adds	r3, #88	; 0x58
 800cdec:	2200      	movs	r2, #0
 800cdee:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 800cdf0:	6879      	ldr	r1, [r7, #4]
 800cdf2:	68fa      	ldr	r2, [r7, #12]
 800cdf4:	4613      	mov	r3, r2
 800cdf6:	009b      	lsls	r3, r3, #2
 800cdf8:	4413      	add	r3, r2
 800cdfa:	00db      	lsls	r3, r3, #3
 800cdfc:	440b      	add	r3, r1
 800cdfe:	335d      	adds	r3, #93	; 0x5d
 800ce00:	2203      	movs	r2, #3
 800ce02:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	015a      	lsls	r2, r3, #5
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	4413      	add	r3, r2
 800ce0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce10:	68db      	ldr	r3, [r3, #12]
 800ce12:	68fa      	ldr	r2, [r7, #12]
 800ce14:	0151      	lsls	r1, r2, #5
 800ce16:	693a      	ldr	r2, [r7, #16]
 800ce18:	440a      	add	r2, r1
 800ce1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ce1e:	f043 0302 	orr.w	r3, r3, #2
 800ce22:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	68fa      	ldr	r2, [r7, #12]
 800ce2a:	b2d2      	uxtb	r2, r2
 800ce2c:	4611      	mov	r1, r2
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f005 ff11 	bl	8012c56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	015a      	lsls	r2, r3, #5
 800ce38:	693b      	ldr	r3, [r7, #16]
 800ce3a:	4413      	add	r3, r2
 800ce3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce40:	461a      	mov	r2, r3
 800ce42:	2310      	movs	r3, #16
 800ce44:	6093      	str	r3, [r2, #8]
}
 800ce46:	bf00      	nop
 800ce48:	3718      	adds	r7, #24
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}

0800ce4e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800ce4e:	b580      	push	{r7, lr}
 800ce50:	b086      	sub	sp, #24
 800ce52:	af00      	add	r7, sp, #0
 800ce54:	6078      	str	r0, [r7, #4]
 800ce56:	460b      	mov	r3, r1
 800ce58:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800ce64:	78fb      	ldrb	r3, [r7, #3]
 800ce66:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	015a      	lsls	r2, r3, #5
 800ce6c:	693b      	ldr	r3, [r7, #16]
 800ce6e:	4413      	add	r3, r2
 800ce70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce74:	689b      	ldr	r3, [r3, #8]
 800ce76:	f003 0304 	and.w	r3, r3, #4
 800ce7a:	2b04      	cmp	r3, #4
 800ce7c:	d119      	bne.n	800ceb2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	015a      	lsls	r2, r3, #5
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	4413      	add	r3, r2
 800ce86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	2304      	movs	r3, #4
 800ce8e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	015a      	lsls	r2, r3, #5
 800ce94:	693b      	ldr	r3, [r7, #16]
 800ce96:	4413      	add	r3, r2
 800ce98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce9c:	68db      	ldr	r3, [r3, #12]
 800ce9e:	68fa      	ldr	r2, [r7, #12]
 800cea0:	0151      	lsls	r1, r2, #5
 800cea2:	693a      	ldr	r2, [r7, #16]
 800cea4:	440a      	add	r2, r1
 800cea6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ceaa:	f043 0302 	orr.w	r3, r3, #2
 800ceae:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800ceb0:	e31e      	b.n	800d4f0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	015a      	lsls	r2, r3, #5
 800ceb6:	693b      	ldr	r3, [r7, #16]
 800ceb8:	4413      	add	r3, r2
 800ceba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cebe:	689b      	ldr	r3, [r3, #8]
 800cec0:	f003 0320 	and.w	r3, r3, #32
 800cec4:	2b20      	cmp	r3, #32
 800cec6:	d141      	bne.n	800cf4c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	015a      	lsls	r2, r3, #5
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	4413      	add	r3, r2
 800ced0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ced4:	461a      	mov	r2, r3
 800ced6:	2320      	movs	r3, #32
 800ced8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800ceda:	6879      	ldr	r1, [r7, #4]
 800cedc:	68fa      	ldr	r2, [r7, #12]
 800cede:	4613      	mov	r3, r2
 800cee0:	009b      	lsls	r3, r3, #2
 800cee2:	4413      	add	r3, r2
 800cee4:	00db      	lsls	r3, r3, #3
 800cee6:	440b      	add	r3, r1
 800cee8:	333d      	adds	r3, #61	; 0x3d
 800ceea:	781b      	ldrb	r3, [r3, #0]
 800ceec:	2b01      	cmp	r3, #1
 800ceee:	f040 82ff 	bne.w	800d4f0 <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 800cef2:	6879      	ldr	r1, [r7, #4]
 800cef4:	68fa      	ldr	r2, [r7, #12]
 800cef6:	4613      	mov	r3, r2
 800cef8:	009b      	lsls	r3, r3, #2
 800cefa:	4413      	add	r3, r2
 800cefc:	00db      	lsls	r3, r3, #3
 800cefe:	440b      	add	r3, r1
 800cf00:	333d      	adds	r3, #61	; 0x3d
 800cf02:	2200      	movs	r2, #0
 800cf04:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800cf06:	6879      	ldr	r1, [r7, #4]
 800cf08:	68fa      	ldr	r2, [r7, #12]
 800cf0a:	4613      	mov	r3, r2
 800cf0c:	009b      	lsls	r3, r3, #2
 800cf0e:	4413      	add	r3, r2
 800cf10:	00db      	lsls	r3, r3, #3
 800cf12:	440b      	add	r3, r1
 800cf14:	335c      	adds	r3, #92	; 0x5c
 800cf16:	2202      	movs	r2, #2
 800cf18:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	015a      	lsls	r2, r3, #5
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	4413      	add	r3, r2
 800cf22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf26:	68db      	ldr	r3, [r3, #12]
 800cf28:	68fa      	ldr	r2, [r7, #12]
 800cf2a:	0151      	lsls	r1, r2, #5
 800cf2c:	693a      	ldr	r2, [r7, #16]
 800cf2e:	440a      	add	r2, r1
 800cf30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cf34:	f043 0302 	orr.w	r3, r3, #2
 800cf38:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	68fa      	ldr	r2, [r7, #12]
 800cf40:	b2d2      	uxtb	r2, r2
 800cf42:	4611      	mov	r1, r2
 800cf44:	4618      	mov	r0, r3
 800cf46:	f005 fe86 	bl	8012c56 <USB_HC_Halt>
}
 800cf4a:	e2d1      	b.n	800d4f0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	015a      	lsls	r2, r3, #5
 800cf50:	693b      	ldr	r3, [r7, #16]
 800cf52:	4413      	add	r3, r2
 800cf54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf58:	689b      	ldr	r3, [r3, #8]
 800cf5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf5e:	2b40      	cmp	r3, #64	; 0x40
 800cf60:	d13f      	bne.n	800cfe2 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800cf62:	6879      	ldr	r1, [r7, #4]
 800cf64:	68fa      	ldr	r2, [r7, #12]
 800cf66:	4613      	mov	r3, r2
 800cf68:	009b      	lsls	r3, r3, #2
 800cf6a:	4413      	add	r3, r2
 800cf6c:	00db      	lsls	r3, r3, #3
 800cf6e:	440b      	add	r3, r1
 800cf70:	335d      	adds	r3, #93	; 0x5d
 800cf72:	2204      	movs	r2, #4
 800cf74:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800cf76:	6879      	ldr	r1, [r7, #4]
 800cf78:	68fa      	ldr	r2, [r7, #12]
 800cf7a:	4613      	mov	r3, r2
 800cf7c:	009b      	lsls	r3, r3, #2
 800cf7e:	4413      	add	r3, r2
 800cf80:	00db      	lsls	r3, r3, #3
 800cf82:	440b      	add	r3, r1
 800cf84:	333d      	adds	r3, #61	; 0x3d
 800cf86:	2201      	movs	r2, #1
 800cf88:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800cf8a:	6879      	ldr	r1, [r7, #4]
 800cf8c:	68fa      	ldr	r2, [r7, #12]
 800cf8e:	4613      	mov	r3, r2
 800cf90:	009b      	lsls	r3, r3, #2
 800cf92:	4413      	add	r3, r2
 800cf94:	00db      	lsls	r3, r3, #3
 800cf96:	440b      	add	r3, r1
 800cf98:	3358      	adds	r3, #88	; 0x58
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	015a      	lsls	r2, r3, #5
 800cfa2:	693b      	ldr	r3, [r7, #16]
 800cfa4:	4413      	add	r3, r2
 800cfa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfaa:	68db      	ldr	r3, [r3, #12]
 800cfac:	68fa      	ldr	r2, [r7, #12]
 800cfae:	0151      	lsls	r1, r2, #5
 800cfb0:	693a      	ldr	r2, [r7, #16]
 800cfb2:	440a      	add	r2, r1
 800cfb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cfb8:	f043 0302 	orr.w	r3, r3, #2
 800cfbc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	68fa      	ldr	r2, [r7, #12]
 800cfc4:	b2d2      	uxtb	r2, r2
 800cfc6:	4611      	mov	r1, r2
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f005 fe44 	bl	8012c56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	015a      	lsls	r2, r3, #5
 800cfd2:	693b      	ldr	r3, [r7, #16]
 800cfd4:	4413      	add	r3, r2
 800cfd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfda:	461a      	mov	r2, r3
 800cfdc:	2340      	movs	r3, #64	; 0x40
 800cfde:	6093      	str	r3, [r2, #8]
}
 800cfe0:	e286      	b.n	800d4f0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	015a      	lsls	r2, r3, #5
 800cfe6:	693b      	ldr	r3, [r7, #16]
 800cfe8:	4413      	add	r3, r2
 800cfea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfee:	689b      	ldr	r3, [r3, #8]
 800cff0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cff8:	d122      	bne.n	800d040 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	015a      	lsls	r2, r3, #5
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	4413      	add	r3, r2
 800d002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d006:	68db      	ldr	r3, [r3, #12]
 800d008:	68fa      	ldr	r2, [r7, #12]
 800d00a:	0151      	lsls	r1, r2, #5
 800d00c:	693a      	ldr	r2, [r7, #16]
 800d00e:	440a      	add	r2, r1
 800d010:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d014:	f043 0302 	orr.w	r3, r3, #2
 800d018:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	68fa      	ldr	r2, [r7, #12]
 800d020:	b2d2      	uxtb	r2, r2
 800d022:	4611      	mov	r1, r2
 800d024:	4618      	mov	r0, r3
 800d026:	f005 fe16 	bl	8012c56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	015a      	lsls	r2, r3, #5
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	4413      	add	r3, r2
 800d032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d036:	461a      	mov	r2, r3
 800d038:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d03c:	6093      	str	r3, [r2, #8]
}
 800d03e:	e257      	b.n	800d4f0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	015a      	lsls	r2, r3, #5
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	4413      	add	r3, r2
 800d048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d04c:	689b      	ldr	r3, [r3, #8]
 800d04e:	f003 0301 	and.w	r3, r3, #1
 800d052:	2b01      	cmp	r3, #1
 800d054:	d135      	bne.n	800d0c2 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800d056:	6879      	ldr	r1, [r7, #4]
 800d058:	68fa      	ldr	r2, [r7, #12]
 800d05a:	4613      	mov	r3, r2
 800d05c:	009b      	lsls	r3, r3, #2
 800d05e:	4413      	add	r3, r2
 800d060:	00db      	lsls	r3, r3, #3
 800d062:	440b      	add	r3, r1
 800d064:	3358      	adds	r3, #88	; 0x58
 800d066:	2200      	movs	r2, #0
 800d068:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	015a      	lsls	r2, r3, #5
 800d06e:	693b      	ldr	r3, [r7, #16]
 800d070:	4413      	add	r3, r2
 800d072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d076:	68db      	ldr	r3, [r3, #12]
 800d078:	68fa      	ldr	r2, [r7, #12]
 800d07a:	0151      	lsls	r1, r2, #5
 800d07c:	693a      	ldr	r2, [r7, #16]
 800d07e:	440a      	add	r2, r1
 800d080:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d084:	f043 0302 	orr.w	r3, r3, #2
 800d088:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	68fa      	ldr	r2, [r7, #12]
 800d090:	b2d2      	uxtb	r2, r2
 800d092:	4611      	mov	r1, r2
 800d094:	4618      	mov	r0, r3
 800d096:	f005 fdde 	bl	8012c56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	015a      	lsls	r2, r3, #5
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	4413      	add	r3, r2
 800d0a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d0a6:	461a      	mov	r2, r3
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800d0ac:	6879      	ldr	r1, [r7, #4]
 800d0ae:	68fa      	ldr	r2, [r7, #12]
 800d0b0:	4613      	mov	r3, r2
 800d0b2:	009b      	lsls	r3, r3, #2
 800d0b4:	4413      	add	r3, r2
 800d0b6:	00db      	lsls	r3, r3, #3
 800d0b8:	440b      	add	r3, r1
 800d0ba:	335d      	adds	r3, #93	; 0x5d
 800d0bc:	2201      	movs	r2, #1
 800d0be:	701a      	strb	r2, [r3, #0]
}
 800d0c0:	e216      	b.n	800d4f0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	015a      	lsls	r2, r3, #5
 800d0c6:	693b      	ldr	r3, [r7, #16]
 800d0c8:	4413      	add	r3, r2
 800d0ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d0ce:	689b      	ldr	r3, [r3, #8]
 800d0d0:	f003 0308 	and.w	r3, r3, #8
 800d0d4:	2b08      	cmp	r3, #8
 800d0d6:	d12b      	bne.n	800d130 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	015a      	lsls	r2, r3, #5
 800d0dc:	693b      	ldr	r3, [r7, #16]
 800d0de:	4413      	add	r3, r2
 800d0e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d0e4:	461a      	mov	r2, r3
 800d0e6:	2308      	movs	r3, #8
 800d0e8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	015a      	lsls	r2, r3, #5
 800d0ee:	693b      	ldr	r3, [r7, #16]
 800d0f0:	4413      	add	r3, r2
 800d0f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d0f6:	68db      	ldr	r3, [r3, #12]
 800d0f8:	68fa      	ldr	r2, [r7, #12]
 800d0fa:	0151      	lsls	r1, r2, #5
 800d0fc:	693a      	ldr	r2, [r7, #16]
 800d0fe:	440a      	add	r2, r1
 800d100:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d104:	f043 0302 	orr.w	r3, r3, #2
 800d108:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	68fa      	ldr	r2, [r7, #12]
 800d110:	b2d2      	uxtb	r2, r2
 800d112:	4611      	mov	r1, r2
 800d114:	4618      	mov	r0, r3
 800d116:	f005 fd9e 	bl	8012c56 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800d11a:	6879      	ldr	r1, [r7, #4]
 800d11c:	68fa      	ldr	r2, [r7, #12]
 800d11e:	4613      	mov	r3, r2
 800d120:	009b      	lsls	r3, r3, #2
 800d122:	4413      	add	r3, r2
 800d124:	00db      	lsls	r3, r3, #3
 800d126:	440b      	add	r3, r1
 800d128:	335d      	adds	r3, #93	; 0x5d
 800d12a:	2205      	movs	r2, #5
 800d12c:	701a      	strb	r2, [r3, #0]
}
 800d12e:	e1df      	b.n	800d4f0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	015a      	lsls	r2, r3, #5
 800d134:	693b      	ldr	r3, [r7, #16]
 800d136:	4413      	add	r3, r2
 800d138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d13c:	689b      	ldr	r3, [r3, #8]
 800d13e:	f003 0310 	and.w	r3, r3, #16
 800d142:	2b10      	cmp	r3, #16
 800d144:	d135      	bne.n	800d1b2 <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800d146:	6879      	ldr	r1, [r7, #4]
 800d148:	68fa      	ldr	r2, [r7, #12]
 800d14a:	4613      	mov	r3, r2
 800d14c:	009b      	lsls	r3, r3, #2
 800d14e:	4413      	add	r3, r2
 800d150:	00db      	lsls	r3, r3, #3
 800d152:	440b      	add	r3, r1
 800d154:	3358      	adds	r3, #88	; 0x58
 800d156:	2200      	movs	r2, #0
 800d158:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800d15a:	6879      	ldr	r1, [r7, #4]
 800d15c:	68fa      	ldr	r2, [r7, #12]
 800d15e:	4613      	mov	r3, r2
 800d160:	009b      	lsls	r3, r3, #2
 800d162:	4413      	add	r3, r2
 800d164:	00db      	lsls	r3, r3, #3
 800d166:	440b      	add	r3, r1
 800d168:	335d      	adds	r3, #93	; 0x5d
 800d16a:	2203      	movs	r2, #3
 800d16c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	015a      	lsls	r2, r3, #5
 800d172:	693b      	ldr	r3, [r7, #16]
 800d174:	4413      	add	r3, r2
 800d176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d17a:	68db      	ldr	r3, [r3, #12]
 800d17c:	68fa      	ldr	r2, [r7, #12]
 800d17e:	0151      	lsls	r1, r2, #5
 800d180:	693a      	ldr	r2, [r7, #16]
 800d182:	440a      	add	r2, r1
 800d184:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d188:	f043 0302 	orr.w	r3, r3, #2
 800d18c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	68fa      	ldr	r2, [r7, #12]
 800d194:	b2d2      	uxtb	r2, r2
 800d196:	4611      	mov	r1, r2
 800d198:	4618      	mov	r0, r3
 800d19a:	f005 fd5c 	bl	8012c56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	015a      	lsls	r2, r3, #5
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	4413      	add	r3, r2
 800d1a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1aa:	461a      	mov	r2, r3
 800d1ac:	2310      	movs	r3, #16
 800d1ae:	6093      	str	r3, [r2, #8]
}
 800d1b0:	e19e      	b.n	800d4f0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	015a      	lsls	r2, r3, #5
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	4413      	add	r3, r2
 800d1ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1be:	689b      	ldr	r3, [r3, #8]
 800d1c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1c4:	2b80      	cmp	r3, #128	; 0x80
 800d1c6:	d12b      	bne.n	800d220 <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	015a      	lsls	r2, r3, #5
 800d1cc:	693b      	ldr	r3, [r7, #16]
 800d1ce:	4413      	add	r3, r2
 800d1d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1d4:	68db      	ldr	r3, [r3, #12]
 800d1d6:	68fa      	ldr	r2, [r7, #12]
 800d1d8:	0151      	lsls	r1, r2, #5
 800d1da:	693a      	ldr	r2, [r7, #16]
 800d1dc:	440a      	add	r2, r1
 800d1de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d1e2:	f043 0302 	orr.w	r3, r3, #2
 800d1e6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	68fa      	ldr	r2, [r7, #12]
 800d1ee:	b2d2      	uxtb	r2, r2
 800d1f0:	4611      	mov	r1, r2
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f005 fd2f 	bl	8012c56 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800d1f8:	6879      	ldr	r1, [r7, #4]
 800d1fa:	68fa      	ldr	r2, [r7, #12]
 800d1fc:	4613      	mov	r3, r2
 800d1fe:	009b      	lsls	r3, r3, #2
 800d200:	4413      	add	r3, r2
 800d202:	00db      	lsls	r3, r3, #3
 800d204:	440b      	add	r3, r1
 800d206:	335d      	adds	r3, #93	; 0x5d
 800d208:	2206      	movs	r2, #6
 800d20a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	015a      	lsls	r2, r3, #5
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	4413      	add	r3, r2
 800d214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d218:	461a      	mov	r2, r3
 800d21a:	2380      	movs	r3, #128	; 0x80
 800d21c:	6093      	str	r3, [r2, #8]
}
 800d21e:	e167      	b.n	800d4f0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	015a      	lsls	r2, r3, #5
 800d224:	693b      	ldr	r3, [r7, #16]
 800d226:	4413      	add	r3, r2
 800d228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d22c:	689b      	ldr	r3, [r3, #8]
 800d22e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d236:	d135      	bne.n	800d2a4 <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	015a      	lsls	r2, r3, #5
 800d23c:	693b      	ldr	r3, [r7, #16]
 800d23e:	4413      	add	r3, r2
 800d240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d244:	68db      	ldr	r3, [r3, #12]
 800d246:	68fa      	ldr	r2, [r7, #12]
 800d248:	0151      	lsls	r1, r2, #5
 800d24a:	693a      	ldr	r2, [r7, #16]
 800d24c:	440a      	add	r2, r1
 800d24e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d252:	f043 0302 	orr.w	r3, r3, #2
 800d256:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	68fa      	ldr	r2, [r7, #12]
 800d25e:	b2d2      	uxtb	r2, r2
 800d260:	4611      	mov	r1, r2
 800d262:	4618      	mov	r0, r3
 800d264:	f005 fcf7 	bl	8012c56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	015a      	lsls	r2, r3, #5
 800d26c:	693b      	ldr	r3, [r7, #16]
 800d26e:	4413      	add	r3, r2
 800d270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d274:	461a      	mov	r2, r3
 800d276:	2310      	movs	r3, #16
 800d278:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	015a      	lsls	r2, r3, #5
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	4413      	add	r3, r2
 800d282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d286:	461a      	mov	r2, r3
 800d288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d28c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800d28e:	6879      	ldr	r1, [r7, #4]
 800d290:	68fa      	ldr	r2, [r7, #12]
 800d292:	4613      	mov	r3, r2
 800d294:	009b      	lsls	r3, r3, #2
 800d296:	4413      	add	r3, r2
 800d298:	00db      	lsls	r3, r3, #3
 800d29a:	440b      	add	r3, r1
 800d29c:	335d      	adds	r3, #93	; 0x5d
 800d29e:	2208      	movs	r2, #8
 800d2a0:	701a      	strb	r2, [r3, #0]
}
 800d2a2:	e125      	b.n	800d4f0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	015a      	lsls	r2, r3, #5
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	4413      	add	r3, r2
 800d2ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2b0:	689b      	ldr	r3, [r3, #8]
 800d2b2:	f003 0302 	and.w	r3, r3, #2
 800d2b6:	2b02      	cmp	r3, #2
 800d2b8:	f040 811a 	bne.w	800d4f0 <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	015a      	lsls	r2, r3, #5
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	4413      	add	r3, r2
 800d2c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2c8:	68db      	ldr	r3, [r3, #12]
 800d2ca:	68fa      	ldr	r2, [r7, #12]
 800d2cc:	0151      	lsls	r1, r2, #5
 800d2ce:	693a      	ldr	r2, [r7, #16]
 800d2d0:	440a      	add	r2, r1
 800d2d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d2d6:	f023 0302 	bic.w	r3, r3, #2
 800d2da:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800d2dc:	6879      	ldr	r1, [r7, #4]
 800d2de:	68fa      	ldr	r2, [r7, #12]
 800d2e0:	4613      	mov	r3, r2
 800d2e2:	009b      	lsls	r3, r3, #2
 800d2e4:	4413      	add	r3, r2
 800d2e6:	00db      	lsls	r3, r3, #3
 800d2e8:	440b      	add	r3, r1
 800d2ea:	335d      	adds	r3, #93	; 0x5d
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	2b01      	cmp	r3, #1
 800d2f0:	d137      	bne.n	800d362 <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800d2f2:	6879      	ldr	r1, [r7, #4]
 800d2f4:	68fa      	ldr	r2, [r7, #12]
 800d2f6:	4613      	mov	r3, r2
 800d2f8:	009b      	lsls	r3, r3, #2
 800d2fa:	4413      	add	r3, r2
 800d2fc:	00db      	lsls	r3, r3, #3
 800d2fe:	440b      	add	r3, r1
 800d300:	335c      	adds	r3, #92	; 0x5c
 800d302:	2201      	movs	r2, #1
 800d304:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800d306:	6879      	ldr	r1, [r7, #4]
 800d308:	68fa      	ldr	r2, [r7, #12]
 800d30a:	4613      	mov	r3, r2
 800d30c:	009b      	lsls	r3, r3, #2
 800d30e:	4413      	add	r3, r2
 800d310:	00db      	lsls	r3, r3, #3
 800d312:	440b      	add	r3, r1
 800d314:	333f      	adds	r3, #63	; 0x3f
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	2b02      	cmp	r3, #2
 800d31a:	d00b      	beq.n	800d334 <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800d31c:	6879      	ldr	r1, [r7, #4]
 800d31e:	68fa      	ldr	r2, [r7, #12]
 800d320:	4613      	mov	r3, r2
 800d322:	009b      	lsls	r3, r3, #2
 800d324:	4413      	add	r3, r2
 800d326:	00db      	lsls	r3, r3, #3
 800d328:	440b      	add	r3, r1
 800d32a:	333f      	adds	r3, #63	; 0x3f
 800d32c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800d32e:	2b03      	cmp	r3, #3
 800d330:	f040 80c5 	bne.w	800d4be <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800d334:	6879      	ldr	r1, [r7, #4]
 800d336:	68fa      	ldr	r2, [r7, #12]
 800d338:	4613      	mov	r3, r2
 800d33a:	009b      	lsls	r3, r3, #2
 800d33c:	4413      	add	r3, r2
 800d33e:	00db      	lsls	r3, r3, #3
 800d340:	440b      	add	r3, r1
 800d342:	3351      	adds	r3, #81	; 0x51
 800d344:	781b      	ldrb	r3, [r3, #0]
 800d346:	f083 0301 	eor.w	r3, r3, #1
 800d34a:	b2d8      	uxtb	r0, r3
 800d34c:	6879      	ldr	r1, [r7, #4]
 800d34e:	68fa      	ldr	r2, [r7, #12]
 800d350:	4613      	mov	r3, r2
 800d352:	009b      	lsls	r3, r3, #2
 800d354:	4413      	add	r3, r2
 800d356:	00db      	lsls	r3, r3, #3
 800d358:	440b      	add	r3, r1
 800d35a:	3351      	adds	r3, #81	; 0x51
 800d35c:	4602      	mov	r2, r0
 800d35e:	701a      	strb	r2, [r3, #0]
 800d360:	e0ad      	b.n	800d4be <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800d362:	6879      	ldr	r1, [r7, #4]
 800d364:	68fa      	ldr	r2, [r7, #12]
 800d366:	4613      	mov	r3, r2
 800d368:	009b      	lsls	r3, r3, #2
 800d36a:	4413      	add	r3, r2
 800d36c:	00db      	lsls	r3, r3, #3
 800d36e:	440b      	add	r3, r1
 800d370:	335d      	adds	r3, #93	; 0x5d
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	2b03      	cmp	r3, #3
 800d376:	d10a      	bne.n	800d38e <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800d378:	6879      	ldr	r1, [r7, #4]
 800d37a:	68fa      	ldr	r2, [r7, #12]
 800d37c:	4613      	mov	r3, r2
 800d37e:	009b      	lsls	r3, r3, #2
 800d380:	4413      	add	r3, r2
 800d382:	00db      	lsls	r3, r3, #3
 800d384:	440b      	add	r3, r1
 800d386:	335c      	adds	r3, #92	; 0x5c
 800d388:	2202      	movs	r2, #2
 800d38a:	701a      	strb	r2, [r3, #0]
 800d38c:	e097      	b.n	800d4be <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800d38e:	6879      	ldr	r1, [r7, #4]
 800d390:	68fa      	ldr	r2, [r7, #12]
 800d392:	4613      	mov	r3, r2
 800d394:	009b      	lsls	r3, r3, #2
 800d396:	4413      	add	r3, r2
 800d398:	00db      	lsls	r3, r3, #3
 800d39a:	440b      	add	r3, r1
 800d39c:	335d      	adds	r3, #93	; 0x5d
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	2b04      	cmp	r3, #4
 800d3a2:	d10a      	bne.n	800d3ba <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800d3a4:	6879      	ldr	r1, [r7, #4]
 800d3a6:	68fa      	ldr	r2, [r7, #12]
 800d3a8:	4613      	mov	r3, r2
 800d3aa:	009b      	lsls	r3, r3, #2
 800d3ac:	4413      	add	r3, r2
 800d3ae:	00db      	lsls	r3, r3, #3
 800d3b0:	440b      	add	r3, r1
 800d3b2:	335c      	adds	r3, #92	; 0x5c
 800d3b4:	2202      	movs	r2, #2
 800d3b6:	701a      	strb	r2, [r3, #0]
 800d3b8:	e081      	b.n	800d4be <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800d3ba:	6879      	ldr	r1, [r7, #4]
 800d3bc:	68fa      	ldr	r2, [r7, #12]
 800d3be:	4613      	mov	r3, r2
 800d3c0:	009b      	lsls	r3, r3, #2
 800d3c2:	4413      	add	r3, r2
 800d3c4:	00db      	lsls	r3, r3, #3
 800d3c6:	440b      	add	r3, r1
 800d3c8:	335d      	adds	r3, #93	; 0x5d
 800d3ca:	781b      	ldrb	r3, [r3, #0]
 800d3cc:	2b05      	cmp	r3, #5
 800d3ce:	d10a      	bne.n	800d3e6 <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800d3d0:	6879      	ldr	r1, [r7, #4]
 800d3d2:	68fa      	ldr	r2, [r7, #12]
 800d3d4:	4613      	mov	r3, r2
 800d3d6:	009b      	lsls	r3, r3, #2
 800d3d8:	4413      	add	r3, r2
 800d3da:	00db      	lsls	r3, r3, #3
 800d3dc:	440b      	add	r3, r1
 800d3de:	335c      	adds	r3, #92	; 0x5c
 800d3e0:	2205      	movs	r2, #5
 800d3e2:	701a      	strb	r2, [r3, #0]
 800d3e4:	e06b      	b.n	800d4be <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800d3e6:	6879      	ldr	r1, [r7, #4]
 800d3e8:	68fa      	ldr	r2, [r7, #12]
 800d3ea:	4613      	mov	r3, r2
 800d3ec:	009b      	lsls	r3, r3, #2
 800d3ee:	4413      	add	r3, r2
 800d3f0:	00db      	lsls	r3, r3, #3
 800d3f2:	440b      	add	r3, r1
 800d3f4:	335d      	adds	r3, #93	; 0x5d
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	2b06      	cmp	r3, #6
 800d3fa:	d00a      	beq.n	800d412 <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800d3fc:	6879      	ldr	r1, [r7, #4]
 800d3fe:	68fa      	ldr	r2, [r7, #12]
 800d400:	4613      	mov	r3, r2
 800d402:	009b      	lsls	r3, r3, #2
 800d404:	4413      	add	r3, r2
 800d406:	00db      	lsls	r3, r3, #3
 800d408:	440b      	add	r3, r1
 800d40a:	335d      	adds	r3, #93	; 0x5d
 800d40c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800d40e:	2b08      	cmp	r3, #8
 800d410:	d155      	bne.n	800d4be <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 800d412:	6879      	ldr	r1, [r7, #4]
 800d414:	68fa      	ldr	r2, [r7, #12]
 800d416:	4613      	mov	r3, r2
 800d418:	009b      	lsls	r3, r3, #2
 800d41a:	4413      	add	r3, r2
 800d41c:	00db      	lsls	r3, r3, #3
 800d41e:	440b      	add	r3, r1
 800d420:	3358      	adds	r3, #88	; 0x58
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	1c59      	adds	r1, r3, #1
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	68fa      	ldr	r2, [r7, #12]
 800d42a:	4613      	mov	r3, r2
 800d42c:	009b      	lsls	r3, r3, #2
 800d42e:	4413      	add	r3, r2
 800d430:	00db      	lsls	r3, r3, #3
 800d432:	4403      	add	r3, r0
 800d434:	3358      	adds	r3, #88	; 0x58
 800d436:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800d438:	6879      	ldr	r1, [r7, #4]
 800d43a:	68fa      	ldr	r2, [r7, #12]
 800d43c:	4613      	mov	r3, r2
 800d43e:	009b      	lsls	r3, r3, #2
 800d440:	4413      	add	r3, r2
 800d442:	00db      	lsls	r3, r3, #3
 800d444:	440b      	add	r3, r1
 800d446:	3358      	adds	r3, #88	; 0x58
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	2b03      	cmp	r3, #3
 800d44c:	d914      	bls.n	800d478 <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800d44e:	6879      	ldr	r1, [r7, #4]
 800d450:	68fa      	ldr	r2, [r7, #12]
 800d452:	4613      	mov	r3, r2
 800d454:	009b      	lsls	r3, r3, #2
 800d456:	4413      	add	r3, r2
 800d458:	00db      	lsls	r3, r3, #3
 800d45a:	440b      	add	r3, r1
 800d45c:	3358      	adds	r3, #88	; 0x58
 800d45e:	2200      	movs	r2, #0
 800d460:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800d462:	6879      	ldr	r1, [r7, #4]
 800d464:	68fa      	ldr	r2, [r7, #12]
 800d466:	4613      	mov	r3, r2
 800d468:	009b      	lsls	r3, r3, #2
 800d46a:	4413      	add	r3, r2
 800d46c:	00db      	lsls	r3, r3, #3
 800d46e:	440b      	add	r3, r1
 800d470:	335c      	adds	r3, #92	; 0x5c
 800d472:	2204      	movs	r2, #4
 800d474:	701a      	strb	r2, [r3, #0]
 800d476:	e009      	b.n	800d48c <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800d478:	6879      	ldr	r1, [r7, #4]
 800d47a:	68fa      	ldr	r2, [r7, #12]
 800d47c:	4613      	mov	r3, r2
 800d47e:	009b      	lsls	r3, r3, #2
 800d480:	4413      	add	r3, r2
 800d482:	00db      	lsls	r3, r3, #3
 800d484:	440b      	add	r3, r1
 800d486:	335c      	adds	r3, #92	; 0x5c
 800d488:	2202      	movs	r2, #2
 800d48a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	015a      	lsls	r2, r3, #5
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	4413      	add	r3, r2
 800d494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d4a2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d4aa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	015a      	lsls	r2, r3, #5
 800d4b0:	693b      	ldr	r3, [r7, #16]
 800d4b2:	4413      	add	r3, r2
 800d4b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4b8:	461a      	mov	r2, r3
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	015a      	lsls	r2, r3, #5
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	4413      	add	r3, r2
 800d4c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4ca:	461a      	mov	r2, r3
 800d4cc:	2302      	movs	r3, #2
 800d4ce:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	b2d8      	uxtb	r0, r3
 800d4d4:	6879      	ldr	r1, [r7, #4]
 800d4d6:	68fa      	ldr	r2, [r7, #12]
 800d4d8:	4613      	mov	r3, r2
 800d4da:	009b      	lsls	r3, r3, #2
 800d4dc:	4413      	add	r3, r2
 800d4de:	00db      	lsls	r3, r3, #3
 800d4e0:	440b      	add	r3, r1
 800d4e2:	335c      	adds	r3, #92	; 0x5c
 800d4e4:	781b      	ldrb	r3, [r3, #0]
 800d4e6:	461a      	mov	r2, r3
 800d4e8:	4601      	mov	r1, r0
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f00f f8ca 	bl	801c684 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800d4f0:	bf00      	nop
 800d4f2:	3718      	adds	r7, #24
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}

0800d4f8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b08a      	sub	sp, #40	; 0x28
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d508:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	6a1b      	ldr	r3, [r3, #32]
 800d510:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800d512:	69fb      	ldr	r3, [r7, #28]
 800d514:	f003 030f 	and.w	r3, r3, #15
 800d518:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800d51a:	69fb      	ldr	r3, [r7, #28]
 800d51c:	0c5b      	lsrs	r3, r3, #17
 800d51e:	f003 030f 	and.w	r3, r3, #15
 800d522:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d524:	69fb      	ldr	r3, [r7, #28]
 800d526:	091b      	lsrs	r3, r3, #4
 800d528:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d52c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	2b02      	cmp	r3, #2
 800d532:	d003      	beq.n	800d53c <HCD_RXQLVL_IRQHandler+0x44>
 800d534:	2b05      	cmp	r3, #5
 800d536:	f000 8082 	beq.w	800d63e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800d53a:	e083      	b.n	800d644 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800d53c:	693b      	ldr	r3, [r7, #16]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d07f      	beq.n	800d642 <HCD_RXQLVL_IRQHandler+0x14a>
 800d542:	6879      	ldr	r1, [r7, #4]
 800d544:	69ba      	ldr	r2, [r7, #24]
 800d546:	4613      	mov	r3, r2
 800d548:	009b      	lsls	r3, r3, #2
 800d54a:	4413      	add	r3, r2
 800d54c:	00db      	lsls	r3, r3, #3
 800d54e:	440b      	add	r3, r1
 800d550:	3344      	adds	r3, #68	; 0x44
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d074      	beq.n	800d642 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	6818      	ldr	r0, [r3, #0]
 800d55c:	6879      	ldr	r1, [r7, #4]
 800d55e:	69ba      	ldr	r2, [r7, #24]
 800d560:	4613      	mov	r3, r2
 800d562:	009b      	lsls	r3, r3, #2
 800d564:	4413      	add	r3, r2
 800d566:	00db      	lsls	r3, r3, #3
 800d568:	440b      	add	r3, r1
 800d56a:	3344      	adds	r3, #68	; 0x44
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	693a      	ldr	r2, [r7, #16]
 800d570:	b292      	uxth	r2, r2
 800d572:	4619      	mov	r1, r3
 800d574:	f004 ffa9 	bl	80124ca <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800d578:	6879      	ldr	r1, [r7, #4]
 800d57a:	69ba      	ldr	r2, [r7, #24]
 800d57c:	4613      	mov	r3, r2
 800d57e:	009b      	lsls	r3, r3, #2
 800d580:	4413      	add	r3, r2
 800d582:	00db      	lsls	r3, r3, #3
 800d584:	440b      	add	r3, r1
 800d586:	3344      	adds	r3, #68	; 0x44
 800d588:	681a      	ldr	r2, [r3, #0]
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	18d1      	adds	r1, r2, r3
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	69ba      	ldr	r2, [r7, #24]
 800d592:	4613      	mov	r3, r2
 800d594:	009b      	lsls	r3, r3, #2
 800d596:	4413      	add	r3, r2
 800d598:	00db      	lsls	r3, r3, #3
 800d59a:	4403      	add	r3, r0
 800d59c:	3344      	adds	r3, #68	; 0x44
 800d59e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800d5a0:	6879      	ldr	r1, [r7, #4]
 800d5a2:	69ba      	ldr	r2, [r7, #24]
 800d5a4:	4613      	mov	r3, r2
 800d5a6:	009b      	lsls	r3, r3, #2
 800d5a8:	4413      	add	r3, r2
 800d5aa:	00db      	lsls	r3, r3, #3
 800d5ac:	440b      	add	r3, r1
 800d5ae:	334c      	adds	r3, #76	; 0x4c
 800d5b0:	681a      	ldr	r2, [r3, #0]
 800d5b2:	693b      	ldr	r3, [r7, #16]
 800d5b4:	18d1      	adds	r1, r2, r3
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	69ba      	ldr	r2, [r7, #24]
 800d5ba:	4613      	mov	r3, r2
 800d5bc:	009b      	lsls	r3, r3, #2
 800d5be:	4413      	add	r3, r2
 800d5c0:	00db      	lsls	r3, r3, #3
 800d5c2:	4403      	add	r3, r0
 800d5c4:	334c      	adds	r3, #76	; 0x4c
 800d5c6:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800d5c8:	69bb      	ldr	r3, [r7, #24]
 800d5ca:	015a      	lsls	r2, r3, #5
 800d5cc:	6a3b      	ldr	r3, [r7, #32]
 800d5ce:	4413      	add	r3, r2
 800d5d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5d4:	691a      	ldr	r2, [r3, #16]
 800d5d6:	4b1d      	ldr	r3, [pc, #116]	; (800d64c <HCD_RXQLVL_IRQHandler+0x154>)
 800d5d8:	4013      	ands	r3, r2
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d031      	beq.n	800d642 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d5de:	69bb      	ldr	r3, [r7, #24]
 800d5e0:	015a      	lsls	r2, r3, #5
 800d5e2:	6a3b      	ldr	r3, [r7, #32]
 800d5e4:	4413      	add	r3, r2
 800d5e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d5f4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d5fc:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d5fe:	69bb      	ldr	r3, [r7, #24]
 800d600:	015a      	lsls	r2, r3, #5
 800d602:	6a3b      	ldr	r3, [r7, #32]
 800d604:	4413      	add	r3, r2
 800d606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d60a:	461a      	mov	r2, r3
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800d610:	6879      	ldr	r1, [r7, #4]
 800d612:	69ba      	ldr	r2, [r7, #24]
 800d614:	4613      	mov	r3, r2
 800d616:	009b      	lsls	r3, r3, #2
 800d618:	4413      	add	r3, r2
 800d61a:	00db      	lsls	r3, r3, #3
 800d61c:	440b      	add	r3, r1
 800d61e:	3350      	adds	r3, #80	; 0x50
 800d620:	781b      	ldrb	r3, [r3, #0]
 800d622:	f083 0301 	eor.w	r3, r3, #1
 800d626:	b2d8      	uxtb	r0, r3
 800d628:	6879      	ldr	r1, [r7, #4]
 800d62a:	69ba      	ldr	r2, [r7, #24]
 800d62c:	4613      	mov	r3, r2
 800d62e:	009b      	lsls	r3, r3, #2
 800d630:	4413      	add	r3, r2
 800d632:	00db      	lsls	r3, r3, #3
 800d634:	440b      	add	r3, r1
 800d636:	3350      	adds	r3, #80	; 0x50
 800d638:	4602      	mov	r2, r0
 800d63a:	701a      	strb	r2, [r3, #0]
      break;
 800d63c:	e001      	b.n	800d642 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800d63e:	bf00      	nop
 800d640:	e000      	b.n	800d644 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800d642:	bf00      	nop
  }
}
 800d644:	bf00      	nop
 800d646:	3728      	adds	r7, #40	; 0x28
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}
 800d64c:	1ff80000 	.word	0x1ff80000

0800d650 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b086      	sub	sp, #24
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800d662:	693b      	ldr	r3, [r7, #16]
 800d664:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800d66c:	693b      	ldr	r3, [r7, #16]
 800d66e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d67c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	f003 0302 	and.w	r3, r3, #2
 800d684:	2b02      	cmp	r3, #2
 800d686:	d10b      	bne.n	800d6a0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	f003 0301 	and.w	r3, r3, #1
 800d68e:	2b01      	cmp	r3, #1
 800d690:	d102      	bne.n	800d698 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f00e ffda 	bl	801c64c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	f043 0302 	orr.w	r3, r3, #2
 800d69e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	f003 0308 	and.w	r3, r3, #8
 800d6a6:	2b08      	cmp	r3, #8
 800d6a8:	d132      	bne.n	800d710 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	f043 0308 	orr.w	r3, r3, #8
 800d6b0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	f003 0304 	and.w	r3, r3, #4
 800d6b8:	2b04      	cmp	r3, #4
 800d6ba:	d126      	bne.n	800d70a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	699b      	ldr	r3, [r3, #24]
 800d6c0:	2b02      	cmp	r3, #2
 800d6c2:	d113      	bne.n	800d6ec <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800d6ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d6ce:	d106      	bne.n	800d6de <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	2102      	movs	r1, #2
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f004 fff4 	bl	80126c4 <USB_InitFSLSPClkSel>
 800d6dc:	e011      	b.n	800d702 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	2101      	movs	r1, #1
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f004 ffed 	bl	80126c4 <USB_InitFSLSPClkSel>
 800d6ea:	e00a      	b.n	800d702 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	68db      	ldr	r3, [r3, #12]
 800d6f0:	2b01      	cmp	r3, #1
 800d6f2:	d106      	bne.n	800d702 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800d6f4:	693b      	ldr	r3, [r7, #16]
 800d6f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	f64e 2360 	movw	r3, #60000	; 0xea60
 800d700:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f00e ffcc 	bl	801c6a0 <HAL_HCD_PortEnabled_Callback>
 800d708:	e002      	b.n	800d710 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f00e ffd6 	bl	801c6bc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	f003 0320 	and.w	r3, r3, #32
 800d716:	2b20      	cmp	r3, #32
 800d718:	d103      	bne.n	800d722 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	f043 0320 	orr.w	r3, r3, #32
 800d720:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d728:	461a      	mov	r2, r3
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	6013      	str	r3, [r2, #0]
}
 800d72e:	bf00      	nop
 800d730:	3718      	adds	r7, #24
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}

0800d736 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d736:	b580      	push	{r7, lr}
 800d738:	b082      	sub	sp, #8
 800d73a:	af00      	add	r7, sp, #0
 800d73c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d101      	bne.n	800d748 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d744:	2301      	movs	r3, #1
 800d746:	e081      	b.n	800d84c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d74e:	b2db      	uxtb	r3, r3
 800d750:	2b00      	cmp	r3, #0
 800d752:	d106      	bne.n	800d762 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2200      	movs	r2, #0
 800d758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f000 f8a8 	bl	800d8b2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2224      	movs	r2, #36	; 0x24
 800d766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	681a      	ldr	r2, [r3, #0]
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	f022 0201 	bic.w	r2, r2, #1
 800d778:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	685a      	ldr	r2, [r3, #4]
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800d786:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	689a      	ldr	r2, [r3, #8]
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d796:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	68db      	ldr	r3, [r3, #12]
 800d79c:	2b01      	cmp	r3, #1
 800d79e:	d107      	bne.n	800d7b0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	689a      	ldr	r2, [r3, #8]
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d7ac:	609a      	str	r2, [r3, #8]
 800d7ae:	e006      	b.n	800d7be <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	689a      	ldr	r2, [r3, #8]
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800d7bc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	68db      	ldr	r3, [r3, #12]
 800d7c2:	2b02      	cmp	r3, #2
 800d7c4:	d104      	bne.n	800d7d0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d7ce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	685b      	ldr	r3, [r3, #4]
 800d7d6:	687a      	ldr	r2, [r7, #4]
 800d7d8:	6812      	ldr	r2, [r2, #0]
 800d7da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d7de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d7e2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	68da      	ldr	r2, [r3, #12]
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d7f2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	691a      	ldr	r2, [r3, #16]
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	695b      	ldr	r3, [r3, #20]
 800d7fc:	ea42 0103 	orr.w	r1, r2, r3
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	699b      	ldr	r3, [r3, #24]
 800d804:	021a      	lsls	r2, r3, #8
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	430a      	orrs	r2, r1
 800d80c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	69d9      	ldr	r1, [r3, #28]
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6a1a      	ldr	r2, [r3, #32]
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	430a      	orrs	r2, r1
 800d81c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	681a      	ldr	r2, [r3, #0]
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	f042 0201 	orr.w	r2, r2, #1
 800d82c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2200      	movs	r2, #0
 800d832:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2220      	movs	r2, #32
 800d838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2200      	movs	r2, #0
 800d840:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	2200      	movs	r2, #0
 800d846:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800d84a:	2300      	movs	r3, #0
}
 800d84c:	4618      	mov	r0, r3
 800d84e:	3708      	adds	r7, #8
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}

0800d854 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b082      	sub	sp, #8
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d101      	bne.n	800d866 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800d862:	2301      	movs	r3, #1
 800d864:	e021      	b.n	800d8aa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2224      	movs	r2, #36	; 0x24
 800d86a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	681a      	ldr	r2, [r3, #0]
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	f022 0201 	bic.w	r2, r2, #1
 800d87c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f000 f821 	bl	800d8c6 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2200      	movs	r2, #0
 800d888:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2200      	movs	r2, #0
 800d88e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2200      	movs	r2, #0
 800d896:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2200      	movs	r2, #0
 800d89c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d8a8:	2300      	movs	r3, #0
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	3708      	adds	r7, #8
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	bd80      	pop	{r7, pc}

0800d8b2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800d8b2:	b480      	push	{r7}
 800d8b4:	b083      	sub	sp, #12
 800d8b6:	af00      	add	r7, sp, #0
 800d8b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800d8ba:	bf00      	nop
 800d8bc:	370c      	adds	r7, #12
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c4:	4770      	bx	lr

0800d8c6 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800d8c6:	b480      	push	{r7}
 800d8c8:	b083      	sub	sp, #12
 800d8ca:	af00      	add	r7, sp, #0
 800d8cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800d8ce:	bf00      	nop
 800d8d0:	370c      	adds	r7, #12
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d8:	4770      	bx	lr
	...

0800d8dc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b088      	sub	sp, #32
 800d8e0:	af02      	add	r7, sp, #8
 800d8e2:	60f8      	str	r0, [r7, #12]
 800d8e4:	607a      	str	r2, [r7, #4]
 800d8e6:	461a      	mov	r2, r3
 800d8e8:	460b      	mov	r3, r1
 800d8ea:	817b      	strh	r3, [r7, #10]
 800d8ec:	4613      	mov	r3, r2
 800d8ee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d8f6:	b2db      	uxtb	r3, r3
 800d8f8:	2b20      	cmp	r3, #32
 800d8fa:	f040 80da 	bne.w	800dab2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d904:	2b01      	cmp	r3, #1
 800d906:	d101      	bne.n	800d90c <HAL_I2C_Master_Transmit+0x30>
 800d908:	2302      	movs	r3, #2
 800d90a:	e0d3      	b.n	800dab4 <HAL_I2C_Master_Transmit+0x1d8>
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	2201      	movs	r2, #1
 800d910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d914:	f7fc fa2e 	bl	8009d74 <HAL_GetTick>
 800d918:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	9300      	str	r3, [sp, #0]
 800d91e:	2319      	movs	r3, #25
 800d920:	2201      	movs	r2, #1
 800d922:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d926:	68f8      	ldr	r0, [r7, #12]
 800d928:	f000 fcd6 	bl	800e2d8 <I2C_WaitOnFlagUntilTimeout>
 800d92c:	4603      	mov	r3, r0
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d001      	beq.n	800d936 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800d932:	2301      	movs	r3, #1
 800d934:	e0be      	b.n	800dab4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	2221      	movs	r2, #33	; 0x21
 800d93a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	2210      	movs	r2, #16
 800d942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	2200      	movs	r2, #0
 800d94a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	687a      	ldr	r2, [r7, #4]
 800d950:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	893a      	ldrh	r2, [r7, #8]
 800d956:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	2200      	movs	r2, #0
 800d95c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d962:	b29b      	uxth	r3, r3
 800d964:	2bff      	cmp	r3, #255	; 0xff
 800d966:	d90e      	bls.n	800d986 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	22ff      	movs	r2, #255	; 0xff
 800d96c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d972:	b2da      	uxtb	r2, r3
 800d974:	8979      	ldrh	r1, [r7, #10]
 800d976:	4b51      	ldr	r3, [pc, #324]	; (800dabc <HAL_I2C_Master_Transmit+0x1e0>)
 800d978:	9300      	str	r3, [sp, #0]
 800d97a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d97e:	68f8      	ldr	r0, [r7, #12]
 800d980:	f000 fe38 	bl	800e5f4 <I2C_TransferConfig>
 800d984:	e06c      	b.n	800da60 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d98a:	b29a      	uxth	r2, r3
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d994:	b2da      	uxtb	r2, r3
 800d996:	8979      	ldrh	r1, [r7, #10]
 800d998:	4b48      	ldr	r3, [pc, #288]	; (800dabc <HAL_I2C_Master_Transmit+0x1e0>)
 800d99a:	9300      	str	r3, [sp, #0]
 800d99c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d9a0:	68f8      	ldr	r0, [r7, #12]
 800d9a2:	f000 fe27 	bl	800e5f4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800d9a6:	e05b      	b.n	800da60 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d9a8:	697a      	ldr	r2, [r7, #20]
 800d9aa:	6a39      	ldr	r1, [r7, #32]
 800d9ac:	68f8      	ldr	r0, [r7, #12]
 800d9ae:	f000 fcd3 	bl	800e358 <I2C_WaitOnTXISFlagUntilTimeout>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d001      	beq.n	800d9bc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	e07b      	b.n	800dab4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9c0:	781a      	ldrb	r2, [r3, #0]
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9cc:	1c5a      	adds	r2, r3, #1
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d9d6:	b29b      	uxth	r3, r3
 800d9d8:	3b01      	subs	r3, #1
 800d9da:	b29a      	uxth	r2, r3
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d9e4:	3b01      	subs	r3, #1
 800d9e6:	b29a      	uxth	r2, r3
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d9f0:	b29b      	uxth	r3, r3
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d034      	beq.n	800da60 <HAL_I2C_Master_Transmit+0x184>
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d130      	bne.n	800da60 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	9300      	str	r3, [sp, #0]
 800da02:	6a3b      	ldr	r3, [r7, #32]
 800da04:	2200      	movs	r2, #0
 800da06:	2180      	movs	r1, #128	; 0x80
 800da08:	68f8      	ldr	r0, [r7, #12]
 800da0a:	f000 fc65 	bl	800e2d8 <I2C_WaitOnFlagUntilTimeout>
 800da0e:	4603      	mov	r3, r0
 800da10:	2b00      	cmp	r3, #0
 800da12:	d001      	beq.n	800da18 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800da14:	2301      	movs	r3, #1
 800da16:	e04d      	b.n	800dab4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da1c:	b29b      	uxth	r3, r3
 800da1e:	2bff      	cmp	r3, #255	; 0xff
 800da20:	d90e      	bls.n	800da40 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	22ff      	movs	r2, #255	; 0xff
 800da26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da2c:	b2da      	uxtb	r2, r3
 800da2e:	8979      	ldrh	r1, [r7, #10]
 800da30:	2300      	movs	r3, #0
 800da32:	9300      	str	r3, [sp, #0]
 800da34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800da38:	68f8      	ldr	r0, [r7, #12]
 800da3a:	f000 fddb 	bl	800e5f4 <I2C_TransferConfig>
 800da3e:	e00f      	b.n	800da60 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da44:	b29a      	uxth	r2, r3
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da4e:	b2da      	uxtb	r2, r3
 800da50:	8979      	ldrh	r1, [r7, #10]
 800da52:	2300      	movs	r3, #0
 800da54:	9300      	str	r3, [sp, #0]
 800da56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800da5a:	68f8      	ldr	r0, [r7, #12]
 800da5c:	f000 fdca 	bl	800e5f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da64:	b29b      	uxth	r3, r3
 800da66:	2b00      	cmp	r3, #0
 800da68:	d19e      	bne.n	800d9a8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800da6a:	697a      	ldr	r2, [r7, #20]
 800da6c:	6a39      	ldr	r1, [r7, #32]
 800da6e:	68f8      	ldr	r0, [r7, #12]
 800da70:	f000 fcb2 	bl	800e3d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800da74:	4603      	mov	r3, r0
 800da76:	2b00      	cmp	r3, #0
 800da78:	d001      	beq.n	800da7e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800da7a:	2301      	movs	r3, #1
 800da7c:	e01a      	b.n	800dab4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	2220      	movs	r2, #32
 800da84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	6859      	ldr	r1, [r3, #4]
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	681a      	ldr	r2, [r3, #0]
 800da90:	4b0b      	ldr	r3, [pc, #44]	; (800dac0 <HAL_I2C_Master_Transmit+0x1e4>)
 800da92:	400b      	ands	r3, r1
 800da94:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	2220      	movs	r2, #32
 800da9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	2200      	movs	r2, #0
 800daa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	2200      	movs	r2, #0
 800daaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800daae:	2300      	movs	r3, #0
 800dab0:	e000      	b.n	800dab4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800dab2:	2302      	movs	r3, #2
  }
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3718      	adds	r7, #24
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}
 800dabc:	80002000 	.word	0x80002000
 800dac0:	fe00e800 	.word	0xfe00e800

0800dac4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b088      	sub	sp, #32
 800dac8:	af02      	add	r7, sp, #8
 800daca:	60f8      	str	r0, [r7, #12]
 800dacc:	607a      	str	r2, [r7, #4]
 800dace:	461a      	mov	r2, r3
 800dad0:	460b      	mov	r3, r1
 800dad2:	817b      	strh	r3, [r7, #10]
 800dad4:	4613      	mov	r3, r2
 800dad6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dade:	b2db      	uxtb	r3, r3
 800dae0:	2b20      	cmp	r3, #32
 800dae2:	f040 80db 	bne.w	800dc9c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800daec:	2b01      	cmp	r3, #1
 800daee:	d101      	bne.n	800daf4 <HAL_I2C_Master_Receive+0x30>
 800daf0:	2302      	movs	r3, #2
 800daf2:	e0d4      	b.n	800dc9e <HAL_I2C_Master_Receive+0x1da>
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2201      	movs	r2, #1
 800daf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800dafc:	f7fc f93a 	bl	8009d74 <HAL_GetTick>
 800db00:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	9300      	str	r3, [sp, #0]
 800db06:	2319      	movs	r3, #25
 800db08:	2201      	movs	r2, #1
 800db0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800db0e:	68f8      	ldr	r0, [r7, #12]
 800db10:	f000 fbe2 	bl	800e2d8 <I2C_WaitOnFlagUntilTimeout>
 800db14:	4603      	mov	r3, r0
 800db16:	2b00      	cmp	r3, #0
 800db18:	d001      	beq.n	800db1e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800db1a:	2301      	movs	r3, #1
 800db1c:	e0bf      	b.n	800dc9e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	2222      	movs	r2, #34	; 0x22
 800db22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	2210      	movs	r2, #16
 800db2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	2200      	movs	r2, #0
 800db32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	687a      	ldr	r2, [r7, #4]
 800db38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	893a      	ldrh	r2, [r7, #8]
 800db3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	2200      	movs	r2, #0
 800db44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db4a:	b29b      	uxth	r3, r3
 800db4c:	2bff      	cmp	r3, #255	; 0xff
 800db4e:	d90e      	bls.n	800db6e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	22ff      	movs	r2, #255	; 0xff
 800db54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db5a:	b2da      	uxtb	r2, r3
 800db5c:	8979      	ldrh	r1, [r7, #10]
 800db5e:	4b52      	ldr	r3, [pc, #328]	; (800dca8 <HAL_I2C_Master_Receive+0x1e4>)
 800db60:	9300      	str	r3, [sp, #0]
 800db62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800db66:	68f8      	ldr	r0, [r7, #12]
 800db68:	f000 fd44 	bl	800e5f4 <I2C_TransferConfig>
 800db6c:	e06d      	b.n	800dc4a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db72:	b29a      	uxth	r2, r3
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db7c:	b2da      	uxtb	r2, r3
 800db7e:	8979      	ldrh	r1, [r7, #10]
 800db80:	4b49      	ldr	r3, [pc, #292]	; (800dca8 <HAL_I2C_Master_Receive+0x1e4>)
 800db82:	9300      	str	r3, [sp, #0]
 800db84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800db88:	68f8      	ldr	r0, [r7, #12]
 800db8a:	f000 fd33 	bl	800e5f4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800db8e:	e05c      	b.n	800dc4a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800db90:	697a      	ldr	r2, [r7, #20]
 800db92:	6a39      	ldr	r1, [r7, #32]
 800db94:	68f8      	ldr	r0, [r7, #12]
 800db96:	f000 fc5b 	bl	800e450 <I2C_WaitOnRXNEFlagUntilTimeout>
 800db9a:	4603      	mov	r3, r0
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d001      	beq.n	800dba4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800dba0:	2301      	movs	r3, #1
 800dba2:	e07c      	b.n	800dc9e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbae:	b2d2      	uxtb	r2, r2
 800dbb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbb6:	1c5a      	adds	r2, r3, #1
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dbc0:	3b01      	subs	r3, #1
 800dbc2:	b29a      	uxth	r2, r3
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dbcc:	b29b      	uxth	r3, r3
 800dbce:	3b01      	subs	r3, #1
 800dbd0:	b29a      	uxth	r2, r3
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dbda:	b29b      	uxth	r3, r3
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d034      	beq.n	800dc4a <HAL_I2C_Master_Receive+0x186>
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d130      	bne.n	800dc4a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800dbe8:	697b      	ldr	r3, [r7, #20]
 800dbea:	9300      	str	r3, [sp, #0]
 800dbec:	6a3b      	ldr	r3, [r7, #32]
 800dbee:	2200      	movs	r2, #0
 800dbf0:	2180      	movs	r1, #128	; 0x80
 800dbf2:	68f8      	ldr	r0, [r7, #12]
 800dbf4:	f000 fb70 	bl	800e2d8 <I2C_WaitOnFlagUntilTimeout>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d001      	beq.n	800dc02 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800dbfe:	2301      	movs	r3, #1
 800dc00:	e04d      	b.n	800dc9e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc06:	b29b      	uxth	r3, r3
 800dc08:	2bff      	cmp	r3, #255	; 0xff
 800dc0a:	d90e      	bls.n	800dc2a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	22ff      	movs	r2, #255	; 0xff
 800dc10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc16:	b2da      	uxtb	r2, r3
 800dc18:	8979      	ldrh	r1, [r7, #10]
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	9300      	str	r3, [sp, #0]
 800dc1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dc22:	68f8      	ldr	r0, [r7, #12]
 800dc24:	f000 fce6 	bl	800e5f4 <I2C_TransferConfig>
 800dc28:	e00f      	b.n	800dc4a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc2e:	b29a      	uxth	r2, r3
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc38:	b2da      	uxtb	r2, r3
 800dc3a:	8979      	ldrh	r1, [r7, #10]
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	9300      	str	r3, [sp, #0]
 800dc40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dc44:	68f8      	ldr	r0, [r7, #12]
 800dc46:	f000 fcd5 	bl	800e5f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc4e:	b29b      	uxth	r3, r3
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d19d      	bne.n	800db90 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dc54:	697a      	ldr	r2, [r7, #20]
 800dc56:	6a39      	ldr	r1, [r7, #32]
 800dc58:	68f8      	ldr	r0, [r7, #12]
 800dc5a:	f000 fbbd 	bl	800e3d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d001      	beq.n	800dc68 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800dc64:	2301      	movs	r3, #1
 800dc66:	e01a      	b.n	800dc9e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	2220      	movs	r2, #32
 800dc6e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	6859      	ldr	r1, [r3, #4]
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	681a      	ldr	r2, [r3, #0]
 800dc7a:	4b0c      	ldr	r3, [pc, #48]	; (800dcac <HAL_I2C_Master_Receive+0x1e8>)
 800dc7c:	400b      	ands	r3, r1
 800dc7e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	2220      	movs	r2, #32
 800dc84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	2200      	movs	r2, #0
 800dc94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	e000      	b.n	800dc9e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800dc9c:	2302      	movs	r3, #2
  }
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3718      	adds	r7, #24
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop
 800dca8:	80002400 	.word	0x80002400
 800dcac:	fe00e800 	.word	0xfe00e800

0800dcb0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b088      	sub	sp, #32
 800dcb4:	af02      	add	r7, sp, #8
 800dcb6:	60f8      	str	r0, [r7, #12]
 800dcb8:	4608      	mov	r0, r1
 800dcba:	4611      	mov	r1, r2
 800dcbc:	461a      	mov	r2, r3
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	817b      	strh	r3, [r7, #10]
 800dcc2:	460b      	mov	r3, r1
 800dcc4:	813b      	strh	r3, [r7, #8]
 800dcc6:	4613      	mov	r3, r2
 800dcc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dcd0:	b2db      	uxtb	r3, r3
 800dcd2:	2b20      	cmp	r3, #32
 800dcd4:	f040 80f9 	bne.w	800deca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800dcd8:	6a3b      	ldr	r3, [r7, #32]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d002      	beq.n	800dce4 <HAL_I2C_Mem_Write+0x34>
 800dcde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d105      	bne.n	800dcf0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dcea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800dcec:	2301      	movs	r3, #1
 800dcee:	e0ed      	b.n	800decc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dcf6:	2b01      	cmp	r3, #1
 800dcf8:	d101      	bne.n	800dcfe <HAL_I2C_Mem_Write+0x4e>
 800dcfa:	2302      	movs	r3, #2
 800dcfc:	e0e6      	b.n	800decc <HAL_I2C_Mem_Write+0x21c>
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	2201      	movs	r2, #1
 800dd02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800dd06:	f7fc f835 	bl	8009d74 <HAL_GetTick>
 800dd0a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	9300      	str	r3, [sp, #0]
 800dd10:	2319      	movs	r3, #25
 800dd12:	2201      	movs	r2, #1
 800dd14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800dd18:	68f8      	ldr	r0, [r7, #12]
 800dd1a:	f000 fadd 	bl	800e2d8 <I2C_WaitOnFlagUntilTimeout>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d001      	beq.n	800dd28 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800dd24:	2301      	movs	r3, #1
 800dd26:	e0d1      	b.n	800decc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2221      	movs	r2, #33	; 0x21
 800dd2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	2240      	movs	r2, #64	; 0x40
 800dd34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	6a3a      	ldr	r2, [r7, #32]
 800dd42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dd48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800dd50:	88f8      	ldrh	r0, [r7, #6]
 800dd52:	893a      	ldrh	r2, [r7, #8]
 800dd54:	8979      	ldrh	r1, [r7, #10]
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	9301      	str	r3, [sp, #4]
 800dd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd5c:	9300      	str	r3, [sp, #0]
 800dd5e:	4603      	mov	r3, r0
 800dd60:	68f8      	ldr	r0, [r7, #12]
 800dd62:	f000 f9ed 	bl	800e140 <I2C_RequestMemoryWrite>
 800dd66:	4603      	mov	r3, r0
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d005      	beq.n	800dd78 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	2200      	movs	r2, #0
 800dd70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800dd74:	2301      	movs	r3, #1
 800dd76:	e0a9      	b.n	800decc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	2bff      	cmp	r3, #255	; 0xff
 800dd80:	d90e      	bls.n	800dda0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	22ff      	movs	r2, #255	; 0xff
 800dd86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd8c:	b2da      	uxtb	r2, r3
 800dd8e:	8979      	ldrh	r1, [r7, #10]
 800dd90:	2300      	movs	r3, #0
 800dd92:	9300      	str	r3, [sp, #0]
 800dd94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dd98:	68f8      	ldr	r0, [r7, #12]
 800dd9a:	f000 fc2b 	bl	800e5f4 <I2C_TransferConfig>
 800dd9e:	e00f      	b.n	800ddc0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dda4:	b29a      	uxth	r2, r3
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddae:	b2da      	uxtb	r2, r3
 800ddb0:	8979      	ldrh	r1, [r7, #10]
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	9300      	str	r3, [sp, #0]
 800ddb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ddba:	68f8      	ldr	r0, [r7, #12]
 800ddbc:	f000 fc1a 	bl	800e5f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ddc0:	697a      	ldr	r2, [r7, #20]
 800ddc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ddc4:	68f8      	ldr	r0, [r7, #12]
 800ddc6:	f000 fac7 	bl	800e358 <I2C_WaitOnTXISFlagUntilTimeout>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d001      	beq.n	800ddd4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	e07b      	b.n	800decc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddd8:	781a      	ldrb	r2, [r3, #0]
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dde4:	1c5a      	adds	r2, r3, #1
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ddee:	b29b      	uxth	r3, r3
 800ddf0:	3b01      	subs	r3, #1
 800ddf2:	b29a      	uxth	r2, r3
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddfc:	3b01      	subs	r3, #1
 800ddfe:	b29a      	uxth	r2, r3
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de08:	b29b      	uxth	r3, r3
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d034      	beq.n	800de78 <HAL_I2C_Mem_Write+0x1c8>
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de12:	2b00      	cmp	r3, #0
 800de14:	d130      	bne.n	800de78 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	9300      	str	r3, [sp, #0]
 800de1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de1c:	2200      	movs	r2, #0
 800de1e:	2180      	movs	r1, #128	; 0x80
 800de20:	68f8      	ldr	r0, [r7, #12]
 800de22:	f000 fa59 	bl	800e2d8 <I2C_WaitOnFlagUntilTimeout>
 800de26:	4603      	mov	r3, r0
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d001      	beq.n	800de30 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800de2c:	2301      	movs	r3, #1
 800de2e:	e04d      	b.n	800decc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de34:	b29b      	uxth	r3, r3
 800de36:	2bff      	cmp	r3, #255	; 0xff
 800de38:	d90e      	bls.n	800de58 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	22ff      	movs	r2, #255	; 0xff
 800de3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de44:	b2da      	uxtb	r2, r3
 800de46:	8979      	ldrh	r1, [r7, #10]
 800de48:	2300      	movs	r3, #0
 800de4a:	9300      	str	r3, [sp, #0]
 800de4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800de50:	68f8      	ldr	r0, [r7, #12]
 800de52:	f000 fbcf 	bl	800e5f4 <I2C_TransferConfig>
 800de56:	e00f      	b.n	800de78 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de5c:	b29a      	uxth	r2, r3
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de66:	b2da      	uxtb	r2, r3
 800de68:	8979      	ldrh	r1, [r7, #10]
 800de6a:	2300      	movs	r3, #0
 800de6c:	9300      	str	r3, [sp, #0]
 800de6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800de72:	68f8      	ldr	r0, [r7, #12]
 800de74:	f000 fbbe 	bl	800e5f4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de7c:	b29b      	uxth	r3, r3
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d19e      	bne.n	800ddc0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800de82:	697a      	ldr	r2, [r7, #20]
 800de84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800de86:	68f8      	ldr	r0, [r7, #12]
 800de88:	f000 faa6 	bl	800e3d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800de8c:	4603      	mov	r3, r0
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d001      	beq.n	800de96 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800de92:	2301      	movs	r3, #1
 800de94:	e01a      	b.n	800decc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	2220      	movs	r2, #32
 800de9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	6859      	ldr	r1, [r3, #4]
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	681a      	ldr	r2, [r3, #0]
 800dea8:	4b0a      	ldr	r3, [pc, #40]	; (800ded4 <HAL_I2C_Mem_Write+0x224>)
 800deaa:	400b      	ands	r3, r1
 800deac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	2220      	movs	r2, #32
 800deb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	2200      	movs	r2, #0
 800deba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	2200      	movs	r2, #0
 800dec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800dec6:	2300      	movs	r3, #0
 800dec8:	e000      	b.n	800decc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800deca:	2302      	movs	r3, #2
  }
}
 800decc:	4618      	mov	r0, r3
 800dece:	3718      	adds	r7, #24
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}
 800ded4:	fe00e800 	.word	0xfe00e800

0800ded8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b088      	sub	sp, #32
 800dedc:	af02      	add	r7, sp, #8
 800dede:	60f8      	str	r0, [r7, #12]
 800dee0:	4608      	mov	r0, r1
 800dee2:	4611      	mov	r1, r2
 800dee4:	461a      	mov	r2, r3
 800dee6:	4603      	mov	r3, r0
 800dee8:	817b      	strh	r3, [r7, #10]
 800deea:	460b      	mov	r3, r1
 800deec:	813b      	strh	r3, [r7, #8]
 800deee:	4613      	mov	r3, r2
 800def0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800def8:	b2db      	uxtb	r3, r3
 800defa:	2b20      	cmp	r3, #32
 800defc:	f040 80fd 	bne.w	800e0fa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800df00:	6a3b      	ldr	r3, [r7, #32]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d002      	beq.n	800df0c <HAL_I2C_Mem_Read+0x34>
 800df06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d105      	bne.n	800df18 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df12:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800df14:	2301      	movs	r3, #1
 800df16:	e0f1      	b.n	800e0fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800df1e:	2b01      	cmp	r3, #1
 800df20:	d101      	bne.n	800df26 <HAL_I2C_Mem_Read+0x4e>
 800df22:	2302      	movs	r3, #2
 800df24:	e0ea      	b.n	800e0fc <HAL_I2C_Mem_Read+0x224>
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	2201      	movs	r2, #1
 800df2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800df2e:	f7fb ff21 	bl	8009d74 <HAL_GetTick>
 800df32:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	9300      	str	r3, [sp, #0]
 800df38:	2319      	movs	r3, #25
 800df3a:	2201      	movs	r2, #1
 800df3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800df40:	68f8      	ldr	r0, [r7, #12]
 800df42:	f000 f9c9 	bl	800e2d8 <I2C_WaitOnFlagUntilTimeout>
 800df46:	4603      	mov	r3, r0
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d001      	beq.n	800df50 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800df4c:	2301      	movs	r3, #1
 800df4e:	e0d5      	b.n	800e0fc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	2222      	movs	r2, #34	; 0x22
 800df54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	2240      	movs	r2, #64	; 0x40
 800df5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	2200      	movs	r2, #0
 800df64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	6a3a      	ldr	r2, [r7, #32]
 800df6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800df70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	2200      	movs	r2, #0
 800df76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800df78:	88f8      	ldrh	r0, [r7, #6]
 800df7a:	893a      	ldrh	r2, [r7, #8]
 800df7c:	8979      	ldrh	r1, [r7, #10]
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	9301      	str	r3, [sp, #4]
 800df82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df84:	9300      	str	r3, [sp, #0]
 800df86:	4603      	mov	r3, r0
 800df88:	68f8      	ldr	r0, [r7, #12]
 800df8a:	f000 f92d 	bl	800e1e8 <I2C_RequestMemoryRead>
 800df8e:	4603      	mov	r3, r0
 800df90:	2b00      	cmp	r3, #0
 800df92:	d005      	beq.n	800dfa0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	2200      	movs	r2, #0
 800df98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800df9c:	2301      	movs	r3, #1
 800df9e:	e0ad      	b.n	800e0fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dfa4:	b29b      	uxth	r3, r3
 800dfa6:	2bff      	cmp	r3, #255	; 0xff
 800dfa8:	d90e      	bls.n	800dfc8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	22ff      	movs	r2, #255	; 0xff
 800dfae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dfb4:	b2da      	uxtb	r2, r3
 800dfb6:	8979      	ldrh	r1, [r7, #10]
 800dfb8:	4b52      	ldr	r3, [pc, #328]	; (800e104 <HAL_I2C_Mem_Read+0x22c>)
 800dfba:	9300      	str	r3, [sp, #0]
 800dfbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dfc0:	68f8      	ldr	r0, [r7, #12]
 800dfc2:	f000 fb17 	bl	800e5f4 <I2C_TransferConfig>
 800dfc6:	e00f      	b.n	800dfe8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dfcc:	b29a      	uxth	r2, r3
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dfd6:	b2da      	uxtb	r2, r3
 800dfd8:	8979      	ldrh	r1, [r7, #10]
 800dfda:	4b4a      	ldr	r3, [pc, #296]	; (800e104 <HAL_I2C_Mem_Read+0x22c>)
 800dfdc:	9300      	str	r3, [sp, #0]
 800dfde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dfe2:	68f8      	ldr	r0, [r7, #12]
 800dfe4:	f000 fb06 	bl	800e5f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800dfe8:	697b      	ldr	r3, [r7, #20]
 800dfea:	9300      	str	r3, [sp, #0]
 800dfec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfee:	2200      	movs	r2, #0
 800dff0:	2104      	movs	r1, #4
 800dff2:	68f8      	ldr	r0, [r7, #12]
 800dff4:	f000 f970 	bl	800e2d8 <I2C_WaitOnFlagUntilTimeout>
 800dff8:	4603      	mov	r3, r0
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d001      	beq.n	800e002 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800dffe:	2301      	movs	r3, #1
 800e000:	e07c      	b.n	800e0fc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e00c:	b2d2      	uxtb	r2, r2
 800e00e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e014:	1c5a      	adds	r2, r3, #1
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e01e:	3b01      	subs	r3, #1
 800e020:	b29a      	uxth	r2, r3
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e02a:	b29b      	uxth	r3, r3
 800e02c:	3b01      	subs	r3, #1
 800e02e:	b29a      	uxth	r2, r3
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e038:	b29b      	uxth	r3, r3
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d034      	beq.n	800e0a8 <HAL_I2C_Mem_Read+0x1d0>
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e042:	2b00      	cmp	r3, #0
 800e044:	d130      	bne.n	800e0a8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	9300      	str	r3, [sp, #0]
 800e04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e04c:	2200      	movs	r2, #0
 800e04e:	2180      	movs	r1, #128	; 0x80
 800e050:	68f8      	ldr	r0, [r7, #12]
 800e052:	f000 f941 	bl	800e2d8 <I2C_WaitOnFlagUntilTimeout>
 800e056:	4603      	mov	r3, r0
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d001      	beq.n	800e060 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800e05c:	2301      	movs	r3, #1
 800e05e:	e04d      	b.n	800e0fc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e064:	b29b      	uxth	r3, r3
 800e066:	2bff      	cmp	r3, #255	; 0xff
 800e068:	d90e      	bls.n	800e088 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	22ff      	movs	r2, #255	; 0xff
 800e06e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e074:	b2da      	uxtb	r2, r3
 800e076:	8979      	ldrh	r1, [r7, #10]
 800e078:	2300      	movs	r3, #0
 800e07a:	9300      	str	r3, [sp, #0]
 800e07c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e080:	68f8      	ldr	r0, [r7, #12]
 800e082:	f000 fab7 	bl	800e5f4 <I2C_TransferConfig>
 800e086:	e00f      	b.n	800e0a8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e08c:	b29a      	uxth	r2, r3
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e096:	b2da      	uxtb	r2, r3
 800e098:	8979      	ldrh	r1, [r7, #10]
 800e09a:	2300      	movs	r3, #0
 800e09c:	9300      	str	r3, [sp, #0]
 800e09e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e0a2:	68f8      	ldr	r0, [r7, #12]
 800e0a4:	f000 faa6 	bl	800e5f4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0ac:	b29b      	uxth	r3, r3
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d19a      	bne.n	800dfe8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e0b2:	697a      	ldr	r2, [r7, #20]
 800e0b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e0b6:	68f8      	ldr	r0, [r7, #12]
 800e0b8:	f000 f98e 	bl	800e3d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d001      	beq.n	800e0c6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	e01a      	b.n	800e0fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	2220      	movs	r2, #32
 800e0cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	6859      	ldr	r1, [r3, #4]
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	681a      	ldr	r2, [r3, #0]
 800e0d8:	4b0b      	ldr	r3, [pc, #44]	; (800e108 <HAL_I2C_Mem_Read+0x230>)
 800e0da:	400b      	ands	r3, r1
 800e0dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	2220      	movs	r2, #32
 800e0e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	e000      	b.n	800e0fc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800e0fa:	2302      	movs	r3, #2
  }
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3718      	adds	r7, #24
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}
 800e104:	80002400 	.word	0x80002400
 800e108:	fe00e800 	.word	0xfe00e800

0800e10c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800e10c:	b480      	push	{r7}
 800e10e:	b083      	sub	sp, #12
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e11a:	b2db      	uxtb	r3, r3
}
 800e11c:	4618      	mov	r0, r3
 800e11e:	370c      	adds	r7, #12
 800e120:	46bd      	mov	sp, r7
 800e122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e126:	4770      	bx	lr

0800e128 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800e128:	b480      	push	{r7}
 800e12a:	b083      	sub	sp, #12
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800e134:	4618      	mov	r0, r3
 800e136:	370c      	adds	r7, #12
 800e138:	46bd      	mov	sp, r7
 800e13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13e:	4770      	bx	lr

0800e140 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b086      	sub	sp, #24
 800e144:	af02      	add	r7, sp, #8
 800e146:	60f8      	str	r0, [r7, #12]
 800e148:	4608      	mov	r0, r1
 800e14a:	4611      	mov	r1, r2
 800e14c:	461a      	mov	r2, r3
 800e14e:	4603      	mov	r3, r0
 800e150:	817b      	strh	r3, [r7, #10]
 800e152:	460b      	mov	r3, r1
 800e154:	813b      	strh	r3, [r7, #8]
 800e156:	4613      	mov	r3, r2
 800e158:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800e15a:	88fb      	ldrh	r3, [r7, #6]
 800e15c:	b2da      	uxtb	r2, r3
 800e15e:	8979      	ldrh	r1, [r7, #10]
 800e160:	4b20      	ldr	r3, [pc, #128]	; (800e1e4 <I2C_RequestMemoryWrite+0xa4>)
 800e162:	9300      	str	r3, [sp, #0]
 800e164:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e168:	68f8      	ldr	r0, [r7, #12]
 800e16a:	f000 fa43 	bl	800e5f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e16e:	69fa      	ldr	r2, [r7, #28]
 800e170:	69b9      	ldr	r1, [r7, #24]
 800e172:	68f8      	ldr	r0, [r7, #12]
 800e174:	f000 f8f0 	bl	800e358 <I2C_WaitOnTXISFlagUntilTimeout>
 800e178:	4603      	mov	r3, r0
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d001      	beq.n	800e182 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800e17e:	2301      	movs	r3, #1
 800e180:	e02c      	b.n	800e1dc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e182:	88fb      	ldrh	r3, [r7, #6]
 800e184:	2b01      	cmp	r3, #1
 800e186:	d105      	bne.n	800e194 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e188:	893b      	ldrh	r3, [r7, #8]
 800e18a:	b2da      	uxtb	r2, r3
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	629a      	str	r2, [r3, #40]	; 0x28
 800e192:	e015      	b.n	800e1c0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e194:	893b      	ldrh	r3, [r7, #8]
 800e196:	0a1b      	lsrs	r3, r3, #8
 800e198:	b29b      	uxth	r3, r3
 800e19a:	b2da      	uxtb	r2, r3
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e1a2:	69fa      	ldr	r2, [r7, #28]
 800e1a4:	69b9      	ldr	r1, [r7, #24]
 800e1a6:	68f8      	ldr	r0, [r7, #12]
 800e1a8:	f000 f8d6 	bl	800e358 <I2C_WaitOnTXISFlagUntilTimeout>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d001      	beq.n	800e1b6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	e012      	b.n	800e1dc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e1b6:	893b      	ldrh	r3, [r7, #8]
 800e1b8:	b2da      	uxtb	r2, r3
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800e1c0:	69fb      	ldr	r3, [r7, #28]
 800e1c2:	9300      	str	r3, [sp, #0]
 800e1c4:	69bb      	ldr	r3, [r7, #24]
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	2180      	movs	r1, #128	; 0x80
 800e1ca:	68f8      	ldr	r0, [r7, #12]
 800e1cc:	f000 f884 	bl	800e2d8 <I2C_WaitOnFlagUntilTimeout>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d001      	beq.n	800e1da <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	e000      	b.n	800e1dc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800e1da:	2300      	movs	r3, #0
}
 800e1dc:	4618      	mov	r0, r3
 800e1de:	3710      	adds	r7, #16
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}
 800e1e4:	80002000 	.word	0x80002000

0800e1e8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b086      	sub	sp, #24
 800e1ec:	af02      	add	r7, sp, #8
 800e1ee:	60f8      	str	r0, [r7, #12]
 800e1f0:	4608      	mov	r0, r1
 800e1f2:	4611      	mov	r1, r2
 800e1f4:	461a      	mov	r2, r3
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	817b      	strh	r3, [r7, #10]
 800e1fa:	460b      	mov	r3, r1
 800e1fc:	813b      	strh	r3, [r7, #8]
 800e1fe:	4613      	mov	r3, r2
 800e200:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800e202:	88fb      	ldrh	r3, [r7, #6]
 800e204:	b2da      	uxtb	r2, r3
 800e206:	8979      	ldrh	r1, [r7, #10]
 800e208:	4b20      	ldr	r3, [pc, #128]	; (800e28c <I2C_RequestMemoryRead+0xa4>)
 800e20a:	9300      	str	r3, [sp, #0]
 800e20c:	2300      	movs	r3, #0
 800e20e:	68f8      	ldr	r0, [r7, #12]
 800e210:	f000 f9f0 	bl	800e5f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e214:	69fa      	ldr	r2, [r7, #28]
 800e216:	69b9      	ldr	r1, [r7, #24]
 800e218:	68f8      	ldr	r0, [r7, #12]
 800e21a:	f000 f89d 	bl	800e358 <I2C_WaitOnTXISFlagUntilTimeout>
 800e21e:	4603      	mov	r3, r0
 800e220:	2b00      	cmp	r3, #0
 800e222:	d001      	beq.n	800e228 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800e224:	2301      	movs	r3, #1
 800e226:	e02c      	b.n	800e282 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e228:	88fb      	ldrh	r3, [r7, #6]
 800e22a:	2b01      	cmp	r3, #1
 800e22c:	d105      	bne.n	800e23a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e22e:	893b      	ldrh	r3, [r7, #8]
 800e230:	b2da      	uxtb	r2, r3
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	629a      	str	r2, [r3, #40]	; 0x28
 800e238:	e015      	b.n	800e266 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e23a:	893b      	ldrh	r3, [r7, #8]
 800e23c:	0a1b      	lsrs	r3, r3, #8
 800e23e:	b29b      	uxth	r3, r3
 800e240:	b2da      	uxtb	r2, r3
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e248:	69fa      	ldr	r2, [r7, #28]
 800e24a:	69b9      	ldr	r1, [r7, #24]
 800e24c:	68f8      	ldr	r0, [r7, #12]
 800e24e:	f000 f883 	bl	800e358 <I2C_WaitOnTXISFlagUntilTimeout>
 800e252:	4603      	mov	r3, r0
 800e254:	2b00      	cmp	r3, #0
 800e256:	d001      	beq.n	800e25c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800e258:	2301      	movs	r3, #1
 800e25a:	e012      	b.n	800e282 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e25c:	893b      	ldrh	r3, [r7, #8]
 800e25e:	b2da      	uxtb	r2, r3
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800e266:	69fb      	ldr	r3, [r7, #28]
 800e268:	9300      	str	r3, [sp, #0]
 800e26a:	69bb      	ldr	r3, [r7, #24]
 800e26c:	2200      	movs	r2, #0
 800e26e:	2140      	movs	r1, #64	; 0x40
 800e270:	68f8      	ldr	r0, [r7, #12]
 800e272:	f000 f831 	bl	800e2d8 <I2C_WaitOnFlagUntilTimeout>
 800e276:	4603      	mov	r3, r0
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d001      	beq.n	800e280 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800e27c:	2301      	movs	r3, #1
 800e27e:	e000      	b.n	800e282 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800e280:	2300      	movs	r3, #0
}
 800e282:	4618      	mov	r0, r3
 800e284:	3710      	adds	r7, #16
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}
 800e28a:	bf00      	nop
 800e28c:	80002000 	.word	0x80002000

0800e290 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800e290:	b480      	push	{r7}
 800e292:	b083      	sub	sp, #12
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	699b      	ldr	r3, [r3, #24]
 800e29e:	f003 0302 	and.w	r3, r3, #2
 800e2a2:	2b02      	cmp	r3, #2
 800e2a4:	d103      	bne.n	800e2ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	699b      	ldr	r3, [r3, #24]
 800e2b4:	f003 0301 	and.w	r3, r3, #1
 800e2b8:	2b01      	cmp	r3, #1
 800e2ba:	d007      	beq.n	800e2cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	699a      	ldr	r2, [r3, #24]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	f042 0201 	orr.w	r2, r2, #1
 800e2ca:	619a      	str	r2, [r3, #24]
  }
}
 800e2cc:	bf00      	nop
 800e2ce:	370c      	adds	r7, #12
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d6:	4770      	bx	lr

0800e2d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b084      	sub	sp, #16
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	60f8      	str	r0, [r7, #12]
 800e2e0:	60b9      	str	r1, [r7, #8]
 800e2e2:	603b      	str	r3, [r7, #0]
 800e2e4:	4613      	mov	r3, r2
 800e2e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e2e8:	e022      	b.n	800e330 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2f0:	d01e      	beq.n	800e330 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e2f2:	f7fb fd3f 	bl	8009d74 <HAL_GetTick>
 800e2f6:	4602      	mov	r2, r0
 800e2f8:	69bb      	ldr	r3, [r7, #24]
 800e2fa:	1ad3      	subs	r3, r2, r3
 800e2fc:	683a      	ldr	r2, [r7, #0]
 800e2fe:	429a      	cmp	r2, r3
 800e300:	d302      	bcc.n	800e308 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d113      	bne.n	800e330 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e30c:	f043 0220 	orr.w	r2, r3, #32
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	2220      	movs	r2, #32
 800e318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	2200      	movs	r2, #0
 800e320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	2200      	movs	r2, #0
 800e328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800e32c:	2301      	movs	r3, #1
 800e32e:	e00f      	b.n	800e350 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	699a      	ldr	r2, [r3, #24]
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	4013      	ands	r3, r2
 800e33a:	68ba      	ldr	r2, [r7, #8]
 800e33c:	429a      	cmp	r2, r3
 800e33e:	bf0c      	ite	eq
 800e340:	2301      	moveq	r3, #1
 800e342:	2300      	movne	r3, #0
 800e344:	b2db      	uxtb	r3, r3
 800e346:	461a      	mov	r2, r3
 800e348:	79fb      	ldrb	r3, [r7, #7]
 800e34a:	429a      	cmp	r2, r3
 800e34c:	d0cd      	beq.n	800e2ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e34e:	2300      	movs	r3, #0
}
 800e350:	4618      	mov	r0, r3
 800e352:	3710      	adds	r7, #16
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}

0800e358 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b084      	sub	sp, #16
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	60f8      	str	r0, [r7, #12]
 800e360:	60b9      	str	r1, [r7, #8]
 800e362:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e364:	e02c      	b.n	800e3c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800e366:	687a      	ldr	r2, [r7, #4]
 800e368:	68b9      	ldr	r1, [r7, #8]
 800e36a:	68f8      	ldr	r0, [r7, #12]
 800e36c:	f000 f8dc 	bl	800e528 <I2C_IsAcknowledgeFailed>
 800e370:	4603      	mov	r3, r0
 800e372:	2b00      	cmp	r3, #0
 800e374:	d001      	beq.n	800e37a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e376:	2301      	movs	r3, #1
 800e378:	e02a      	b.n	800e3d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e380:	d01e      	beq.n	800e3c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e382:	f7fb fcf7 	bl	8009d74 <HAL_GetTick>
 800e386:	4602      	mov	r2, r0
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	1ad3      	subs	r3, r2, r3
 800e38c:	68ba      	ldr	r2, [r7, #8]
 800e38e:	429a      	cmp	r2, r3
 800e390:	d302      	bcc.n	800e398 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800e392:	68bb      	ldr	r3, [r7, #8]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d113      	bne.n	800e3c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e39c:	f043 0220 	orr.w	r2, r3, #32
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	2220      	movs	r2, #32
 800e3a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800e3bc:	2301      	movs	r3, #1
 800e3be:	e007      	b.n	800e3d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	699b      	ldr	r3, [r3, #24]
 800e3c6:	f003 0302 	and.w	r3, r3, #2
 800e3ca:	2b02      	cmp	r3, #2
 800e3cc:	d1cb      	bne.n	800e366 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e3ce:	2300      	movs	r3, #0
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	3710      	adds	r7, #16
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}

0800e3d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b084      	sub	sp, #16
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	60f8      	str	r0, [r7, #12]
 800e3e0:	60b9      	str	r1, [r7, #8]
 800e3e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e3e4:	e028      	b.n	800e438 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800e3e6:	687a      	ldr	r2, [r7, #4]
 800e3e8:	68b9      	ldr	r1, [r7, #8]
 800e3ea:	68f8      	ldr	r0, [r7, #12]
 800e3ec:	f000 f89c 	bl	800e528 <I2C_IsAcknowledgeFailed>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d001      	beq.n	800e3fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	e026      	b.n	800e448 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e3fa:	f7fb fcbb 	bl	8009d74 <HAL_GetTick>
 800e3fe:	4602      	mov	r2, r0
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	1ad3      	subs	r3, r2, r3
 800e404:	68ba      	ldr	r2, [r7, #8]
 800e406:	429a      	cmp	r2, r3
 800e408:	d302      	bcc.n	800e410 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d113      	bne.n	800e438 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e414:	f043 0220 	orr.w	r2, r3, #32
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	2220      	movs	r2, #32
 800e420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	2200      	movs	r2, #0
 800e428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	2200      	movs	r2, #0
 800e430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800e434:	2301      	movs	r3, #1
 800e436:	e007      	b.n	800e448 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	699b      	ldr	r3, [r3, #24]
 800e43e:	f003 0320 	and.w	r3, r3, #32
 800e442:	2b20      	cmp	r3, #32
 800e444:	d1cf      	bne.n	800e3e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800e446:	2300      	movs	r3, #0
}
 800e448:	4618      	mov	r0, r3
 800e44a:	3710      	adds	r7, #16
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}

0800e450 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
 800e456:	60f8      	str	r0, [r7, #12]
 800e458:	60b9      	str	r1, [r7, #8]
 800e45a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e45c:	e055      	b.n	800e50a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800e45e:	687a      	ldr	r2, [r7, #4]
 800e460:	68b9      	ldr	r1, [r7, #8]
 800e462:	68f8      	ldr	r0, [r7, #12]
 800e464:	f000 f860 	bl	800e528 <I2C_IsAcknowledgeFailed>
 800e468:	4603      	mov	r3, r0
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d001      	beq.n	800e472 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e46e:	2301      	movs	r3, #1
 800e470:	e053      	b.n	800e51a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	699b      	ldr	r3, [r3, #24]
 800e478:	f003 0320 	and.w	r3, r3, #32
 800e47c:	2b20      	cmp	r3, #32
 800e47e:	d129      	bne.n	800e4d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	699b      	ldr	r3, [r3, #24]
 800e486:	f003 0304 	and.w	r3, r3, #4
 800e48a:	2b04      	cmp	r3, #4
 800e48c:	d105      	bne.n	800e49a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e492:	2b00      	cmp	r3, #0
 800e494:	d001      	beq.n	800e49a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800e496:	2300      	movs	r3, #0
 800e498:	e03f      	b.n	800e51a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	2220      	movs	r2, #32
 800e4a0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	6859      	ldr	r1, [r3, #4]
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	681a      	ldr	r2, [r3, #0]
 800e4ac:	4b1d      	ldr	r3, [pc, #116]	; (800e524 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800e4ae:	400b      	ands	r3, r1
 800e4b0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	2220      	movs	r2, #32
 800e4bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800e4d0:	2301      	movs	r3, #1
 800e4d2:	e022      	b.n	800e51a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e4d4:	f7fb fc4e 	bl	8009d74 <HAL_GetTick>
 800e4d8:	4602      	mov	r2, r0
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	1ad3      	subs	r3, r2, r3
 800e4de:	68ba      	ldr	r2, [r7, #8]
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	d302      	bcc.n	800e4ea <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d10f      	bne.n	800e50a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4ee:	f043 0220 	orr.w	r2, r3, #32
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	2220      	movs	r2, #32
 800e4fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	2200      	movs	r2, #0
 800e502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800e506:	2301      	movs	r3, #1
 800e508:	e007      	b.n	800e51a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	699b      	ldr	r3, [r3, #24]
 800e510:	f003 0304 	and.w	r3, r3, #4
 800e514:	2b04      	cmp	r3, #4
 800e516:	d1a2      	bne.n	800e45e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800e518:	2300      	movs	r3, #0
}
 800e51a:	4618      	mov	r0, r3
 800e51c:	3710      	adds	r7, #16
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}
 800e522:	bf00      	nop
 800e524:	fe00e800 	.word	0xfe00e800

0800e528 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b084      	sub	sp, #16
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	60f8      	str	r0, [r7, #12]
 800e530:	60b9      	str	r1, [r7, #8]
 800e532:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	699b      	ldr	r3, [r3, #24]
 800e53a:	f003 0310 	and.w	r3, r3, #16
 800e53e:	2b10      	cmp	r3, #16
 800e540:	d151      	bne.n	800e5e6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e542:	e022      	b.n	800e58a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800e544:	68bb      	ldr	r3, [r7, #8]
 800e546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e54a:	d01e      	beq.n	800e58a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e54c:	f7fb fc12 	bl	8009d74 <HAL_GetTick>
 800e550:	4602      	mov	r2, r0
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	1ad3      	subs	r3, r2, r3
 800e556:	68ba      	ldr	r2, [r7, #8]
 800e558:	429a      	cmp	r2, r3
 800e55a:	d302      	bcc.n	800e562 <I2C_IsAcknowledgeFailed+0x3a>
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d113      	bne.n	800e58a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e566:	f043 0220 	orr.w	r2, r3, #32
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	2220      	movs	r2, #32
 800e572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	2200      	movs	r2, #0
 800e57a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	2200      	movs	r2, #0
 800e582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800e586:	2301      	movs	r3, #1
 800e588:	e02e      	b.n	800e5e8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	699b      	ldr	r3, [r3, #24]
 800e590:	f003 0320 	and.w	r3, r3, #32
 800e594:	2b20      	cmp	r3, #32
 800e596:	d1d5      	bne.n	800e544 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	2210      	movs	r2, #16
 800e59e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	2220      	movs	r2, #32
 800e5a6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e5a8:	68f8      	ldr	r0, [r7, #12]
 800e5aa:	f7ff fe71 	bl	800e290 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	6859      	ldr	r1, [r3, #4]
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	681a      	ldr	r2, [r3, #0]
 800e5b8:	4b0d      	ldr	r3, [pc, #52]	; (800e5f0 <I2C_IsAcknowledgeFailed+0xc8>)
 800e5ba:	400b      	ands	r3, r1
 800e5bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5c2:	f043 0204 	orr.w	r2, r3, #4
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	2220      	movs	r2, #32
 800e5ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	2200      	movs	r2, #0
 800e5de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	e000      	b.n	800e5e8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800e5e6:	2300      	movs	r3, #0
}
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	3710      	adds	r7, #16
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	bd80      	pop	{r7, pc}
 800e5f0:	fe00e800 	.word	0xfe00e800

0800e5f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b085      	sub	sp, #20
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	60f8      	str	r0, [r7, #12]
 800e5fc:	607b      	str	r3, [r7, #4]
 800e5fe:	460b      	mov	r3, r1
 800e600:	817b      	strh	r3, [r7, #10]
 800e602:	4613      	mov	r3, r2
 800e604:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	685a      	ldr	r2, [r3, #4]
 800e60c:	69bb      	ldr	r3, [r7, #24]
 800e60e:	0d5b      	lsrs	r3, r3, #21
 800e610:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800e614:	4b0d      	ldr	r3, [pc, #52]	; (800e64c <I2C_TransferConfig+0x58>)
 800e616:	430b      	orrs	r3, r1
 800e618:	43db      	mvns	r3, r3
 800e61a:	ea02 0103 	and.w	r1, r2, r3
 800e61e:	897b      	ldrh	r3, [r7, #10]
 800e620:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800e624:	7a7b      	ldrb	r3, [r7, #9]
 800e626:	041b      	lsls	r3, r3, #16
 800e628:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e62c:	431a      	orrs	r2, r3
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	431a      	orrs	r2, r3
 800e632:	69bb      	ldr	r3, [r7, #24]
 800e634:	431a      	orrs	r2, r3
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	430a      	orrs	r2, r1
 800e63c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800e63e:	bf00      	nop
 800e640:	3714      	adds	r7, #20
 800e642:	46bd      	mov	sp, r7
 800e644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e648:	4770      	bx	lr
 800e64a:	bf00      	nop
 800e64c:	03ff63ff 	.word	0x03ff63ff

0800e650 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800e650:	b480      	push	{r7}
 800e652:	b083      	sub	sp, #12
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
 800e658:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e660:	b2db      	uxtb	r3, r3
 800e662:	2b20      	cmp	r3, #32
 800e664:	d138      	bne.n	800e6d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e66c:	2b01      	cmp	r3, #1
 800e66e:	d101      	bne.n	800e674 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800e670:	2302      	movs	r3, #2
 800e672:	e032      	b.n	800e6da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2201      	movs	r2, #1
 800e678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2224      	movs	r2, #36	; 0x24
 800e680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	681a      	ldr	r2, [r3, #0]
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	f022 0201 	bic.w	r2, r2, #1
 800e692:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	681a      	ldr	r2, [r3, #0]
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e6a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	6819      	ldr	r1, [r3, #0]
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	683a      	ldr	r2, [r7, #0]
 800e6b0:	430a      	orrs	r2, r1
 800e6b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	681a      	ldr	r2, [r3, #0]
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	f042 0201 	orr.w	r2, r2, #1
 800e6c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2220      	movs	r2, #32
 800e6c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	e000      	b.n	800e6da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e6d8:	2302      	movs	r3, #2
  }
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	370c      	adds	r7, #12
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e4:	4770      	bx	lr

0800e6e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800e6e6:	b480      	push	{r7}
 800e6e8:	b085      	sub	sp, #20
 800e6ea:	af00      	add	r7, sp, #0
 800e6ec:	6078      	str	r0, [r7, #4]
 800e6ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e6f6:	b2db      	uxtb	r3, r3
 800e6f8:	2b20      	cmp	r3, #32
 800e6fa:	d139      	bne.n	800e770 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e702:	2b01      	cmp	r3, #1
 800e704:	d101      	bne.n	800e70a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800e706:	2302      	movs	r3, #2
 800e708:	e033      	b.n	800e772 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2201      	movs	r2, #1
 800e70e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2224      	movs	r2, #36	; 0x24
 800e716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	681a      	ldr	r2, [r3, #0]
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	f022 0201 	bic.w	r2, r2, #1
 800e728:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800e738:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	021b      	lsls	r3, r3, #8
 800e73e:	68fa      	ldr	r2, [r7, #12]
 800e740:	4313      	orrs	r3, r2
 800e742:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	68fa      	ldr	r2, [r7, #12]
 800e74a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	681a      	ldr	r2, [r3, #0]
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f042 0201 	orr.w	r2, r2, #1
 800e75a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2220      	movs	r2, #32
 800e760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2200      	movs	r2, #0
 800e768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e76c:	2300      	movs	r3, #0
 800e76e:	e000      	b.n	800e772 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800e770:	2302      	movs	r3, #2
  }
}
 800e772:	4618      	mov	r0, r3
 800e774:	3714      	adds	r7, #20
 800e776:	46bd      	mov	sp, r7
 800e778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77c:	4770      	bx	lr
	...

0800e780 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800e780:	b480      	push	{r7}
 800e782:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e784:	4b05      	ldr	r3, [pc, #20]	; (800e79c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	4a04      	ldr	r2, [pc, #16]	; (800e79c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800e78a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e78e:	6013      	str	r3, [r2, #0]
}
 800e790:	bf00      	nop
 800e792:	46bd      	mov	sp, r7
 800e794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e798:	4770      	bx	lr
 800e79a:	bf00      	nop
 800e79c:	40007000 	.word	0x40007000

0800e7a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800e7a0:	b480      	push	{r7}
 800e7a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800e7a4:	4b04      	ldr	r3, [pc, #16]	; (800e7b8 <HAL_PWREx_GetVoltageRange+0x18>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b4:	4770      	bx	lr
 800e7b6:	bf00      	nop
 800e7b8:	40007000 	.word	0x40007000

0800e7bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b085      	sub	sp, #20
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e7ca:	d130      	bne.n	800e82e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800e7cc:	4b23      	ldr	r3, [pc, #140]	; (800e85c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e7d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e7d8:	d038      	beq.n	800e84c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800e7da:	4b20      	ldr	r3, [pc, #128]	; (800e85c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800e7e2:	4a1e      	ldr	r2, [pc, #120]	; (800e85c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e7e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e7e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800e7ea:	4b1d      	ldr	r3, [pc, #116]	; (800e860 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	2232      	movs	r2, #50	; 0x32
 800e7f0:	fb02 f303 	mul.w	r3, r2, r3
 800e7f4:	4a1b      	ldr	r2, [pc, #108]	; (800e864 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800e7f6:	fba2 2303 	umull	r2, r3, r2, r3
 800e7fa:	0c9b      	lsrs	r3, r3, #18
 800e7fc:	3301      	adds	r3, #1
 800e7fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800e800:	e002      	b.n	800e808 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	3b01      	subs	r3, #1
 800e806:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800e808:	4b14      	ldr	r3, [pc, #80]	; (800e85c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e80a:	695b      	ldr	r3, [r3, #20]
 800e80c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e814:	d102      	bne.n	800e81c <HAL_PWREx_ControlVoltageScaling+0x60>
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d1f2      	bne.n	800e802 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800e81c:	4b0f      	ldr	r3, [pc, #60]	; (800e85c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e81e:	695b      	ldr	r3, [r3, #20]
 800e820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e828:	d110      	bne.n	800e84c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800e82a:	2303      	movs	r3, #3
 800e82c:	e00f      	b.n	800e84e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800e82e:	4b0b      	ldr	r3, [pc, #44]	; (800e85c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e83a:	d007      	beq.n	800e84c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800e83c:	4b07      	ldr	r3, [pc, #28]	; (800e85c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800e844:	4a05      	ldr	r2, [pc, #20]	; (800e85c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e846:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e84a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800e84c:	2300      	movs	r3, #0
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3714      	adds	r7, #20
 800e852:	46bd      	mov	sp, r7
 800e854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e858:	4770      	bx	lr
 800e85a:	bf00      	nop
 800e85c:	40007000 	.word	0x40007000
 800e860:	20000004 	.word	0x20000004
 800e864:	431bde83 	.word	0x431bde83

0800e868 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800e868:	b480      	push	{r7}
 800e86a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800e86c:	4b05      	ldr	r3, [pc, #20]	; (800e884 <HAL_PWREx_EnableVddUSB+0x1c>)
 800e86e:	685b      	ldr	r3, [r3, #4]
 800e870:	4a04      	ldr	r2, [pc, #16]	; (800e884 <HAL_PWREx_EnableVddUSB+0x1c>)
 800e872:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e876:	6053      	str	r3, [r2, #4]
}
 800e878:	bf00      	nop
 800e87a:	46bd      	mov	sp, r7
 800e87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e880:	4770      	bx	lr
 800e882:	bf00      	nop
 800e884:	40007000 	.word	0x40007000

0800e888 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b088      	sub	sp, #32
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d101      	bne.n	800e89a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e896:	2301      	movs	r3, #1
 800e898:	e3d4      	b.n	800f044 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e89a:	4ba1      	ldr	r3, [pc, #644]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800e89c:	689b      	ldr	r3, [r3, #8]
 800e89e:	f003 030c 	and.w	r3, r3, #12
 800e8a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e8a4:	4b9e      	ldr	r3, [pc, #632]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800e8a6:	68db      	ldr	r3, [r3, #12]
 800e8a8:	f003 0303 	and.w	r3, r3, #3
 800e8ac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	f003 0310 	and.w	r3, r3, #16
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	f000 80e4 	beq.w	800ea84 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800e8bc:	69bb      	ldr	r3, [r7, #24]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d007      	beq.n	800e8d2 <HAL_RCC_OscConfig+0x4a>
 800e8c2:	69bb      	ldr	r3, [r7, #24]
 800e8c4:	2b0c      	cmp	r3, #12
 800e8c6:	f040 808b 	bne.w	800e9e0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	2b01      	cmp	r3, #1
 800e8ce:	f040 8087 	bne.w	800e9e0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800e8d2:	4b93      	ldr	r3, [pc, #588]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	f003 0302 	and.w	r3, r3, #2
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d005      	beq.n	800e8ea <HAL_RCC_OscConfig+0x62>
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	699b      	ldr	r3, [r3, #24]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d101      	bne.n	800e8ea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800e8e6:	2301      	movs	r3, #1
 800e8e8:	e3ac      	b.n	800f044 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6a1a      	ldr	r2, [r3, #32]
 800e8ee:	4b8c      	ldr	r3, [pc, #560]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	f003 0308 	and.w	r3, r3, #8
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d004      	beq.n	800e904 <HAL_RCC_OscConfig+0x7c>
 800e8fa:	4b89      	ldr	r3, [pc, #548]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e902:	e005      	b.n	800e910 <HAL_RCC_OscConfig+0x88>
 800e904:	4b86      	ldr	r3, [pc, #536]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800e906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e90a:	091b      	lsrs	r3, r3, #4
 800e90c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e910:	4293      	cmp	r3, r2
 800e912:	d223      	bcs.n	800e95c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	6a1b      	ldr	r3, [r3, #32]
 800e918:	4618      	mov	r0, r3
 800e91a:	f000 fd71 	bl	800f400 <RCC_SetFlashLatencyFromMSIRange>
 800e91e:	4603      	mov	r3, r0
 800e920:	2b00      	cmp	r3, #0
 800e922:	d001      	beq.n	800e928 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800e924:	2301      	movs	r3, #1
 800e926:	e38d      	b.n	800f044 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e928:	4b7d      	ldr	r3, [pc, #500]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	4a7c      	ldr	r2, [pc, #496]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800e92e:	f043 0308 	orr.w	r3, r3, #8
 800e932:	6013      	str	r3, [r2, #0]
 800e934:	4b7a      	ldr	r3, [pc, #488]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	6a1b      	ldr	r3, [r3, #32]
 800e940:	4977      	ldr	r1, [pc, #476]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800e942:	4313      	orrs	r3, r2
 800e944:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e946:	4b76      	ldr	r3, [pc, #472]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800e948:	685b      	ldr	r3, [r3, #4]
 800e94a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	69db      	ldr	r3, [r3, #28]
 800e952:	021b      	lsls	r3, r3, #8
 800e954:	4972      	ldr	r1, [pc, #456]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800e956:	4313      	orrs	r3, r2
 800e958:	604b      	str	r3, [r1, #4]
 800e95a:	e025      	b.n	800e9a8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e95c:	4b70      	ldr	r3, [pc, #448]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	4a6f      	ldr	r2, [pc, #444]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800e962:	f043 0308 	orr.w	r3, r3, #8
 800e966:	6013      	str	r3, [r2, #0]
 800e968:	4b6d      	ldr	r3, [pc, #436]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	6a1b      	ldr	r3, [r3, #32]
 800e974:	496a      	ldr	r1, [pc, #424]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800e976:	4313      	orrs	r3, r2
 800e978:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e97a:	4b69      	ldr	r3, [pc, #420]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800e97c:	685b      	ldr	r3, [r3, #4]
 800e97e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	69db      	ldr	r3, [r3, #28]
 800e986:	021b      	lsls	r3, r3, #8
 800e988:	4965      	ldr	r1, [pc, #404]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800e98a:	4313      	orrs	r3, r2
 800e98c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800e98e:	69bb      	ldr	r3, [r7, #24]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d109      	bne.n	800e9a8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	6a1b      	ldr	r3, [r3, #32]
 800e998:	4618      	mov	r0, r3
 800e99a:	f000 fd31 	bl	800f400 <RCC_SetFlashLatencyFromMSIRange>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d001      	beq.n	800e9a8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	e34d      	b.n	800f044 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800e9a8:	f000 fc36 	bl	800f218 <HAL_RCC_GetSysClockFreq>
 800e9ac:	4601      	mov	r1, r0
 800e9ae:	4b5c      	ldr	r3, [pc, #368]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800e9b0:	689b      	ldr	r3, [r3, #8]
 800e9b2:	091b      	lsrs	r3, r3, #4
 800e9b4:	f003 030f 	and.w	r3, r3, #15
 800e9b8:	4a5a      	ldr	r2, [pc, #360]	; (800eb24 <HAL_RCC_OscConfig+0x29c>)
 800e9ba:	5cd3      	ldrb	r3, [r2, r3]
 800e9bc:	f003 031f 	and.w	r3, r3, #31
 800e9c0:	fa21 f303 	lsr.w	r3, r1, r3
 800e9c4:	4a58      	ldr	r2, [pc, #352]	; (800eb28 <HAL_RCC_OscConfig+0x2a0>)
 800e9c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800e9c8:	4b58      	ldr	r3, [pc, #352]	; (800eb2c <HAL_RCC_OscConfig+0x2a4>)
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	f7f3 fee3 	bl	8002798 <HAL_InitTick>
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800e9d6:	7bfb      	ldrb	r3, [r7, #15]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d052      	beq.n	800ea82 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800e9dc:	7bfb      	ldrb	r3, [r7, #15]
 800e9de:	e331      	b.n	800f044 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	699b      	ldr	r3, [r3, #24]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d032      	beq.n	800ea4e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800e9e8:	4b4d      	ldr	r3, [pc, #308]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	4a4c      	ldr	r2, [pc, #304]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800e9ee:	f043 0301 	orr.w	r3, r3, #1
 800e9f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800e9f4:	f7fb f9be 	bl	8009d74 <HAL_GetTick>
 800e9f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800e9fa:	e008      	b.n	800ea0e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e9fc:	f7fb f9ba 	bl	8009d74 <HAL_GetTick>
 800ea00:	4602      	mov	r2, r0
 800ea02:	693b      	ldr	r3, [r7, #16]
 800ea04:	1ad3      	subs	r3, r2, r3
 800ea06:	2b02      	cmp	r3, #2
 800ea08:	d901      	bls.n	800ea0e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800ea0a:	2303      	movs	r3, #3
 800ea0c:	e31a      	b.n	800f044 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ea0e:	4b44      	ldr	r3, [pc, #272]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	f003 0302 	and.w	r3, r3, #2
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d0f0      	beq.n	800e9fc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ea1a:	4b41      	ldr	r3, [pc, #260]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	4a40      	ldr	r2, [pc, #256]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800ea20:	f043 0308 	orr.w	r3, r3, #8
 800ea24:	6013      	str	r3, [r2, #0]
 800ea26:	4b3e      	ldr	r3, [pc, #248]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	6a1b      	ldr	r3, [r3, #32]
 800ea32:	493b      	ldr	r1, [pc, #236]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800ea34:	4313      	orrs	r3, r2
 800ea36:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ea38:	4b39      	ldr	r3, [pc, #228]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800ea3a:	685b      	ldr	r3, [r3, #4]
 800ea3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	69db      	ldr	r3, [r3, #28]
 800ea44:	021b      	lsls	r3, r3, #8
 800ea46:	4936      	ldr	r1, [pc, #216]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800ea48:	4313      	orrs	r3, r2
 800ea4a:	604b      	str	r3, [r1, #4]
 800ea4c:	e01a      	b.n	800ea84 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800ea4e:	4b34      	ldr	r3, [pc, #208]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	4a33      	ldr	r2, [pc, #204]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800ea54:	f023 0301 	bic.w	r3, r3, #1
 800ea58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800ea5a:	f7fb f98b 	bl	8009d74 <HAL_GetTick>
 800ea5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800ea60:	e008      	b.n	800ea74 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ea62:	f7fb f987 	bl	8009d74 <HAL_GetTick>
 800ea66:	4602      	mov	r2, r0
 800ea68:	693b      	ldr	r3, [r7, #16]
 800ea6a:	1ad3      	subs	r3, r2, r3
 800ea6c:	2b02      	cmp	r3, #2
 800ea6e:	d901      	bls.n	800ea74 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800ea70:	2303      	movs	r3, #3
 800ea72:	e2e7      	b.n	800f044 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800ea74:	4b2a      	ldr	r3, [pc, #168]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	f003 0302 	and.w	r3, r3, #2
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d1f0      	bne.n	800ea62 <HAL_RCC_OscConfig+0x1da>
 800ea80:	e000      	b.n	800ea84 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ea82:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	f003 0301 	and.w	r3, r3, #1
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d074      	beq.n	800eb7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800ea90:	69bb      	ldr	r3, [r7, #24]
 800ea92:	2b08      	cmp	r3, #8
 800ea94:	d005      	beq.n	800eaa2 <HAL_RCC_OscConfig+0x21a>
 800ea96:	69bb      	ldr	r3, [r7, #24]
 800ea98:	2b0c      	cmp	r3, #12
 800ea9a:	d10e      	bne.n	800eaba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800ea9c:	697b      	ldr	r3, [r7, #20]
 800ea9e:	2b03      	cmp	r3, #3
 800eaa0:	d10b      	bne.n	800eaba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800eaa2:	4b1f      	ldr	r3, [pc, #124]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d064      	beq.n	800eb78 <HAL_RCC_OscConfig+0x2f0>
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	685b      	ldr	r3, [r3, #4]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d160      	bne.n	800eb78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800eab6:	2301      	movs	r3, #1
 800eab8:	e2c4      	b.n	800f044 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	685b      	ldr	r3, [r3, #4]
 800eabe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eac2:	d106      	bne.n	800ead2 <HAL_RCC_OscConfig+0x24a>
 800eac4:	4b16      	ldr	r3, [pc, #88]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	4a15      	ldr	r2, [pc, #84]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800eaca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eace:	6013      	str	r3, [r2, #0]
 800ead0:	e01d      	b.n	800eb0e <HAL_RCC_OscConfig+0x286>
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	685b      	ldr	r3, [r3, #4]
 800ead6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800eada:	d10c      	bne.n	800eaf6 <HAL_RCC_OscConfig+0x26e>
 800eadc:	4b10      	ldr	r3, [pc, #64]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	4a0f      	ldr	r2, [pc, #60]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800eae2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800eae6:	6013      	str	r3, [r2, #0]
 800eae8:	4b0d      	ldr	r3, [pc, #52]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	4a0c      	ldr	r2, [pc, #48]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800eaee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eaf2:	6013      	str	r3, [r2, #0]
 800eaf4:	e00b      	b.n	800eb0e <HAL_RCC_OscConfig+0x286>
 800eaf6:	4b0a      	ldr	r3, [pc, #40]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	4a09      	ldr	r2, [pc, #36]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800eafc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eb00:	6013      	str	r3, [r2, #0]
 800eb02:	4b07      	ldr	r3, [pc, #28]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	4a06      	ldr	r2, [pc, #24]	; (800eb20 <HAL_RCC_OscConfig+0x298>)
 800eb08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800eb0c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	685b      	ldr	r3, [r3, #4]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d01c      	beq.n	800eb50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eb16:	f7fb f92d 	bl	8009d74 <HAL_GetTick>
 800eb1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800eb1c:	e011      	b.n	800eb42 <HAL_RCC_OscConfig+0x2ba>
 800eb1e:	bf00      	nop
 800eb20:	40021000 	.word	0x40021000
 800eb24:	0801fc4c 	.word	0x0801fc4c
 800eb28:	20000004 	.word	0x20000004
 800eb2c:	20000184 	.word	0x20000184
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800eb30:	f7fb f920 	bl	8009d74 <HAL_GetTick>
 800eb34:	4602      	mov	r2, r0
 800eb36:	693b      	ldr	r3, [r7, #16]
 800eb38:	1ad3      	subs	r3, r2, r3
 800eb3a:	2b64      	cmp	r3, #100	; 0x64
 800eb3c:	d901      	bls.n	800eb42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800eb3e:	2303      	movs	r3, #3
 800eb40:	e280      	b.n	800f044 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800eb42:	4baf      	ldr	r3, [pc, #700]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d0f0      	beq.n	800eb30 <HAL_RCC_OscConfig+0x2a8>
 800eb4e:	e014      	b.n	800eb7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eb50:	f7fb f910 	bl	8009d74 <HAL_GetTick>
 800eb54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800eb56:	e008      	b.n	800eb6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800eb58:	f7fb f90c 	bl	8009d74 <HAL_GetTick>
 800eb5c:	4602      	mov	r2, r0
 800eb5e:	693b      	ldr	r3, [r7, #16]
 800eb60:	1ad3      	subs	r3, r2, r3
 800eb62:	2b64      	cmp	r3, #100	; 0x64
 800eb64:	d901      	bls.n	800eb6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800eb66:	2303      	movs	r3, #3
 800eb68:	e26c      	b.n	800f044 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800eb6a:	4ba5      	ldr	r3, [pc, #660]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d1f0      	bne.n	800eb58 <HAL_RCC_OscConfig+0x2d0>
 800eb76:	e000      	b.n	800eb7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800eb78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	f003 0302 	and.w	r3, r3, #2
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d060      	beq.n	800ec48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800eb86:	69bb      	ldr	r3, [r7, #24]
 800eb88:	2b04      	cmp	r3, #4
 800eb8a:	d005      	beq.n	800eb98 <HAL_RCC_OscConfig+0x310>
 800eb8c:	69bb      	ldr	r3, [r7, #24]
 800eb8e:	2b0c      	cmp	r3, #12
 800eb90:	d119      	bne.n	800ebc6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800eb92:	697b      	ldr	r3, [r7, #20]
 800eb94:	2b02      	cmp	r3, #2
 800eb96:	d116      	bne.n	800ebc6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800eb98:	4b99      	ldr	r3, [pc, #612]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d005      	beq.n	800ebb0 <HAL_RCC_OscConfig+0x328>
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	68db      	ldr	r3, [r3, #12]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d101      	bne.n	800ebb0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800ebac:	2301      	movs	r3, #1
 800ebae:	e249      	b.n	800f044 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ebb0:	4b93      	ldr	r3, [pc, #588]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800ebb2:	685b      	ldr	r3, [r3, #4]
 800ebb4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	691b      	ldr	r3, [r3, #16]
 800ebbc:	061b      	lsls	r3, r3, #24
 800ebbe:	4990      	ldr	r1, [pc, #576]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800ebc0:	4313      	orrs	r3, r2
 800ebc2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ebc4:	e040      	b.n	800ec48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	68db      	ldr	r3, [r3, #12]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d023      	beq.n	800ec16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ebce:	4b8c      	ldr	r3, [pc, #560]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	4a8b      	ldr	r2, [pc, #556]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800ebd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ebd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ebda:	f7fb f8cb 	bl	8009d74 <HAL_GetTick>
 800ebde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ebe0:	e008      	b.n	800ebf4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ebe2:	f7fb f8c7 	bl	8009d74 <HAL_GetTick>
 800ebe6:	4602      	mov	r2, r0
 800ebe8:	693b      	ldr	r3, [r7, #16]
 800ebea:	1ad3      	subs	r3, r2, r3
 800ebec:	2b02      	cmp	r3, #2
 800ebee:	d901      	bls.n	800ebf4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800ebf0:	2303      	movs	r3, #3
 800ebf2:	e227      	b.n	800f044 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ebf4:	4b82      	ldr	r3, [pc, #520]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d0f0      	beq.n	800ebe2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ec00:	4b7f      	ldr	r3, [pc, #508]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800ec02:	685b      	ldr	r3, [r3, #4]
 800ec04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	691b      	ldr	r3, [r3, #16]
 800ec0c:	061b      	lsls	r3, r3, #24
 800ec0e:	497c      	ldr	r1, [pc, #496]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800ec10:	4313      	orrs	r3, r2
 800ec12:	604b      	str	r3, [r1, #4]
 800ec14:	e018      	b.n	800ec48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ec16:	4b7a      	ldr	r3, [pc, #488]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	4a79      	ldr	r2, [pc, #484]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800ec1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ec20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ec22:	f7fb f8a7 	bl	8009d74 <HAL_GetTick>
 800ec26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ec28:	e008      	b.n	800ec3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ec2a:	f7fb f8a3 	bl	8009d74 <HAL_GetTick>
 800ec2e:	4602      	mov	r2, r0
 800ec30:	693b      	ldr	r3, [r7, #16]
 800ec32:	1ad3      	subs	r3, r2, r3
 800ec34:	2b02      	cmp	r3, #2
 800ec36:	d901      	bls.n	800ec3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800ec38:	2303      	movs	r3, #3
 800ec3a:	e203      	b.n	800f044 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ec3c:	4b70      	ldr	r3, [pc, #448]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d1f0      	bne.n	800ec2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	f003 0308 	and.w	r3, r3, #8
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d03c      	beq.n	800ecce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	695b      	ldr	r3, [r3, #20]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d01c      	beq.n	800ec96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ec5c:	4b68      	ldr	r3, [pc, #416]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800ec5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ec62:	4a67      	ldr	r2, [pc, #412]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800ec64:	f043 0301 	orr.w	r3, r3, #1
 800ec68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ec6c:	f7fb f882 	bl	8009d74 <HAL_GetTick>
 800ec70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ec72:	e008      	b.n	800ec86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ec74:	f7fb f87e 	bl	8009d74 <HAL_GetTick>
 800ec78:	4602      	mov	r2, r0
 800ec7a:	693b      	ldr	r3, [r7, #16]
 800ec7c:	1ad3      	subs	r3, r2, r3
 800ec7e:	2b02      	cmp	r3, #2
 800ec80:	d901      	bls.n	800ec86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800ec82:	2303      	movs	r3, #3
 800ec84:	e1de      	b.n	800f044 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ec86:	4b5e      	ldr	r3, [pc, #376]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800ec88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ec8c:	f003 0302 	and.w	r3, r3, #2
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d0ef      	beq.n	800ec74 <HAL_RCC_OscConfig+0x3ec>
 800ec94:	e01b      	b.n	800ecce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ec96:	4b5a      	ldr	r3, [pc, #360]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800ec98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ec9c:	4a58      	ldr	r2, [pc, #352]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800ec9e:	f023 0301 	bic.w	r3, r3, #1
 800eca2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eca6:	f7fb f865 	bl	8009d74 <HAL_GetTick>
 800ecaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ecac:	e008      	b.n	800ecc0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ecae:	f7fb f861 	bl	8009d74 <HAL_GetTick>
 800ecb2:	4602      	mov	r2, r0
 800ecb4:	693b      	ldr	r3, [r7, #16]
 800ecb6:	1ad3      	subs	r3, r2, r3
 800ecb8:	2b02      	cmp	r3, #2
 800ecba:	d901      	bls.n	800ecc0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800ecbc:	2303      	movs	r3, #3
 800ecbe:	e1c1      	b.n	800f044 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ecc0:	4b4f      	ldr	r3, [pc, #316]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800ecc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ecc6:	f003 0302 	and.w	r3, r3, #2
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d1ef      	bne.n	800ecae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	f003 0304 	and.w	r3, r3, #4
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	f000 80a6 	beq.w	800ee28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ecdc:	2300      	movs	r3, #0
 800ecde:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800ece0:	4b47      	ldr	r3, [pc, #284]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800ece2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ece4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d10d      	bne.n	800ed08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ecec:	4b44      	ldr	r3, [pc, #272]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800ecee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecf0:	4a43      	ldr	r2, [pc, #268]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800ecf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ecf6:	6593      	str	r3, [r2, #88]	; 0x58
 800ecf8:	4b41      	ldr	r3, [pc, #260]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800ecfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ed00:	60bb      	str	r3, [r7, #8]
 800ed02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ed04:	2301      	movs	r3, #1
 800ed06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ed08:	4b3e      	ldr	r3, [pc, #248]	; (800ee04 <HAL_RCC_OscConfig+0x57c>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d118      	bne.n	800ed46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ed14:	4b3b      	ldr	r3, [pc, #236]	; (800ee04 <HAL_RCC_OscConfig+0x57c>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	4a3a      	ldr	r2, [pc, #232]	; (800ee04 <HAL_RCC_OscConfig+0x57c>)
 800ed1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ed1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ed20:	f7fb f828 	bl	8009d74 <HAL_GetTick>
 800ed24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ed26:	e008      	b.n	800ed3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ed28:	f7fb f824 	bl	8009d74 <HAL_GetTick>
 800ed2c:	4602      	mov	r2, r0
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	1ad3      	subs	r3, r2, r3
 800ed32:	2b02      	cmp	r3, #2
 800ed34:	d901      	bls.n	800ed3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800ed36:	2303      	movs	r3, #3
 800ed38:	e184      	b.n	800f044 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ed3a:	4b32      	ldr	r3, [pc, #200]	; (800ee04 <HAL_RCC_OscConfig+0x57c>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d0f0      	beq.n	800ed28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	689b      	ldr	r3, [r3, #8]
 800ed4a:	2b01      	cmp	r3, #1
 800ed4c:	d108      	bne.n	800ed60 <HAL_RCC_OscConfig+0x4d8>
 800ed4e:	4b2c      	ldr	r3, [pc, #176]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800ed50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed54:	4a2a      	ldr	r2, [pc, #168]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800ed56:	f043 0301 	orr.w	r3, r3, #1
 800ed5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ed5e:	e024      	b.n	800edaa <HAL_RCC_OscConfig+0x522>
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	689b      	ldr	r3, [r3, #8]
 800ed64:	2b05      	cmp	r3, #5
 800ed66:	d110      	bne.n	800ed8a <HAL_RCC_OscConfig+0x502>
 800ed68:	4b25      	ldr	r3, [pc, #148]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800ed6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed6e:	4a24      	ldr	r2, [pc, #144]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800ed70:	f043 0304 	orr.w	r3, r3, #4
 800ed74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ed78:	4b21      	ldr	r3, [pc, #132]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800ed7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed7e:	4a20      	ldr	r2, [pc, #128]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800ed80:	f043 0301 	orr.w	r3, r3, #1
 800ed84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ed88:	e00f      	b.n	800edaa <HAL_RCC_OscConfig+0x522>
 800ed8a:	4b1d      	ldr	r3, [pc, #116]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800ed8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed90:	4a1b      	ldr	r2, [pc, #108]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800ed92:	f023 0301 	bic.w	r3, r3, #1
 800ed96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ed9a:	4b19      	ldr	r3, [pc, #100]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800ed9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eda0:	4a17      	ldr	r2, [pc, #92]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800eda2:	f023 0304 	bic.w	r3, r3, #4
 800eda6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	689b      	ldr	r3, [r3, #8]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d016      	beq.n	800ede0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800edb2:	f7fa ffdf 	bl	8009d74 <HAL_GetTick>
 800edb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800edb8:	e00a      	b.n	800edd0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800edba:	f7fa ffdb 	bl	8009d74 <HAL_GetTick>
 800edbe:	4602      	mov	r2, r0
 800edc0:	693b      	ldr	r3, [r7, #16]
 800edc2:	1ad3      	subs	r3, r2, r3
 800edc4:	f241 3288 	movw	r2, #5000	; 0x1388
 800edc8:	4293      	cmp	r3, r2
 800edca:	d901      	bls.n	800edd0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800edcc:	2303      	movs	r3, #3
 800edce:	e139      	b.n	800f044 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800edd0:	4b0b      	ldr	r3, [pc, #44]	; (800ee00 <HAL_RCC_OscConfig+0x578>)
 800edd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800edd6:	f003 0302 	and.w	r3, r3, #2
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d0ed      	beq.n	800edba <HAL_RCC_OscConfig+0x532>
 800edde:	e01a      	b.n	800ee16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ede0:	f7fa ffc8 	bl	8009d74 <HAL_GetTick>
 800ede4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ede6:	e00f      	b.n	800ee08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ede8:	f7fa ffc4 	bl	8009d74 <HAL_GetTick>
 800edec:	4602      	mov	r2, r0
 800edee:	693b      	ldr	r3, [r7, #16]
 800edf0:	1ad3      	subs	r3, r2, r3
 800edf2:	f241 3288 	movw	r2, #5000	; 0x1388
 800edf6:	4293      	cmp	r3, r2
 800edf8:	d906      	bls.n	800ee08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800edfa:	2303      	movs	r3, #3
 800edfc:	e122      	b.n	800f044 <HAL_RCC_OscConfig+0x7bc>
 800edfe:	bf00      	nop
 800ee00:	40021000 	.word	0x40021000
 800ee04:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ee08:	4b90      	ldr	r3, [pc, #576]	; (800f04c <HAL_RCC_OscConfig+0x7c4>)
 800ee0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee0e:	f003 0302 	and.w	r3, r3, #2
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d1e8      	bne.n	800ede8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ee16:	7ffb      	ldrb	r3, [r7, #31]
 800ee18:	2b01      	cmp	r3, #1
 800ee1a:	d105      	bne.n	800ee28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ee1c:	4b8b      	ldr	r3, [pc, #556]	; (800f04c <HAL_RCC_OscConfig+0x7c4>)
 800ee1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee20:	4a8a      	ldr	r2, [pc, #552]	; (800f04c <HAL_RCC_OscConfig+0x7c4>)
 800ee22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ee26:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	f000 8108 	beq.w	800f042 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee36:	2b02      	cmp	r3, #2
 800ee38:	f040 80d0 	bne.w	800efdc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800ee3c:	4b83      	ldr	r3, [pc, #524]	; (800f04c <HAL_RCC_OscConfig+0x7c4>)
 800ee3e:	68db      	ldr	r3, [r3, #12]
 800ee40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	f003 0203 	and.w	r2, r3, #3
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee4c:	429a      	cmp	r2, r3
 800ee4e:	d130      	bne.n	800eeb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ee50:	697b      	ldr	r3, [r7, #20]
 800ee52:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee5a:	3b01      	subs	r3, #1
 800ee5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ee5e:	429a      	cmp	r2, r3
 800ee60:	d127      	bne.n	800eeb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	d11f      	bne.n	800eeb2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ee78:	687a      	ldr	r2, [r7, #4]
 800ee7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ee7c:	2a07      	cmp	r2, #7
 800ee7e:	bf14      	ite	ne
 800ee80:	2201      	movne	r2, #1
 800ee82:	2200      	moveq	r2, #0
 800ee84:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ee86:	4293      	cmp	r3, r2
 800ee88:	d113      	bne.n	800eeb2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ee8a:	697b      	ldr	r3, [r7, #20]
 800ee8c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee94:	085b      	lsrs	r3, r3, #1
 800ee96:	3b01      	subs	r3, #1
 800ee98:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800ee9a:	429a      	cmp	r2, r3
 800ee9c:	d109      	bne.n	800eeb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ee9e:	697b      	ldr	r3, [r7, #20]
 800eea0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eea8:	085b      	lsrs	r3, r3, #1
 800eeaa:	3b01      	subs	r3, #1
 800eeac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800eeae:	429a      	cmp	r2, r3
 800eeb0:	d06e      	beq.n	800ef90 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800eeb2:	69bb      	ldr	r3, [r7, #24]
 800eeb4:	2b0c      	cmp	r3, #12
 800eeb6:	d069      	beq.n	800ef8c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800eeb8:	4b64      	ldr	r3, [pc, #400]	; (800f04c <HAL_RCC_OscConfig+0x7c4>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d105      	bne.n	800eed0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800eec4:	4b61      	ldr	r3, [pc, #388]	; (800f04c <HAL_RCC_OscConfig+0x7c4>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d001      	beq.n	800eed4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800eed0:	2301      	movs	r3, #1
 800eed2:	e0b7      	b.n	800f044 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800eed4:	4b5d      	ldr	r3, [pc, #372]	; (800f04c <HAL_RCC_OscConfig+0x7c4>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	4a5c      	ldr	r2, [pc, #368]	; (800f04c <HAL_RCC_OscConfig+0x7c4>)
 800eeda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800eede:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800eee0:	f7fa ff48 	bl	8009d74 <HAL_GetTick>
 800eee4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800eee6:	e008      	b.n	800eefa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800eee8:	f7fa ff44 	bl	8009d74 <HAL_GetTick>
 800eeec:	4602      	mov	r2, r0
 800eeee:	693b      	ldr	r3, [r7, #16]
 800eef0:	1ad3      	subs	r3, r2, r3
 800eef2:	2b02      	cmp	r3, #2
 800eef4:	d901      	bls.n	800eefa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800eef6:	2303      	movs	r3, #3
 800eef8:	e0a4      	b.n	800f044 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800eefa:	4b54      	ldr	r3, [pc, #336]	; (800f04c <HAL_RCC_OscConfig+0x7c4>)
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d1f0      	bne.n	800eee8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ef06:	4b51      	ldr	r3, [pc, #324]	; (800f04c <HAL_RCC_OscConfig+0x7c4>)
 800ef08:	68da      	ldr	r2, [r3, #12]
 800ef0a:	4b51      	ldr	r3, [pc, #324]	; (800f050 <HAL_RCC_OscConfig+0x7c8>)
 800ef0c:	4013      	ands	r3, r2
 800ef0e:	687a      	ldr	r2, [r7, #4]
 800ef10:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800ef12:	687a      	ldr	r2, [r7, #4]
 800ef14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ef16:	3a01      	subs	r2, #1
 800ef18:	0112      	lsls	r2, r2, #4
 800ef1a:	4311      	orrs	r1, r2
 800ef1c:	687a      	ldr	r2, [r7, #4]
 800ef1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ef20:	0212      	lsls	r2, r2, #8
 800ef22:	4311      	orrs	r1, r2
 800ef24:	687a      	ldr	r2, [r7, #4]
 800ef26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ef28:	0852      	lsrs	r2, r2, #1
 800ef2a:	3a01      	subs	r2, #1
 800ef2c:	0552      	lsls	r2, r2, #21
 800ef2e:	4311      	orrs	r1, r2
 800ef30:	687a      	ldr	r2, [r7, #4]
 800ef32:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ef34:	0852      	lsrs	r2, r2, #1
 800ef36:	3a01      	subs	r2, #1
 800ef38:	0652      	lsls	r2, r2, #25
 800ef3a:	4311      	orrs	r1, r2
 800ef3c:	687a      	ldr	r2, [r7, #4]
 800ef3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ef40:	0912      	lsrs	r2, r2, #4
 800ef42:	0452      	lsls	r2, r2, #17
 800ef44:	430a      	orrs	r2, r1
 800ef46:	4941      	ldr	r1, [pc, #260]	; (800f04c <HAL_RCC_OscConfig+0x7c4>)
 800ef48:	4313      	orrs	r3, r2
 800ef4a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800ef4c:	4b3f      	ldr	r3, [pc, #252]	; (800f04c <HAL_RCC_OscConfig+0x7c4>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	4a3e      	ldr	r2, [pc, #248]	; (800f04c <HAL_RCC_OscConfig+0x7c4>)
 800ef52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ef56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ef58:	4b3c      	ldr	r3, [pc, #240]	; (800f04c <HAL_RCC_OscConfig+0x7c4>)
 800ef5a:	68db      	ldr	r3, [r3, #12]
 800ef5c:	4a3b      	ldr	r2, [pc, #236]	; (800f04c <HAL_RCC_OscConfig+0x7c4>)
 800ef5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ef62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ef64:	f7fa ff06 	bl	8009d74 <HAL_GetTick>
 800ef68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ef6a:	e008      	b.n	800ef7e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ef6c:	f7fa ff02 	bl	8009d74 <HAL_GetTick>
 800ef70:	4602      	mov	r2, r0
 800ef72:	693b      	ldr	r3, [r7, #16]
 800ef74:	1ad3      	subs	r3, r2, r3
 800ef76:	2b02      	cmp	r3, #2
 800ef78:	d901      	bls.n	800ef7e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800ef7a:	2303      	movs	r3, #3
 800ef7c:	e062      	b.n	800f044 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ef7e:	4b33      	ldr	r3, [pc, #204]	; (800f04c <HAL_RCC_OscConfig+0x7c4>)
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d0f0      	beq.n	800ef6c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ef8a:	e05a      	b.n	800f042 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800ef8c:	2301      	movs	r3, #1
 800ef8e:	e059      	b.n	800f044 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ef90:	4b2e      	ldr	r3, [pc, #184]	; (800f04c <HAL_RCC_OscConfig+0x7c4>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d152      	bne.n	800f042 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800ef9c:	4b2b      	ldr	r3, [pc, #172]	; (800f04c <HAL_RCC_OscConfig+0x7c4>)
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	4a2a      	ldr	r2, [pc, #168]	; (800f04c <HAL_RCC_OscConfig+0x7c4>)
 800efa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800efa6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800efa8:	4b28      	ldr	r3, [pc, #160]	; (800f04c <HAL_RCC_OscConfig+0x7c4>)
 800efaa:	68db      	ldr	r3, [r3, #12]
 800efac:	4a27      	ldr	r2, [pc, #156]	; (800f04c <HAL_RCC_OscConfig+0x7c4>)
 800efae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800efb2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800efb4:	f7fa fede 	bl	8009d74 <HAL_GetTick>
 800efb8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800efba:	e008      	b.n	800efce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800efbc:	f7fa feda 	bl	8009d74 <HAL_GetTick>
 800efc0:	4602      	mov	r2, r0
 800efc2:	693b      	ldr	r3, [r7, #16]
 800efc4:	1ad3      	subs	r3, r2, r3
 800efc6:	2b02      	cmp	r3, #2
 800efc8:	d901      	bls.n	800efce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800efca:	2303      	movs	r3, #3
 800efcc:	e03a      	b.n	800f044 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800efce:	4b1f      	ldr	r3, [pc, #124]	; (800f04c <HAL_RCC_OscConfig+0x7c4>)
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d0f0      	beq.n	800efbc <HAL_RCC_OscConfig+0x734>
 800efda:	e032      	b.n	800f042 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800efdc:	69bb      	ldr	r3, [r7, #24]
 800efde:	2b0c      	cmp	r3, #12
 800efe0:	d02d      	beq.n	800f03e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800efe2:	4b1a      	ldr	r3, [pc, #104]	; (800f04c <HAL_RCC_OscConfig+0x7c4>)
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	4a19      	ldr	r2, [pc, #100]	; (800f04c <HAL_RCC_OscConfig+0x7c4>)
 800efe8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800efec:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800efee:	4b17      	ldr	r3, [pc, #92]	; (800f04c <HAL_RCC_OscConfig+0x7c4>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d105      	bne.n	800f006 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800effa:	4b14      	ldr	r3, [pc, #80]	; (800f04c <HAL_RCC_OscConfig+0x7c4>)
 800effc:	68db      	ldr	r3, [r3, #12]
 800effe:	4a13      	ldr	r2, [pc, #76]	; (800f04c <HAL_RCC_OscConfig+0x7c4>)
 800f000:	f023 0303 	bic.w	r3, r3, #3
 800f004:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800f006:	4b11      	ldr	r3, [pc, #68]	; (800f04c <HAL_RCC_OscConfig+0x7c4>)
 800f008:	68db      	ldr	r3, [r3, #12]
 800f00a:	4a10      	ldr	r2, [pc, #64]	; (800f04c <HAL_RCC_OscConfig+0x7c4>)
 800f00c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800f010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f014:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f016:	f7fa fead 	bl	8009d74 <HAL_GetTick>
 800f01a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f01c:	e008      	b.n	800f030 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f01e:	f7fa fea9 	bl	8009d74 <HAL_GetTick>
 800f022:	4602      	mov	r2, r0
 800f024:	693b      	ldr	r3, [r7, #16]
 800f026:	1ad3      	subs	r3, r2, r3
 800f028:	2b02      	cmp	r3, #2
 800f02a:	d901      	bls.n	800f030 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800f02c:	2303      	movs	r3, #3
 800f02e:	e009      	b.n	800f044 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f030:	4b06      	ldr	r3, [pc, #24]	; (800f04c <HAL_RCC_OscConfig+0x7c4>)
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d1f0      	bne.n	800f01e <HAL_RCC_OscConfig+0x796>
 800f03c:	e001      	b.n	800f042 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800f03e:	2301      	movs	r3, #1
 800f040:	e000      	b.n	800f044 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800f042:	2300      	movs	r3, #0
}
 800f044:	4618      	mov	r0, r3
 800f046:	3720      	adds	r7, #32
 800f048:	46bd      	mov	sp, r7
 800f04a:	bd80      	pop	{r7, pc}
 800f04c:	40021000 	.word	0x40021000
 800f050:	f99d808c 	.word	0xf99d808c

0800f054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b084      	sub	sp, #16
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
 800f05c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d101      	bne.n	800f068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f064:	2301      	movs	r3, #1
 800f066:	e0c8      	b.n	800f1fa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f068:	4b66      	ldr	r3, [pc, #408]	; (800f204 <HAL_RCC_ClockConfig+0x1b0>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	f003 0307 	and.w	r3, r3, #7
 800f070:	683a      	ldr	r2, [r7, #0]
 800f072:	429a      	cmp	r2, r3
 800f074:	d910      	bls.n	800f098 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f076:	4b63      	ldr	r3, [pc, #396]	; (800f204 <HAL_RCC_ClockConfig+0x1b0>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	f023 0207 	bic.w	r2, r3, #7
 800f07e:	4961      	ldr	r1, [pc, #388]	; (800f204 <HAL_RCC_ClockConfig+0x1b0>)
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	4313      	orrs	r3, r2
 800f084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f086:	4b5f      	ldr	r3, [pc, #380]	; (800f204 <HAL_RCC_ClockConfig+0x1b0>)
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	f003 0307 	and.w	r3, r3, #7
 800f08e:	683a      	ldr	r2, [r7, #0]
 800f090:	429a      	cmp	r2, r3
 800f092:	d001      	beq.n	800f098 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800f094:	2301      	movs	r3, #1
 800f096:	e0b0      	b.n	800f1fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	f003 0301 	and.w	r3, r3, #1
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d04c      	beq.n	800f13e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	685b      	ldr	r3, [r3, #4]
 800f0a8:	2b03      	cmp	r3, #3
 800f0aa:	d107      	bne.n	800f0bc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f0ac:	4b56      	ldr	r3, [pc, #344]	; (800f208 <HAL_RCC_ClockConfig+0x1b4>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d121      	bne.n	800f0fc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800f0b8:	2301      	movs	r3, #1
 800f0ba:	e09e      	b.n	800f1fa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	685b      	ldr	r3, [r3, #4]
 800f0c0:	2b02      	cmp	r3, #2
 800f0c2:	d107      	bne.n	800f0d4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f0c4:	4b50      	ldr	r3, [pc, #320]	; (800f208 <HAL_RCC_ClockConfig+0x1b4>)
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d115      	bne.n	800f0fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800f0d0:	2301      	movs	r3, #1
 800f0d2:	e092      	b.n	800f1fa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	685b      	ldr	r3, [r3, #4]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d107      	bne.n	800f0ec <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f0dc:	4b4a      	ldr	r3, [pc, #296]	; (800f208 <HAL_RCC_ClockConfig+0x1b4>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	f003 0302 	and.w	r3, r3, #2
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d109      	bne.n	800f0fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	e086      	b.n	800f1fa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f0ec:	4b46      	ldr	r3, [pc, #280]	; (800f208 <HAL_RCC_ClockConfig+0x1b4>)
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d101      	bne.n	800f0fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	e07e      	b.n	800f1fa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800f0fc:	4b42      	ldr	r3, [pc, #264]	; (800f208 <HAL_RCC_ClockConfig+0x1b4>)
 800f0fe:	689b      	ldr	r3, [r3, #8]
 800f100:	f023 0203 	bic.w	r2, r3, #3
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	685b      	ldr	r3, [r3, #4]
 800f108:	493f      	ldr	r1, [pc, #252]	; (800f208 <HAL_RCC_ClockConfig+0x1b4>)
 800f10a:	4313      	orrs	r3, r2
 800f10c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f10e:	f7fa fe31 	bl	8009d74 <HAL_GetTick>
 800f112:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f114:	e00a      	b.n	800f12c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f116:	f7fa fe2d 	bl	8009d74 <HAL_GetTick>
 800f11a:	4602      	mov	r2, r0
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	1ad3      	subs	r3, r2, r3
 800f120:	f241 3288 	movw	r2, #5000	; 0x1388
 800f124:	4293      	cmp	r3, r2
 800f126:	d901      	bls.n	800f12c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800f128:	2303      	movs	r3, #3
 800f12a:	e066      	b.n	800f1fa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f12c:	4b36      	ldr	r3, [pc, #216]	; (800f208 <HAL_RCC_ClockConfig+0x1b4>)
 800f12e:	689b      	ldr	r3, [r3, #8]
 800f130:	f003 020c 	and.w	r2, r3, #12
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	685b      	ldr	r3, [r3, #4]
 800f138:	009b      	lsls	r3, r3, #2
 800f13a:	429a      	cmp	r2, r3
 800f13c:	d1eb      	bne.n	800f116 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	f003 0302 	and.w	r3, r3, #2
 800f146:	2b00      	cmp	r3, #0
 800f148:	d008      	beq.n	800f15c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f14a:	4b2f      	ldr	r3, [pc, #188]	; (800f208 <HAL_RCC_ClockConfig+0x1b4>)
 800f14c:	689b      	ldr	r3, [r3, #8]
 800f14e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	689b      	ldr	r3, [r3, #8]
 800f156:	492c      	ldr	r1, [pc, #176]	; (800f208 <HAL_RCC_ClockConfig+0x1b4>)
 800f158:	4313      	orrs	r3, r2
 800f15a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f15c:	4b29      	ldr	r3, [pc, #164]	; (800f204 <HAL_RCC_ClockConfig+0x1b0>)
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	f003 0307 	and.w	r3, r3, #7
 800f164:	683a      	ldr	r2, [r7, #0]
 800f166:	429a      	cmp	r2, r3
 800f168:	d210      	bcs.n	800f18c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f16a:	4b26      	ldr	r3, [pc, #152]	; (800f204 <HAL_RCC_ClockConfig+0x1b0>)
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	f023 0207 	bic.w	r2, r3, #7
 800f172:	4924      	ldr	r1, [pc, #144]	; (800f204 <HAL_RCC_ClockConfig+0x1b0>)
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	4313      	orrs	r3, r2
 800f178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f17a:	4b22      	ldr	r3, [pc, #136]	; (800f204 <HAL_RCC_ClockConfig+0x1b0>)
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	f003 0307 	and.w	r3, r3, #7
 800f182:	683a      	ldr	r2, [r7, #0]
 800f184:	429a      	cmp	r2, r3
 800f186:	d001      	beq.n	800f18c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800f188:	2301      	movs	r3, #1
 800f18a:	e036      	b.n	800f1fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	f003 0304 	and.w	r3, r3, #4
 800f194:	2b00      	cmp	r3, #0
 800f196:	d008      	beq.n	800f1aa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f198:	4b1b      	ldr	r3, [pc, #108]	; (800f208 <HAL_RCC_ClockConfig+0x1b4>)
 800f19a:	689b      	ldr	r3, [r3, #8]
 800f19c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	68db      	ldr	r3, [r3, #12]
 800f1a4:	4918      	ldr	r1, [pc, #96]	; (800f208 <HAL_RCC_ClockConfig+0x1b4>)
 800f1a6:	4313      	orrs	r3, r2
 800f1a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	f003 0308 	and.w	r3, r3, #8
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d009      	beq.n	800f1ca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f1b6:	4b14      	ldr	r3, [pc, #80]	; (800f208 <HAL_RCC_ClockConfig+0x1b4>)
 800f1b8:	689b      	ldr	r3, [r3, #8]
 800f1ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	691b      	ldr	r3, [r3, #16]
 800f1c2:	00db      	lsls	r3, r3, #3
 800f1c4:	4910      	ldr	r1, [pc, #64]	; (800f208 <HAL_RCC_ClockConfig+0x1b4>)
 800f1c6:	4313      	orrs	r3, r2
 800f1c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800f1ca:	f000 f825 	bl	800f218 <HAL_RCC_GetSysClockFreq>
 800f1ce:	4601      	mov	r1, r0
 800f1d0:	4b0d      	ldr	r3, [pc, #52]	; (800f208 <HAL_RCC_ClockConfig+0x1b4>)
 800f1d2:	689b      	ldr	r3, [r3, #8]
 800f1d4:	091b      	lsrs	r3, r3, #4
 800f1d6:	f003 030f 	and.w	r3, r3, #15
 800f1da:	4a0c      	ldr	r2, [pc, #48]	; (800f20c <HAL_RCC_ClockConfig+0x1b8>)
 800f1dc:	5cd3      	ldrb	r3, [r2, r3]
 800f1de:	f003 031f 	and.w	r3, r3, #31
 800f1e2:	fa21 f303 	lsr.w	r3, r1, r3
 800f1e6:	4a0a      	ldr	r2, [pc, #40]	; (800f210 <HAL_RCC_ClockConfig+0x1bc>)
 800f1e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800f1ea:	4b0a      	ldr	r3, [pc, #40]	; (800f214 <HAL_RCC_ClockConfig+0x1c0>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f7f3 fad2 	bl	8002798 <HAL_InitTick>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	72fb      	strb	r3, [r7, #11]

  return status;
 800f1f8:	7afb      	ldrb	r3, [r7, #11]
}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	3710      	adds	r7, #16
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}
 800f202:	bf00      	nop
 800f204:	40022000 	.word	0x40022000
 800f208:	40021000 	.word	0x40021000
 800f20c:	0801fc4c 	.word	0x0801fc4c
 800f210:	20000004 	.word	0x20000004
 800f214:	20000184 	.word	0x20000184

0800f218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f218:	b480      	push	{r7}
 800f21a:	b089      	sub	sp, #36	; 0x24
 800f21c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800f21e:	2300      	movs	r3, #0
 800f220:	61fb      	str	r3, [r7, #28]
 800f222:	2300      	movs	r3, #0
 800f224:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f226:	4b3d      	ldr	r3, [pc, #244]	; (800f31c <HAL_RCC_GetSysClockFreq+0x104>)
 800f228:	689b      	ldr	r3, [r3, #8]
 800f22a:	f003 030c 	and.w	r3, r3, #12
 800f22e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f230:	4b3a      	ldr	r3, [pc, #232]	; (800f31c <HAL_RCC_GetSysClockFreq+0x104>)
 800f232:	68db      	ldr	r3, [r3, #12]
 800f234:	f003 0303 	and.w	r3, r3, #3
 800f238:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800f23a:	693b      	ldr	r3, [r7, #16]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d005      	beq.n	800f24c <HAL_RCC_GetSysClockFreq+0x34>
 800f240:	693b      	ldr	r3, [r7, #16]
 800f242:	2b0c      	cmp	r3, #12
 800f244:	d121      	bne.n	800f28a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	2b01      	cmp	r3, #1
 800f24a:	d11e      	bne.n	800f28a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800f24c:	4b33      	ldr	r3, [pc, #204]	; (800f31c <HAL_RCC_GetSysClockFreq+0x104>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	f003 0308 	and.w	r3, r3, #8
 800f254:	2b00      	cmp	r3, #0
 800f256:	d107      	bne.n	800f268 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800f258:	4b30      	ldr	r3, [pc, #192]	; (800f31c <HAL_RCC_GetSysClockFreq+0x104>)
 800f25a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f25e:	0a1b      	lsrs	r3, r3, #8
 800f260:	f003 030f 	and.w	r3, r3, #15
 800f264:	61fb      	str	r3, [r7, #28]
 800f266:	e005      	b.n	800f274 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800f268:	4b2c      	ldr	r3, [pc, #176]	; (800f31c <HAL_RCC_GetSysClockFreq+0x104>)
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	091b      	lsrs	r3, r3, #4
 800f26e:	f003 030f 	and.w	r3, r3, #15
 800f272:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800f274:	4a2a      	ldr	r2, [pc, #168]	; (800f320 <HAL_RCC_GetSysClockFreq+0x108>)
 800f276:	69fb      	ldr	r3, [r7, #28]
 800f278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f27c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800f27e:	693b      	ldr	r3, [r7, #16]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d10d      	bne.n	800f2a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800f284:	69fb      	ldr	r3, [r7, #28]
 800f286:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800f288:	e00a      	b.n	800f2a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800f28a:	693b      	ldr	r3, [r7, #16]
 800f28c:	2b04      	cmp	r3, #4
 800f28e:	d102      	bne.n	800f296 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800f290:	4b24      	ldr	r3, [pc, #144]	; (800f324 <HAL_RCC_GetSysClockFreq+0x10c>)
 800f292:	61bb      	str	r3, [r7, #24]
 800f294:	e004      	b.n	800f2a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800f296:	693b      	ldr	r3, [r7, #16]
 800f298:	2b08      	cmp	r3, #8
 800f29a:	d101      	bne.n	800f2a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800f29c:	4b22      	ldr	r3, [pc, #136]	; (800f328 <HAL_RCC_GetSysClockFreq+0x110>)
 800f29e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800f2a0:	693b      	ldr	r3, [r7, #16]
 800f2a2:	2b0c      	cmp	r3, #12
 800f2a4:	d133      	bne.n	800f30e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800f2a6:	4b1d      	ldr	r3, [pc, #116]	; (800f31c <HAL_RCC_GetSysClockFreq+0x104>)
 800f2a8:	68db      	ldr	r3, [r3, #12]
 800f2aa:	f003 0303 	and.w	r3, r3, #3
 800f2ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	2b02      	cmp	r3, #2
 800f2b4:	d002      	beq.n	800f2bc <HAL_RCC_GetSysClockFreq+0xa4>
 800f2b6:	2b03      	cmp	r3, #3
 800f2b8:	d003      	beq.n	800f2c2 <HAL_RCC_GetSysClockFreq+0xaa>
 800f2ba:	e005      	b.n	800f2c8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800f2bc:	4b19      	ldr	r3, [pc, #100]	; (800f324 <HAL_RCC_GetSysClockFreq+0x10c>)
 800f2be:	617b      	str	r3, [r7, #20]
      break;
 800f2c0:	e005      	b.n	800f2ce <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800f2c2:	4b19      	ldr	r3, [pc, #100]	; (800f328 <HAL_RCC_GetSysClockFreq+0x110>)
 800f2c4:	617b      	str	r3, [r7, #20]
      break;
 800f2c6:	e002      	b.n	800f2ce <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800f2c8:	69fb      	ldr	r3, [r7, #28]
 800f2ca:	617b      	str	r3, [r7, #20]
      break;
 800f2cc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800f2ce:	4b13      	ldr	r3, [pc, #76]	; (800f31c <HAL_RCC_GetSysClockFreq+0x104>)
 800f2d0:	68db      	ldr	r3, [r3, #12]
 800f2d2:	091b      	lsrs	r3, r3, #4
 800f2d4:	f003 0307 	and.w	r3, r3, #7
 800f2d8:	3301      	adds	r3, #1
 800f2da:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800f2dc:	4b0f      	ldr	r3, [pc, #60]	; (800f31c <HAL_RCC_GetSysClockFreq+0x104>)
 800f2de:	68db      	ldr	r3, [r3, #12]
 800f2e0:	0a1b      	lsrs	r3, r3, #8
 800f2e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2e6:	697a      	ldr	r2, [r7, #20]
 800f2e8:	fb02 f203 	mul.w	r2, r2, r3
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800f2f2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800f2f4:	4b09      	ldr	r3, [pc, #36]	; (800f31c <HAL_RCC_GetSysClockFreq+0x104>)
 800f2f6:	68db      	ldr	r3, [r3, #12]
 800f2f8:	0e5b      	lsrs	r3, r3, #25
 800f2fa:	f003 0303 	and.w	r3, r3, #3
 800f2fe:	3301      	adds	r3, #1
 800f300:	005b      	lsls	r3, r3, #1
 800f302:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800f304:	697a      	ldr	r2, [r7, #20]
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	fbb2 f3f3 	udiv	r3, r2, r3
 800f30c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800f30e:	69bb      	ldr	r3, [r7, #24]
}
 800f310:	4618      	mov	r0, r3
 800f312:	3724      	adds	r7, #36	; 0x24
 800f314:	46bd      	mov	sp, r7
 800f316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31a:	4770      	bx	lr
 800f31c:	40021000 	.word	0x40021000
 800f320:	0801fc64 	.word	0x0801fc64
 800f324:	00f42400 	.word	0x00f42400
 800f328:	007a1200 	.word	0x007a1200

0800f32c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f32c:	b480      	push	{r7}
 800f32e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f330:	4b03      	ldr	r3, [pc, #12]	; (800f340 <HAL_RCC_GetHCLKFreq+0x14>)
 800f332:	681b      	ldr	r3, [r3, #0]
}
 800f334:	4618      	mov	r0, r3
 800f336:	46bd      	mov	sp, r7
 800f338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33c:	4770      	bx	lr
 800f33e:	bf00      	nop
 800f340:	20000004 	.word	0x20000004

0800f344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800f348:	f7ff fff0 	bl	800f32c <HAL_RCC_GetHCLKFreq>
 800f34c:	4601      	mov	r1, r0
 800f34e:	4b06      	ldr	r3, [pc, #24]	; (800f368 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f350:	689b      	ldr	r3, [r3, #8]
 800f352:	0a1b      	lsrs	r3, r3, #8
 800f354:	f003 0307 	and.w	r3, r3, #7
 800f358:	4a04      	ldr	r2, [pc, #16]	; (800f36c <HAL_RCC_GetPCLK1Freq+0x28>)
 800f35a:	5cd3      	ldrb	r3, [r2, r3]
 800f35c:	f003 031f 	and.w	r3, r3, #31
 800f360:	fa21 f303 	lsr.w	r3, r1, r3
}
 800f364:	4618      	mov	r0, r3
 800f366:	bd80      	pop	{r7, pc}
 800f368:	40021000 	.word	0x40021000
 800f36c:	0801fc5c 	.word	0x0801fc5c

0800f370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800f374:	f7ff ffda 	bl	800f32c <HAL_RCC_GetHCLKFreq>
 800f378:	4601      	mov	r1, r0
 800f37a:	4b06      	ldr	r3, [pc, #24]	; (800f394 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f37c:	689b      	ldr	r3, [r3, #8]
 800f37e:	0adb      	lsrs	r3, r3, #11
 800f380:	f003 0307 	and.w	r3, r3, #7
 800f384:	4a04      	ldr	r2, [pc, #16]	; (800f398 <HAL_RCC_GetPCLK2Freq+0x28>)
 800f386:	5cd3      	ldrb	r3, [r2, r3]
 800f388:	f003 031f 	and.w	r3, r3, #31
 800f38c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800f390:	4618      	mov	r0, r3
 800f392:	bd80      	pop	{r7, pc}
 800f394:	40021000 	.word	0x40021000
 800f398:	0801fc5c 	.word	0x0801fc5c

0800f39c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800f39c:	b480      	push	{r7}
 800f39e:	b083      	sub	sp, #12
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
 800f3a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	220f      	movs	r2, #15
 800f3aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800f3ac:	4b12      	ldr	r3, [pc, #72]	; (800f3f8 <HAL_RCC_GetClockConfig+0x5c>)
 800f3ae:	689b      	ldr	r3, [r3, #8]
 800f3b0:	f003 0203 	and.w	r2, r3, #3
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800f3b8:	4b0f      	ldr	r3, [pc, #60]	; (800f3f8 <HAL_RCC_GetClockConfig+0x5c>)
 800f3ba:	689b      	ldr	r3, [r3, #8]
 800f3bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800f3c4:	4b0c      	ldr	r3, [pc, #48]	; (800f3f8 <HAL_RCC_GetClockConfig+0x5c>)
 800f3c6:	689b      	ldr	r3, [r3, #8]
 800f3c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800f3d0:	4b09      	ldr	r3, [pc, #36]	; (800f3f8 <HAL_RCC_GetClockConfig+0x5c>)
 800f3d2:	689b      	ldr	r3, [r3, #8]
 800f3d4:	08db      	lsrs	r3, r3, #3
 800f3d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800f3de:	4b07      	ldr	r3, [pc, #28]	; (800f3fc <HAL_RCC_GetClockConfig+0x60>)
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	f003 0207 	and.w	r2, r3, #7
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	601a      	str	r2, [r3, #0]
}
 800f3ea:	bf00      	nop
 800f3ec:	370c      	adds	r7, #12
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f4:	4770      	bx	lr
 800f3f6:	bf00      	nop
 800f3f8:	40021000 	.word	0x40021000
 800f3fc:	40022000 	.word	0x40022000

0800f400 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b086      	sub	sp, #24
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800f408:	2300      	movs	r3, #0
 800f40a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800f40c:	4b2a      	ldr	r3, [pc, #168]	; (800f4b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800f40e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f414:	2b00      	cmp	r3, #0
 800f416:	d003      	beq.n	800f420 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800f418:	f7ff f9c2 	bl	800e7a0 <HAL_PWREx_GetVoltageRange>
 800f41c:	6178      	str	r0, [r7, #20]
 800f41e:	e014      	b.n	800f44a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800f420:	4b25      	ldr	r3, [pc, #148]	; (800f4b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800f422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f424:	4a24      	ldr	r2, [pc, #144]	; (800f4b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800f426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f42a:	6593      	str	r3, [r2, #88]	; 0x58
 800f42c:	4b22      	ldr	r3, [pc, #136]	; (800f4b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800f42e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f434:	60fb      	str	r3, [r7, #12]
 800f436:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800f438:	f7ff f9b2 	bl	800e7a0 <HAL_PWREx_GetVoltageRange>
 800f43c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800f43e:	4b1e      	ldr	r3, [pc, #120]	; (800f4b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800f440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f442:	4a1d      	ldr	r2, [pc, #116]	; (800f4b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800f444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f448:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800f44a:	697b      	ldr	r3, [r7, #20]
 800f44c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f450:	d10b      	bne.n	800f46a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2b80      	cmp	r3, #128	; 0x80
 800f456:	d919      	bls.n	800f48c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2ba0      	cmp	r3, #160	; 0xa0
 800f45c:	d902      	bls.n	800f464 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800f45e:	2302      	movs	r3, #2
 800f460:	613b      	str	r3, [r7, #16]
 800f462:	e013      	b.n	800f48c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800f464:	2301      	movs	r3, #1
 800f466:	613b      	str	r3, [r7, #16]
 800f468:	e010      	b.n	800f48c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2b80      	cmp	r3, #128	; 0x80
 800f46e:	d902      	bls.n	800f476 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800f470:	2303      	movs	r3, #3
 800f472:	613b      	str	r3, [r7, #16]
 800f474:	e00a      	b.n	800f48c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	2b80      	cmp	r3, #128	; 0x80
 800f47a:	d102      	bne.n	800f482 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800f47c:	2302      	movs	r3, #2
 800f47e:	613b      	str	r3, [r7, #16]
 800f480:	e004      	b.n	800f48c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2b70      	cmp	r3, #112	; 0x70
 800f486:	d101      	bne.n	800f48c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800f488:	2301      	movs	r3, #1
 800f48a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800f48c:	4b0b      	ldr	r3, [pc, #44]	; (800f4bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	f023 0207 	bic.w	r2, r3, #7
 800f494:	4909      	ldr	r1, [pc, #36]	; (800f4bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800f496:	693b      	ldr	r3, [r7, #16]
 800f498:	4313      	orrs	r3, r2
 800f49a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800f49c:	4b07      	ldr	r3, [pc, #28]	; (800f4bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	f003 0307 	and.w	r3, r3, #7
 800f4a4:	693a      	ldr	r2, [r7, #16]
 800f4a6:	429a      	cmp	r2, r3
 800f4a8:	d001      	beq.n	800f4ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800f4aa:	2301      	movs	r3, #1
 800f4ac:	e000      	b.n	800f4b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800f4ae:	2300      	movs	r3, #0
}
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	3718      	adds	r7, #24
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	bd80      	pop	{r7, pc}
 800f4b8:	40021000 	.word	0x40021000
 800f4bc:	40022000 	.word	0x40022000

0800f4c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b086      	sub	sp, #24
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d03f      	beq.n	800f55c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f4e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f4e4:	d01c      	beq.n	800f520 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800f4e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f4ea:	d802      	bhi.n	800f4f2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d00e      	beq.n	800f50e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800f4f0:	e01f      	b.n	800f532 <HAL_RCCEx_PeriphCLKConfig+0x72>
 800f4f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f4f6:	d003      	beq.n	800f500 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800f4f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800f4fc:	d01c      	beq.n	800f538 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800f4fe:	e018      	b.n	800f532 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800f500:	4b85      	ldr	r3, [pc, #532]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f502:	68db      	ldr	r3, [r3, #12]
 800f504:	4a84      	ldr	r2, [pc, #528]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f50a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800f50c:	e015      	b.n	800f53a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	3304      	adds	r3, #4
 800f512:	2100      	movs	r1, #0
 800f514:	4618      	mov	r0, r3
 800f516:	f000 fac9 	bl	800faac <RCCEx_PLLSAI1_Config>
 800f51a:	4603      	mov	r3, r0
 800f51c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800f51e:	e00c      	b.n	800f53a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	3320      	adds	r3, #32
 800f524:	2100      	movs	r1, #0
 800f526:	4618      	mov	r0, r3
 800f528:	f000 fbb0 	bl	800fc8c <RCCEx_PLLSAI2_Config>
 800f52c:	4603      	mov	r3, r0
 800f52e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800f530:	e003      	b.n	800f53a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f532:	2301      	movs	r3, #1
 800f534:	74fb      	strb	r3, [r7, #19]
      break;
 800f536:	e000      	b.n	800f53a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800f538:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f53a:	7cfb      	ldrb	r3, [r7, #19]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d10b      	bne.n	800f558 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f540:	4b75      	ldr	r3, [pc, #468]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f546:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f54e:	4972      	ldr	r1, [pc, #456]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f550:	4313      	orrs	r3, r2
 800f552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800f556:	e001      	b.n	800f55c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f558:	7cfb      	ldrb	r3, [r7, #19]
 800f55a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f564:	2b00      	cmp	r3, #0
 800f566:	d03f      	beq.n	800f5e8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f56c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f570:	d01c      	beq.n	800f5ac <HAL_RCCEx_PeriphCLKConfig+0xec>
 800f572:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f576:	d802      	bhi.n	800f57e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d00e      	beq.n	800f59a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800f57c:	e01f      	b.n	800f5be <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800f57e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f582:	d003      	beq.n	800f58c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800f584:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f588:	d01c      	beq.n	800f5c4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800f58a:	e018      	b.n	800f5be <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800f58c:	4b62      	ldr	r3, [pc, #392]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f58e:	68db      	ldr	r3, [r3, #12]
 800f590:	4a61      	ldr	r2, [pc, #388]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f596:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800f598:	e015      	b.n	800f5c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	3304      	adds	r3, #4
 800f59e:	2100      	movs	r1, #0
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	f000 fa83 	bl	800faac <RCCEx_PLLSAI1_Config>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800f5aa:	e00c      	b.n	800f5c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	3320      	adds	r3, #32
 800f5b0:	2100      	movs	r1, #0
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f000 fb6a 	bl	800fc8c <RCCEx_PLLSAI2_Config>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800f5bc:	e003      	b.n	800f5c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f5be:	2301      	movs	r3, #1
 800f5c0:	74fb      	strb	r3, [r7, #19]
      break;
 800f5c2:	e000      	b.n	800f5c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800f5c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f5c6:	7cfb      	ldrb	r3, [r7, #19]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d10b      	bne.n	800f5e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800f5cc:	4b52      	ldr	r3, [pc, #328]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f5ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f5d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f5da:	494f      	ldr	r1, [pc, #316]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f5dc:	4313      	orrs	r3, r2
 800f5de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800f5e2:	e001      	b.n	800f5e8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f5e4:	7cfb      	ldrb	r3, [r7, #19]
 800f5e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	f000 80a0 	beq.w	800f736 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800f5fa:	4b47      	ldr	r3, [pc, #284]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f5fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f602:	2b00      	cmp	r3, #0
 800f604:	d101      	bne.n	800f60a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800f606:	2301      	movs	r3, #1
 800f608:	e000      	b.n	800f60c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800f60a:	2300      	movs	r3, #0
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d00d      	beq.n	800f62c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f610:	4b41      	ldr	r3, [pc, #260]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f614:	4a40      	ldr	r2, [pc, #256]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f61a:	6593      	str	r3, [r2, #88]	; 0x58
 800f61c:	4b3e      	ldr	r3, [pc, #248]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f61e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f624:	60bb      	str	r3, [r7, #8]
 800f626:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f628:	2301      	movs	r3, #1
 800f62a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f62c:	4b3b      	ldr	r3, [pc, #236]	; (800f71c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	4a3a      	ldr	r2, [pc, #232]	; (800f71c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800f632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f636:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f638:	f7fa fb9c 	bl	8009d74 <HAL_GetTick>
 800f63c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800f63e:	e009      	b.n	800f654 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f640:	f7fa fb98 	bl	8009d74 <HAL_GetTick>
 800f644:	4602      	mov	r2, r0
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	1ad3      	subs	r3, r2, r3
 800f64a:	2b02      	cmp	r3, #2
 800f64c:	d902      	bls.n	800f654 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800f64e:	2303      	movs	r3, #3
 800f650:	74fb      	strb	r3, [r7, #19]
        break;
 800f652:	e005      	b.n	800f660 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800f654:	4b31      	ldr	r3, [pc, #196]	; (800f71c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d0ef      	beq.n	800f640 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800f660:	7cfb      	ldrb	r3, [r7, #19]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d15c      	bne.n	800f720 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800f666:	4b2c      	ldr	r3, [pc, #176]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f66c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f670:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800f672:	697b      	ldr	r3, [r7, #20]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d01f      	beq.n	800f6b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f67e:	697a      	ldr	r2, [r7, #20]
 800f680:	429a      	cmp	r2, r3
 800f682:	d019      	beq.n	800f6b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800f684:	4b24      	ldr	r3, [pc, #144]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f68a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f68e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800f690:	4b21      	ldr	r3, [pc, #132]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f696:	4a20      	ldr	r2, [pc, #128]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f69c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f6a0:	4b1d      	ldr	r3, [pc, #116]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f6a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f6a6:	4a1c      	ldr	r2, [pc, #112]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f6a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f6ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800f6b0:	4a19      	ldr	r2, [pc, #100]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800f6b8:	697b      	ldr	r3, [r7, #20]
 800f6ba:	f003 0301 	and.w	r3, r3, #1
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d016      	beq.n	800f6f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f6c2:	f7fa fb57 	bl	8009d74 <HAL_GetTick>
 800f6c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f6c8:	e00b      	b.n	800f6e2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f6ca:	f7fa fb53 	bl	8009d74 <HAL_GetTick>
 800f6ce:	4602      	mov	r2, r0
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	1ad3      	subs	r3, r2, r3
 800f6d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f6d8:	4293      	cmp	r3, r2
 800f6da:	d902      	bls.n	800f6e2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800f6dc:	2303      	movs	r3, #3
 800f6de:	74fb      	strb	r3, [r7, #19]
            break;
 800f6e0:	e006      	b.n	800f6f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f6e2:	4b0d      	ldr	r3, [pc, #52]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f6e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f6e8:	f003 0302 	and.w	r3, r3, #2
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d0ec      	beq.n	800f6ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800f6f0:	7cfb      	ldrb	r3, [r7, #19]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d10c      	bne.n	800f710 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f6f6:	4b08      	ldr	r3, [pc, #32]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f6f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f6fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f706:	4904      	ldr	r1, [pc, #16]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f708:	4313      	orrs	r3, r2
 800f70a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800f70e:	e009      	b.n	800f724 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800f710:	7cfb      	ldrb	r3, [r7, #19]
 800f712:	74bb      	strb	r3, [r7, #18]
 800f714:	e006      	b.n	800f724 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800f716:	bf00      	nop
 800f718:	40021000 	.word	0x40021000
 800f71c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f720:	7cfb      	ldrb	r3, [r7, #19]
 800f722:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f724:	7c7b      	ldrb	r3, [r7, #17]
 800f726:	2b01      	cmp	r3, #1
 800f728:	d105      	bne.n	800f736 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f72a:	4b9e      	ldr	r3, [pc, #632]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f72c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f72e:	4a9d      	ldr	r2, [pc, #628]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f734:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	f003 0301 	and.w	r3, r3, #1
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d00a      	beq.n	800f758 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f742:	4b98      	ldr	r3, [pc, #608]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f748:	f023 0203 	bic.w	r2, r3, #3
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f750:	4994      	ldr	r1, [pc, #592]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f752:	4313      	orrs	r3, r2
 800f754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	f003 0302 	and.w	r3, r3, #2
 800f760:	2b00      	cmp	r3, #0
 800f762:	d00a      	beq.n	800f77a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800f764:	4b8f      	ldr	r3, [pc, #572]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f76a:	f023 020c 	bic.w	r2, r3, #12
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f772:	498c      	ldr	r1, [pc, #560]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f774:	4313      	orrs	r3, r2
 800f776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	f003 0304 	and.w	r3, r3, #4
 800f782:	2b00      	cmp	r3, #0
 800f784:	d00a      	beq.n	800f79c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800f786:	4b87      	ldr	r3, [pc, #540]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f78c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f794:	4983      	ldr	r1, [pc, #524]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f796:	4313      	orrs	r3, r2
 800f798:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	f003 0308 	and.w	r3, r3, #8
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d00a      	beq.n	800f7be <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800f7a8:	4b7e      	ldr	r3, [pc, #504]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f7aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f7ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7b6:	497b      	ldr	r1, [pc, #492]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f7b8:	4313      	orrs	r3, r2
 800f7ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	f003 0310 	and.w	r3, r3, #16
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d00a      	beq.n	800f7e0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800f7ca:	4b76      	ldr	r3, [pc, #472]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f7cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f7d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f7d8:	4972      	ldr	r1, [pc, #456]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f7da:	4313      	orrs	r3, r2
 800f7dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	f003 0320 	and.w	r3, r3, #32
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d00a      	beq.n	800f802 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f7ec:	4b6d      	ldr	r3, [pc, #436]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f7ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f7f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7fa:	496a      	ldr	r1, [pc, #424]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f7fc:	4313      	orrs	r3, r2
 800f7fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d00a      	beq.n	800f824 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f80e:	4b65      	ldr	r3, [pc, #404]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f814:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f81c:	4961      	ldr	r1, [pc, #388]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f81e:	4313      	orrs	r3, r2
 800f820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d00a      	beq.n	800f846 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f830:	4b5c      	ldr	r3, [pc, #368]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f836:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f83e:	4959      	ldr	r1, [pc, #356]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f840:	4313      	orrs	r3, r2
 800f842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d00a      	beq.n	800f868 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f852:	4b54      	ldr	r3, [pc, #336]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f858:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f860:	4950      	ldr	r1, [pc, #320]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f862:	4313      	orrs	r3, r2
 800f864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f870:	2b00      	cmp	r3, #0
 800f872:	d00a      	beq.n	800f88a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800f874:	4b4b      	ldr	r3, [pc, #300]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f87a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f882:	4948      	ldr	r1, [pc, #288]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f884:	4313      	orrs	r3, r2
 800f886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f892:	2b00      	cmp	r3, #0
 800f894:	d00a      	beq.n	800f8ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f896:	4b43      	ldr	r3, [pc, #268]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f89c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8a4:	493f      	ldr	r1, [pc, #252]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f8a6:	4313      	orrs	r3, r2
 800f8a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d028      	beq.n	800f90a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f8b8:	4b3a      	ldr	r3, [pc, #232]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f8ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f8be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8c6:	4937      	ldr	r1, [pc, #220]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f8c8:	4313      	orrs	r3, r2
 800f8ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f8d6:	d106      	bne.n	800f8e6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f8d8:	4b32      	ldr	r3, [pc, #200]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f8da:	68db      	ldr	r3, [r3, #12]
 800f8dc:	4a31      	ldr	r2, [pc, #196]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f8de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f8e2:	60d3      	str	r3, [r2, #12]
 800f8e4:	e011      	b.n	800f90a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f8ee:	d10c      	bne.n	800f90a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	3304      	adds	r3, #4
 800f8f4:	2101      	movs	r1, #1
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f000 f8d8 	bl	800faac <RCCEx_PLLSAI1_Config>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800f900:	7cfb      	ldrb	r3, [r7, #19]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d001      	beq.n	800f90a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800f906:	7cfb      	ldrb	r3, [r7, #19]
 800f908:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f912:	2b00      	cmp	r3, #0
 800f914:	d028      	beq.n	800f968 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800f916:	4b23      	ldr	r3, [pc, #140]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f91c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f924:	491f      	ldr	r1, [pc, #124]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f926:	4313      	orrs	r3, r2
 800f928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f930:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f934:	d106      	bne.n	800f944 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f936:	4b1b      	ldr	r3, [pc, #108]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f938:	68db      	ldr	r3, [r3, #12]
 800f93a:	4a1a      	ldr	r2, [pc, #104]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f93c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f940:	60d3      	str	r3, [r2, #12]
 800f942:	e011      	b.n	800f968 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f948:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f94c:	d10c      	bne.n	800f968 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	3304      	adds	r3, #4
 800f952:	2101      	movs	r1, #1
 800f954:	4618      	mov	r0, r3
 800f956:	f000 f8a9 	bl	800faac <RCCEx_PLLSAI1_Config>
 800f95a:	4603      	mov	r3, r0
 800f95c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800f95e:	7cfb      	ldrb	r3, [r7, #19]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d001      	beq.n	800f968 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800f964:	7cfb      	ldrb	r3, [r7, #19]
 800f966:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f970:	2b00      	cmp	r3, #0
 800f972:	d02b      	beq.n	800f9cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f974:	4b0b      	ldr	r3, [pc, #44]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f97a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f982:	4908      	ldr	r1, [pc, #32]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f984:	4313      	orrs	r3, r2
 800f986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f98e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f992:	d109      	bne.n	800f9a8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f994:	4b03      	ldr	r3, [pc, #12]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f996:	68db      	ldr	r3, [r3, #12]
 800f998:	4a02      	ldr	r2, [pc, #8]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800f99a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f99e:	60d3      	str	r3, [r2, #12]
 800f9a0:	e014      	b.n	800f9cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800f9a2:	bf00      	nop
 800f9a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f9b0:	d10c      	bne.n	800f9cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	3304      	adds	r3, #4
 800f9b6:	2101      	movs	r1, #1
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f000 f877 	bl	800faac <RCCEx_PLLSAI1_Config>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800f9c2:	7cfb      	ldrb	r3, [r7, #19]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d001      	beq.n	800f9cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800f9c8:	7cfb      	ldrb	r3, [r7, #19]
 800f9ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d02f      	beq.n	800fa38 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f9d8:	4b2b      	ldr	r3, [pc, #172]	; (800fa88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f9da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f9de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f9e6:	4928      	ldr	r1, [pc, #160]	; (800fa88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f9e8:	4313      	orrs	r3, r2
 800f9ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f9f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f9f6:	d10d      	bne.n	800fa14 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	3304      	adds	r3, #4
 800f9fc:	2102      	movs	r1, #2
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f000 f854 	bl	800faac <RCCEx_PLLSAI1_Config>
 800fa04:	4603      	mov	r3, r0
 800fa06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800fa08:	7cfb      	ldrb	r3, [r7, #19]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d014      	beq.n	800fa38 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800fa0e:	7cfb      	ldrb	r3, [r7, #19]
 800fa10:	74bb      	strb	r3, [r7, #18]
 800fa12:	e011      	b.n	800fa38 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fa1c:	d10c      	bne.n	800fa38 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	3320      	adds	r3, #32
 800fa22:	2102      	movs	r1, #2
 800fa24:	4618      	mov	r0, r3
 800fa26:	f000 f931 	bl	800fc8c <RCCEx_PLLSAI2_Config>
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800fa2e:	7cfb      	ldrb	r3, [r7, #19]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d001      	beq.n	800fa38 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800fa34:	7cfb      	ldrb	r3, [r7, #19]
 800fa36:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d00a      	beq.n	800fa5a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800fa44:	4b10      	ldr	r3, [pc, #64]	; (800fa88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800fa46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa4a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa52:	490d      	ldr	r1, [pc, #52]	; (800fa88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800fa54:	4313      	orrs	r3, r2
 800fa56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d00b      	beq.n	800fa7e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800fa66:	4b08      	ldr	r3, [pc, #32]	; (800fa88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800fa68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fa76:	4904      	ldr	r1, [pc, #16]	; (800fa88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800fa78:	4313      	orrs	r3, r2
 800fa7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800fa7e:	7cbb      	ldrb	r3, [r7, #18]
}
 800fa80:	4618      	mov	r0, r3
 800fa82:	3718      	adds	r7, #24
 800fa84:	46bd      	mov	sp, r7
 800fa86:	bd80      	pop	{r7, pc}
 800fa88:	40021000 	.word	0x40021000

0800fa8c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800fa8c:	b480      	push	{r7}
 800fa8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800fa90:	4b05      	ldr	r3, [pc, #20]	; (800faa8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	4a04      	ldr	r2, [pc, #16]	; (800faa8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800fa96:	f043 0304 	orr.w	r3, r3, #4
 800fa9a:	6013      	str	r3, [r2, #0]
}
 800fa9c:	bf00      	nop
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa4:	4770      	bx	lr
 800faa6:	bf00      	nop
 800faa8:	40021000 	.word	0x40021000

0800faac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b084      	sub	sp, #16
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
 800fab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fab6:	2300      	movs	r3, #0
 800fab8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800faba:	4b73      	ldr	r3, [pc, #460]	; (800fc88 <RCCEx_PLLSAI1_Config+0x1dc>)
 800fabc:	68db      	ldr	r3, [r3, #12]
 800fabe:	f003 0303 	and.w	r3, r3, #3
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d018      	beq.n	800faf8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800fac6:	4b70      	ldr	r3, [pc, #448]	; (800fc88 <RCCEx_PLLSAI1_Config+0x1dc>)
 800fac8:	68db      	ldr	r3, [r3, #12]
 800faca:	f003 0203 	and.w	r2, r3, #3
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	429a      	cmp	r2, r3
 800fad4:	d10d      	bne.n	800faf2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	681b      	ldr	r3, [r3, #0]
       ||
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d009      	beq.n	800faf2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800fade:	4b6a      	ldr	r3, [pc, #424]	; (800fc88 <RCCEx_PLLSAI1_Config+0x1dc>)
 800fae0:	68db      	ldr	r3, [r3, #12]
 800fae2:	091b      	lsrs	r3, r3, #4
 800fae4:	f003 0307 	and.w	r3, r3, #7
 800fae8:	1c5a      	adds	r2, r3, #1
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	685b      	ldr	r3, [r3, #4]
       ||
 800faee:	429a      	cmp	r2, r3
 800faf0:	d044      	beq.n	800fb7c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800faf2:	2301      	movs	r3, #1
 800faf4:	73fb      	strb	r3, [r7, #15]
 800faf6:	e041      	b.n	800fb7c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	2b02      	cmp	r3, #2
 800fafe:	d00c      	beq.n	800fb1a <RCCEx_PLLSAI1_Config+0x6e>
 800fb00:	2b03      	cmp	r3, #3
 800fb02:	d013      	beq.n	800fb2c <RCCEx_PLLSAI1_Config+0x80>
 800fb04:	2b01      	cmp	r3, #1
 800fb06:	d120      	bne.n	800fb4a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800fb08:	4b5f      	ldr	r3, [pc, #380]	; (800fc88 <RCCEx_PLLSAI1_Config+0x1dc>)
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	f003 0302 	and.w	r3, r3, #2
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d11d      	bne.n	800fb50 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800fb14:	2301      	movs	r3, #1
 800fb16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fb18:	e01a      	b.n	800fb50 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800fb1a:	4b5b      	ldr	r3, [pc, #364]	; (800fc88 <RCCEx_PLLSAI1_Config+0x1dc>)
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d116      	bne.n	800fb54 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800fb26:	2301      	movs	r3, #1
 800fb28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fb2a:	e013      	b.n	800fb54 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800fb2c:	4b56      	ldr	r3, [pc, #344]	; (800fc88 <RCCEx_PLLSAI1_Config+0x1dc>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d10f      	bne.n	800fb58 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800fb38:	4b53      	ldr	r3, [pc, #332]	; (800fc88 <RCCEx_PLLSAI1_Config+0x1dc>)
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d109      	bne.n	800fb58 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800fb44:	2301      	movs	r3, #1
 800fb46:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800fb48:	e006      	b.n	800fb58 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800fb4a:	2301      	movs	r3, #1
 800fb4c:	73fb      	strb	r3, [r7, #15]
      break;
 800fb4e:	e004      	b.n	800fb5a <RCCEx_PLLSAI1_Config+0xae>
      break;
 800fb50:	bf00      	nop
 800fb52:	e002      	b.n	800fb5a <RCCEx_PLLSAI1_Config+0xae>
      break;
 800fb54:	bf00      	nop
 800fb56:	e000      	b.n	800fb5a <RCCEx_PLLSAI1_Config+0xae>
      break;
 800fb58:	bf00      	nop
    }

    if(status == HAL_OK)
 800fb5a:	7bfb      	ldrb	r3, [r7, #15]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d10d      	bne.n	800fb7c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800fb60:	4b49      	ldr	r3, [pc, #292]	; (800fc88 <RCCEx_PLLSAI1_Config+0x1dc>)
 800fb62:	68db      	ldr	r3, [r3, #12]
 800fb64:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	6819      	ldr	r1, [r3, #0]
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	685b      	ldr	r3, [r3, #4]
 800fb70:	3b01      	subs	r3, #1
 800fb72:	011b      	lsls	r3, r3, #4
 800fb74:	430b      	orrs	r3, r1
 800fb76:	4944      	ldr	r1, [pc, #272]	; (800fc88 <RCCEx_PLLSAI1_Config+0x1dc>)
 800fb78:	4313      	orrs	r3, r2
 800fb7a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800fb7c:	7bfb      	ldrb	r3, [r7, #15]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d17d      	bne.n	800fc7e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800fb82:	4b41      	ldr	r3, [pc, #260]	; (800fc88 <RCCEx_PLLSAI1_Config+0x1dc>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	4a40      	ldr	r2, [pc, #256]	; (800fc88 <RCCEx_PLLSAI1_Config+0x1dc>)
 800fb88:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fb8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fb8e:	f7fa f8f1 	bl	8009d74 <HAL_GetTick>
 800fb92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800fb94:	e009      	b.n	800fbaa <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fb96:	f7fa f8ed 	bl	8009d74 <HAL_GetTick>
 800fb9a:	4602      	mov	r2, r0
 800fb9c:	68bb      	ldr	r3, [r7, #8]
 800fb9e:	1ad3      	subs	r3, r2, r3
 800fba0:	2b02      	cmp	r3, #2
 800fba2:	d902      	bls.n	800fbaa <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800fba4:	2303      	movs	r3, #3
 800fba6:	73fb      	strb	r3, [r7, #15]
        break;
 800fba8:	e005      	b.n	800fbb6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800fbaa:	4b37      	ldr	r3, [pc, #220]	; (800fc88 <RCCEx_PLLSAI1_Config+0x1dc>)
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d1ef      	bne.n	800fb96 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800fbb6:	7bfb      	ldrb	r3, [r7, #15]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d160      	bne.n	800fc7e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d111      	bne.n	800fbe6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800fbc2:	4b31      	ldr	r3, [pc, #196]	; (800fc88 <RCCEx_PLLSAI1_Config+0x1dc>)
 800fbc4:	691b      	ldr	r3, [r3, #16]
 800fbc6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800fbca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fbce:	687a      	ldr	r2, [r7, #4]
 800fbd0:	6892      	ldr	r2, [r2, #8]
 800fbd2:	0211      	lsls	r1, r2, #8
 800fbd4:	687a      	ldr	r2, [r7, #4]
 800fbd6:	68d2      	ldr	r2, [r2, #12]
 800fbd8:	0912      	lsrs	r2, r2, #4
 800fbda:	0452      	lsls	r2, r2, #17
 800fbdc:	430a      	orrs	r2, r1
 800fbde:	492a      	ldr	r1, [pc, #168]	; (800fc88 <RCCEx_PLLSAI1_Config+0x1dc>)
 800fbe0:	4313      	orrs	r3, r2
 800fbe2:	610b      	str	r3, [r1, #16]
 800fbe4:	e027      	b.n	800fc36 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	2b01      	cmp	r3, #1
 800fbea:	d112      	bne.n	800fc12 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800fbec:	4b26      	ldr	r3, [pc, #152]	; (800fc88 <RCCEx_PLLSAI1_Config+0x1dc>)
 800fbee:	691b      	ldr	r3, [r3, #16]
 800fbf0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800fbf4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800fbf8:	687a      	ldr	r2, [r7, #4]
 800fbfa:	6892      	ldr	r2, [r2, #8]
 800fbfc:	0211      	lsls	r1, r2, #8
 800fbfe:	687a      	ldr	r2, [r7, #4]
 800fc00:	6912      	ldr	r2, [r2, #16]
 800fc02:	0852      	lsrs	r2, r2, #1
 800fc04:	3a01      	subs	r2, #1
 800fc06:	0552      	lsls	r2, r2, #21
 800fc08:	430a      	orrs	r2, r1
 800fc0a:	491f      	ldr	r1, [pc, #124]	; (800fc88 <RCCEx_PLLSAI1_Config+0x1dc>)
 800fc0c:	4313      	orrs	r3, r2
 800fc0e:	610b      	str	r3, [r1, #16]
 800fc10:	e011      	b.n	800fc36 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800fc12:	4b1d      	ldr	r3, [pc, #116]	; (800fc88 <RCCEx_PLLSAI1_Config+0x1dc>)
 800fc14:	691b      	ldr	r3, [r3, #16]
 800fc16:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800fc1a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800fc1e:	687a      	ldr	r2, [r7, #4]
 800fc20:	6892      	ldr	r2, [r2, #8]
 800fc22:	0211      	lsls	r1, r2, #8
 800fc24:	687a      	ldr	r2, [r7, #4]
 800fc26:	6952      	ldr	r2, [r2, #20]
 800fc28:	0852      	lsrs	r2, r2, #1
 800fc2a:	3a01      	subs	r2, #1
 800fc2c:	0652      	lsls	r2, r2, #25
 800fc2e:	430a      	orrs	r2, r1
 800fc30:	4915      	ldr	r1, [pc, #84]	; (800fc88 <RCCEx_PLLSAI1_Config+0x1dc>)
 800fc32:	4313      	orrs	r3, r2
 800fc34:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800fc36:	4b14      	ldr	r3, [pc, #80]	; (800fc88 <RCCEx_PLLSAI1_Config+0x1dc>)
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	4a13      	ldr	r2, [pc, #76]	; (800fc88 <RCCEx_PLLSAI1_Config+0x1dc>)
 800fc3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800fc40:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fc42:	f7fa f897 	bl	8009d74 <HAL_GetTick>
 800fc46:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800fc48:	e009      	b.n	800fc5e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fc4a:	f7fa f893 	bl	8009d74 <HAL_GetTick>
 800fc4e:	4602      	mov	r2, r0
 800fc50:	68bb      	ldr	r3, [r7, #8]
 800fc52:	1ad3      	subs	r3, r2, r3
 800fc54:	2b02      	cmp	r3, #2
 800fc56:	d902      	bls.n	800fc5e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800fc58:	2303      	movs	r3, #3
 800fc5a:	73fb      	strb	r3, [r7, #15]
          break;
 800fc5c:	e005      	b.n	800fc6a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800fc5e:	4b0a      	ldr	r3, [pc, #40]	; (800fc88 <RCCEx_PLLSAI1_Config+0x1dc>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d0ef      	beq.n	800fc4a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800fc6a:	7bfb      	ldrb	r3, [r7, #15]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d106      	bne.n	800fc7e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800fc70:	4b05      	ldr	r3, [pc, #20]	; (800fc88 <RCCEx_PLLSAI1_Config+0x1dc>)
 800fc72:	691a      	ldr	r2, [r3, #16]
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	699b      	ldr	r3, [r3, #24]
 800fc78:	4903      	ldr	r1, [pc, #12]	; (800fc88 <RCCEx_PLLSAI1_Config+0x1dc>)
 800fc7a:	4313      	orrs	r3, r2
 800fc7c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800fc7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc80:	4618      	mov	r0, r3
 800fc82:	3710      	adds	r7, #16
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd80      	pop	{r7, pc}
 800fc88:	40021000 	.word	0x40021000

0800fc8c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b084      	sub	sp, #16
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
 800fc94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fc96:	2300      	movs	r3, #0
 800fc98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800fc9a:	4b68      	ldr	r3, [pc, #416]	; (800fe3c <RCCEx_PLLSAI2_Config+0x1b0>)
 800fc9c:	68db      	ldr	r3, [r3, #12]
 800fc9e:	f003 0303 	and.w	r3, r3, #3
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d018      	beq.n	800fcd8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800fca6:	4b65      	ldr	r3, [pc, #404]	; (800fe3c <RCCEx_PLLSAI2_Config+0x1b0>)
 800fca8:	68db      	ldr	r3, [r3, #12]
 800fcaa:	f003 0203 	and.w	r2, r3, #3
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	429a      	cmp	r2, r3
 800fcb4:	d10d      	bne.n	800fcd2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
       ||
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d009      	beq.n	800fcd2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800fcbe:	4b5f      	ldr	r3, [pc, #380]	; (800fe3c <RCCEx_PLLSAI2_Config+0x1b0>)
 800fcc0:	68db      	ldr	r3, [r3, #12]
 800fcc2:	091b      	lsrs	r3, r3, #4
 800fcc4:	f003 0307 	and.w	r3, r3, #7
 800fcc8:	1c5a      	adds	r2, r3, #1
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	685b      	ldr	r3, [r3, #4]
       ||
 800fcce:	429a      	cmp	r2, r3
 800fcd0:	d044      	beq.n	800fd5c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800fcd2:	2301      	movs	r3, #1
 800fcd4:	73fb      	strb	r3, [r7, #15]
 800fcd6:	e041      	b.n	800fd5c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	2b02      	cmp	r3, #2
 800fcde:	d00c      	beq.n	800fcfa <RCCEx_PLLSAI2_Config+0x6e>
 800fce0:	2b03      	cmp	r3, #3
 800fce2:	d013      	beq.n	800fd0c <RCCEx_PLLSAI2_Config+0x80>
 800fce4:	2b01      	cmp	r3, #1
 800fce6:	d120      	bne.n	800fd2a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800fce8:	4b54      	ldr	r3, [pc, #336]	; (800fe3c <RCCEx_PLLSAI2_Config+0x1b0>)
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	f003 0302 	and.w	r3, r3, #2
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d11d      	bne.n	800fd30 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800fcf4:	2301      	movs	r3, #1
 800fcf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fcf8:	e01a      	b.n	800fd30 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800fcfa:	4b50      	ldr	r3, [pc, #320]	; (800fe3c <RCCEx_PLLSAI2_Config+0x1b0>)
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d116      	bne.n	800fd34 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800fd06:	2301      	movs	r3, #1
 800fd08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fd0a:	e013      	b.n	800fd34 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800fd0c:	4b4b      	ldr	r3, [pc, #300]	; (800fe3c <RCCEx_PLLSAI2_Config+0x1b0>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d10f      	bne.n	800fd38 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800fd18:	4b48      	ldr	r3, [pc, #288]	; (800fe3c <RCCEx_PLLSAI2_Config+0x1b0>)
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d109      	bne.n	800fd38 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800fd24:	2301      	movs	r3, #1
 800fd26:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800fd28:	e006      	b.n	800fd38 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800fd2a:	2301      	movs	r3, #1
 800fd2c:	73fb      	strb	r3, [r7, #15]
      break;
 800fd2e:	e004      	b.n	800fd3a <RCCEx_PLLSAI2_Config+0xae>
      break;
 800fd30:	bf00      	nop
 800fd32:	e002      	b.n	800fd3a <RCCEx_PLLSAI2_Config+0xae>
      break;
 800fd34:	bf00      	nop
 800fd36:	e000      	b.n	800fd3a <RCCEx_PLLSAI2_Config+0xae>
      break;
 800fd38:	bf00      	nop
    }

    if(status == HAL_OK)
 800fd3a:	7bfb      	ldrb	r3, [r7, #15]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d10d      	bne.n	800fd5c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800fd40:	4b3e      	ldr	r3, [pc, #248]	; (800fe3c <RCCEx_PLLSAI2_Config+0x1b0>)
 800fd42:	68db      	ldr	r3, [r3, #12]
 800fd44:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	6819      	ldr	r1, [r3, #0]
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	685b      	ldr	r3, [r3, #4]
 800fd50:	3b01      	subs	r3, #1
 800fd52:	011b      	lsls	r3, r3, #4
 800fd54:	430b      	orrs	r3, r1
 800fd56:	4939      	ldr	r1, [pc, #228]	; (800fe3c <RCCEx_PLLSAI2_Config+0x1b0>)
 800fd58:	4313      	orrs	r3, r2
 800fd5a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800fd5c:	7bfb      	ldrb	r3, [r7, #15]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d167      	bne.n	800fe32 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800fd62:	4b36      	ldr	r3, [pc, #216]	; (800fe3c <RCCEx_PLLSAI2_Config+0x1b0>)
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	4a35      	ldr	r2, [pc, #212]	; (800fe3c <RCCEx_PLLSAI2_Config+0x1b0>)
 800fd68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fd6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fd6e:	f7fa f801 	bl	8009d74 <HAL_GetTick>
 800fd72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800fd74:	e009      	b.n	800fd8a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800fd76:	f7f9 fffd 	bl	8009d74 <HAL_GetTick>
 800fd7a:	4602      	mov	r2, r0
 800fd7c:	68bb      	ldr	r3, [r7, #8]
 800fd7e:	1ad3      	subs	r3, r2, r3
 800fd80:	2b02      	cmp	r3, #2
 800fd82:	d902      	bls.n	800fd8a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800fd84:	2303      	movs	r3, #3
 800fd86:	73fb      	strb	r3, [r7, #15]
        break;
 800fd88:	e005      	b.n	800fd96 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800fd8a:	4b2c      	ldr	r3, [pc, #176]	; (800fe3c <RCCEx_PLLSAI2_Config+0x1b0>)
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d1ef      	bne.n	800fd76 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800fd96:	7bfb      	ldrb	r3, [r7, #15]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d14a      	bne.n	800fe32 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d111      	bne.n	800fdc6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800fda2:	4b26      	ldr	r3, [pc, #152]	; (800fe3c <RCCEx_PLLSAI2_Config+0x1b0>)
 800fda4:	695b      	ldr	r3, [r3, #20]
 800fda6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800fdaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fdae:	687a      	ldr	r2, [r7, #4]
 800fdb0:	6892      	ldr	r2, [r2, #8]
 800fdb2:	0211      	lsls	r1, r2, #8
 800fdb4:	687a      	ldr	r2, [r7, #4]
 800fdb6:	68d2      	ldr	r2, [r2, #12]
 800fdb8:	0912      	lsrs	r2, r2, #4
 800fdba:	0452      	lsls	r2, r2, #17
 800fdbc:	430a      	orrs	r2, r1
 800fdbe:	491f      	ldr	r1, [pc, #124]	; (800fe3c <RCCEx_PLLSAI2_Config+0x1b0>)
 800fdc0:	4313      	orrs	r3, r2
 800fdc2:	614b      	str	r3, [r1, #20]
 800fdc4:	e011      	b.n	800fdea <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800fdc6:	4b1d      	ldr	r3, [pc, #116]	; (800fe3c <RCCEx_PLLSAI2_Config+0x1b0>)
 800fdc8:	695b      	ldr	r3, [r3, #20]
 800fdca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800fdce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800fdd2:	687a      	ldr	r2, [r7, #4]
 800fdd4:	6892      	ldr	r2, [r2, #8]
 800fdd6:	0211      	lsls	r1, r2, #8
 800fdd8:	687a      	ldr	r2, [r7, #4]
 800fdda:	6912      	ldr	r2, [r2, #16]
 800fddc:	0852      	lsrs	r2, r2, #1
 800fdde:	3a01      	subs	r2, #1
 800fde0:	0652      	lsls	r2, r2, #25
 800fde2:	430a      	orrs	r2, r1
 800fde4:	4915      	ldr	r1, [pc, #84]	; (800fe3c <RCCEx_PLLSAI2_Config+0x1b0>)
 800fde6:	4313      	orrs	r3, r2
 800fde8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800fdea:	4b14      	ldr	r3, [pc, #80]	; (800fe3c <RCCEx_PLLSAI2_Config+0x1b0>)
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	4a13      	ldr	r2, [pc, #76]	; (800fe3c <RCCEx_PLLSAI2_Config+0x1b0>)
 800fdf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fdf4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fdf6:	f7f9 ffbd 	bl	8009d74 <HAL_GetTick>
 800fdfa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800fdfc:	e009      	b.n	800fe12 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800fdfe:	f7f9 ffb9 	bl	8009d74 <HAL_GetTick>
 800fe02:	4602      	mov	r2, r0
 800fe04:	68bb      	ldr	r3, [r7, #8]
 800fe06:	1ad3      	subs	r3, r2, r3
 800fe08:	2b02      	cmp	r3, #2
 800fe0a:	d902      	bls.n	800fe12 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800fe0c:	2303      	movs	r3, #3
 800fe0e:	73fb      	strb	r3, [r7, #15]
          break;
 800fe10:	e005      	b.n	800fe1e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800fe12:	4b0a      	ldr	r3, [pc, #40]	; (800fe3c <RCCEx_PLLSAI2_Config+0x1b0>)
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d0ef      	beq.n	800fdfe <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800fe1e:	7bfb      	ldrb	r3, [r7, #15]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d106      	bne.n	800fe32 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800fe24:	4b05      	ldr	r3, [pc, #20]	; (800fe3c <RCCEx_PLLSAI2_Config+0x1b0>)
 800fe26:	695a      	ldr	r2, [r3, #20]
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	695b      	ldr	r3, [r3, #20]
 800fe2c:	4903      	ldr	r1, [pc, #12]	; (800fe3c <RCCEx_PLLSAI2_Config+0x1b0>)
 800fe2e:	4313      	orrs	r3, r2
 800fe30:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800fe32:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe34:	4618      	mov	r0, r3
 800fe36:	3710      	adds	r7, #16
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd80      	pop	{r7, pc}
 800fe3c:	40021000 	.word	0x40021000

0800fe40 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b084      	sub	sp, #16
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800fe48:	2301      	movs	r3, #1
 800fe4a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d06c      	beq.n	800ff2c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800fe58:	b2db      	uxtb	r3, r3
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d106      	bne.n	800fe6c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	2200      	movs	r2, #0
 800fe62:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800fe66:	6878      	ldr	r0, [r7, #4]
 800fe68:	f7f2 facc 	bl	8002404 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	2202      	movs	r2, #2
 800fe70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	22ca      	movs	r2, #202	; 0xca
 800fe7a:	625a      	str	r2, [r3, #36]	; 0x24
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	2253      	movs	r2, #83	; 0x53
 800fe82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800fe84:	6878      	ldr	r0, [r7, #4]
 800fe86:	f000 fbcb 	bl	8010620 <RTC_EnterInitMode>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800fe8e:	7bfb      	ldrb	r3, [r7, #15]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d14b      	bne.n	800ff2c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	689b      	ldr	r3, [r3, #8]
 800fe9a:	687a      	ldr	r2, [r7, #4]
 800fe9c:	6812      	ldr	r2, [r2, #0]
 800fe9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fea2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fea6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	6899      	ldr	r1, [r3, #8]
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	685a      	ldr	r2, [r3, #4]
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	691b      	ldr	r3, [r3, #16]
 800feb6:	431a      	orrs	r2, r3
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	699b      	ldr	r3, [r3, #24]
 800febc:	431a      	orrs	r2, r3
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	430a      	orrs	r2, r1
 800fec4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	687a      	ldr	r2, [r7, #4]
 800fecc:	68d2      	ldr	r2, [r2, #12]
 800fece:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	6919      	ldr	r1, [r3, #16]
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	689b      	ldr	r3, [r3, #8]
 800feda:	041a      	lsls	r2, r3, #16
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	430a      	orrs	r2, r1
 800fee2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800fee4:	6878      	ldr	r0, [r7, #4]
 800fee6:	f000 fbcf 	bl	8010688 <RTC_ExitInitMode>
 800feea:	4603      	mov	r3, r0
 800feec:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800feee:	7bfb      	ldrb	r3, [r7, #15]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d11b      	bne.n	800ff2c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	f022 0203 	bic.w	r2, r2, #3
 800ff02:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	69da      	ldr	r2, [r3, #28]
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	695b      	ldr	r3, [r3, #20]
 800ff12:	431a      	orrs	r2, r3
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	430a      	orrs	r2, r1
 800ff1a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	22ff      	movs	r2, #255	; 0xff
 800ff22:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2201      	movs	r2, #1
 800ff28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800ff2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff2e:	4618      	mov	r0, r3
 800ff30:	3710      	adds	r7, #16
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}

0800ff36 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ff36:	b590      	push	{r4, r7, lr}
 800ff38:	b087      	sub	sp, #28
 800ff3a:	af00      	add	r7, sp, #0
 800ff3c:	60f8      	str	r0, [r7, #12]
 800ff3e:	60b9      	str	r1, [r7, #8]
 800ff40:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ff48:	2b01      	cmp	r3, #1
 800ff4a:	d101      	bne.n	800ff50 <HAL_RTC_SetTime+0x1a>
 800ff4c:	2302      	movs	r3, #2
 800ff4e:	e08b      	b.n	8010068 <HAL_RTC_SetTime+0x132>
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	2201      	movs	r2, #1
 800ff54:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	2202      	movs	r2, #2
 800ff5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	22ca      	movs	r2, #202	; 0xca
 800ff66:	625a      	str	r2, [r3, #36]	; 0x24
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	2253      	movs	r2, #83	; 0x53
 800ff6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ff70:	68f8      	ldr	r0, [r7, #12]
 800ff72:	f000 fb55 	bl	8010620 <RTC_EnterInitMode>
 800ff76:	4603      	mov	r3, r0
 800ff78:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800ff7a:	7cfb      	ldrb	r3, [r7, #19]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d163      	bne.n	8010048 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d126      	bne.n	800ffd4 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	689b      	ldr	r3, [r3, #8]
 800ff8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d102      	bne.n	800ff9a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	2200      	movs	r2, #0
 800ff98:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	781b      	ldrb	r3, [r3, #0]
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	f000 fbb0 	bl	8010704 <RTC_ByteToBcd2>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ffa8:	68bb      	ldr	r3, [r7, #8]
 800ffaa:	785b      	ldrb	r3, [r3, #1]
 800ffac:	4618      	mov	r0, r3
 800ffae:	f000 fba9 	bl	8010704 <RTC_ByteToBcd2>
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ffb6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800ffb8:	68bb      	ldr	r3, [r7, #8]
 800ffba:	789b      	ldrb	r3, [r3, #2]
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	f000 fba1 	bl	8010704 <RTC_ByteToBcd2>
 800ffc2:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ffc4:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	78db      	ldrb	r3, [r3, #3]
 800ffcc:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ffce:	4313      	orrs	r3, r2
 800ffd0:	617b      	str	r3, [r7, #20]
 800ffd2:	e018      	b.n	8010006 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	689b      	ldr	r3, [r3, #8]
 800ffda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d102      	bne.n	800ffe8 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800ffe2:	68bb      	ldr	r3, [r7, #8]
 800ffe4:	2200      	movs	r2, #0
 800ffe6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ffe8:	68bb      	ldr	r3, [r7, #8]
 800ffea:	781b      	ldrb	r3, [r3, #0]
 800ffec:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ffee:	68bb      	ldr	r3, [r7, #8]
 800fff0:	785b      	ldrb	r3, [r3, #1]
 800fff2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800fff4:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800fff6:	68ba      	ldr	r2, [r7, #8]
 800fff8:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800fffa:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800fffc:	68bb      	ldr	r3, [r7, #8]
 800fffe:	78db      	ldrb	r3, [r3, #3]
 8010000:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010002:	4313      	orrs	r3, r2
 8010004:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	681a      	ldr	r2, [r3, #0]
 801000a:	697b      	ldr	r3, [r7, #20]
 801000c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8010010:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8010014:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	689a      	ldr	r2, [r3, #8]
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010024:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	6899      	ldr	r1, [r3, #8]
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	68da      	ldr	r2, [r3, #12]
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	691b      	ldr	r3, [r3, #16]
 8010034:	431a      	orrs	r2, r3
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	430a      	orrs	r2, r1
 801003c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801003e:	68f8      	ldr	r0, [r7, #12]
 8010040:	f000 fb22 	bl	8010688 <RTC_ExitInitMode>
 8010044:	4603      	mov	r3, r0
 8010046:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	22ff      	movs	r2, #255	; 0xff
 801004e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8010050:	7cfb      	ldrb	r3, [r7, #19]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d103      	bne.n	801005e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	2201      	movs	r2, #1
 801005a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	2200      	movs	r2, #0
 8010062:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8010066:	7cfb      	ldrb	r3, [r7, #19]
}
 8010068:	4618      	mov	r0, r3
 801006a:	371c      	adds	r7, #28
 801006c:	46bd      	mov	sp, r7
 801006e:	bd90      	pop	{r4, r7, pc}

08010070 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b086      	sub	sp, #24
 8010074:	af00      	add	r7, sp, #0
 8010076:	60f8      	str	r0, [r7, #12]
 8010078:	60b9      	str	r1, [r7, #8]
 801007a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010082:	68bb      	ldr	r3, [r7, #8]
 8010084:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	691b      	ldr	r3, [r3, #16]
 801008c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8010090:	68bb      	ldr	r3, [r7, #8]
 8010092:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 801009e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80100a2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80100a4:	697b      	ldr	r3, [r7, #20]
 80100a6:	0c1b      	lsrs	r3, r3, #16
 80100a8:	b2db      	uxtb	r3, r3
 80100aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80100ae:	b2da      	uxtb	r2, r3
 80100b0:	68bb      	ldr	r3, [r7, #8]
 80100b2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80100b4:	697b      	ldr	r3, [r7, #20]
 80100b6:	0a1b      	lsrs	r3, r3, #8
 80100b8:	b2db      	uxtb	r3, r3
 80100ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80100be:	b2da      	uxtb	r2, r3
 80100c0:	68bb      	ldr	r3, [r7, #8]
 80100c2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80100c4:	697b      	ldr	r3, [r7, #20]
 80100c6:	b2db      	uxtb	r3, r3
 80100c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80100cc:	b2da      	uxtb	r2, r3
 80100ce:	68bb      	ldr	r3, [r7, #8]
 80100d0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80100d2:	697b      	ldr	r3, [r7, #20]
 80100d4:	0d9b      	lsrs	r3, r3, #22
 80100d6:	b2db      	uxtb	r3, r3
 80100d8:	f003 0301 	and.w	r3, r3, #1
 80100dc:	b2da      	uxtb	r2, r3
 80100de:	68bb      	ldr	r3, [r7, #8]
 80100e0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d11a      	bne.n	801011e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	781b      	ldrb	r3, [r3, #0]
 80100ec:	4618      	mov	r0, r3
 80100ee:	f000 fb29 	bl	8010744 <RTC_Bcd2ToByte>
 80100f2:	4603      	mov	r3, r0
 80100f4:	461a      	mov	r2, r3
 80100f6:	68bb      	ldr	r3, [r7, #8]
 80100f8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	785b      	ldrb	r3, [r3, #1]
 80100fe:	4618      	mov	r0, r3
 8010100:	f000 fb20 	bl	8010744 <RTC_Bcd2ToByte>
 8010104:	4603      	mov	r3, r0
 8010106:	461a      	mov	r2, r3
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801010c:	68bb      	ldr	r3, [r7, #8]
 801010e:	789b      	ldrb	r3, [r3, #2]
 8010110:	4618      	mov	r0, r3
 8010112:	f000 fb17 	bl	8010744 <RTC_Bcd2ToByte>
 8010116:	4603      	mov	r3, r0
 8010118:	461a      	mov	r2, r3
 801011a:	68bb      	ldr	r3, [r7, #8]
 801011c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801011e:	2300      	movs	r3, #0
}
 8010120:	4618      	mov	r0, r3
 8010122:	3718      	adds	r7, #24
 8010124:	46bd      	mov	sp, r7
 8010126:	bd80      	pop	{r7, pc}

08010128 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8010128:	b590      	push	{r4, r7, lr}
 801012a:	b087      	sub	sp, #28
 801012c:	af00      	add	r7, sp, #0
 801012e:	60f8      	str	r0, [r7, #12]
 8010130:	60b9      	str	r1, [r7, #8]
 8010132:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	f893 3020 	ldrb.w	r3, [r3, #32]
 801013a:	2b01      	cmp	r3, #1
 801013c:	d101      	bne.n	8010142 <HAL_RTC_SetDate+0x1a>
 801013e:	2302      	movs	r3, #2
 8010140:	e075      	b.n	801022e <HAL_RTC_SetDate+0x106>
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	2201      	movs	r2, #1
 8010146:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	2202      	movs	r2, #2
 801014e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d10e      	bne.n	8010176 <HAL_RTC_SetDate+0x4e>
 8010158:	68bb      	ldr	r3, [r7, #8]
 801015a:	785b      	ldrb	r3, [r3, #1]
 801015c:	f003 0310 	and.w	r3, r3, #16
 8010160:	2b00      	cmp	r3, #0
 8010162:	d008      	beq.n	8010176 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8010164:	68bb      	ldr	r3, [r7, #8]
 8010166:	785b      	ldrb	r3, [r3, #1]
 8010168:	f023 0310 	bic.w	r3, r3, #16
 801016c:	b2db      	uxtb	r3, r3
 801016e:	330a      	adds	r3, #10
 8010170:	b2da      	uxtb	r2, r3
 8010172:	68bb      	ldr	r3, [r7, #8]
 8010174:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d11c      	bne.n	80101b6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 801017c:	68bb      	ldr	r3, [r7, #8]
 801017e:	78db      	ldrb	r3, [r3, #3]
 8010180:	4618      	mov	r0, r3
 8010182:	f000 fabf 	bl	8010704 <RTC_ByteToBcd2>
 8010186:	4603      	mov	r3, r0
 8010188:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801018a:	68bb      	ldr	r3, [r7, #8]
 801018c:	785b      	ldrb	r3, [r3, #1]
 801018e:	4618      	mov	r0, r3
 8010190:	f000 fab8 	bl	8010704 <RTC_ByteToBcd2>
 8010194:	4603      	mov	r3, r0
 8010196:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8010198:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 801019a:	68bb      	ldr	r3, [r7, #8]
 801019c:	789b      	ldrb	r3, [r3, #2]
 801019e:	4618      	mov	r0, r3
 80101a0:	f000 fab0 	bl	8010704 <RTC_ByteToBcd2>
 80101a4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80101a6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80101aa:	68bb      	ldr	r3, [r7, #8]
 80101ac:	781b      	ldrb	r3, [r3, #0]
 80101ae:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80101b0:	4313      	orrs	r3, r2
 80101b2:	617b      	str	r3, [r7, #20]
 80101b4:	e00e      	b.n	80101d4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80101b6:	68bb      	ldr	r3, [r7, #8]
 80101b8:	78db      	ldrb	r3, [r3, #3]
 80101ba:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80101bc:	68bb      	ldr	r3, [r7, #8]
 80101be:	785b      	ldrb	r3, [r3, #1]
 80101c0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80101c2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80101c4:	68ba      	ldr	r2, [r7, #8]
 80101c6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80101c8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80101ca:	68bb      	ldr	r3, [r7, #8]
 80101cc:	781b      	ldrb	r3, [r3, #0]
 80101ce:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80101d0:	4313      	orrs	r3, r2
 80101d2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	22ca      	movs	r2, #202	; 0xca
 80101da:	625a      	str	r2, [r3, #36]	; 0x24
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	2253      	movs	r2, #83	; 0x53
 80101e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80101e4:	68f8      	ldr	r0, [r7, #12]
 80101e6:	f000 fa1b 	bl	8010620 <RTC_EnterInitMode>
 80101ea:	4603      	mov	r3, r0
 80101ec:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80101ee:	7cfb      	ldrb	r3, [r7, #19]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d10c      	bne.n	801020e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	681a      	ldr	r2, [r3, #0]
 80101f8:	697b      	ldr	r3, [r7, #20]
 80101fa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80101fe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8010202:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8010204:	68f8      	ldr	r0, [r7, #12]
 8010206:	f000 fa3f 	bl	8010688 <RTC_ExitInitMode>
 801020a:	4603      	mov	r3, r0
 801020c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	22ff      	movs	r2, #255	; 0xff
 8010214:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8010216:	7cfb      	ldrb	r3, [r7, #19]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d103      	bne.n	8010224 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	2201      	movs	r2, #1
 8010220:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	2200      	movs	r2, #0
 8010228:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 801022c:	7cfb      	ldrb	r3, [r7, #19]
}
 801022e:	4618      	mov	r0, r3
 8010230:	371c      	adds	r7, #28
 8010232:	46bd      	mov	sp, r7
 8010234:	bd90      	pop	{r4, r7, pc}

08010236 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8010236:	b580      	push	{r7, lr}
 8010238:	b086      	sub	sp, #24
 801023a:	af00      	add	r7, sp, #0
 801023c:	60f8      	str	r0, [r7, #12]
 801023e:	60b9      	str	r1, [r7, #8]
 8010240:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	685b      	ldr	r3, [r3, #4]
 8010248:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801024c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8010250:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8010252:	697b      	ldr	r3, [r7, #20]
 8010254:	0c1b      	lsrs	r3, r3, #16
 8010256:	b2da      	uxtb	r2, r3
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801025c:	697b      	ldr	r3, [r7, #20]
 801025e:	0a1b      	lsrs	r3, r3, #8
 8010260:	b2db      	uxtb	r3, r3
 8010262:	f003 031f 	and.w	r3, r3, #31
 8010266:	b2da      	uxtb	r2, r3
 8010268:	68bb      	ldr	r3, [r7, #8]
 801026a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 801026c:	697b      	ldr	r3, [r7, #20]
 801026e:	b2db      	uxtb	r3, r3
 8010270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010274:	b2da      	uxtb	r2, r3
 8010276:	68bb      	ldr	r3, [r7, #8]
 8010278:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 801027a:	697b      	ldr	r3, [r7, #20]
 801027c:	0b5b      	lsrs	r3, r3, #13
 801027e:	b2db      	uxtb	r3, r3
 8010280:	f003 0307 	and.w	r3, r3, #7
 8010284:	b2da      	uxtb	r2, r3
 8010286:	68bb      	ldr	r3, [r7, #8]
 8010288:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d11a      	bne.n	80102c6 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8010290:	68bb      	ldr	r3, [r7, #8]
 8010292:	78db      	ldrb	r3, [r3, #3]
 8010294:	4618      	mov	r0, r3
 8010296:	f000 fa55 	bl	8010744 <RTC_Bcd2ToByte>
 801029a:	4603      	mov	r3, r0
 801029c:	461a      	mov	r2, r3
 801029e:	68bb      	ldr	r3, [r7, #8]
 80102a0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80102a2:	68bb      	ldr	r3, [r7, #8]
 80102a4:	785b      	ldrb	r3, [r3, #1]
 80102a6:	4618      	mov	r0, r3
 80102a8:	f000 fa4c 	bl	8010744 <RTC_Bcd2ToByte>
 80102ac:	4603      	mov	r3, r0
 80102ae:	461a      	mov	r2, r3
 80102b0:	68bb      	ldr	r3, [r7, #8]
 80102b2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80102b4:	68bb      	ldr	r3, [r7, #8]
 80102b6:	789b      	ldrb	r3, [r3, #2]
 80102b8:	4618      	mov	r0, r3
 80102ba:	f000 fa43 	bl	8010744 <RTC_Bcd2ToByte>
 80102be:	4603      	mov	r3, r0
 80102c0:	461a      	mov	r2, r3
 80102c2:	68bb      	ldr	r3, [r7, #8]
 80102c4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80102c6:	2300      	movs	r3, #0
}
 80102c8:	4618      	mov	r0, r3
 80102ca:	3718      	adds	r7, #24
 80102cc:	46bd      	mov	sp, r7
 80102ce:	bd80      	pop	{r7, pc}

080102d0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80102d0:	b590      	push	{r4, r7, lr}
 80102d2:	b089      	sub	sp, #36	; 0x24
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	60f8      	str	r0, [r7, #12]
 80102d8:	60b9      	str	r1, [r7, #8]
 80102da:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80102e2:	2b01      	cmp	r3, #1
 80102e4:	d101      	bne.n	80102ea <HAL_RTC_SetAlarm_IT+0x1a>
 80102e6:	2302      	movs	r3, #2
 80102e8:	e127      	b.n	801053a <HAL_RTC_SetAlarm_IT+0x26a>
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	2201      	movs	r2, #1
 80102ee:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	2202      	movs	r2, #2
 80102f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d137      	bne.n	8010370 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	689b      	ldr	r3, [r3, #8]
 8010306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801030a:	2b00      	cmp	r3, #0
 801030c:	d102      	bne.n	8010314 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 801030e:	68bb      	ldr	r3, [r7, #8]
 8010310:	2200      	movs	r2, #0
 8010312:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	781b      	ldrb	r3, [r3, #0]
 8010318:	4618      	mov	r0, r3
 801031a:	f000 f9f3 	bl	8010704 <RTC_ByteToBcd2>
 801031e:	4603      	mov	r3, r0
 8010320:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8010322:	68bb      	ldr	r3, [r7, #8]
 8010324:	785b      	ldrb	r3, [r3, #1]
 8010326:	4618      	mov	r0, r3
 8010328:	f000 f9ec 	bl	8010704 <RTC_ByteToBcd2>
 801032c:	4603      	mov	r3, r0
 801032e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8010330:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8010332:	68bb      	ldr	r3, [r7, #8]
 8010334:	789b      	ldrb	r3, [r3, #2]
 8010336:	4618      	mov	r0, r3
 8010338:	f000 f9e4 	bl	8010704 <RTC_ByteToBcd2>
 801033c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 801033e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8010342:	68bb      	ldr	r3, [r7, #8]
 8010344:	78db      	ldrb	r3, [r3, #3]
 8010346:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8010348:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 801034c:	68bb      	ldr	r3, [r7, #8]
 801034e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010352:	4618      	mov	r0, r3
 8010354:	f000 f9d6 	bl	8010704 <RTC_ByteToBcd2>
 8010358:	4603      	mov	r3, r0
 801035a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 801035c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8010360:	68bb      	ldr	r3, [r7, #8]
 8010362:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8010364:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 801036a:	4313      	orrs	r3, r2
 801036c:	61fb      	str	r3, [r7, #28]
 801036e:	e023      	b.n	80103b8 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	689b      	ldr	r3, [r3, #8]
 8010376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801037a:	2b00      	cmp	r3, #0
 801037c:	d102      	bne.n	8010384 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 801037e:	68bb      	ldr	r3, [r7, #8]
 8010380:	2200      	movs	r2, #0
 8010382:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8010384:	68bb      	ldr	r3, [r7, #8]
 8010386:	781b      	ldrb	r3, [r3, #0]
 8010388:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 801038a:	68bb      	ldr	r3, [r7, #8]
 801038c:	785b      	ldrb	r3, [r3, #1]
 801038e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8010390:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8010392:	68ba      	ldr	r2, [r7, #8]
 8010394:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8010396:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8010398:	68bb      	ldr	r3, [r7, #8]
 801039a:	78db      	ldrb	r3, [r3, #3]
 801039c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 801039e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80103a0:	68bb      	ldr	r3, [r7, #8]
 80103a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80103a6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80103a8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80103ae:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80103b0:	68bb      	ldr	r3, [r7, #8]
 80103b2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80103b4:	4313      	orrs	r3, r2
 80103b6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80103b8:	68bb      	ldr	r3, [r7, #8]
 80103ba:	685a      	ldr	r2, [r3, #4]
 80103bc:	68bb      	ldr	r3, [r7, #8]
 80103be:	69db      	ldr	r3, [r3, #28]
 80103c0:	4313      	orrs	r3, r2
 80103c2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	22ca      	movs	r2, #202	; 0xca
 80103ca:	625a      	str	r2, [r3, #36]	; 0x24
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	2253      	movs	r2, #83	; 0x53
 80103d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80103dc:	d14a      	bne.n	8010474 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	689a      	ldr	r2, [r3, #8]
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80103ec:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	68db      	ldr	r3, [r3, #12]
 80103f4:	b2da      	uxtb	r2, r3
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80103fe:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8010400:	f7f9 fcb8 	bl	8009d74 <HAL_GetTick>
 8010404:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8010406:	e015      	b.n	8010434 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010408:	f7f9 fcb4 	bl	8009d74 <HAL_GetTick>
 801040c:	4602      	mov	r2, r0
 801040e:	693b      	ldr	r3, [r7, #16]
 8010410:	1ad3      	subs	r3, r2, r3
 8010412:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010416:	d90d      	bls.n	8010434 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	22ff      	movs	r2, #255	; 0xff
 801041e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	2203      	movs	r2, #3
 8010424:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	2200      	movs	r2, #0
 801042c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8010430:	2303      	movs	r3, #3
 8010432:	e082      	b.n	801053a <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	68db      	ldr	r3, [r3, #12]
 801043a:	f003 0301 	and.w	r3, r3, #1
 801043e:	2b00      	cmp	r3, #0
 8010440:	d0e2      	beq.n	8010408 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	69fa      	ldr	r2, [r7, #28]
 8010448:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	69ba      	ldr	r2, [r7, #24]
 8010450:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	689a      	ldr	r2, [r3, #8]
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010460:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	689a      	ldr	r2, [r3, #8]
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010470:	609a      	str	r2, [r3, #8]
 8010472:	e049      	b.n	8010508 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	689a      	ldr	r2, [r3, #8]
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8010482:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	68db      	ldr	r3, [r3, #12]
 801048a:	b2da      	uxtb	r2, r3
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	f462 7220 	orn	r2, r2, #640	; 0x280
 8010494:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8010496:	f7f9 fc6d 	bl	8009d74 <HAL_GetTick>
 801049a:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 801049c:	e015      	b.n	80104ca <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801049e:	f7f9 fc69 	bl	8009d74 <HAL_GetTick>
 80104a2:	4602      	mov	r2, r0
 80104a4:	697b      	ldr	r3, [r7, #20]
 80104a6:	1ad3      	subs	r3, r2, r3
 80104a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80104ac:	d90d      	bls.n	80104ca <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	22ff      	movs	r2, #255	; 0xff
 80104b4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	2203      	movs	r2, #3
 80104ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	2200      	movs	r2, #0
 80104c2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80104c6:	2303      	movs	r3, #3
 80104c8:	e037      	b.n	801053a <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	68db      	ldr	r3, [r3, #12]
 80104d0:	f003 0302 	and.w	r3, r3, #2
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d0e2      	beq.n	801049e <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	69fa      	ldr	r2, [r7, #28]
 80104de:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	69ba      	ldr	r2, [r7, #24]
 80104e6:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	689a      	ldr	r2, [r3, #8]
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80104f6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	689a      	ldr	r2, [r3, #8]
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010506:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8010508:	4b0e      	ldr	r3, [pc, #56]	; (8010544 <HAL_RTC_SetAlarm_IT+0x274>)
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	4a0d      	ldr	r2, [pc, #52]	; (8010544 <HAL_RTC_SetAlarm_IT+0x274>)
 801050e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010512:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8010514:	4b0b      	ldr	r3, [pc, #44]	; (8010544 <HAL_RTC_SetAlarm_IT+0x274>)
 8010516:	689b      	ldr	r3, [r3, #8]
 8010518:	4a0a      	ldr	r2, [pc, #40]	; (8010544 <HAL_RTC_SetAlarm_IT+0x274>)
 801051a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801051e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	22ff      	movs	r2, #255	; 0xff
 8010526:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	2201      	movs	r2, #1
 801052c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	2200      	movs	r2, #0
 8010534:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8010538:	2300      	movs	r3, #0
}
 801053a:	4618      	mov	r0, r3
 801053c:	3724      	adds	r7, #36	; 0x24
 801053e:	46bd      	mov	sp, r7
 8010540:	bd90      	pop	{r4, r7, pc}
 8010542:	bf00      	nop
 8010544:	40010400 	.word	0x40010400

08010548 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b082      	sub	sp, #8
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8010550:	4b1f      	ldr	r3, [pc, #124]	; (80105d0 <HAL_RTC_AlarmIRQHandler+0x88>)
 8010552:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8010556:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	689b      	ldr	r3, [r3, #8]
 801055e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010562:	2b00      	cmp	r3, #0
 8010564:	d012      	beq.n	801058c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	68db      	ldr	r3, [r3, #12]
 801056c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010570:	2b00      	cmp	r3, #0
 8010572:	d00b      	beq.n	801058c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	68db      	ldr	r3, [r3, #12]
 801057a:	b2da      	uxtb	r2, r3
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8010584:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8010586:	6878      	ldr	r0, [r7, #4]
 8010588:	f7f0 fda2 	bl	80010d0 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	689b      	ldr	r3, [r3, #8]
 8010592:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010596:	2b00      	cmp	r3, #0
 8010598:	d012      	beq.n	80105c0 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	68db      	ldr	r3, [r3, #12]
 80105a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d00b      	beq.n	80105c0 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	68db      	ldr	r3, [r3, #12]
 80105ae:	b2da      	uxtb	r2, r3
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	f462 7220 	orn	r2, r2, #640	; 0x280
 80105b8:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80105ba:	6878      	ldr	r0, [r7, #4]
 80105bc:	f000 f8dc 	bl	8010778 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	2201      	movs	r2, #1
 80105c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80105c8:	bf00      	nop
 80105ca:	3708      	adds	r7, #8
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}
 80105d0:	40010400 	.word	0x40010400

080105d4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b084      	sub	sp, #16
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	68da      	ldr	r2, [r3, #12]
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80105ea:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80105ec:	f7f9 fbc2 	bl	8009d74 <HAL_GetTick>
 80105f0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80105f2:	e009      	b.n	8010608 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80105f4:	f7f9 fbbe 	bl	8009d74 <HAL_GetTick>
 80105f8:	4602      	mov	r2, r0
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	1ad3      	subs	r3, r2, r3
 80105fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010602:	d901      	bls.n	8010608 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8010604:	2303      	movs	r3, #3
 8010606:	e007      	b.n	8010618 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	68db      	ldr	r3, [r3, #12]
 801060e:	f003 0320 	and.w	r3, r3, #32
 8010612:	2b00      	cmp	r3, #0
 8010614:	d0ee      	beq.n	80105f4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8010616:	2300      	movs	r3, #0
}
 8010618:	4618      	mov	r0, r3
 801061a:	3710      	adds	r7, #16
 801061c:	46bd      	mov	sp, r7
 801061e:	bd80      	pop	{r7, pc}

08010620 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b084      	sub	sp, #16
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010628:	2300      	movs	r3, #0
 801062a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	68db      	ldr	r3, [r3, #12]
 8010632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010636:	2b00      	cmp	r3, #0
 8010638:	d120      	bne.n	801067c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	f04f 32ff 	mov.w	r2, #4294967295
 8010642:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8010644:	f7f9 fb96 	bl	8009d74 <HAL_GetTick>
 8010648:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 801064a:	e00d      	b.n	8010668 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 801064c:	f7f9 fb92 	bl	8009d74 <HAL_GetTick>
 8010650:	4602      	mov	r2, r0
 8010652:	68bb      	ldr	r3, [r7, #8]
 8010654:	1ad3      	subs	r3, r2, r3
 8010656:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801065a:	d905      	bls.n	8010668 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 801065c:	2303      	movs	r3, #3
 801065e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2203      	movs	r2, #3
 8010664:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	68db      	ldr	r3, [r3, #12]
 801066e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010672:	2b00      	cmp	r3, #0
 8010674:	d102      	bne.n	801067c <RTC_EnterInitMode+0x5c>
 8010676:	7bfb      	ldrb	r3, [r7, #15]
 8010678:	2b03      	cmp	r3, #3
 801067a:	d1e7      	bne.n	801064c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 801067c:	7bfb      	ldrb	r3, [r7, #15]
}
 801067e:	4618      	mov	r0, r3
 8010680:	3710      	adds	r7, #16
 8010682:	46bd      	mov	sp, r7
 8010684:	bd80      	pop	{r7, pc}
	...

08010688 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b084      	sub	sp, #16
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010690:	2300      	movs	r3, #0
 8010692:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8010694:	4b1a      	ldr	r3, [pc, #104]	; (8010700 <RTC_ExitInitMode+0x78>)
 8010696:	68db      	ldr	r3, [r3, #12]
 8010698:	4a19      	ldr	r2, [pc, #100]	; (8010700 <RTC_ExitInitMode+0x78>)
 801069a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801069e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80106a0:	4b17      	ldr	r3, [pc, #92]	; (8010700 <RTC_ExitInitMode+0x78>)
 80106a2:	689b      	ldr	r3, [r3, #8]
 80106a4:	f003 0320 	and.w	r3, r3, #32
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d10c      	bne.n	80106c6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80106ac:	6878      	ldr	r0, [r7, #4]
 80106ae:	f7ff ff91 	bl	80105d4 <HAL_RTC_WaitForSynchro>
 80106b2:	4603      	mov	r3, r0
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d01e      	beq.n	80106f6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2203      	movs	r2, #3
 80106bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80106c0:	2303      	movs	r3, #3
 80106c2:	73fb      	strb	r3, [r7, #15]
 80106c4:	e017      	b.n	80106f6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80106c6:	4b0e      	ldr	r3, [pc, #56]	; (8010700 <RTC_ExitInitMode+0x78>)
 80106c8:	689b      	ldr	r3, [r3, #8]
 80106ca:	4a0d      	ldr	r2, [pc, #52]	; (8010700 <RTC_ExitInitMode+0x78>)
 80106cc:	f023 0320 	bic.w	r3, r3, #32
 80106d0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80106d2:	6878      	ldr	r0, [r7, #4]
 80106d4:	f7ff ff7e 	bl	80105d4 <HAL_RTC_WaitForSynchro>
 80106d8:	4603      	mov	r3, r0
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d005      	beq.n	80106ea <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	2203      	movs	r2, #3
 80106e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80106e6:	2303      	movs	r3, #3
 80106e8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80106ea:	4b05      	ldr	r3, [pc, #20]	; (8010700 <RTC_ExitInitMode+0x78>)
 80106ec:	689b      	ldr	r3, [r3, #8]
 80106ee:	4a04      	ldr	r2, [pc, #16]	; (8010700 <RTC_ExitInitMode+0x78>)
 80106f0:	f043 0320 	orr.w	r3, r3, #32
 80106f4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80106f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80106f8:	4618      	mov	r0, r3
 80106fa:	3710      	adds	r7, #16
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}
 8010700:	40002800 	.word	0x40002800

08010704 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8010704:	b480      	push	{r7}
 8010706:	b085      	sub	sp, #20
 8010708:	af00      	add	r7, sp, #0
 801070a:	4603      	mov	r3, r0
 801070c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 801070e:	2300      	movs	r3, #0
 8010710:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8010712:	79fb      	ldrb	r3, [r7, #7]
 8010714:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8010716:	e005      	b.n	8010724 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	3301      	adds	r3, #1
 801071c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 801071e:	7afb      	ldrb	r3, [r7, #11]
 8010720:	3b0a      	subs	r3, #10
 8010722:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8010724:	7afb      	ldrb	r3, [r7, #11]
 8010726:	2b09      	cmp	r3, #9
 8010728:	d8f6      	bhi.n	8010718 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	b2db      	uxtb	r3, r3
 801072e:	011b      	lsls	r3, r3, #4
 8010730:	b2da      	uxtb	r2, r3
 8010732:	7afb      	ldrb	r3, [r7, #11]
 8010734:	4313      	orrs	r3, r2
 8010736:	b2db      	uxtb	r3, r3
}
 8010738:	4618      	mov	r0, r3
 801073a:	3714      	adds	r7, #20
 801073c:	46bd      	mov	sp, r7
 801073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010742:	4770      	bx	lr

08010744 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8010744:	b480      	push	{r7}
 8010746:	b085      	sub	sp, #20
 8010748:	af00      	add	r7, sp, #0
 801074a:	4603      	mov	r3, r0
 801074c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 801074e:	79fb      	ldrb	r3, [r7, #7]
 8010750:	091b      	lsrs	r3, r3, #4
 8010752:	b2db      	uxtb	r3, r3
 8010754:	461a      	mov	r2, r3
 8010756:	0092      	lsls	r2, r2, #2
 8010758:	4413      	add	r3, r2
 801075a:	005b      	lsls	r3, r3, #1
 801075c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 801075e:	79fb      	ldrb	r3, [r7, #7]
 8010760:	f003 030f 	and.w	r3, r3, #15
 8010764:	b2da      	uxtb	r2, r3
 8010766:	7bfb      	ldrb	r3, [r7, #15]
 8010768:	4413      	add	r3, r2
 801076a:	b2db      	uxtb	r3, r3
}
 801076c:	4618      	mov	r0, r3
 801076e:	3714      	adds	r7, #20
 8010770:	46bd      	mov	sp, r7
 8010772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010776:	4770      	bx	lr

08010778 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8010778:	b480      	push	{r7}
 801077a:	b083      	sub	sp, #12
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8010780:	bf00      	nop
 8010782:	370c      	adds	r7, #12
 8010784:	46bd      	mov	sp, r7
 8010786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078a:	4770      	bx	lr

0801078c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b082      	sub	sp, #8
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d101      	bne.n	801079e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801079a:	2301      	movs	r3, #1
 801079c:	e049      	b.n	8010832 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80107a4:	b2db      	uxtb	r3, r3
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d106      	bne.n	80107b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	2200      	movs	r2, #0
 80107ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80107b2:	6878      	ldr	r0, [r7, #4]
 80107b4:	f7f1 feea 	bl	800258c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2202      	movs	r2, #2
 80107bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681a      	ldr	r2, [r3, #0]
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	3304      	adds	r3, #4
 80107c8:	4619      	mov	r1, r3
 80107ca:	4610      	mov	r0, r2
 80107cc:	f000 fc5c 	bl	8011088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	2201      	movs	r2, #1
 80107d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	2201      	movs	r2, #1
 80107dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	2201      	movs	r2, #1
 80107e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	2201      	movs	r2, #1
 80107ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	2201      	movs	r2, #1
 80107f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	2201      	movs	r2, #1
 80107fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	2201      	movs	r2, #1
 8010804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	2201      	movs	r2, #1
 801080c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2201      	movs	r2, #1
 8010814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2201      	movs	r2, #1
 801081c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2201      	movs	r2, #1
 8010824:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	2201      	movs	r2, #1
 801082c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010830:	2300      	movs	r3, #0
}
 8010832:	4618      	mov	r0, r3
 8010834:	3708      	adds	r7, #8
 8010836:	46bd      	mov	sp, r7
 8010838:	bd80      	pop	{r7, pc}
	...

0801083c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801083c:	b480      	push	{r7}
 801083e:	b085      	sub	sp, #20
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801084a:	b2db      	uxtb	r3, r3
 801084c:	2b01      	cmp	r3, #1
 801084e:	d001      	beq.n	8010854 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010850:	2301      	movs	r3, #1
 8010852:	e04f      	b.n	80108f4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	2202      	movs	r2, #2
 8010858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	68da      	ldr	r2, [r3, #12]
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	f042 0201 	orr.w	r2, r2, #1
 801086a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	4a23      	ldr	r2, [pc, #140]	; (8010900 <HAL_TIM_Base_Start_IT+0xc4>)
 8010872:	4293      	cmp	r3, r2
 8010874:	d01d      	beq.n	80108b2 <HAL_TIM_Base_Start_IT+0x76>
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801087e:	d018      	beq.n	80108b2 <HAL_TIM_Base_Start_IT+0x76>
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	4a1f      	ldr	r2, [pc, #124]	; (8010904 <HAL_TIM_Base_Start_IT+0xc8>)
 8010886:	4293      	cmp	r3, r2
 8010888:	d013      	beq.n	80108b2 <HAL_TIM_Base_Start_IT+0x76>
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	4a1e      	ldr	r2, [pc, #120]	; (8010908 <HAL_TIM_Base_Start_IT+0xcc>)
 8010890:	4293      	cmp	r3, r2
 8010892:	d00e      	beq.n	80108b2 <HAL_TIM_Base_Start_IT+0x76>
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	4a1c      	ldr	r2, [pc, #112]	; (801090c <HAL_TIM_Base_Start_IT+0xd0>)
 801089a:	4293      	cmp	r3, r2
 801089c:	d009      	beq.n	80108b2 <HAL_TIM_Base_Start_IT+0x76>
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	4a1b      	ldr	r2, [pc, #108]	; (8010910 <HAL_TIM_Base_Start_IT+0xd4>)
 80108a4:	4293      	cmp	r3, r2
 80108a6:	d004      	beq.n	80108b2 <HAL_TIM_Base_Start_IT+0x76>
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	4a19      	ldr	r2, [pc, #100]	; (8010914 <HAL_TIM_Base_Start_IT+0xd8>)
 80108ae:	4293      	cmp	r3, r2
 80108b0:	d115      	bne.n	80108de <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	689a      	ldr	r2, [r3, #8]
 80108b8:	4b17      	ldr	r3, [pc, #92]	; (8010918 <HAL_TIM_Base_Start_IT+0xdc>)
 80108ba:	4013      	ands	r3, r2
 80108bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	2b06      	cmp	r3, #6
 80108c2:	d015      	beq.n	80108f0 <HAL_TIM_Base_Start_IT+0xb4>
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80108ca:	d011      	beq.n	80108f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	681a      	ldr	r2, [r3, #0]
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	f042 0201 	orr.w	r2, r2, #1
 80108da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80108dc:	e008      	b.n	80108f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	681a      	ldr	r2, [r3, #0]
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	f042 0201 	orr.w	r2, r2, #1
 80108ec:	601a      	str	r2, [r3, #0]
 80108ee:	e000      	b.n	80108f2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80108f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80108f2:	2300      	movs	r3, #0
}
 80108f4:	4618      	mov	r0, r3
 80108f6:	3714      	adds	r7, #20
 80108f8:	46bd      	mov	sp, r7
 80108fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fe:	4770      	bx	lr
 8010900:	40012c00 	.word	0x40012c00
 8010904:	40000400 	.word	0x40000400
 8010908:	40000800 	.word	0x40000800
 801090c:	40000c00 	.word	0x40000c00
 8010910:	40013400 	.word	0x40013400
 8010914:	40014000 	.word	0x40014000
 8010918:	00010007 	.word	0x00010007

0801091c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b082      	sub	sp, #8
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d101      	bne.n	801092e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801092a:	2301      	movs	r3, #1
 801092c:	e049      	b.n	80109c2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010934:	b2db      	uxtb	r3, r3
 8010936:	2b00      	cmp	r3, #0
 8010938:	d106      	bne.n	8010948 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	2200      	movs	r2, #0
 801093e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010942:	6878      	ldr	r0, [r7, #4]
 8010944:	f7f1 fd80 	bl	8002448 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2202      	movs	r2, #2
 801094c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	681a      	ldr	r2, [r3, #0]
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	3304      	adds	r3, #4
 8010958:	4619      	mov	r1, r3
 801095a:	4610      	mov	r0, r2
 801095c:	f000 fb94 	bl	8011088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	2201      	movs	r2, #1
 8010964:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	2201      	movs	r2, #1
 801096c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	2201      	movs	r2, #1
 8010974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	2201      	movs	r2, #1
 801097c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	2201      	movs	r2, #1
 8010984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2201      	movs	r2, #1
 801098c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	2201      	movs	r2, #1
 8010994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	2201      	movs	r2, #1
 801099c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	2201      	movs	r2, #1
 80109a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	2201      	movs	r2, #1
 80109ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	2201      	movs	r2, #1
 80109b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	2201      	movs	r2, #1
 80109bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80109c0:	2300      	movs	r3, #0
}
 80109c2:	4618      	mov	r0, r3
 80109c4:	3708      	adds	r7, #8
 80109c6:	46bd      	mov	sp, r7
 80109c8:	bd80      	pop	{r7, pc}
	...

080109cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b084      	sub	sp, #16
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
 80109d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80109d6:	683b      	ldr	r3, [r7, #0]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d109      	bne.n	80109f0 <HAL_TIM_PWM_Start+0x24>
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80109e2:	b2db      	uxtb	r3, r3
 80109e4:	2b01      	cmp	r3, #1
 80109e6:	bf14      	ite	ne
 80109e8:	2301      	movne	r3, #1
 80109ea:	2300      	moveq	r3, #0
 80109ec:	b2db      	uxtb	r3, r3
 80109ee:	e03c      	b.n	8010a6a <HAL_TIM_PWM_Start+0x9e>
 80109f0:	683b      	ldr	r3, [r7, #0]
 80109f2:	2b04      	cmp	r3, #4
 80109f4:	d109      	bne.n	8010a0a <HAL_TIM_PWM_Start+0x3e>
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80109fc:	b2db      	uxtb	r3, r3
 80109fe:	2b01      	cmp	r3, #1
 8010a00:	bf14      	ite	ne
 8010a02:	2301      	movne	r3, #1
 8010a04:	2300      	moveq	r3, #0
 8010a06:	b2db      	uxtb	r3, r3
 8010a08:	e02f      	b.n	8010a6a <HAL_TIM_PWM_Start+0x9e>
 8010a0a:	683b      	ldr	r3, [r7, #0]
 8010a0c:	2b08      	cmp	r3, #8
 8010a0e:	d109      	bne.n	8010a24 <HAL_TIM_PWM_Start+0x58>
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a16:	b2db      	uxtb	r3, r3
 8010a18:	2b01      	cmp	r3, #1
 8010a1a:	bf14      	ite	ne
 8010a1c:	2301      	movne	r3, #1
 8010a1e:	2300      	moveq	r3, #0
 8010a20:	b2db      	uxtb	r3, r3
 8010a22:	e022      	b.n	8010a6a <HAL_TIM_PWM_Start+0x9e>
 8010a24:	683b      	ldr	r3, [r7, #0]
 8010a26:	2b0c      	cmp	r3, #12
 8010a28:	d109      	bne.n	8010a3e <HAL_TIM_PWM_Start+0x72>
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010a30:	b2db      	uxtb	r3, r3
 8010a32:	2b01      	cmp	r3, #1
 8010a34:	bf14      	ite	ne
 8010a36:	2301      	movne	r3, #1
 8010a38:	2300      	moveq	r3, #0
 8010a3a:	b2db      	uxtb	r3, r3
 8010a3c:	e015      	b.n	8010a6a <HAL_TIM_PWM_Start+0x9e>
 8010a3e:	683b      	ldr	r3, [r7, #0]
 8010a40:	2b10      	cmp	r3, #16
 8010a42:	d109      	bne.n	8010a58 <HAL_TIM_PWM_Start+0x8c>
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010a4a:	b2db      	uxtb	r3, r3
 8010a4c:	2b01      	cmp	r3, #1
 8010a4e:	bf14      	ite	ne
 8010a50:	2301      	movne	r3, #1
 8010a52:	2300      	moveq	r3, #0
 8010a54:	b2db      	uxtb	r3, r3
 8010a56:	e008      	b.n	8010a6a <HAL_TIM_PWM_Start+0x9e>
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010a5e:	b2db      	uxtb	r3, r3
 8010a60:	2b01      	cmp	r3, #1
 8010a62:	bf14      	ite	ne
 8010a64:	2301      	movne	r3, #1
 8010a66:	2300      	moveq	r3, #0
 8010a68:	b2db      	uxtb	r3, r3
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d001      	beq.n	8010a72 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8010a6e:	2301      	movs	r3, #1
 8010a70:	e09c      	b.n	8010bac <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d104      	bne.n	8010a82 <HAL_TIM_PWM_Start+0xb6>
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	2202      	movs	r2, #2
 8010a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010a80:	e023      	b.n	8010aca <HAL_TIM_PWM_Start+0xfe>
 8010a82:	683b      	ldr	r3, [r7, #0]
 8010a84:	2b04      	cmp	r3, #4
 8010a86:	d104      	bne.n	8010a92 <HAL_TIM_PWM_Start+0xc6>
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	2202      	movs	r2, #2
 8010a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010a90:	e01b      	b.n	8010aca <HAL_TIM_PWM_Start+0xfe>
 8010a92:	683b      	ldr	r3, [r7, #0]
 8010a94:	2b08      	cmp	r3, #8
 8010a96:	d104      	bne.n	8010aa2 <HAL_TIM_PWM_Start+0xd6>
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	2202      	movs	r2, #2
 8010a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010aa0:	e013      	b.n	8010aca <HAL_TIM_PWM_Start+0xfe>
 8010aa2:	683b      	ldr	r3, [r7, #0]
 8010aa4:	2b0c      	cmp	r3, #12
 8010aa6:	d104      	bne.n	8010ab2 <HAL_TIM_PWM_Start+0xe6>
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	2202      	movs	r2, #2
 8010aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010ab0:	e00b      	b.n	8010aca <HAL_TIM_PWM_Start+0xfe>
 8010ab2:	683b      	ldr	r3, [r7, #0]
 8010ab4:	2b10      	cmp	r3, #16
 8010ab6:	d104      	bne.n	8010ac2 <HAL_TIM_PWM_Start+0xf6>
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	2202      	movs	r2, #2
 8010abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010ac0:	e003      	b.n	8010aca <HAL_TIM_PWM_Start+0xfe>
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	2202      	movs	r2, #2
 8010ac6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	2201      	movs	r2, #1
 8010ad0:	6839      	ldr	r1, [r7, #0]
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	f000 fe48 	bl	8011768 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	4a35      	ldr	r2, [pc, #212]	; (8010bb4 <HAL_TIM_PWM_Start+0x1e8>)
 8010ade:	4293      	cmp	r3, r2
 8010ae0:	d013      	beq.n	8010b0a <HAL_TIM_PWM_Start+0x13e>
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	4a34      	ldr	r2, [pc, #208]	; (8010bb8 <HAL_TIM_PWM_Start+0x1ec>)
 8010ae8:	4293      	cmp	r3, r2
 8010aea:	d00e      	beq.n	8010b0a <HAL_TIM_PWM_Start+0x13e>
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	4a32      	ldr	r2, [pc, #200]	; (8010bbc <HAL_TIM_PWM_Start+0x1f0>)
 8010af2:	4293      	cmp	r3, r2
 8010af4:	d009      	beq.n	8010b0a <HAL_TIM_PWM_Start+0x13e>
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	4a31      	ldr	r2, [pc, #196]	; (8010bc0 <HAL_TIM_PWM_Start+0x1f4>)
 8010afc:	4293      	cmp	r3, r2
 8010afe:	d004      	beq.n	8010b0a <HAL_TIM_PWM_Start+0x13e>
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	4a2f      	ldr	r2, [pc, #188]	; (8010bc4 <HAL_TIM_PWM_Start+0x1f8>)
 8010b06:	4293      	cmp	r3, r2
 8010b08:	d101      	bne.n	8010b0e <HAL_TIM_PWM_Start+0x142>
 8010b0a:	2301      	movs	r3, #1
 8010b0c:	e000      	b.n	8010b10 <HAL_TIM_PWM_Start+0x144>
 8010b0e:	2300      	movs	r3, #0
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d007      	beq.n	8010b24 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010b22:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	4a22      	ldr	r2, [pc, #136]	; (8010bb4 <HAL_TIM_PWM_Start+0x1e8>)
 8010b2a:	4293      	cmp	r3, r2
 8010b2c:	d01d      	beq.n	8010b6a <HAL_TIM_PWM_Start+0x19e>
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010b36:	d018      	beq.n	8010b6a <HAL_TIM_PWM_Start+0x19e>
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	4a22      	ldr	r2, [pc, #136]	; (8010bc8 <HAL_TIM_PWM_Start+0x1fc>)
 8010b3e:	4293      	cmp	r3, r2
 8010b40:	d013      	beq.n	8010b6a <HAL_TIM_PWM_Start+0x19e>
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	4a21      	ldr	r2, [pc, #132]	; (8010bcc <HAL_TIM_PWM_Start+0x200>)
 8010b48:	4293      	cmp	r3, r2
 8010b4a:	d00e      	beq.n	8010b6a <HAL_TIM_PWM_Start+0x19e>
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	4a1f      	ldr	r2, [pc, #124]	; (8010bd0 <HAL_TIM_PWM_Start+0x204>)
 8010b52:	4293      	cmp	r3, r2
 8010b54:	d009      	beq.n	8010b6a <HAL_TIM_PWM_Start+0x19e>
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	4a17      	ldr	r2, [pc, #92]	; (8010bb8 <HAL_TIM_PWM_Start+0x1ec>)
 8010b5c:	4293      	cmp	r3, r2
 8010b5e:	d004      	beq.n	8010b6a <HAL_TIM_PWM_Start+0x19e>
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	4a15      	ldr	r2, [pc, #84]	; (8010bbc <HAL_TIM_PWM_Start+0x1f0>)
 8010b66:	4293      	cmp	r3, r2
 8010b68:	d115      	bne.n	8010b96 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	689a      	ldr	r2, [r3, #8]
 8010b70:	4b18      	ldr	r3, [pc, #96]	; (8010bd4 <HAL_TIM_PWM_Start+0x208>)
 8010b72:	4013      	ands	r3, r2
 8010b74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	2b06      	cmp	r3, #6
 8010b7a:	d015      	beq.n	8010ba8 <HAL_TIM_PWM_Start+0x1dc>
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010b82:	d011      	beq.n	8010ba8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	681a      	ldr	r2, [r3, #0]
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	f042 0201 	orr.w	r2, r2, #1
 8010b92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010b94:	e008      	b.n	8010ba8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	681a      	ldr	r2, [r3, #0]
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	f042 0201 	orr.w	r2, r2, #1
 8010ba4:	601a      	str	r2, [r3, #0]
 8010ba6:	e000      	b.n	8010baa <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ba8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010baa:	2300      	movs	r3, #0
}
 8010bac:	4618      	mov	r0, r3
 8010bae:	3710      	adds	r7, #16
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	bd80      	pop	{r7, pc}
 8010bb4:	40012c00 	.word	0x40012c00
 8010bb8:	40013400 	.word	0x40013400
 8010bbc:	40014000 	.word	0x40014000
 8010bc0:	40014400 	.word	0x40014400
 8010bc4:	40014800 	.word	0x40014800
 8010bc8:	40000400 	.word	0x40000400
 8010bcc:	40000800 	.word	0x40000800
 8010bd0:	40000c00 	.word	0x40000c00
 8010bd4:	00010007 	.word	0x00010007

08010bd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b082      	sub	sp, #8
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	691b      	ldr	r3, [r3, #16]
 8010be6:	f003 0302 	and.w	r3, r3, #2
 8010bea:	2b02      	cmp	r3, #2
 8010bec:	d122      	bne.n	8010c34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	68db      	ldr	r3, [r3, #12]
 8010bf4:	f003 0302 	and.w	r3, r3, #2
 8010bf8:	2b02      	cmp	r3, #2
 8010bfa:	d11b      	bne.n	8010c34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	f06f 0202 	mvn.w	r2, #2
 8010c04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	2201      	movs	r2, #1
 8010c0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	699b      	ldr	r3, [r3, #24]
 8010c12:	f003 0303 	and.w	r3, r3, #3
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d003      	beq.n	8010c22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010c1a:	6878      	ldr	r0, [r7, #4]
 8010c1c:	f000 fa16 	bl	801104c <HAL_TIM_IC_CaptureCallback>
 8010c20:	e005      	b.n	8010c2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010c22:	6878      	ldr	r0, [r7, #4]
 8010c24:	f000 fa08 	bl	8011038 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010c28:	6878      	ldr	r0, [r7, #4]
 8010c2a:	f000 fa19 	bl	8011060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	2200      	movs	r2, #0
 8010c32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	691b      	ldr	r3, [r3, #16]
 8010c3a:	f003 0304 	and.w	r3, r3, #4
 8010c3e:	2b04      	cmp	r3, #4
 8010c40:	d122      	bne.n	8010c88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	68db      	ldr	r3, [r3, #12]
 8010c48:	f003 0304 	and.w	r3, r3, #4
 8010c4c:	2b04      	cmp	r3, #4
 8010c4e:	d11b      	bne.n	8010c88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	f06f 0204 	mvn.w	r2, #4
 8010c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	2202      	movs	r2, #2
 8010c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	699b      	ldr	r3, [r3, #24]
 8010c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d003      	beq.n	8010c76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010c6e:	6878      	ldr	r0, [r7, #4]
 8010c70:	f000 f9ec 	bl	801104c <HAL_TIM_IC_CaptureCallback>
 8010c74:	e005      	b.n	8010c82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010c76:	6878      	ldr	r0, [r7, #4]
 8010c78:	f000 f9de 	bl	8011038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010c7c:	6878      	ldr	r0, [r7, #4]
 8010c7e:	f000 f9ef 	bl	8011060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	2200      	movs	r2, #0
 8010c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	691b      	ldr	r3, [r3, #16]
 8010c8e:	f003 0308 	and.w	r3, r3, #8
 8010c92:	2b08      	cmp	r3, #8
 8010c94:	d122      	bne.n	8010cdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	68db      	ldr	r3, [r3, #12]
 8010c9c:	f003 0308 	and.w	r3, r3, #8
 8010ca0:	2b08      	cmp	r3, #8
 8010ca2:	d11b      	bne.n	8010cdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	f06f 0208 	mvn.w	r2, #8
 8010cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	2204      	movs	r2, #4
 8010cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	69db      	ldr	r3, [r3, #28]
 8010cba:	f003 0303 	and.w	r3, r3, #3
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d003      	beq.n	8010cca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010cc2:	6878      	ldr	r0, [r7, #4]
 8010cc4:	f000 f9c2 	bl	801104c <HAL_TIM_IC_CaptureCallback>
 8010cc8:	e005      	b.n	8010cd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010cca:	6878      	ldr	r0, [r7, #4]
 8010ccc:	f000 f9b4 	bl	8011038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010cd0:	6878      	ldr	r0, [r7, #4]
 8010cd2:	f000 f9c5 	bl	8011060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	2200      	movs	r2, #0
 8010cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	691b      	ldr	r3, [r3, #16]
 8010ce2:	f003 0310 	and.w	r3, r3, #16
 8010ce6:	2b10      	cmp	r3, #16
 8010ce8:	d122      	bne.n	8010d30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	68db      	ldr	r3, [r3, #12]
 8010cf0:	f003 0310 	and.w	r3, r3, #16
 8010cf4:	2b10      	cmp	r3, #16
 8010cf6:	d11b      	bne.n	8010d30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	f06f 0210 	mvn.w	r2, #16
 8010d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	2208      	movs	r2, #8
 8010d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	69db      	ldr	r3, [r3, #28]
 8010d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d003      	beq.n	8010d1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010d16:	6878      	ldr	r0, [r7, #4]
 8010d18:	f000 f998 	bl	801104c <HAL_TIM_IC_CaptureCallback>
 8010d1c:	e005      	b.n	8010d2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010d1e:	6878      	ldr	r0, [r7, #4]
 8010d20:	f000 f98a 	bl	8011038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010d24:	6878      	ldr	r0, [r7, #4]
 8010d26:	f000 f99b 	bl	8011060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	691b      	ldr	r3, [r3, #16]
 8010d36:	f003 0301 	and.w	r3, r3, #1
 8010d3a:	2b01      	cmp	r3, #1
 8010d3c:	d10e      	bne.n	8010d5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	68db      	ldr	r3, [r3, #12]
 8010d44:	f003 0301 	and.w	r3, r3, #1
 8010d48:	2b01      	cmp	r3, #1
 8010d4a:	d107      	bne.n	8010d5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	f06f 0201 	mvn.w	r2, #1
 8010d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010d56:	6878      	ldr	r0, [r7, #4]
 8010d58:	f7f1 f9e8 	bl	800212c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	691b      	ldr	r3, [r3, #16]
 8010d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d66:	2b80      	cmp	r3, #128	; 0x80
 8010d68:	d10e      	bne.n	8010d88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	68db      	ldr	r3, [r3, #12]
 8010d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d74:	2b80      	cmp	r3, #128	; 0x80
 8010d76:	d107      	bne.n	8010d88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010d82:	6878      	ldr	r0, [r7, #4]
 8010d84:	f000 fda8 	bl	80118d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	691b      	ldr	r3, [r3, #16]
 8010d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010d96:	d10e      	bne.n	8010db6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	68db      	ldr	r3, [r3, #12]
 8010d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010da2:	2b80      	cmp	r3, #128	; 0x80
 8010da4:	d107      	bne.n	8010db6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010dae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010db0:	6878      	ldr	r0, [r7, #4]
 8010db2:	f000 fd9b 	bl	80118ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	691b      	ldr	r3, [r3, #16]
 8010dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010dc0:	2b40      	cmp	r3, #64	; 0x40
 8010dc2:	d10e      	bne.n	8010de2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	68db      	ldr	r3, [r3, #12]
 8010dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010dce:	2b40      	cmp	r3, #64	; 0x40
 8010dd0:	d107      	bne.n	8010de2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010ddc:	6878      	ldr	r0, [r7, #4]
 8010dde:	f000 f949 	bl	8011074 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	691b      	ldr	r3, [r3, #16]
 8010de8:	f003 0320 	and.w	r3, r3, #32
 8010dec:	2b20      	cmp	r3, #32
 8010dee:	d10e      	bne.n	8010e0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	68db      	ldr	r3, [r3, #12]
 8010df6:	f003 0320 	and.w	r3, r3, #32
 8010dfa:	2b20      	cmp	r3, #32
 8010dfc:	d107      	bne.n	8010e0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	f06f 0220 	mvn.w	r2, #32
 8010e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010e08:	6878      	ldr	r0, [r7, #4]
 8010e0a:	f000 fd5b 	bl	80118c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010e0e:	bf00      	nop
 8010e10:	3708      	adds	r7, #8
 8010e12:	46bd      	mov	sp, r7
 8010e14:	bd80      	pop	{r7, pc}
	...

08010e18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b084      	sub	sp, #16
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	60f8      	str	r0, [r7, #12]
 8010e20:	60b9      	str	r1, [r7, #8]
 8010e22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010e2a:	2b01      	cmp	r3, #1
 8010e2c:	d101      	bne.n	8010e32 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8010e2e:	2302      	movs	r3, #2
 8010e30:	e0fd      	b.n	801102e <HAL_TIM_PWM_ConfigChannel+0x216>
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	2201      	movs	r2, #1
 8010e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	2b14      	cmp	r3, #20
 8010e3e:	f200 80f0 	bhi.w	8011022 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8010e42:	a201      	add	r2, pc, #4	; (adr r2, 8010e48 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8010e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e48:	08010e9d 	.word	0x08010e9d
 8010e4c:	08011023 	.word	0x08011023
 8010e50:	08011023 	.word	0x08011023
 8010e54:	08011023 	.word	0x08011023
 8010e58:	08010edd 	.word	0x08010edd
 8010e5c:	08011023 	.word	0x08011023
 8010e60:	08011023 	.word	0x08011023
 8010e64:	08011023 	.word	0x08011023
 8010e68:	08010f1f 	.word	0x08010f1f
 8010e6c:	08011023 	.word	0x08011023
 8010e70:	08011023 	.word	0x08011023
 8010e74:	08011023 	.word	0x08011023
 8010e78:	08010f5f 	.word	0x08010f5f
 8010e7c:	08011023 	.word	0x08011023
 8010e80:	08011023 	.word	0x08011023
 8010e84:	08011023 	.word	0x08011023
 8010e88:	08010fa1 	.word	0x08010fa1
 8010e8c:	08011023 	.word	0x08011023
 8010e90:	08011023 	.word	0x08011023
 8010e94:	08011023 	.word	0x08011023
 8010e98:	08010fe1 	.word	0x08010fe1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	68b9      	ldr	r1, [r7, #8]
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f000 f98a 	bl	80111bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	699a      	ldr	r2, [r3, #24]
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	f042 0208 	orr.w	r2, r2, #8
 8010eb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	699a      	ldr	r2, [r3, #24]
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	f022 0204 	bic.w	r2, r2, #4
 8010ec6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	6999      	ldr	r1, [r3, #24]
 8010ece:	68bb      	ldr	r3, [r7, #8]
 8010ed0:	691a      	ldr	r2, [r3, #16]
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	430a      	orrs	r2, r1
 8010ed8:	619a      	str	r2, [r3, #24]
      break;
 8010eda:	e0a3      	b.n	8011024 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	68b9      	ldr	r1, [r7, #8]
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	f000 f9fa 	bl	80112dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	699a      	ldr	r2, [r3, #24]
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010ef6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	699a      	ldr	r2, [r3, #24]
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010f06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	6999      	ldr	r1, [r3, #24]
 8010f0e:	68bb      	ldr	r3, [r7, #8]
 8010f10:	691b      	ldr	r3, [r3, #16]
 8010f12:	021a      	lsls	r2, r3, #8
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	430a      	orrs	r2, r1
 8010f1a:	619a      	str	r2, [r3, #24]
      break;
 8010f1c:	e082      	b.n	8011024 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	68b9      	ldr	r1, [r7, #8]
 8010f24:	4618      	mov	r0, r3
 8010f26:	f000 fa63 	bl	80113f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	69da      	ldr	r2, [r3, #28]
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	f042 0208 	orr.w	r2, r2, #8
 8010f38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	69da      	ldr	r2, [r3, #28]
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	f022 0204 	bic.w	r2, r2, #4
 8010f48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	69d9      	ldr	r1, [r3, #28]
 8010f50:	68bb      	ldr	r3, [r7, #8]
 8010f52:	691a      	ldr	r2, [r3, #16]
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	430a      	orrs	r2, r1
 8010f5a:	61da      	str	r2, [r3, #28]
      break;
 8010f5c:	e062      	b.n	8011024 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	68b9      	ldr	r1, [r7, #8]
 8010f64:	4618      	mov	r0, r3
 8010f66:	f000 facb 	bl	8011500 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	69da      	ldr	r2, [r3, #28]
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010f78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	69da      	ldr	r2, [r3, #28]
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010f88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	69d9      	ldr	r1, [r3, #28]
 8010f90:	68bb      	ldr	r3, [r7, #8]
 8010f92:	691b      	ldr	r3, [r3, #16]
 8010f94:	021a      	lsls	r2, r3, #8
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	430a      	orrs	r2, r1
 8010f9c:	61da      	str	r2, [r3, #28]
      break;
 8010f9e:	e041      	b.n	8011024 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	68b9      	ldr	r1, [r7, #8]
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f000 fb14 	bl	80115d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	f042 0208 	orr.w	r2, r2, #8
 8010fba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	f022 0204 	bic.w	r2, r2, #4
 8010fca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010fd2:	68bb      	ldr	r3, [r7, #8]
 8010fd4:	691a      	ldr	r2, [r3, #16]
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	430a      	orrs	r2, r1
 8010fdc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010fde:	e021      	b.n	8011024 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	68b9      	ldr	r1, [r7, #8]
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	f000 fb58 	bl	801169c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010ffa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801100a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011012:	68bb      	ldr	r3, [r7, #8]
 8011014:	691b      	ldr	r3, [r3, #16]
 8011016:	021a      	lsls	r2, r3, #8
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	430a      	orrs	r2, r1
 801101e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8011020:	e000      	b.n	8011024 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8011022:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	2200      	movs	r2, #0
 8011028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801102c:	2300      	movs	r3, #0
}
 801102e:	4618      	mov	r0, r3
 8011030:	3710      	adds	r7, #16
 8011032:	46bd      	mov	sp, r7
 8011034:	bd80      	pop	{r7, pc}
 8011036:	bf00      	nop

08011038 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011038:	b480      	push	{r7}
 801103a:	b083      	sub	sp, #12
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011040:	bf00      	nop
 8011042:	370c      	adds	r7, #12
 8011044:	46bd      	mov	sp, r7
 8011046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104a:	4770      	bx	lr

0801104c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801104c:	b480      	push	{r7}
 801104e:	b083      	sub	sp, #12
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8011054:	bf00      	nop
 8011056:	370c      	adds	r7, #12
 8011058:	46bd      	mov	sp, r7
 801105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105e:	4770      	bx	lr

08011060 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8011060:	b480      	push	{r7}
 8011062:	b083      	sub	sp, #12
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011068:	bf00      	nop
 801106a:	370c      	adds	r7, #12
 801106c:	46bd      	mov	sp, r7
 801106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011072:	4770      	bx	lr

08011074 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011074:	b480      	push	{r7}
 8011076:	b083      	sub	sp, #12
 8011078:	af00      	add	r7, sp, #0
 801107a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801107c:	bf00      	nop
 801107e:	370c      	adds	r7, #12
 8011080:	46bd      	mov	sp, r7
 8011082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011086:	4770      	bx	lr

08011088 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8011088:	b480      	push	{r7}
 801108a:	b085      	sub	sp, #20
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
 8011090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	4a40      	ldr	r2, [pc, #256]	; (801119c <TIM_Base_SetConfig+0x114>)
 801109c:	4293      	cmp	r3, r2
 801109e:	d013      	beq.n	80110c8 <TIM_Base_SetConfig+0x40>
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80110a6:	d00f      	beq.n	80110c8 <TIM_Base_SetConfig+0x40>
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	4a3d      	ldr	r2, [pc, #244]	; (80111a0 <TIM_Base_SetConfig+0x118>)
 80110ac:	4293      	cmp	r3, r2
 80110ae:	d00b      	beq.n	80110c8 <TIM_Base_SetConfig+0x40>
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	4a3c      	ldr	r2, [pc, #240]	; (80111a4 <TIM_Base_SetConfig+0x11c>)
 80110b4:	4293      	cmp	r3, r2
 80110b6:	d007      	beq.n	80110c8 <TIM_Base_SetConfig+0x40>
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	4a3b      	ldr	r2, [pc, #236]	; (80111a8 <TIM_Base_SetConfig+0x120>)
 80110bc:	4293      	cmp	r3, r2
 80110be:	d003      	beq.n	80110c8 <TIM_Base_SetConfig+0x40>
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	4a3a      	ldr	r2, [pc, #232]	; (80111ac <TIM_Base_SetConfig+0x124>)
 80110c4:	4293      	cmp	r3, r2
 80110c6:	d108      	bne.n	80110da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80110ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80110d0:	683b      	ldr	r3, [r7, #0]
 80110d2:	685b      	ldr	r3, [r3, #4]
 80110d4:	68fa      	ldr	r2, [r7, #12]
 80110d6:	4313      	orrs	r3, r2
 80110d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	4a2f      	ldr	r2, [pc, #188]	; (801119c <TIM_Base_SetConfig+0x114>)
 80110de:	4293      	cmp	r3, r2
 80110e0:	d01f      	beq.n	8011122 <TIM_Base_SetConfig+0x9a>
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80110e8:	d01b      	beq.n	8011122 <TIM_Base_SetConfig+0x9a>
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	4a2c      	ldr	r2, [pc, #176]	; (80111a0 <TIM_Base_SetConfig+0x118>)
 80110ee:	4293      	cmp	r3, r2
 80110f0:	d017      	beq.n	8011122 <TIM_Base_SetConfig+0x9a>
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	4a2b      	ldr	r2, [pc, #172]	; (80111a4 <TIM_Base_SetConfig+0x11c>)
 80110f6:	4293      	cmp	r3, r2
 80110f8:	d013      	beq.n	8011122 <TIM_Base_SetConfig+0x9a>
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	4a2a      	ldr	r2, [pc, #168]	; (80111a8 <TIM_Base_SetConfig+0x120>)
 80110fe:	4293      	cmp	r3, r2
 8011100:	d00f      	beq.n	8011122 <TIM_Base_SetConfig+0x9a>
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	4a29      	ldr	r2, [pc, #164]	; (80111ac <TIM_Base_SetConfig+0x124>)
 8011106:	4293      	cmp	r3, r2
 8011108:	d00b      	beq.n	8011122 <TIM_Base_SetConfig+0x9a>
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	4a28      	ldr	r2, [pc, #160]	; (80111b0 <TIM_Base_SetConfig+0x128>)
 801110e:	4293      	cmp	r3, r2
 8011110:	d007      	beq.n	8011122 <TIM_Base_SetConfig+0x9a>
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	4a27      	ldr	r2, [pc, #156]	; (80111b4 <TIM_Base_SetConfig+0x12c>)
 8011116:	4293      	cmp	r3, r2
 8011118:	d003      	beq.n	8011122 <TIM_Base_SetConfig+0x9a>
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	4a26      	ldr	r2, [pc, #152]	; (80111b8 <TIM_Base_SetConfig+0x130>)
 801111e:	4293      	cmp	r3, r2
 8011120:	d108      	bne.n	8011134 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801112a:	683b      	ldr	r3, [r7, #0]
 801112c:	68db      	ldr	r3, [r3, #12]
 801112e:	68fa      	ldr	r2, [r7, #12]
 8011130:	4313      	orrs	r3, r2
 8011132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801113a:	683b      	ldr	r3, [r7, #0]
 801113c:	695b      	ldr	r3, [r3, #20]
 801113e:	4313      	orrs	r3, r2
 8011140:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	68fa      	ldr	r2, [r7, #12]
 8011146:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011148:	683b      	ldr	r3, [r7, #0]
 801114a:	689a      	ldr	r2, [r3, #8]
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011150:	683b      	ldr	r3, [r7, #0]
 8011152:	681a      	ldr	r2, [r3, #0]
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	4a10      	ldr	r2, [pc, #64]	; (801119c <TIM_Base_SetConfig+0x114>)
 801115c:	4293      	cmp	r3, r2
 801115e:	d00f      	beq.n	8011180 <TIM_Base_SetConfig+0xf8>
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	4a12      	ldr	r2, [pc, #72]	; (80111ac <TIM_Base_SetConfig+0x124>)
 8011164:	4293      	cmp	r3, r2
 8011166:	d00b      	beq.n	8011180 <TIM_Base_SetConfig+0xf8>
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	4a11      	ldr	r2, [pc, #68]	; (80111b0 <TIM_Base_SetConfig+0x128>)
 801116c:	4293      	cmp	r3, r2
 801116e:	d007      	beq.n	8011180 <TIM_Base_SetConfig+0xf8>
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	4a10      	ldr	r2, [pc, #64]	; (80111b4 <TIM_Base_SetConfig+0x12c>)
 8011174:	4293      	cmp	r3, r2
 8011176:	d003      	beq.n	8011180 <TIM_Base_SetConfig+0xf8>
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	4a0f      	ldr	r2, [pc, #60]	; (80111b8 <TIM_Base_SetConfig+0x130>)
 801117c:	4293      	cmp	r3, r2
 801117e:	d103      	bne.n	8011188 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	691a      	ldr	r2, [r3, #16]
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	2201      	movs	r2, #1
 801118c:	615a      	str	r2, [r3, #20]
}
 801118e:	bf00      	nop
 8011190:	3714      	adds	r7, #20
 8011192:	46bd      	mov	sp, r7
 8011194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011198:	4770      	bx	lr
 801119a:	bf00      	nop
 801119c:	40012c00 	.word	0x40012c00
 80111a0:	40000400 	.word	0x40000400
 80111a4:	40000800 	.word	0x40000800
 80111a8:	40000c00 	.word	0x40000c00
 80111ac:	40013400 	.word	0x40013400
 80111b0:	40014000 	.word	0x40014000
 80111b4:	40014400 	.word	0x40014400
 80111b8:	40014800 	.word	0x40014800

080111bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80111bc:	b480      	push	{r7}
 80111be:	b087      	sub	sp, #28
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
 80111c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	6a1b      	ldr	r3, [r3, #32]
 80111ca:	f023 0201 	bic.w	r2, r3, #1
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	6a1b      	ldr	r3, [r3, #32]
 80111d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	685b      	ldr	r3, [r3, #4]
 80111dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	699b      	ldr	r3, [r3, #24]
 80111e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80111ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80111ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	f023 0303 	bic.w	r3, r3, #3
 80111f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80111f8:	683b      	ldr	r3, [r7, #0]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	68fa      	ldr	r2, [r7, #12]
 80111fe:	4313      	orrs	r3, r2
 8011200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011202:	697b      	ldr	r3, [r7, #20]
 8011204:	f023 0302 	bic.w	r3, r3, #2
 8011208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801120a:	683b      	ldr	r3, [r7, #0]
 801120c:	689b      	ldr	r3, [r3, #8]
 801120e:	697a      	ldr	r2, [r7, #20]
 8011210:	4313      	orrs	r3, r2
 8011212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	4a2c      	ldr	r2, [pc, #176]	; (80112c8 <TIM_OC1_SetConfig+0x10c>)
 8011218:	4293      	cmp	r3, r2
 801121a:	d00f      	beq.n	801123c <TIM_OC1_SetConfig+0x80>
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	4a2b      	ldr	r2, [pc, #172]	; (80112cc <TIM_OC1_SetConfig+0x110>)
 8011220:	4293      	cmp	r3, r2
 8011222:	d00b      	beq.n	801123c <TIM_OC1_SetConfig+0x80>
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	4a2a      	ldr	r2, [pc, #168]	; (80112d0 <TIM_OC1_SetConfig+0x114>)
 8011228:	4293      	cmp	r3, r2
 801122a:	d007      	beq.n	801123c <TIM_OC1_SetConfig+0x80>
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	4a29      	ldr	r2, [pc, #164]	; (80112d4 <TIM_OC1_SetConfig+0x118>)
 8011230:	4293      	cmp	r3, r2
 8011232:	d003      	beq.n	801123c <TIM_OC1_SetConfig+0x80>
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	4a28      	ldr	r2, [pc, #160]	; (80112d8 <TIM_OC1_SetConfig+0x11c>)
 8011238:	4293      	cmp	r3, r2
 801123a:	d10c      	bne.n	8011256 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801123c:	697b      	ldr	r3, [r7, #20]
 801123e:	f023 0308 	bic.w	r3, r3, #8
 8011242:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011244:	683b      	ldr	r3, [r7, #0]
 8011246:	68db      	ldr	r3, [r3, #12]
 8011248:	697a      	ldr	r2, [r7, #20]
 801124a:	4313      	orrs	r3, r2
 801124c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801124e:	697b      	ldr	r3, [r7, #20]
 8011250:	f023 0304 	bic.w	r3, r3, #4
 8011254:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	4a1b      	ldr	r2, [pc, #108]	; (80112c8 <TIM_OC1_SetConfig+0x10c>)
 801125a:	4293      	cmp	r3, r2
 801125c:	d00f      	beq.n	801127e <TIM_OC1_SetConfig+0xc2>
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	4a1a      	ldr	r2, [pc, #104]	; (80112cc <TIM_OC1_SetConfig+0x110>)
 8011262:	4293      	cmp	r3, r2
 8011264:	d00b      	beq.n	801127e <TIM_OC1_SetConfig+0xc2>
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	4a19      	ldr	r2, [pc, #100]	; (80112d0 <TIM_OC1_SetConfig+0x114>)
 801126a:	4293      	cmp	r3, r2
 801126c:	d007      	beq.n	801127e <TIM_OC1_SetConfig+0xc2>
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	4a18      	ldr	r2, [pc, #96]	; (80112d4 <TIM_OC1_SetConfig+0x118>)
 8011272:	4293      	cmp	r3, r2
 8011274:	d003      	beq.n	801127e <TIM_OC1_SetConfig+0xc2>
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	4a17      	ldr	r2, [pc, #92]	; (80112d8 <TIM_OC1_SetConfig+0x11c>)
 801127a:	4293      	cmp	r3, r2
 801127c:	d111      	bne.n	80112a2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801127e:	693b      	ldr	r3, [r7, #16]
 8011280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011284:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8011286:	693b      	ldr	r3, [r7, #16]
 8011288:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801128c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801128e:	683b      	ldr	r3, [r7, #0]
 8011290:	695b      	ldr	r3, [r3, #20]
 8011292:	693a      	ldr	r2, [r7, #16]
 8011294:	4313      	orrs	r3, r2
 8011296:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011298:	683b      	ldr	r3, [r7, #0]
 801129a:	699b      	ldr	r3, [r3, #24]
 801129c:	693a      	ldr	r2, [r7, #16]
 801129e:	4313      	orrs	r3, r2
 80112a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	693a      	ldr	r2, [r7, #16]
 80112a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	68fa      	ldr	r2, [r7, #12]
 80112ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80112ae:	683b      	ldr	r3, [r7, #0]
 80112b0:	685a      	ldr	r2, [r3, #4]
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	697a      	ldr	r2, [r7, #20]
 80112ba:	621a      	str	r2, [r3, #32]
}
 80112bc:	bf00      	nop
 80112be:	371c      	adds	r7, #28
 80112c0:	46bd      	mov	sp, r7
 80112c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c6:	4770      	bx	lr
 80112c8:	40012c00 	.word	0x40012c00
 80112cc:	40013400 	.word	0x40013400
 80112d0:	40014000 	.word	0x40014000
 80112d4:	40014400 	.word	0x40014400
 80112d8:	40014800 	.word	0x40014800

080112dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80112dc:	b480      	push	{r7}
 80112de:	b087      	sub	sp, #28
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]
 80112e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	6a1b      	ldr	r3, [r3, #32]
 80112ea:	f023 0210 	bic.w	r2, r3, #16
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	6a1b      	ldr	r3, [r3, #32]
 80112f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	685b      	ldr	r3, [r3, #4]
 80112fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	699b      	ldr	r3, [r3, #24]
 8011302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801130a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801130e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011318:	683b      	ldr	r3, [r7, #0]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	021b      	lsls	r3, r3, #8
 801131e:	68fa      	ldr	r2, [r7, #12]
 8011320:	4313      	orrs	r3, r2
 8011322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011324:	697b      	ldr	r3, [r7, #20]
 8011326:	f023 0320 	bic.w	r3, r3, #32
 801132a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801132c:	683b      	ldr	r3, [r7, #0]
 801132e:	689b      	ldr	r3, [r3, #8]
 8011330:	011b      	lsls	r3, r3, #4
 8011332:	697a      	ldr	r2, [r7, #20]
 8011334:	4313      	orrs	r3, r2
 8011336:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	4a28      	ldr	r2, [pc, #160]	; (80113dc <TIM_OC2_SetConfig+0x100>)
 801133c:	4293      	cmp	r3, r2
 801133e:	d003      	beq.n	8011348 <TIM_OC2_SetConfig+0x6c>
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	4a27      	ldr	r2, [pc, #156]	; (80113e0 <TIM_OC2_SetConfig+0x104>)
 8011344:	4293      	cmp	r3, r2
 8011346:	d10d      	bne.n	8011364 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011348:	697b      	ldr	r3, [r7, #20]
 801134a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801134e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011350:	683b      	ldr	r3, [r7, #0]
 8011352:	68db      	ldr	r3, [r3, #12]
 8011354:	011b      	lsls	r3, r3, #4
 8011356:	697a      	ldr	r2, [r7, #20]
 8011358:	4313      	orrs	r3, r2
 801135a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801135c:	697b      	ldr	r3, [r7, #20]
 801135e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011362:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	4a1d      	ldr	r2, [pc, #116]	; (80113dc <TIM_OC2_SetConfig+0x100>)
 8011368:	4293      	cmp	r3, r2
 801136a:	d00f      	beq.n	801138c <TIM_OC2_SetConfig+0xb0>
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	4a1c      	ldr	r2, [pc, #112]	; (80113e0 <TIM_OC2_SetConfig+0x104>)
 8011370:	4293      	cmp	r3, r2
 8011372:	d00b      	beq.n	801138c <TIM_OC2_SetConfig+0xb0>
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	4a1b      	ldr	r2, [pc, #108]	; (80113e4 <TIM_OC2_SetConfig+0x108>)
 8011378:	4293      	cmp	r3, r2
 801137a:	d007      	beq.n	801138c <TIM_OC2_SetConfig+0xb0>
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	4a1a      	ldr	r2, [pc, #104]	; (80113e8 <TIM_OC2_SetConfig+0x10c>)
 8011380:	4293      	cmp	r3, r2
 8011382:	d003      	beq.n	801138c <TIM_OC2_SetConfig+0xb0>
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	4a19      	ldr	r2, [pc, #100]	; (80113ec <TIM_OC2_SetConfig+0x110>)
 8011388:	4293      	cmp	r3, r2
 801138a:	d113      	bne.n	80113b4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801138c:	693b      	ldr	r3, [r7, #16]
 801138e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011392:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011394:	693b      	ldr	r3, [r7, #16]
 8011396:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801139a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801139c:	683b      	ldr	r3, [r7, #0]
 801139e:	695b      	ldr	r3, [r3, #20]
 80113a0:	009b      	lsls	r3, r3, #2
 80113a2:	693a      	ldr	r2, [r7, #16]
 80113a4:	4313      	orrs	r3, r2
 80113a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80113a8:	683b      	ldr	r3, [r7, #0]
 80113aa:	699b      	ldr	r3, [r3, #24]
 80113ac:	009b      	lsls	r3, r3, #2
 80113ae:	693a      	ldr	r2, [r7, #16]
 80113b0:	4313      	orrs	r3, r2
 80113b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	693a      	ldr	r2, [r7, #16]
 80113b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	68fa      	ldr	r2, [r7, #12]
 80113be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	685a      	ldr	r2, [r3, #4]
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	697a      	ldr	r2, [r7, #20]
 80113cc:	621a      	str	r2, [r3, #32]
}
 80113ce:	bf00      	nop
 80113d0:	371c      	adds	r7, #28
 80113d2:	46bd      	mov	sp, r7
 80113d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d8:	4770      	bx	lr
 80113da:	bf00      	nop
 80113dc:	40012c00 	.word	0x40012c00
 80113e0:	40013400 	.word	0x40013400
 80113e4:	40014000 	.word	0x40014000
 80113e8:	40014400 	.word	0x40014400
 80113ec:	40014800 	.word	0x40014800

080113f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80113f0:	b480      	push	{r7}
 80113f2:	b087      	sub	sp, #28
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
 80113f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	6a1b      	ldr	r3, [r3, #32]
 80113fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	6a1b      	ldr	r3, [r3, #32]
 801140a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	685b      	ldr	r3, [r3, #4]
 8011410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	69db      	ldr	r3, [r3, #28]
 8011416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801141e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	f023 0303 	bic.w	r3, r3, #3
 801142a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801142c:	683b      	ldr	r3, [r7, #0]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	68fa      	ldr	r2, [r7, #12]
 8011432:	4313      	orrs	r3, r2
 8011434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011436:	697b      	ldr	r3, [r7, #20]
 8011438:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801143c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	689b      	ldr	r3, [r3, #8]
 8011442:	021b      	lsls	r3, r3, #8
 8011444:	697a      	ldr	r2, [r7, #20]
 8011446:	4313      	orrs	r3, r2
 8011448:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	4a27      	ldr	r2, [pc, #156]	; (80114ec <TIM_OC3_SetConfig+0xfc>)
 801144e:	4293      	cmp	r3, r2
 8011450:	d003      	beq.n	801145a <TIM_OC3_SetConfig+0x6a>
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	4a26      	ldr	r2, [pc, #152]	; (80114f0 <TIM_OC3_SetConfig+0x100>)
 8011456:	4293      	cmp	r3, r2
 8011458:	d10d      	bne.n	8011476 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801145a:	697b      	ldr	r3, [r7, #20]
 801145c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011460:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	68db      	ldr	r3, [r3, #12]
 8011466:	021b      	lsls	r3, r3, #8
 8011468:	697a      	ldr	r2, [r7, #20]
 801146a:	4313      	orrs	r3, r2
 801146c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801146e:	697b      	ldr	r3, [r7, #20]
 8011470:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011474:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	4a1c      	ldr	r2, [pc, #112]	; (80114ec <TIM_OC3_SetConfig+0xfc>)
 801147a:	4293      	cmp	r3, r2
 801147c:	d00f      	beq.n	801149e <TIM_OC3_SetConfig+0xae>
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	4a1b      	ldr	r2, [pc, #108]	; (80114f0 <TIM_OC3_SetConfig+0x100>)
 8011482:	4293      	cmp	r3, r2
 8011484:	d00b      	beq.n	801149e <TIM_OC3_SetConfig+0xae>
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	4a1a      	ldr	r2, [pc, #104]	; (80114f4 <TIM_OC3_SetConfig+0x104>)
 801148a:	4293      	cmp	r3, r2
 801148c:	d007      	beq.n	801149e <TIM_OC3_SetConfig+0xae>
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	4a19      	ldr	r2, [pc, #100]	; (80114f8 <TIM_OC3_SetConfig+0x108>)
 8011492:	4293      	cmp	r3, r2
 8011494:	d003      	beq.n	801149e <TIM_OC3_SetConfig+0xae>
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	4a18      	ldr	r2, [pc, #96]	; (80114fc <TIM_OC3_SetConfig+0x10c>)
 801149a:	4293      	cmp	r3, r2
 801149c:	d113      	bne.n	80114c6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801149e:	693b      	ldr	r3, [r7, #16]
 80114a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80114a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80114a6:	693b      	ldr	r3, [r7, #16]
 80114a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80114ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80114ae:	683b      	ldr	r3, [r7, #0]
 80114b0:	695b      	ldr	r3, [r3, #20]
 80114b2:	011b      	lsls	r3, r3, #4
 80114b4:	693a      	ldr	r2, [r7, #16]
 80114b6:	4313      	orrs	r3, r2
 80114b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80114ba:	683b      	ldr	r3, [r7, #0]
 80114bc:	699b      	ldr	r3, [r3, #24]
 80114be:	011b      	lsls	r3, r3, #4
 80114c0:	693a      	ldr	r2, [r7, #16]
 80114c2:	4313      	orrs	r3, r2
 80114c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	693a      	ldr	r2, [r7, #16]
 80114ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	68fa      	ldr	r2, [r7, #12]
 80114d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80114d2:	683b      	ldr	r3, [r7, #0]
 80114d4:	685a      	ldr	r2, [r3, #4]
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	697a      	ldr	r2, [r7, #20]
 80114de:	621a      	str	r2, [r3, #32]
}
 80114e0:	bf00      	nop
 80114e2:	371c      	adds	r7, #28
 80114e4:	46bd      	mov	sp, r7
 80114e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ea:	4770      	bx	lr
 80114ec:	40012c00 	.word	0x40012c00
 80114f0:	40013400 	.word	0x40013400
 80114f4:	40014000 	.word	0x40014000
 80114f8:	40014400 	.word	0x40014400
 80114fc:	40014800 	.word	0x40014800

08011500 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011500:	b480      	push	{r7}
 8011502:	b087      	sub	sp, #28
 8011504:	af00      	add	r7, sp, #0
 8011506:	6078      	str	r0, [r7, #4]
 8011508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	6a1b      	ldr	r3, [r3, #32]
 801150e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	6a1b      	ldr	r3, [r3, #32]
 801151a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	685b      	ldr	r3, [r3, #4]
 8011520:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	69db      	ldr	r3, [r3, #28]
 8011526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801152e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801153a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801153c:	683b      	ldr	r3, [r7, #0]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	021b      	lsls	r3, r3, #8
 8011542:	68fa      	ldr	r2, [r7, #12]
 8011544:	4313      	orrs	r3, r2
 8011546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011548:	693b      	ldr	r3, [r7, #16]
 801154a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801154e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011550:	683b      	ldr	r3, [r7, #0]
 8011552:	689b      	ldr	r3, [r3, #8]
 8011554:	031b      	lsls	r3, r3, #12
 8011556:	693a      	ldr	r2, [r7, #16]
 8011558:	4313      	orrs	r3, r2
 801155a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	4a18      	ldr	r2, [pc, #96]	; (80115c0 <TIM_OC4_SetConfig+0xc0>)
 8011560:	4293      	cmp	r3, r2
 8011562:	d00f      	beq.n	8011584 <TIM_OC4_SetConfig+0x84>
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	4a17      	ldr	r2, [pc, #92]	; (80115c4 <TIM_OC4_SetConfig+0xc4>)
 8011568:	4293      	cmp	r3, r2
 801156a:	d00b      	beq.n	8011584 <TIM_OC4_SetConfig+0x84>
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	4a16      	ldr	r2, [pc, #88]	; (80115c8 <TIM_OC4_SetConfig+0xc8>)
 8011570:	4293      	cmp	r3, r2
 8011572:	d007      	beq.n	8011584 <TIM_OC4_SetConfig+0x84>
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	4a15      	ldr	r2, [pc, #84]	; (80115cc <TIM_OC4_SetConfig+0xcc>)
 8011578:	4293      	cmp	r3, r2
 801157a:	d003      	beq.n	8011584 <TIM_OC4_SetConfig+0x84>
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	4a14      	ldr	r2, [pc, #80]	; (80115d0 <TIM_OC4_SetConfig+0xd0>)
 8011580:	4293      	cmp	r3, r2
 8011582:	d109      	bne.n	8011598 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011584:	697b      	ldr	r3, [r7, #20]
 8011586:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801158a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801158c:	683b      	ldr	r3, [r7, #0]
 801158e:	695b      	ldr	r3, [r3, #20]
 8011590:	019b      	lsls	r3, r3, #6
 8011592:	697a      	ldr	r2, [r7, #20]
 8011594:	4313      	orrs	r3, r2
 8011596:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	697a      	ldr	r2, [r7, #20]
 801159c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	68fa      	ldr	r2, [r7, #12]
 80115a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80115a4:	683b      	ldr	r3, [r7, #0]
 80115a6:	685a      	ldr	r2, [r3, #4]
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	693a      	ldr	r2, [r7, #16]
 80115b0:	621a      	str	r2, [r3, #32]
}
 80115b2:	bf00      	nop
 80115b4:	371c      	adds	r7, #28
 80115b6:	46bd      	mov	sp, r7
 80115b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115bc:	4770      	bx	lr
 80115be:	bf00      	nop
 80115c0:	40012c00 	.word	0x40012c00
 80115c4:	40013400 	.word	0x40013400
 80115c8:	40014000 	.word	0x40014000
 80115cc:	40014400 	.word	0x40014400
 80115d0:	40014800 	.word	0x40014800

080115d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80115d4:	b480      	push	{r7}
 80115d6:	b087      	sub	sp, #28
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
 80115dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	6a1b      	ldr	r3, [r3, #32]
 80115e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	6a1b      	ldr	r3, [r3, #32]
 80115ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	685b      	ldr	r3, [r3, #4]
 80115f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80115fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011608:	683b      	ldr	r3, [r7, #0]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	68fa      	ldr	r2, [r7, #12]
 801160e:	4313      	orrs	r3, r2
 8011610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011612:	693b      	ldr	r3, [r7, #16]
 8011614:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8011618:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801161a:	683b      	ldr	r3, [r7, #0]
 801161c:	689b      	ldr	r3, [r3, #8]
 801161e:	041b      	lsls	r3, r3, #16
 8011620:	693a      	ldr	r2, [r7, #16]
 8011622:	4313      	orrs	r3, r2
 8011624:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	4a17      	ldr	r2, [pc, #92]	; (8011688 <TIM_OC5_SetConfig+0xb4>)
 801162a:	4293      	cmp	r3, r2
 801162c:	d00f      	beq.n	801164e <TIM_OC5_SetConfig+0x7a>
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	4a16      	ldr	r2, [pc, #88]	; (801168c <TIM_OC5_SetConfig+0xb8>)
 8011632:	4293      	cmp	r3, r2
 8011634:	d00b      	beq.n	801164e <TIM_OC5_SetConfig+0x7a>
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	4a15      	ldr	r2, [pc, #84]	; (8011690 <TIM_OC5_SetConfig+0xbc>)
 801163a:	4293      	cmp	r3, r2
 801163c:	d007      	beq.n	801164e <TIM_OC5_SetConfig+0x7a>
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	4a14      	ldr	r2, [pc, #80]	; (8011694 <TIM_OC5_SetConfig+0xc0>)
 8011642:	4293      	cmp	r3, r2
 8011644:	d003      	beq.n	801164e <TIM_OC5_SetConfig+0x7a>
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	4a13      	ldr	r2, [pc, #76]	; (8011698 <TIM_OC5_SetConfig+0xc4>)
 801164a:	4293      	cmp	r3, r2
 801164c:	d109      	bne.n	8011662 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801164e:	697b      	ldr	r3, [r7, #20]
 8011650:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011654:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011656:	683b      	ldr	r3, [r7, #0]
 8011658:	695b      	ldr	r3, [r3, #20]
 801165a:	021b      	lsls	r3, r3, #8
 801165c:	697a      	ldr	r2, [r7, #20]
 801165e:	4313      	orrs	r3, r2
 8011660:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	697a      	ldr	r2, [r7, #20]
 8011666:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	68fa      	ldr	r2, [r7, #12]
 801166c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801166e:	683b      	ldr	r3, [r7, #0]
 8011670:	685a      	ldr	r2, [r3, #4]
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	693a      	ldr	r2, [r7, #16]
 801167a:	621a      	str	r2, [r3, #32]
}
 801167c:	bf00      	nop
 801167e:	371c      	adds	r7, #28
 8011680:	46bd      	mov	sp, r7
 8011682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011686:	4770      	bx	lr
 8011688:	40012c00 	.word	0x40012c00
 801168c:	40013400 	.word	0x40013400
 8011690:	40014000 	.word	0x40014000
 8011694:	40014400 	.word	0x40014400
 8011698:	40014800 	.word	0x40014800

0801169c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801169c:	b480      	push	{r7}
 801169e:	b087      	sub	sp, #28
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	6078      	str	r0, [r7, #4]
 80116a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	6a1b      	ldr	r3, [r3, #32]
 80116aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	6a1b      	ldr	r3, [r3, #32]
 80116b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	685b      	ldr	r3, [r3, #4]
 80116bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80116c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80116ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80116ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80116d0:	683b      	ldr	r3, [r7, #0]
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	021b      	lsls	r3, r3, #8
 80116d6:	68fa      	ldr	r2, [r7, #12]
 80116d8:	4313      	orrs	r3, r2
 80116da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80116dc:	693b      	ldr	r3, [r7, #16]
 80116de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80116e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80116e4:	683b      	ldr	r3, [r7, #0]
 80116e6:	689b      	ldr	r3, [r3, #8]
 80116e8:	051b      	lsls	r3, r3, #20
 80116ea:	693a      	ldr	r2, [r7, #16]
 80116ec:	4313      	orrs	r3, r2
 80116ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	4a18      	ldr	r2, [pc, #96]	; (8011754 <TIM_OC6_SetConfig+0xb8>)
 80116f4:	4293      	cmp	r3, r2
 80116f6:	d00f      	beq.n	8011718 <TIM_OC6_SetConfig+0x7c>
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	4a17      	ldr	r2, [pc, #92]	; (8011758 <TIM_OC6_SetConfig+0xbc>)
 80116fc:	4293      	cmp	r3, r2
 80116fe:	d00b      	beq.n	8011718 <TIM_OC6_SetConfig+0x7c>
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	4a16      	ldr	r2, [pc, #88]	; (801175c <TIM_OC6_SetConfig+0xc0>)
 8011704:	4293      	cmp	r3, r2
 8011706:	d007      	beq.n	8011718 <TIM_OC6_SetConfig+0x7c>
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	4a15      	ldr	r2, [pc, #84]	; (8011760 <TIM_OC6_SetConfig+0xc4>)
 801170c:	4293      	cmp	r3, r2
 801170e:	d003      	beq.n	8011718 <TIM_OC6_SetConfig+0x7c>
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	4a14      	ldr	r2, [pc, #80]	; (8011764 <TIM_OC6_SetConfig+0xc8>)
 8011714:	4293      	cmp	r3, r2
 8011716:	d109      	bne.n	801172c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011718:	697b      	ldr	r3, [r7, #20]
 801171a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801171e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011720:	683b      	ldr	r3, [r7, #0]
 8011722:	695b      	ldr	r3, [r3, #20]
 8011724:	029b      	lsls	r3, r3, #10
 8011726:	697a      	ldr	r2, [r7, #20]
 8011728:	4313      	orrs	r3, r2
 801172a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	697a      	ldr	r2, [r7, #20]
 8011730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	68fa      	ldr	r2, [r7, #12]
 8011736:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011738:	683b      	ldr	r3, [r7, #0]
 801173a:	685a      	ldr	r2, [r3, #4]
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	693a      	ldr	r2, [r7, #16]
 8011744:	621a      	str	r2, [r3, #32]
}
 8011746:	bf00      	nop
 8011748:	371c      	adds	r7, #28
 801174a:	46bd      	mov	sp, r7
 801174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011750:	4770      	bx	lr
 8011752:	bf00      	nop
 8011754:	40012c00 	.word	0x40012c00
 8011758:	40013400 	.word	0x40013400
 801175c:	40014000 	.word	0x40014000
 8011760:	40014400 	.word	0x40014400
 8011764:	40014800 	.word	0x40014800

08011768 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011768:	b480      	push	{r7}
 801176a:	b087      	sub	sp, #28
 801176c:	af00      	add	r7, sp, #0
 801176e:	60f8      	str	r0, [r7, #12]
 8011770:	60b9      	str	r1, [r7, #8]
 8011772:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011774:	68bb      	ldr	r3, [r7, #8]
 8011776:	f003 031f 	and.w	r3, r3, #31
 801177a:	2201      	movs	r2, #1
 801177c:	fa02 f303 	lsl.w	r3, r2, r3
 8011780:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	6a1a      	ldr	r2, [r3, #32]
 8011786:	697b      	ldr	r3, [r7, #20]
 8011788:	43db      	mvns	r3, r3
 801178a:	401a      	ands	r2, r3
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	6a1a      	ldr	r2, [r3, #32]
 8011794:	68bb      	ldr	r3, [r7, #8]
 8011796:	f003 031f 	and.w	r3, r3, #31
 801179a:	6879      	ldr	r1, [r7, #4]
 801179c:	fa01 f303 	lsl.w	r3, r1, r3
 80117a0:	431a      	orrs	r2, r3
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	621a      	str	r2, [r3, #32]
}
 80117a6:	bf00      	nop
 80117a8:	371c      	adds	r7, #28
 80117aa:	46bd      	mov	sp, r7
 80117ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b0:	4770      	bx	lr
	...

080117b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80117b4:	b480      	push	{r7}
 80117b6:	b085      	sub	sp, #20
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
 80117bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80117c4:	2b01      	cmp	r3, #1
 80117c6:	d101      	bne.n	80117cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80117c8:	2302      	movs	r3, #2
 80117ca:	e068      	b.n	801189e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	2201      	movs	r2, #1
 80117d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	2202      	movs	r2, #2
 80117d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	685b      	ldr	r3, [r3, #4]
 80117e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	689b      	ldr	r3, [r3, #8]
 80117ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	4a2e      	ldr	r2, [pc, #184]	; (80118ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80117f2:	4293      	cmp	r3, r2
 80117f4:	d004      	beq.n	8011800 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	4a2d      	ldr	r2, [pc, #180]	; (80118b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80117fc:	4293      	cmp	r3, r2
 80117fe:	d108      	bne.n	8011812 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8011806:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011808:	683b      	ldr	r3, [r7, #0]
 801180a:	685b      	ldr	r3, [r3, #4]
 801180c:	68fa      	ldr	r2, [r7, #12]
 801180e:	4313      	orrs	r3, r2
 8011810:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011818:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801181a:	683b      	ldr	r3, [r7, #0]
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	68fa      	ldr	r2, [r7, #12]
 8011820:	4313      	orrs	r3, r2
 8011822:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	68fa      	ldr	r2, [r7, #12]
 801182a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	4a1e      	ldr	r2, [pc, #120]	; (80118ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8011832:	4293      	cmp	r3, r2
 8011834:	d01d      	beq.n	8011872 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801183e:	d018      	beq.n	8011872 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	4a1b      	ldr	r2, [pc, #108]	; (80118b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8011846:	4293      	cmp	r3, r2
 8011848:	d013      	beq.n	8011872 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	4a1a      	ldr	r2, [pc, #104]	; (80118b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011850:	4293      	cmp	r3, r2
 8011852:	d00e      	beq.n	8011872 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	4a18      	ldr	r2, [pc, #96]	; (80118bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801185a:	4293      	cmp	r3, r2
 801185c:	d009      	beq.n	8011872 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	4a13      	ldr	r2, [pc, #76]	; (80118b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8011864:	4293      	cmp	r3, r2
 8011866:	d004      	beq.n	8011872 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	4a14      	ldr	r2, [pc, #80]	; (80118c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801186e:	4293      	cmp	r3, r2
 8011870:	d10c      	bne.n	801188c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011872:	68bb      	ldr	r3, [r7, #8]
 8011874:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011878:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801187a:	683b      	ldr	r3, [r7, #0]
 801187c:	689b      	ldr	r3, [r3, #8]
 801187e:	68ba      	ldr	r2, [r7, #8]
 8011880:	4313      	orrs	r3, r2
 8011882:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	68ba      	ldr	r2, [r7, #8]
 801188a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	2201      	movs	r2, #1
 8011890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	2200      	movs	r2, #0
 8011898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801189c:	2300      	movs	r3, #0
}
 801189e:	4618      	mov	r0, r3
 80118a0:	3714      	adds	r7, #20
 80118a2:	46bd      	mov	sp, r7
 80118a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a8:	4770      	bx	lr
 80118aa:	bf00      	nop
 80118ac:	40012c00 	.word	0x40012c00
 80118b0:	40013400 	.word	0x40013400
 80118b4:	40000400 	.word	0x40000400
 80118b8:	40000800 	.word	0x40000800
 80118bc:	40000c00 	.word	0x40000c00
 80118c0:	40014000 	.word	0x40014000

080118c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80118c4:	b480      	push	{r7}
 80118c6:	b083      	sub	sp, #12
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80118cc:	bf00      	nop
 80118ce:	370c      	adds	r7, #12
 80118d0:	46bd      	mov	sp, r7
 80118d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d6:	4770      	bx	lr

080118d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80118d8:	b480      	push	{r7}
 80118da:	b083      	sub	sp, #12
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80118e0:	bf00      	nop
 80118e2:	370c      	adds	r7, #12
 80118e4:	46bd      	mov	sp, r7
 80118e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ea:	4770      	bx	lr

080118ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80118ec:	b480      	push	{r7}
 80118ee:	b083      	sub	sp, #12
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80118f4:	bf00      	nop
 80118f6:	370c      	adds	r7, #12
 80118f8:	46bd      	mov	sp, r7
 80118fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fe:	4770      	bx	lr

08011900 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011900:	b580      	push	{r7, lr}
 8011902:	b082      	sub	sp, #8
 8011904:	af00      	add	r7, sp, #0
 8011906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d101      	bne.n	8011912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801190e:	2301      	movs	r3, #1
 8011910:	e040      	b.n	8011994 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011916:	2b00      	cmp	r3, #0
 8011918:	d106      	bne.n	8011928 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	2200      	movs	r2, #0
 801191e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011922:	6878      	ldr	r0, [r7, #4]
 8011924:	f7f0 fef6 	bl	8002714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	2224      	movs	r2, #36	; 0x24
 801192c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	681a      	ldr	r2, [r3, #0]
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	f022 0201 	bic.w	r2, r2, #1
 801193c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801193e:	6878      	ldr	r0, [r7, #4]
 8011940:	f000 f8c0 	bl	8011ac4 <UART_SetConfig>
 8011944:	4603      	mov	r3, r0
 8011946:	2b01      	cmp	r3, #1
 8011948:	d101      	bne.n	801194e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 801194a:	2301      	movs	r3, #1
 801194c:	e022      	b.n	8011994 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011952:	2b00      	cmp	r3, #0
 8011954:	d002      	beq.n	801195c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8011956:	6878      	ldr	r0, [r7, #4]
 8011958:	f000 fb3e 	bl	8011fd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	685a      	ldr	r2, [r3, #4]
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801196a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	689a      	ldr	r2, [r3, #8]
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801197a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	681a      	ldr	r2, [r3, #0]
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	f042 0201 	orr.w	r2, r2, #1
 801198a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801198c:	6878      	ldr	r0, [r7, #4]
 801198e:	f000 fbc5 	bl	801211c <UART_CheckIdleState>
 8011992:	4603      	mov	r3, r0
}
 8011994:	4618      	mov	r0, r3
 8011996:	3708      	adds	r7, #8
 8011998:	46bd      	mov	sp, r7
 801199a:	bd80      	pop	{r7, pc}

0801199c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b08a      	sub	sp, #40	; 0x28
 80119a0:	af02      	add	r7, sp, #8
 80119a2:	60f8      	str	r0, [r7, #12]
 80119a4:	60b9      	str	r1, [r7, #8]
 80119a6:	603b      	str	r3, [r7, #0]
 80119a8:	4613      	mov	r3, r2
 80119aa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80119b0:	2b20      	cmp	r3, #32
 80119b2:	f040 8081 	bne.w	8011ab8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80119b6:	68bb      	ldr	r3, [r7, #8]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d002      	beq.n	80119c2 <HAL_UART_Transmit+0x26>
 80119bc:	88fb      	ldrh	r3, [r7, #6]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d101      	bne.n	80119c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80119c2:	2301      	movs	r3, #1
 80119c4:	e079      	b.n	8011aba <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80119cc:	2b01      	cmp	r3, #1
 80119ce:	d101      	bne.n	80119d4 <HAL_UART_Transmit+0x38>
 80119d0:	2302      	movs	r3, #2
 80119d2:	e072      	b.n	8011aba <HAL_UART_Transmit+0x11e>
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	2201      	movs	r2, #1
 80119d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	2200      	movs	r2, #0
 80119e0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	2221      	movs	r2, #33	; 0x21
 80119e6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80119e8:	f7f8 f9c4 	bl	8009d74 <HAL_GetTick>
 80119ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	88fa      	ldrh	r2, [r7, #6]
 80119f2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	88fa      	ldrh	r2, [r7, #6]
 80119fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	689b      	ldr	r3, [r3, #8]
 8011a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011a06:	d108      	bne.n	8011a1a <HAL_UART_Transmit+0x7e>
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	691b      	ldr	r3, [r3, #16]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d104      	bne.n	8011a1a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8011a10:	2300      	movs	r3, #0
 8011a12:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8011a14:	68bb      	ldr	r3, [r7, #8]
 8011a16:	61bb      	str	r3, [r7, #24]
 8011a18:	e003      	b.n	8011a22 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8011a1a:	68bb      	ldr	r3, [r7, #8]
 8011a1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011a1e:	2300      	movs	r3, #0
 8011a20:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	2200      	movs	r2, #0
 8011a26:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8011a2a:	e02d      	b.n	8011a88 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011a2c:	683b      	ldr	r3, [r7, #0]
 8011a2e:	9300      	str	r3, [sp, #0]
 8011a30:	697b      	ldr	r3, [r7, #20]
 8011a32:	2200      	movs	r2, #0
 8011a34:	2180      	movs	r1, #128	; 0x80
 8011a36:	68f8      	ldr	r0, [r7, #12]
 8011a38:	f000 fbb5 	bl	80121a6 <UART_WaitOnFlagUntilTimeout>
 8011a3c:	4603      	mov	r3, r0
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d001      	beq.n	8011a46 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8011a42:	2303      	movs	r3, #3
 8011a44:	e039      	b.n	8011aba <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8011a46:	69fb      	ldr	r3, [r7, #28]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d10b      	bne.n	8011a64 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011a4c:	69bb      	ldr	r3, [r7, #24]
 8011a4e:	881a      	ldrh	r2, [r3, #0]
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011a58:	b292      	uxth	r2, r2
 8011a5a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8011a5c:	69bb      	ldr	r3, [r7, #24]
 8011a5e:	3302      	adds	r3, #2
 8011a60:	61bb      	str	r3, [r7, #24]
 8011a62:	e008      	b.n	8011a76 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8011a64:	69fb      	ldr	r3, [r7, #28]
 8011a66:	781a      	ldrb	r2, [r3, #0]
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	b292      	uxth	r2, r2
 8011a6e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8011a70:	69fb      	ldr	r3, [r7, #28]
 8011a72:	3301      	adds	r3, #1
 8011a74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011a7c:	b29b      	uxth	r3, r3
 8011a7e:	3b01      	subs	r3, #1
 8011a80:	b29a      	uxth	r2, r3
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011a8e:	b29b      	uxth	r3, r3
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d1cb      	bne.n	8011a2c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011a94:	683b      	ldr	r3, [r7, #0]
 8011a96:	9300      	str	r3, [sp, #0]
 8011a98:	697b      	ldr	r3, [r7, #20]
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	2140      	movs	r1, #64	; 0x40
 8011a9e:	68f8      	ldr	r0, [r7, #12]
 8011aa0:	f000 fb81 	bl	80121a6 <UART_WaitOnFlagUntilTimeout>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d001      	beq.n	8011aae <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8011aaa:	2303      	movs	r3, #3
 8011aac:	e005      	b.n	8011aba <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	2220      	movs	r2, #32
 8011ab2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	e000      	b.n	8011aba <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8011ab8:	2302      	movs	r3, #2
  }
}
 8011aba:	4618      	mov	r0, r3
 8011abc:	3720      	adds	r7, #32
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	bd80      	pop	{r7, pc}
	...

08011ac4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011ac4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8011ac8:	b088      	sub	sp, #32
 8011aca:	af00      	add	r7, sp, #0
 8011acc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	689a      	ldr	r2, [r3, #8]
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	691b      	ldr	r3, [r3, #16]
 8011ada:	431a      	orrs	r2, r3
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	695b      	ldr	r3, [r3, #20]
 8011ae0:	431a      	orrs	r2, r3
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	69db      	ldr	r3, [r3, #28]
 8011ae6:	4313      	orrs	r3, r2
 8011ae8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	681a      	ldr	r2, [r3, #0]
 8011af0:	4bac      	ldr	r3, [pc, #688]	; (8011da4 <UART_SetConfig+0x2e0>)
 8011af2:	4013      	ands	r3, r2
 8011af4:	687a      	ldr	r2, [r7, #4]
 8011af6:	6812      	ldr	r2, [r2, #0]
 8011af8:	69f9      	ldr	r1, [r7, #28]
 8011afa:	430b      	orrs	r3, r1
 8011afc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	685b      	ldr	r3, [r3, #4]
 8011b04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	68da      	ldr	r2, [r3, #12]
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	430a      	orrs	r2, r1
 8011b12:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	699b      	ldr	r3, [r3, #24]
 8011b18:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	4aa2      	ldr	r2, [pc, #648]	; (8011da8 <UART_SetConfig+0x2e4>)
 8011b20:	4293      	cmp	r3, r2
 8011b22:	d004      	beq.n	8011b2e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	6a1b      	ldr	r3, [r3, #32]
 8011b28:	69fa      	ldr	r2, [r7, #28]
 8011b2a:	4313      	orrs	r3, r2
 8011b2c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	689b      	ldr	r3, [r3, #8]
 8011b34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	69fa      	ldr	r2, [r7, #28]
 8011b3e:	430a      	orrs	r2, r1
 8011b40:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	4a99      	ldr	r2, [pc, #612]	; (8011dac <UART_SetConfig+0x2e8>)
 8011b48:	4293      	cmp	r3, r2
 8011b4a:	d121      	bne.n	8011b90 <UART_SetConfig+0xcc>
 8011b4c:	4b98      	ldr	r3, [pc, #608]	; (8011db0 <UART_SetConfig+0x2ec>)
 8011b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011b52:	f003 0303 	and.w	r3, r3, #3
 8011b56:	2b03      	cmp	r3, #3
 8011b58:	d816      	bhi.n	8011b88 <UART_SetConfig+0xc4>
 8011b5a:	a201      	add	r2, pc, #4	; (adr r2, 8011b60 <UART_SetConfig+0x9c>)
 8011b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b60:	08011b71 	.word	0x08011b71
 8011b64:	08011b7d 	.word	0x08011b7d
 8011b68:	08011b77 	.word	0x08011b77
 8011b6c:	08011b83 	.word	0x08011b83
 8011b70:	2301      	movs	r3, #1
 8011b72:	76fb      	strb	r3, [r7, #27]
 8011b74:	e0e8      	b.n	8011d48 <UART_SetConfig+0x284>
 8011b76:	2302      	movs	r3, #2
 8011b78:	76fb      	strb	r3, [r7, #27]
 8011b7a:	e0e5      	b.n	8011d48 <UART_SetConfig+0x284>
 8011b7c:	2304      	movs	r3, #4
 8011b7e:	76fb      	strb	r3, [r7, #27]
 8011b80:	e0e2      	b.n	8011d48 <UART_SetConfig+0x284>
 8011b82:	2308      	movs	r3, #8
 8011b84:	76fb      	strb	r3, [r7, #27]
 8011b86:	e0df      	b.n	8011d48 <UART_SetConfig+0x284>
 8011b88:	2310      	movs	r3, #16
 8011b8a:	76fb      	strb	r3, [r7, #27]
 8011b8c:	bf00      	nop
 8011b8e:	e0db      	b.n	8011d48 <UART_SetConfig+0x284>
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	4a87      	ldr	r2, [pc, #540]	; (8011db4 <UART_SetConfig+0x2f0>)
 8011b96:	4293      	cmp	r3, r2
 8011b98:	d134      	bne.n	8011c04 <UART_SetConfig+0x140>
 8011b9a:	4b85      	ldr	r3, [pc, #532]	; (8011db0 <UART_SetConfig+0x2ec>)
 8011b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011ba0:	f003 030c 	and.w	r3, r3, #12
 8011ba4:	2b0c      	cmp	r3, #12
 8011ba6:	d829      	bhi.n	8011bfc <UART_SetConfig+0x138>
 8011ba8:	a201      	add	r2, pc, #4	; (adr r2, 8011bb0 <UART_SetConfig+0xec>)
 8011baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bae:	bf00      	nop
 8011bb0:	08011be5 	.word	0x08011be5
 8011bb4:	08011bfd 	.word	0x08011bfd
 8011bb8:	08011bfd 	.word	0x08011bfd
 8011bbc:	08011bfd 	.word	0x08011bfd
 8011bc0:	08011bf1 	.word	0x08011bf1
 8011bc4:	08011bfd 	.word	0x08011bfd
 8011bc8:	08011bfd 	.word	0x08011bfd
 8011bcc:	08011bfd 	.word	0x08011bfd
 8011bd0:	08011beb 	.word	0x08011beb
 8011bd4:	08011bfd 	.word	0x08011bfd
 8011bd8:	08011bfd 	.word	0x08011bfd
 8011bdc:	08011bfd 	.word	0x08011bfd
 8011be0:	08011bf7 	.word	0x08011bf7
 8011be4:	2300      	movs	r3, #0
 8011be6:	76fb      	strb	r3, [r7, #27]
 8011be8:	e0ae      	b.n	8011d48 <UART_SetConfig+0x284>
 8011bea:	2302      	movs	r3, #2
 8011bec:	76fb      	strb	r3, [r7, #27]
 8011bee:	e0ab      	b.n	8011d48 <UART_SetConfig+0x284>
 8011bf0:	2304      	movs	r3, #4
 8011bf2:	76fb      	strb	r3, [r7, #27]
 8011bf4:	e0a8      	b.n	8011d48 <UART_SetConfig+0x284>
 8011bf6:	2308      	movs	r3, #8
 8011bf8:	76fb      	strb	r3, [r7, #27]
 8011bfa:	e0a5      	b.n	8011d48 <UART_SetConfig+0x284>
 8011bfc:	2310      	movs	r3, #16
 8011bfe:	76fb      	strb	r3, [r7, #27]
 8011c00:	bf00      	nop
 8011c02:	e0a1      	b.n	8011d48 <UART_SetConfig+0x284>
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	4a6b      	ldr	r2, [pc, #428]	; (8011db8 <UART_SetConfig+0x2f4>)
 8011c0a:	4293      	cmp	r3, r2
 8011c0c:	d120      	bne.n	8011c50 <UART_SetConfig+0x18c>
 8011c0e:	4b68      	ldr	r3, [pc, #416]	; (8011db0 <UART_SetConfig+0x2ec>)
 8011c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011c14:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8011c18:	2b10      	cmp	r3, #16
 8011c1a:	d00f      	beq.n	8011c3c <UART_SetConfig+0x178>
 8011c1c:	2b10      	cmp	r3, #16
 8011c1e:	d802      	bhi.n	8011c26 <UART_SetConfig+0x162>
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d005      	beq.n	8011c30 <UART_SetConfig+0x16c>
 8011c24:	e010      	b.n	8011c48 <UART_SetConfig+0x184>
 8011c26:	2b20      	cmp	r3, #32
 8011c28:	d005      	beq.n	8011c36 <UART_SetConfig+0x172>
 8011c2a:	2b30      	cmp	r3, #48	; 0x30
 8011c2c:	d009      	beq.n	8011c42 <UART_SetConfig+0x17e>
 8011c2e:	e00b      	b.n	8011c48 <UART_SetConfig+0x184>
 8011c30:	2300      	movs	r3, #0
 8011c32:	76fb      	strb	r3, [r7, #27]
 8011c34:	e088      	b.n	8011d48 <UART_SetConfig+0x284>
 8011c36:	2302      	movs	r3, #2
 8011c38:	76fb      	strb	r3, [r7, #27]
 8011c3a:	e085      	b.n	8011d48 <UART_SetConfig+0x284>
 8011c3c:	2304      	movs	r3, #4
 8011c3e:	76fb      	strb	r3, [r7, #27]
 8011c40:	e082      	b.n	8011d48 <UART_SetConfig+0x284>
 8011c42:	2308      	movs	r3, #8
 8011c44:	76fb      	strb	r3, [r7, #27]
 8011c46:	e07f      	b.n	8011d48 <UART_SetConfig+0x284>
 8011c48:	2310      	movs	r3, #16
 8011c4a:	76fb      	strb	r3, [r7, #27]
 8011c4c:	bf00      	nop
 8011c4e:	e07b      	b.n	8011d48 <UART_SetConfig+0x284>
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	4a59      	ldr	r2, [pc, #356]	; (8011dbc <UART_SetConfig+0x2f8>)
 8011c56:	4293      	cmp	r3, r2
 8011c58:	d120      	bne.n	8011c9c <UART_SetConfig+0x1d8>
 8011c5a:	4b55      	ldr	r3, [pc, #340]	; (8011db0 <UART_SetConfig+0x2ec>)
 8011c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011c60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011c64:	2b40      	cmp	r3, #64	; 0x40
 8011c66:	d00f      	beq.n	8011c88 <UART_SetConfig+0x1c4>
 8011c68:	2b40      	cmp	r3, #64	; 0x40
 8011c6a:	d802      	bhi.n	8011c72 <UART_SetConfig+0x1ae>
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d005      	beq.n	8011c7c <UART_SetConfig+0x1b8>
 8011c70:	e010      	b.n	8011c94 <UART_SetConfig+0x1d0>
 8011c72:	2b80      	cmp	r3, #128	; 0x80
 8011c74:	d005      	beq.n	8011c82 <UART_SetConfig+0x1be>
 8011c76:	2bc0      	cmp	r3, #192	; 0xc0
 8011c78:	d009      	beq.n	8011c8e <UART_SetConfig+0x1ca>
 8011c7a:	e00b      	b.n	8011c94 <UART_SetConfig+0x1d0>
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	76fb      	strb	r3, [r7, #27]
 8011c80:	e062      	b.n	8011d48 <UART_SetConfig+0x284>
 8011c82:	2302      	movs	r3, #2
 8011c84:	76fb      	strb	r3, [r7, #27]
 8011c86:	e05f      	b.n	8011d48 <UART_SetConfig+0x284>
 8011c88:	2304      	movs	r3, #4
 8011c8a:	76fb      	strb	r3, [r7, #27]
 8011c8c:	e05c      	b.n	8011d48 <UART_SetConfig+0x284>
 8011c8e:	2308      	movs	r3, #8
 8011c90:	76fb      	strb	r3, [r7, #27]
 8011c92:	e059      	b.n	8011d48 <UART_SetConfig+0x284>
 8011c94:	2310      	movs	r3, #16
 8011c96:	76fb      	strb	r3, [r7, #27]
 8011c98:	bf00      	nop
 8011c9a:	e055      	b.n	8011d48 <UART_SetConfig+0x284>
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	4a47      	ldr	r2, [pc, #284]	; (8011dc0 <UART_SetConfig+0x2fc>)
 8011ca2:	4293      	cmp	r3, r2
 8011ca4:	d124      	bne.n	8011cf0 <UART_SetConfig+0x22c>
 8011ca6:	4b42      	ldr	r3, [pc, #264]	; (8011db0 <UART_SetConfig+0x2ec>)
 8011ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011cac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011cb4:	d012      	beq.n	8011cdc <UART_SetConfig+0x218>
 8011cb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011cba:	d802      	bhi.n	8011cc2 <UART_SetConfig+0x1fe>
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d007      	beq.n	8011cd0 <UART_SetConfig+0x20c>
 8011cc0:	e012      	b.n	8011ce8 <UART_SetConfig+0x224>
 8011cc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011cc6:	d006      	beq.n	8011cd6 <UART_SetConfig+0x212>
 8011cc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011ccc:	d009      	beq.n	8011ce2 <UART_SetConfig+0x21e>
 8011cce:	e00b      	b.n	8011ce8 <UART_SetConfig+0x224>
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	76fb      	strb	r3, [r7, #27]
 8011cd4:	e038      	b.n	8011d48 <UART_SetConfig+0x284>
 8011cd6:	2302      	movs	r3, #2
 8011cd8:	76fb      	strb	r3, [r7, #27]
 8011cda:	e035      	b.n	8011d48 <UART_SetConfig+0x284>
 8011cdc:	2304      	movs	r3, #4
 8011cde:	76fb      	strb	r3, [r7, #27]
 8011ce0:	e032      	b.n	8011d48 <UART_SetConfig+0x284>
 8011ce2:	2308      	movs	r3, #8
 8011ce4:	76fb      	strb	r3, [r7, #27]
 8011ce6:	e02f      	b.n	8011d48 <UART_SetConfig+0x284>
 8011ce8:	2310      	movs	r3, #16
 8011cea:	76fb      	strb	r3, [r7, #27]
 8011cec:	bf00      	nop
 8011cee:	e02b      	b.n	8011d48 <UART_SetConfig+0x284>
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	4a2c      	ldr	r2, [pc, #176]	; (8011da8 <UART_SetConfig+0x2e4>)
 8011cf6:	4293      	cmp	r3, r2
 8011cf8:	d124      	bne.n	8011d44 <UART_SetConfig+0x280>
 8011cfa:	4b2d      	ldr	r3, [pc, #180]	; (8011db0 <UART_SetConfig+0x2ec>)
 8011cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011d00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8011d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011d08:	d012      	beq.n	8011d30 <UART_SetConfig+0x26c>
 8011d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011d0e:	d802      	bhi.n	8011d16 <UART_SetConfig+0x252>
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d007      	beq.n	8011d24 <UART_SetConfig+0x260>
 8011d14:	e012      	b.n	8011d3c <UART_SetConfig+0x278>
 8011d16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011d1a:	d006      	beq.n	8011d2a <UART_SetConfig+0x266>
 8011d1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011d20:	d009      	beq.n	8011d36 <UART_SetConfig+0x272>
 8011d22:	e00b      	b.n	8011d3c <UART_SetConfig+0x278>
 8011d24:	2300      	movs	r3, #0
 8011d26:	76fb      	strb	r3, [r7, #27]
 8011d28:	e00e      	b.n	8011d48 <UART_SetConfig+0x284>
 8011d2a:	2302      	movs	r3, #2
 8011d2c:	76fb      	strb	r3, [r7, #27]
 8011d2e:	e00b      	b.n	8011d48 <UART_SetConfig+0x284>
 8011d30:	2304      	movs	r3, #4
 8011d32:	76fb      	strb	r3, [r7, #27]
 8011d34:	e008      	b.n	8011d48 <UART_SetConfig+0x284>
 8011d36:	2308      	movs	r3, #8
 8011d38:	76fb      	strb	r3, [r7, #27]
 8011d3a:	e005      	b.n	8011d48 <UART_SetConfig+0x284>
 8011d3c:	2310      	movs	r3, #16
 8011d3e:	76fb      	strb	r3, [r7, #27]
 8011d40:	bf00      	nop
 8011d42:	e001      	b.n	8011d48 <UART_SetConfig+0x284>
 8011d44:	2310      	movs	r3, #16
 8011d46:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	4a16      	ldr	r2, [pc, #88]	; (8011da8 <UART_SetConfig+0x2e4>)
 8011d4e:	4293      	cmp	r3, r2
 8011d50:	f040 8087 	bne.w	8011e62 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011d54:	7efb      	ldrb	r3, [r7, #27]
 8011d56:	2b08      	cmp	r3, #8
 8011d58:	d836      	bhi.n	8011dc8 <UART_SetConfig+0x304>
 8011d5a:	a201      	add	r2, pc, #4	; (adr r2, 8011d60 <UART_SetConfig+0x29c>)
 8011d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d60:	08011d85 	.word	0x08011d85
 8011d64:	08011dc9 	.word	0x08011dc9
 8011d68:	08011d8d 	.word	0x08011d8d
 8011d6c:	08011dc9 	.word	0x08011dc9
 8011d70:	08011d93 	.word	0x08011d93
 8011d74:	08011dc9 	.word	0x08011dc9
 8011d78:	08011dc9 	.word	0x08011dc9
 8011d7c:	08011dc9 	.word	0x08011dc9
 8011d80:	08011d9b 	.word	0x08011d9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011d84:	f7fd fade 	bl	800f344 <HAL_RCC_GetPCLK1Freq>
 8011d88:	6178      	str	r0, [r7, #20]
        break;
 8011d8a:	e022      	b.n	8011dd2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011d8c:	4b0d      	ldr	r3, [pc, #52]	; (8011dc4 <UART_SetConfig+0x300>)
 8011d8e:	617b      	str	r3, [r7, #20]
        break;
 8011d90:	e01f      	b.n	8011dd2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011d92:	f7fd fa41 	bl	800f218 <HAL_RCC_GetSysClockFreq>
 8011d96:	6178      	str	r0, [r7, #20]
        break;
 8011d98:	e01b      	b.n	8011dd2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011d9e:	617b      	str	r3, [r7, #20]
        break;
 8011da0:	e017      	b.n	8011dd2 <UART_SetConfig+0x30e>
 8011da2:	bf00      	nop
 8011da4:	efff69f3 	.word	0xefff69f3
 8011da8:	40008000 	.word	0x40008000
 8011dac:	40013800 	.word	0x40013800
 8011db0:	40021000 	.word	0x40021000
 8011db4:	40004400 	.word	0x40004400
 8011db8:	40004800 	.word	0x40004800
 8011dbc:	40004c00 	.word	0x40004c00
 8011dc0:	40005000 	.word	0x40005000
 8011dc4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8011dc8:	2300      	movs	r3, #0
 8011dca:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8011dcc:	2301      	movs	r3, #1
 8011dce:	76bb      	strb	r3, [r7, #26]
        break;
 8011dd0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011dd2:	697b      	ldr	r3, [r7, #20]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	f000 80f1 	beq.w	8011fbc <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	685a      	ldr	r2, [r3, #4]
 8011dde:	4613      	mov	r3, r2
 8011de0:	005b      	lsls	r3, r3, #1
 8011de2:	4413      	add	r3, r2
 8011de4:	697a      	ldr	r2, [r7, #20]
 8011de6:	429a      	cmp	r2, r3
 8011de8:	d305      	bcc.n	8011df6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	685b      	ldr	r3, [r3, #4]
 8011dee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8011df0:	697a      	ldr	r2, [r7, #20]
 8011df2:	429a      	cmp	r2, r3
 8011df4:	d902      	bls.n	8011dfc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8011df6:	2301      	movs	r3, #1
 8011df8:	76bb      	strb	r3, [r7, #26]
 8011dfa:	e0df      	b.n	8011fbc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8011dfc:	697b      	ldr	r3, [r7, #20]
 8011dfe:	4619      	mov	r1, r3
 8011e00:	f04f 0200 	mov.w	r2, #0
 8011e04:	f04f 0300 	mov.w	r3, #0
 8011e08:	f04f 0400 	mov.w	r4, #0
 8011e0c:	0214      	lsls	r4, r2, #8
 8011e0e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8011e12:	020b      	lsls	r3, r1, #8
 8011e14:	687a      	ldr	r2, [r7, #4]
 8011e16:	6852      	ldr	r2, [r2, #4]
 8011e18:	0852      	lsrs	r2, r2, #1
 8011e1a:	4611      	mov	r1, r2
 8011e1c:	f04f 0200 	mov.w	r2, #0
 8011e20:	eb13 0b01 	adds.w	fp, r3, r1
 8011e24:	eb44 0c02 	adc.w	ip, r4, r2
 8011e28:	4658      	mov	r0, fp
 8011e2a:	4661      	mov	r1, ip
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	685b      	ldr	r3, [r3, #4]
 8011e30:	f04f 0400 	mov.w	r4, #0
 8011e34:	461a      	mov	r2, r3
 8011e36:	4623      	mov	r3, r4
 8011e38:	f7ee ff06 	bl	8000c48 <__aeabi_uldivmod>
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	460c      	mov	r4, r1
 8011e40:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011e42:	693b      	ldr	r3, [r7, #16]
 8011e44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011e48:	d308      	bcc.n	8011e5c <UART_SetConfig+0x398>
 8011e4a:	693b      	ldr	r3, [r7, #16]
 8011e4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011e50:	d204      	bcs.n	8011e5c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	693a      	ldr	r2, [r7, #16]
 8011e58:	60da      	str	r2, [r3, #12]
 8011e5a:	e0af      	b.n	8011fbc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8011e5c:	2301      	movs	r3, #1
 8011e5e:	76bb      	strb	r3, [r7, #26]
 8011e60:	e0ac      	b.n	8011fbc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	69db      	ldr	r3, [r3, #28]
 8011e66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011e6a:	d15b      	bne.n	8011f24 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8011e6c:	7efb      	ldrb	r3, [r7, #27]
 8011e6e:	2b08      	cmp	r3, #8
 8011e70:	d827      	bhi.n	8011ec2 <UART_SetConfig+0x3fe>
 8011e72:	a201      	add	r2, pc, #4	; (adr r2, 8011e78 <UART_SetConfig+0x3b4>)
 8011e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e78:	08011e9d 	.word	0x08011e9d
 8011e7c:	08011ea5 	.word	0x08011ea5
 8011e80:	08011ead 	.word	0x08011ead
 8011e84:	08011ec3 	.word	0x08011ec3
 8011e88:	08011eb3 	.word	0x08011eb3
 8011e8c:	08011ec3 	.word	0x08011ec3
 8011e90:	08011ec3 	.word	0x08011ec3
 8011e94:	08011ec3 	.word	0x08011ec3
 8011e98:	08011ebb 	.word	0x08011ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011e9c:	f7fd fa52 	bl	800f344 <HAL_RCC_GetPCLK1Freq>
 8011ea0:	6178      	str	r0, [r7, #20]
        break;
 8011ea2:	e013      	b.n	8011ecc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011ea4:	f7fd fa64 	bl	800f370 <HAL_RCC_GetPCLK2Freq>
 8011ea8:	6178      	str	r0, [r7, #20]
        break;
 8011eaa:	e00f      	b.n	8011ecc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011eac:	4b49      	ldr	r3, [pc, #292]	; (8011fd4 <UART_SetConfig+0x510>)
 8011eae:	617b      	str	r3, [r7, #20]
        break;
 8011eb0:	e00c      	b.n	8011ecc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011eb2:	f7fd f9b1 	bl	800f218 <HAL_RCC_GetSysClockFreq>
 8011eb6:	6178      	str	r0, [r7, #20]
        break;
 8011eb8:	e008      	b.n	8011ecc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011ebe:	617b      	str	r3, [r7, #20]
        break;
 8011ec0:	e004      	b.n	8011ecc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8011ec6:	2301      	movs	r3, #1
 8011ec8:	76bb      	strb	r3, [r7, #26]
        break;
 8011eca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011ecc:	697b      	ldr	r3, [r7, #20]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d074      	beq.n	8011fbc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8011ed2:	697b      	ldr	r3, [r7, #20]
 8011ed4:	005a      	lsls	r2, r3, #1
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	685b      	ldr	r3, [r3, #4]
 8011eda:	085b      	lsrs	r3, r3, #1
 8011edc:	441a      	add	r2, r3
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	685b      	ldr	r3, [r3, #4]
 8011ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8011ee6:	b29b      	uxth	r3, r3
 8011ee8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011eea:	693b      	ldr	r3, [r7, #16]
 8011eec:	2b0f      	cmp	r3, #15
 8011eee:	d916      	bls.n	8011f1e <UART_SetConfig+0x45a>
 8011ef0:	693b      	ldr	r3, [r7, #16]
 8011ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011ef6:	d212      	bcs.n	8011f1e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011ef8:	693b      	ldr	r3, [r7, #16]
 8011efa:	b29b      	uxth	r3, r3
 8011efc:	f023 030f 	bic.w	r3, r3, #15
 8011f00:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011f02:	693b      	ldr	r3, [r7, #16]
 8011f04:	085b      	lsrs	r3, r3, #1
 8011f06:	b29b      	uxth	r3, r3
 8011f08:	f003 0307 	and.w	r3, r3, #7
 8011f0c:	b29a      	uxth	r2, r3
 8011f0e:	89fb      	ldrh	r3, [r7, #14]
 8011f10:	4313      	orrs	r3, r2
 8011f12:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	89fa      	ldrh	r2, [r7, #14]
 8011f1a:	60da      	str	r2, [r3, #12]
 8011f1c:	e04e      	b.n	8011fbc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8011f1e:	2301      	movs	r3, #1
 8011f20:	76bb      	strb	r3, [r7, #26]
 8011f22:	e04b      	b.n	8011fbc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011f24:	7efb      	ldrb	r3, [r7, #27]
 8011f26:	2b08      	cmp	r3, #8
 8011f28:	d827      	bhi.n	8011f7a <UART_SetConfig+0x4b6>
 8011f2a:	a201      	add	r2, pc, #4	; (adr r2, 8011f30 <UART_SetConfig+0x46c>)
 8011f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f30:	08011f55 	.word	0x08011f55
 8011f34:	08011f5d 	.word	0x08011f5d
 8011f38:	08011f65 	.word	0x08011f65
 8011f3c:	08011f7b 	.word	0x08011f7b
 8011f40:	08011f6b 	.word	0x08011f6b
 8011f44:	08011f7b 	.word	0x08011f7b
 8011f48:	08011f7b 	.word	0x08011f7b
 8011f4c:	08011f7b 	.word	0x08011f7b
 8011f50:	08011f73 	.word	0x08011f73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011f54:	f7fd f9f6 	bl	800f344 <HAL_RCC_GetPCLK1Freq>
 8011f58:	6178      	str	r0, [r7, #20]
        break;
 8011f5a:	e013      	b.n	8011f84 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011f5c:	f7fd fa08 	bl	800f370 <HAL_RCC_GetPCLK2Freq>
 8011f60:	6178      	str	r0, [r7, #20]
        break;
 8011f62:	e00f      	b.n	8011f84 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011f64:	4b1b      	ldr	r3, [pc, #108]	; (8011fd4 <UART_SetConfig+0x510>)
 8011f66:	617b      	str	r3, [r7, #20]
        break;
 8011f68:	e00c      	b.n	8011f84 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011f6a:	f7fd f955 	bl	800f218 <HAL_RCC_GetSysClockFreq>
 8011f6e:	6178      	str	r0, [r7, #20]
        break;
 8011f70:	e008      	b.n	8011f84 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011f76:	617b      	str	r3, [r7, #20]
        break;
 8011f78:	e004      	b.n	8011f84 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8011f7e:	2301      	movs	r3, #1
 8011f80:	76bb      	strb	r3, [r7, #26]
        break;
 8011f82:	bf00      	nop
    }

    if (pclk != 0U)
 8011f84:	697b      	ldr	r3, [r7, #20]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d018      	beq.n	8011fbc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	685b      	ldr	r3, [r3, #4]
 8011f8e:	085a      	lsrs	r2, r3, #1
 8011f90:	697b      	ldr	r3, [r7, #20]
 8011f92:	441a      	add	r2, r3
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	685b      	ldr	r3, [r3, #4]
 8011f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8011f9c:	b29b      	uxth	r3, r3
 8011f9e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011fa0:	693b      	ldr	r3, [r7, #16]
 8011fa2:	2b0f      	cmp	r3, #15
 8011fa4:	d908      	bls.n	8011fb8 <UART_SetConfig+0x4f4>
 8011fa6:	693b      	ldr	r3, [r7, #16]
 8011fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011fac:	d204      	bcs.n	8011fb8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	693a      	ldr	r2, [r7, #16]
 8011fb4:	60da      	str	r2, [r3, #12]
 8011fb6:	e001      	b.n	8011fbc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8011fb8:	2301      	movs	r3, #1
 8011fba:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	2200      	movs	r2, #0
 8011fc0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	2200      	movs	r2, #0
 8011fc6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8011fc8:	7ebb      	ldrb	r3, [r7, #26]
}
 8011fca:	4618      	mov	r0, r3
 8011fcc:	3720      	adds	r7, #32
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8011fd4:	00f42400 	.word	0x00f42400

08011fd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011fd8:	b480      	push	{r7}
 8011fda:	b083      	sub	sp, #12
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fe4:	f003 0301 	and.w	r3, r3, #1
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d00a      	beq.n	8012002 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	685b      	ldr	r3, [r3, #4]
 8011ff2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	430a      	orrs	r2, r1
 8012000:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012006:	f003 0302 	and.w	r3, r3, #2
 801200a:	2b00      	cmp	r3, #0
 801200c:	d00a      	beq.n	8012024 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	685b      	ldr	r3, [r3, #4]
 8012014:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	430a      	orrs	r2, r1
 8012022:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012028:	f003 0304 	and.w	r3, r3, #4
 801202c:	2b00      	cmp	r3, #0
 801202e:	d00a      	beq.n	8012046 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	685b      	ldr	r3, [r3, #4]
 8012036:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	430a      	orrs	r2, r1
 8012044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801204a:	f003 0308 	and.w	r3, r3, #8
 801204e:	2b00      	cmp	r3, #0
 8012050:	d00a      	beq.n	8012068 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	685b      	ldr	r3, [r3, #4]
 8012058:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	430a      	orrs	r2, r1
 8012066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801206c:	f003 0310 	and.w	r3, r3, #16
 8012070:	2b00      	cmp	r3, #0
 8012072:	d00a      	beq.n	801208a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	689b      	ldr	r3, [r3, #8]
 801207a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	430a      	orrs	r2, r1
 8012088:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801208e:	f003 0320 	and.w	r3, r3, #32
 8012092:	2b00      	cmp	r3, #0
 8012094:	d00a      	beq.n	80120ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	689b      	ldr	r3, [r3, #8]
 801209c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	430a      	orrs	r2, r1
 80120aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d01a      	beq.n	80120ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	685b      	ldr	r3, [r3, #4]
 80120be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	430a      	orrs	r2, r1
 80120cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80120d6:	d10a      	bne.n	80120ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	685b      	ldr	r3, [r3, #4]
 80120de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	430a      	orrs	r2, r1
 80120ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d00a      	beq.n	8012110 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	685b      	ldr	r3, [r3, #4]
 8012100:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	430a      	orrs	r2, r1
 801210e:	605a      	str	r2, [r3, #4]
  }
}
 8012110:	bf00      	nop
 8012112:	370c      	adds	r7, #12
 8012114:	46bd      	mov	sp, r7
 8012116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801211a:	4770      	bx	lr

0801211c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801211c:	b580      	push	{r7, lr}
 801211e:	b086      	sub	sp, #24
 8012120:	af02      	add	r7, sp, #8
 8012122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	2200      	movs	r2, #0
 8012128:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 801212a:	f7f7 fe23 	bl	8009d74 <HAL_GetTick>
 801212e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	f003 0308 	and.w	r3, r3, #8
 801213a:	2b08      	cmp	r3, #8
 801213c:	d10e      	bne.n	801215c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801213e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012142:	9300      	str	r3, [sp, #0]
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	2200      	movs	r2, #0
 8012148:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801214c:	6878      	ldr	r0, [r7, #4]
 801214e:	f000 f82a 	bl	80121a6 <UART_WaitOnFlagUntilTimeout>
 8012152:	4603      	mov	r3, r0
 8012154:	2b00      	cmp	r3, #0
 8012156:	d001      	beq.n	801215c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012158:	2303      	movs	r3, #3
 801215a:	e020      	b.n	801219e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	f003 0304 	and.w	r3, r3, #4
 8012166:	2b04      	cmp	r3, #4
 8012168:	d10e      	bne.n	8012188 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801216a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801216e:	9300      	str	r3, [sp, #0]
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	2200      	movs	r2, #0
 8012174:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012178:	6878      	ldr	r0, [r7, #4]
 801217a:	f000 f814 	bl	80121a6 <UART_WaitOnFlagUntilTimeout>
 801217e:	4603      	mov	r3, r0
 8012180:	2b00      	cmp	r3, #0
 8012182:	d001      	beq.n	8012188 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012184:	2303      	movs	r3, #3
 8012186:	e00a      	b.n	801219e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	2220      	movs	r2, #32
 801218c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	2220      	movs	r2, #32
 8012192:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	2200      	movs	r2, #0
 8012198:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 801219c:	2300      	movs	r3, #0
}
 801219e:	4618      	mov	r0, r3
 80121a0:	3710      	adds	r7, #16
 80121a2:	46bd      	mov	sp, r7
 80121a4:	bd80      	pop	{r7, pc}

080121a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80121a6:	b580      	push	{r7, lr}
 80121a8:	b084      	sub	sp, #16
 80121aa:	af00      	add	r7, sp, #0
 80121ac:	60f8      	str	r0, [r7, #12]
 80121ae:	60b9      	str	r1, [r7, #8]
 80121b0:	603b      	str	r3, [r7, #0]
 80121b2:	4613      	mov	r3, r2
 80121b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80121b6:	e05d      	b.n	8012274 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80121b8:	69bb      	ldr	r3, [r7, #24]
 80121ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121be:	d059      	beq.n	8012274 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80121c0:	f7f7 fdd8 	bl	8009d74 <HAL_GetTick>
 80121c4:	4602      	mov	r2, r0
 80121c6:	683b      	ldr	r3, [r7, #0]
 80121c8:	1ad3      	subs	r3, r2, r3
 80121ca:	69ba      	ldr	r2, [r7, #24]
 80121cc:	429a      	cmp	r2, r3
 80121ce:	d302      	bcc.n	80121d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80121d0:	69bb      	ldr	r3, [r7, #24]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d11b      	bne.n	801220e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	681a      	ldr	r2, [r3, #0]
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80121e4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	689a      	ldr	r2, [r3, #8]
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	f022 0201 	bic.w	r2, r2, #1
 80121f4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	2220      	movs	r2, #32
 80121fa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	2220      	movs	r2, #32
 8012200:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	2200      	movs	r2, #0
 8012206:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 801220a:	2303      	movs	r3, #3
 801220c:	e042      	b.n	8012294 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	f003 0304 	and.w	r3, r3, #4
 8012218:	2b00      	cmp	r3, #0
 801221a:	d02b      	beq.n	8012274 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	69db      	ldr	r3, [r3, #28]
 8012222:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801222a:	d123      	bne.n	8012274 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012234:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	681a      	ldr	r2, [r3, #0]
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8012244:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	689a      	ldr	r2, [r3, #8]
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	f022 0201 	bic.w	r2, r2, #1
 8012254:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	2220      	movs	r2, #32
 801225a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	2220      	movs	r2, #32
 8012260:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	2220      	movs	r2, #32
 8012266:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	2200      	movs	r2, #0
 801226c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8012270:	2303      	movs	r3, #3
 8012272:	e00f      	b.n	8012294 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	69da      	ldr	r2, [r3, #28]
 801227a:	68bb      	ldr	r3, [r7, #8]
 801227c:	4013      	ands	r3, r2
 801227e:	68ba      	ldr	r2, [r7, #8]
 8012280:	429a      	cmp	r2, r3
 8012282:	bf0c      	ite	eq
 8012284:	2301      	moveq	r3, #1
 8012286:	2300      	movne	r3, #0
 8012288:	b2db      	uxtb	r3, r3
 801228a:	461a      	mov	r2, r3
 801228c:	79fb      	ldrb	r3, [r7, #7]
 801228e:	429a      	cmp	r2, r3
 8012290:	d092      	beq.n	80121b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012292:	2300      	movs	r3, #0
}
 8012294:	4618      	mov	r0, r3
 8012296:	3710      	adds	r7, #16
 8012298:	46bd      	mov	sp, r7
 801229a:	bd80      	pop	{r7, pc}

0801229c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801229c:	b084      	sub	sp, #16
 801229e:	b580      	push	{r7, lr}
 80122a0:	b084      	sub	sp, #16
 80122a2:	af00      	add	r7, sp, #0
 80122a4:	6078      	str	r0, [r7, #4]
 80122a6:	f107 001c 	add.w	r0, r7, #28
 80122aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80122ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122b0:	2b01      	cmp	r3, #1
 80122b2:	d122      	bne.n	80122fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	68db      	ldr	r3, [r3, #12]
 80122c4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80122c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80122cc:	687a      	ldr	r2, [r7, #4]
 80122ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	68db      	ldr	r3, [r3, #12]
 80122d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80122dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122de:	2b01      	cmp	r3, #1
 80122e0:	d105      	bne.n	80122ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	68db      	ldr	r3, [r3, #12]
 80122e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80122ee:	6878      	ldr	r0, [r7, #4]
 80122f0:	f000 f936 	bl	8012560 <USB_CoreReset>
 80122f4:	4603      	mov	r3, r0
 80122f6:	73fb      	strb	r3, [r7, #15]
 80122f8:	e01a      	b.n	8012330 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	68db      	ldr	r3, [r3, #12]
 80122fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8012306:	6878      	ldr	r0, [r7, #4]
 8012308:	f000 f92a 	bl	8012560 <USB_CoreReset>
 801230c:	4603      	mov	r3, r0
 801230e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012312:	2b00      	cmp	r3, #0
 8012314:	d106      	bne.n	8012324 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801231a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	639a      	str	r2, [r3, #56]	; 0x38
 8012322:	e005      	b.n	8012330 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012328:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8012330:	7bfb      	ldrb	r3, [r7, #15]
}
 8012332:	4618      	mov	r0, r3
 8012334:	3710      	adds	r7, #16
 8012336:	46bd      	mov	sp, r7
 8012338:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801233c:	b004      	add	sp, #16
 801233e:	4770      	bx	lr

08012340 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012340:	b480      	push	{r7}
 8012342:	b083      	sub	sp, #12
 8012344:	af00      	add	r7, sp, #0
 8012346:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	689b      	ldr	r3, [r3, #8]
 801234c:	f043 0201 	orr.w	r2, r3, #1
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012354:	2300      	movs	r3, #0
}
 8012356:	4618      	mov	r0, r3
 8012358:	370c      	adds	r7, #12
 801235a:	46bd      	mov	sp, r7
 801235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012360:	4770      	bx	lr

08012362 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012362:	b480      	push	{r7}
 8012364:	b083      	sub	sp, #12
 8012366:	af00      	add	r7, sp, #0
 8012368:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	689b      	ldr	r3, [r3, #8]
 801236e:	f023 0201 	bic.w	r2, r3, #1
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012376:	2300      	movs	r3, #0
}
 8012378:	4618      	mov	r0, r3
 801237a:	370c      	adds	r7, #12
 801237c:	46bd      	mov	sp, r7
 801237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012382:	4770      	bx	lr

08012384 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8012384:	b580      	push	{r7, lr}
 8012386:	b082      	sub	sp, #8
 8012388:	af00      	add	r7, sp, #0
 801238a:	6078      	str	r0, [r7, #4]
 801238c:	460b      	mov	r3, r1
 801238e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	68db      	ldr	r3, [r3, #12]
 8012394:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801239c:	78fb      	ldrb	r3, [r7, #3]
 801239e:	2b01      	cmp	r3, #1
 80123a0:	d106      	bne.n	80123b0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	68db      	ldr	r3, [r3, #12]
 80123a6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	60da      	str	r2, [r3, #12]
 80123ae:	e00b      	b.n	80123c8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80123b0:	78fb      	ldrb	r3, [r7, #3]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d106      	bne.n	80123c4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	68db      	ldr	r3, [r3, #12]
 80123ba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	60da      	str	r2, [r3, #12]
 80123c2:	e001      	b.n	80123c8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80123c4:	2301      	movs	r3, #1
 80123c6:	e003      	b.n	80123d0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80123c8:	2032      	movs	r0, #50	; 0x32
 80123ca:	f7f7 fcdf 	bl	8009d8c <HAL_Delay>

  return HAL_OK;
 80123ce:	2300      	movs	r3, #0
}
 80123d0:	4618      	mov	r0, r3
 80123d2:	3708      	adds	r7, #8
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd80      	pop	{r7, pc}

080123d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80123d8:	b480      	push	{r7}
 80123da:	b085      	sub	sp, #20
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
 80123e0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80123e2:	2300      	movs	r3, #0
 80123e4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	019b      	lsls	r3, r3, #6
 80123ea:	f043 0220 	orr.w	r2, r3, #32
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	3301      	adds	r3, #1
 80123f6:	60fb      	str	r3, [r7, #12]
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	4a09      	ldr	r2, [pc, #36]	; (8012420 <USB_FlushTxFifo+0x48>)
 80123fc:	4293      	cmp	r3, r2
 80123fe:	d901      	bls.n	8012404 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8012400:	2303      	movs	r3, #3
 8012402:	e006      	b.n	8012412 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	691b      	ldr	r3, [r3, #16]
 8012408:	f003 0320 	and.w	r3, r3, #32
 801240c:	2b20      	cmp	r3, #32
 801240e:	d0f0      	beq.n	80123f2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8012410:	2300      	movs	r3, #0
}
 8012412:	4618      	mov	r0, r3
 8012414:	3714      	adds	r7, #20
 8012416:	46bd      	mov	sp, r7
 8012418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801241c:	4770      	bx	lr
 801241e:	bf00      	nop
 8012420:	00030d40 	.word	0x00030d40

08012424 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012424:	b480      	push	{r7}
 8012426:	b085      	sub	sp, #20
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 801242c:	2300      	movs	r3, #0
 801242e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	2210      	movs	r2, #16
 8012434:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	3301      	adds	r3, #1
 801243a:	60fb      	str	r3, [r7, #12]
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	4a09      	ldr	r2, [pc, #36]	; (8012464 <USB_FlushRxFifo+0x40>)
 8012440:	4293      	cmp	r3, r2
 8012442:	d901      	bls.n	8012448 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8012444:	2303      	movs	r3, #3
 8012446:	e006      	b.n	8012456 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	691b      	ldr	r3, [r3, #16]
 801244c:	f003 0310 	and.w	r3, r3, #16
 8012450:	2b10      	cmp	r3, #16
 8012452:	d0f0      	beq.n	8012436 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8012454:	2300      	movs	r3, #0
}
 8012456:	4618      	mov	r0, r3
 8012458:	3714      	adds	r7, #20
 801245a:	46bd      	mov	sp, r7
 801245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012460:	4770      	bx	lr
 8012462:	bf00      	nop
 8012464:	00030d40 	.word	0x00030d40

08012468 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8012468:	b480      	push	{r7}
 801246a:	b089      	sub	sp, #36	; 0x24
 801246c:	af00      	add	r7, sp, #0
 801246e:	60f8      	str	r0, [r7, #12]
 8012470:	60b9      	str	r1, [r7, #8]
 8012472:	4611      	mov	r1, r2
 8012474:	461a      	mov	r2, r3
 8012476:	460b      	mov	r3, r1
 8012478:	71fb      	strb	r3, [r7, #7]
 801247a:	4613      	mov	r3, r2
 801247c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8012482:	68bb      	ldr	r3, [r7, #8]
 8012484:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8012486:	88bb      	ldrh	r3, [r7, #4]
 8012488:	3303      	adds	r3, #3
 801248a:	089b      	lsrs	r3, r3, #2
 801248c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 801248e:	2300      	movs	r3, #0
 8012490:	61bb      	str	r3, [r7, #24]
 8012492:	e00f      	b.n	80124b4 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012494:	79fb      	ldrb	r3, [r7, #7]
 8012496:	031a      	lsls	r2, r3, #12
 8012498:	697b      	ldr	r3, [r7, #20]
 801249a:	4413      	add	r3, r2
 801249c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80124a0:	461a      	mov	r2, r3
 80124a2:	69fb      	ldr	r3, [r7, #28]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	6013      	str	r3, [r2, #0]
    pSrc++;
 80124a8:	69fb      	ldr	r3, [r7, #28]
 80124aa:	3304      	adds	r3, #4
 80124ac:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80124ae:	69bb      	ldr	r3, [r7, #24]
 80124b0:	3301      	adds	r3, #1
 80124b2:	61bb      	str	r3, [r7, #24]
 80124b4:	69ba      	ldr	r2, [r7, #24]
 80124b6:	693b      	ldr	r3, [r7, #16]
 80124b8:	429a      	cmp	r2, r3
 80124ba:	d3eb      	bcc.n	8012494 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80124bc:	2300      	movs	r3, #0
}
 80124be:	4618      	mov	r0, r3
 80124c0:	3724      	adds	r7, #36	; 0x24
 80124c2:	46bd      	mov	sp, r7
 80124c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c8:	4770      	bx	lr

080124ca <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80124ca:	b480      	push	{r7}
 80124cc:	b089      	sub	sp, #36	; 0x24
 80124ce:	af00      	add	r7, sp, #0
 80124d0:	60f8      	str	r0, [r7, #12]
 80124d2:	60b9      	str	r1, [r7, #8]
 80124d4:	4613      	mov	r3, r2
 80124d6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80124dc:	68bb      	ldr	r3, [r7, #8]
 80124de:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80124e0:	88fb      	ldrh	r3, [r7, #6]
 80124e2:	3303      	adds	r3, #3
 80124e4:	089b      	lsrs	r3, r3, #2
 80124e6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80124e8:	2300      	movs	r3, #0
 80124ea:	61bb      	str	r3, [r7, #24]
 80124ec:	e00b      	b.n	8012506 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80124ee:	697b      	ldr	r3, [r7, #20]
 80124f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80124f4:	681a      	ldr	r2, [r3, #0]
 80124f6:	69fb      	ldr	r3, [r7, #28]
 80124f8:	601a      	str	r2, [r3, #0]
    pDest++;
 80124fa:	69fb      	ldr	r3, [r7, #28]
 80124fc:	3304      	adds	r3, #4
 80124fe:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8012500:	69bb      	ldr	r3, [r7, #24]
 8012502:	3301      	adds	r3, #1
 8012504:	61bb      	str	r3, [r7, #24]
 8012506:	69ba      	ldr	r2, [r7, #24]
 8012508:	693b      	ldr	r3, [r7, #16]
 801250a:	429a      	cmp	r2, r3
 801250c:	d3ef      	bcc.n	80124ee <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 801250e:	69fb      	ldr	r3, [r7, #28]
}
 8012510:	4618      	mov	r0, r3
 8012512:	3724      	adds	r7, #36	; 0x24
 8012514:	46bd      	mov	sp, r7
 8012516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251a:	4770      	bx	lr

0801251c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801251c:	b480      	push	{r7}
 801251e:	b085      	sub	sp, #20
 8012520:	af00      	add	r7, sp, #0
 8012522:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	695b      	ldr	r3, [r3, #20]
 8012528:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	699b      	ldr	r3, [r3, #24]
 801252e:	68fa      	ldr	r2, [r7, #12]
 8012530:	4013      	ands	r3, r2
 8012532:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8012534:	68fb      	ldr	r3, [r7, #12]
}
 8012536:	4618      	mov	r0, r3
 8012538:	3714      	adds	r7, #20
 801253a:	46bd      	mov	sp, r7
 801253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012540:	4770      	bx	lr

08012542 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8012542:	b480      	push	{r7}
 8012544:	b083      	sub	sp, #12
 8012546:	af00      	add	r7, sp, #0
 8012548:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	695b      	ldr	r3, [r3, #20]
 801254e:	f003 0301 	and.w	r3, r3, #1
}
 8012552:	4618      	mov	r0, r3
 8012554:	370c      	adds	r7, #12
 8012556:	46bd      	mov	sp, r7
 8012558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801255c:	4770      	bx	lr
	...

08012560 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012560:	b480      	push	{r7}
 8012562:	b085      	sub	sp, #20
 8012564:	af00      	add	r7, sp, #0
 8012566:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8012568:	2300      	movs	r3, #0
 801256a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	3301      	adds	r3, #1
 8012570:	60fb      	str	r3, [r7, #12]
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	4a13      	ldr	r2, [pc, #76]	; (80125c4 <USB_CoreReset+0x64>)
 8012576:	4293      	cmp	r3, r2
 8012578:	d901      	bls.n	801257e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801257a:	2303      	movs	r3, #3
 801257c:	e01b      	b.n	80125b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	691b      	ldr	r3, [r3, #16]
 8012582:	2b00      	cmp	r3, #0
 8012584:	daf2      	bge.n	801256c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8012586:	2300      	movs	r3, #0
 8012588:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	691b      	ldr	r3, [r3, #16]
 801258e:	f043 0201 	orr.w	r2, r3, #1
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	3301      	adds	r3, #1
 801259a:	60fb      	str	r3, [r7, #12]
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	4a09      	ldr	r2, [pc, #36]	; (80125c4 <USB_CoreReset+0x64>)
 80125a0:	4293      	cmp	r3, r2
 80125a2:	d901      	bls.n	80125a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80125a4:	2303      	movs	r3, #3
 80125a6:	e006      	b.n	80125b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	691b      	ldr	r3, [r3, #16]
 80125ac:	f003 0301 	and.w	r3, r3, #1
 80125b0:	2b01      	cmp	r3, #1
 80125b2:	d0f0      	beq.n	8012596 <USB_CoreReset+0x36>

  return HAL_OK;
 80125b4:	2300      	movs	r3, #0
}
 80125b6:	4618      	mov	r0, r3
 80125b8:	3714      	adds	r7, #20
 80125ba:	46bd      	mov	sp, r7
 80125bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c0:	4770      	bx	lr
 80125c2:	bf00      	nop
 80125c4:	00030d40 	.word	0x00030d40

080125c8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80125c8:	b084      	sub	sp, #16
 80125ca:	b580      	push	{r7, lr}
 80125cc:	b084      	sub	sp, #16
 80125ce:	af00      	add	r7, sp, #0
 80125d0:	6078      	str	r0, [r7, #4]
 80125d2:	f107 001c 	add.w	r0, r7, #28
 80125d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80125de:	68bb      	ldr	r3, [r7, #8]
 80125e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80125e4:	461a      	mov	r2, r3
 80125e6:	2300      	movs	r3, #0
 80125e8:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125ee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8012602:	68bb      	ldr	r3, [r7, #8]
 8012604:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	68ba      	ldr	r2, [r7, #8]
 801260c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012610:	f023 0304 	bic.w	r3, r3, #4
 8012614:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8012616:	2110      	movs	r1, #16
 8012618:	6878      	ldr	r0, [r7, #4]
 801261a:	f7ff fedd 	bl	80123d8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 801261e:	6878      	ldr	r0, [r7, #4]
 8012620:	f7ff ff00 	bl	8012424 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8012624:	2300      	movs	r3, #0
 8012626:	60fb      	str	r3, [r7, #12]
 8012628:	e015      	b.n	8012656 <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	015a      	lsls	r2, r3, #5
 801262e:	68bb      	ldr	r3, [r7, #8]
 8012630:	4413      	add	r3, r2
 8012632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012636:	461a      	mov	r2, r3
 8012638:	f04f 33ff 	mov.w	r3, #4294967295
 801263c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	015a      	lsls	r2, r3, #5
 8012642:	68bb      	ldr	r3, [r7, #8]
 8012644:	4413      	add	r3, r2
 8012646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801264a:	461a      	mov	r2, r3
 801264c:	2300      	movs	r3, #0
 801264e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	3301      	adds	r3, #1
 8012654:	60fb      	str	r3, [r7, #12]
 8012656:	6a3b      	ldr	r3, [r7, #32]
 8012658:	68fa      	ldr	r2, [r7, #12]
 801265a:	429a      	cmp	r2, r3
 801265c:	d3e5      	bcc.n	801262a <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 801265e:	2101      	movs	r1, #1
 8012660:	6878      	ldr	r0, [r7, #4]
 8012662:	f000 f893 	bl	801278c <USB_DriveVbus>

  HAL_Delay(200U);
 8012666:	20c8      	movs	r0, #200	; 0xc8
 8012668:	f7f7 fb90 	bl	8009d8c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	2200      	movs	r2, #0
 8012670:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	f04f 32ff 	mov.w	r2, #4294967295
 8012678:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	2280      	movs	r2, #128	; 0x80
 801267e:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	4a0d      	ldr	r2, [pc, #52]	; (80126b8 <USB_HostInit+0xf0>)
 8012684:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	4a0c      	ldr	r2, [pc, #48]	; (80126bc <USB_HostInit+0xf4>)
 801268a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	699b      	ldr	r3, [r3, #24]
 8012692:	f043 0210 	orr.w	r2, r3, #16
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	699a      	ldr	r2, [r3, #24]
 801269e:	4b08      	ldr	r3, [pc, #32]	; (80126c0 <USB_HostInit+0xf8>)
 80126a0:	4313      	orrs	r3, r2
 80126a2:	687a      	ldr	r2, [r7, #4]
 80126a4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80126a6:	2300      	movs	r3, #0
}
 80126a8:	4618      	mov	r0, r3
 80126aa:	3710      	adds	r7, #16
 80126ac:	46bd      	mov	sp, r7
 80126ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80126b2:	b004      	add	sp, #16
 80126b4:	4770      	bx	lr
 80126b6:	bf00      	nop
 80126b8:	00600080 	.word	0x00600080
 80126bc:	004000e0 	.word	0x004000e0
 80126c0:	a3200008 	.word	0xa3200008

080126c4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80126c4:	b480      	push	{r7}
 80126c6:	b085      	sub	sp, #20
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
 80126cc:	460b      	mov	r3, r1
 80126ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	68fa      	ldr	r2, [r7, #12]
 80126de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80126e2:	f023 0303 	bic.w	r3, r3, #3
 80126e6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80126ee:	681a      	ldr	r2, [r3, #0]
 80126f0:	78fb      	ldrb	r3, [r7, #3]
 80126f2:	f003 0303 	and.w	r3, r3, #3
 80126f6:	68f9      	ldr	r1, [r7, #12]
 80126f8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80126fc:	4313      	orrs	r3, r2
 80126fe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8012700:	78fb      	ldrb	r3, [r7, #3]
 8012702:	2b01      	cmp	r3, #1
 8012704:	d107      	bne.n	8012716 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801270c:	461a      	mov	r2, r3
 801270e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8012712:	6053      	str	r3, [r2, #4]
 8012714:	e009      	b.n	801272a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8012716:	78fb      	ldrb	r3, [r7, #3]
 8012718:	2b02      	cmp	r3, #2
 801271a:	d106      	bne.n	801272a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012722:	461a      	mov	r2, r3
 8012724:	f241 7370 	movw	r3, #6000	; 0x1770
 8012728:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 801272a:	2300      	movs	r3, #0
}
 801272c:	4618      	mov	r0, r3
 801272e:	3714      	adds	r7, #20
 8012730:	46bd      	mov	sp, r7
 8012732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012736:	4770      	bx	lr

08012738 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8012738:	b580      	push	{r7, lr}
 801273a:	b084      	sub	sp, #16
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8012744:	2300      	movs	r3, #0
 8012746:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8012752:	68bb      	ldr	r3, [r7, #8]
 8012754:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8012758:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 801275a:	68bb      	ldr	r3, [r7, #8]
 801275c:	68fa      	ldr	r2, [r7, #12]
 801275e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8012762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012766:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8012768:	2064      	movs	r0, #100	; 0x64
 801276a:	f7f7 fb0f 	bl	8009d8c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 801276e:	68bb      	ldr	r3, [r7, #8]
 8012770:	68fa      	ldr	r2, [r7, #12]
 8012772:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8012776:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801277a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 801277c:	200a      	movs	r0, #10
 801277e:	f7f7 fb05 	bl	8009d8c <HAL_Delay>

  return HAL_OK;
 8012782:	2300      	movs	r3, #0
}
 8012784:	4618      	mov	r0, r3
 8012786:	3710      	adds	r7, #16
 8012788:	46bd      	mov	sp, r7
 801278a:	bd80      	pop	{r7, pc}

0801278c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 801278c:	b480      	push	{r7}
 801278e:	b085      	sub	sp, #20
 8012790:	af00      	add	r7, sp, #0
 8012792:	6078      	str	r0, [r7, #4]
 8012794:	460b      	mov	r3, r1
 8012796:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 801279c:	2300      	movs	r3, #0
 801279e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80127aa:	68bb      	ldr	r3, [r7, #8]
 80127ac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80127b0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80127b2:	68bb      	ldr	r3, [r7, #8]
 80127b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d109      	bne.n	80127d0 <USB_DriveVbus+0x44>
 80127bc:	78fb      	ldrb	r3, [r7, #3]
 80127be:	2b01      	cmp	r3, #1
 80127c0:	d106      	bne.n	80127d0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80127c2:	68bb      	ldr	r3, [r7, #8]
 80127c4:	68fa      	ldr	r2, [r7, #12]
 80127c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80127ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80127ce:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80127d0:	68bb      	ldr	r3, [r7, #8]
 80127d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80127d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80127da:	d109      	bne.n	80127f0 <USB_DriveVbus+0x64>
 80127dc:	78fb      	ldrb	r3, [r7, #3]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d106      	bne.n	80127f0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80127e2:	68bb      	ldr	r3, [r7, #8]
 80127e4:	68fa      	ldr	r2, [r7, #12]
 80127e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80127ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80127ee:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80127f0:	2300      	movs	r3, #0
}
 80127f2:	4618      	mov	r0, r3
 80127f4:	3714      	adds	r7, #20
 80127f6:	46bd      	mov	sp, r7
 80127f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127fc:	4770      	bx	lr

080127fe <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80127fe:	b480      	push	{r7}
 8012800:	b085      	sub	sp, #20
 8012802:	af00      	add	r7, sp, #0
 8012804:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 801280a:	2300      	movs	r3, #0
 801280c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8012818:	68bb      	ldr	r3, [r7, #8]
 801281a:	0c5b      	lsrs	r3, r3, #17
 801281c:	f003 0303 	and.w	r3, r3, #3
}
 8012820:	4618      	mov	r0, r3
 8012822:	3714      	adds	r7, #20
 8012824:	46bd      	mov	sp, r7
 8012826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801282a:	4770      	bx	lr

0801282c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 801282c:	b480      	push	{r7}
 801282e:	b085      	sub	sp, #20
 8012830:	af00      	add	r7, sp, #0
 8012832:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801283e:	689b      	ldr	r3, [r3, #8]
 8012840:	b29b      	uxth	r3, r3
}
 8012842:	4618      	mov	r0, r3
 8012844:	3714      	adds	r7, #20
 8012846:	46bd      	mov	sp, r7
 8012848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284c:	4770      	bx	lr
	...

08012850 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8012850:	b480      	push	{r7}
 8012852:	b087      	sub	sp, #28
 8012854:	af00      	add	r7, sp, #0
 8012856:	6078      	str	r0, [r7, #4]
 8012858:	4608      	mov	r0, r1
 801285a:	4611      	mov	r1, r2
 801285c:	461a      	mov	r2, r3
 801285e:	4603      	mov	r3, r0
 8012860:	70fb      	strb	r3, [r7, #3]
 8012862:	460b      	mov	r3, r1
 8012864:	70bb      	strb	r3, [r7, #2]
 8012866:	4613      	mov	r3, r2
 8012868:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 801286a:	2300      	movs	r3, #0
 801286c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8012872:	78fb      	ldrb	r3, [r7, #3]
 8012874:	015a      	lsls	r2, r3, #5
 8012876:	68bb      	ldr	r3, [r7, #8]
 8012878:	4413      	add	r3, r2
 801287a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801287e:	461a      	mov	r2, r3
 8012880:	f04f 33ff 	mov.w	r3, #4294967295
 8012884:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8012886:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801288a:	2b03      	cmp	r3, #3
 801288c:	d867      	bhi.n	801295e <USB_HC_Init+0x10e>
 801288e:	a201      	add	r2, pc, #4	; (adr r2, 8012894 <USB_HC_Init+0x44>)
 8012890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012894:	080128a5 	.word	0x080128a5
 8012898:	08012921 	.word	0x08012921
 801289c:	080128a5 	.word	0x080128a5
 80128a0:	080128e3 	.word	0x080128e3
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80128a4:	78fb      	ldrb	r3, [r7, #3]
 80128a6:	015a      	lsls	r2, r3, #5
 80128a8:	68bb      	ldr	r3, [r7, #8]
 80128aa:	4413      	add	r3, r2
 80128ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80128b0:	461a      	mov	r2, r3
 80128b2:	f240 439d 	movw	r3, #1181	; 0x49d
 80128b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80128b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	da51      	bge.n	8012964 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80128c0:	78fb      	ldrb	r3, [r7, #3]
 80128c2:	015a      	lsls	r2, r3, #5
 80128c4:	68bb      	ldr	r3, [r7, #8]
 80128c6:	4413      	add	r3, r2
 80128c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80128cc:	68db      	ldr	r3, [r3, #12]
 80128ce:	78fa      	ldrb	r2, [r7, #3]
 80128d0:	0151      	lsls	r1, r2, #5
 80128d2:	68ba      	ldr	r2, [r7, #8]
 80128d4:	440a      	add	r2, r1
 80128d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80128da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80128de:	60d3      	str	r3, [r2, #12]
      }
      break;
 80128e0:	e040      	b.n	8012964 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80128e2:	78fb      	ldrb	r3, [r7, #3]
 80128e4:	015a      	lsls	r2, r3, #5
 80128e6:	68bb      	ldr	r3, [r7, #8]
 80128e8:	4413      	add	r3, r2
 80128ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80128ee:	461a      	mov	r2, r3
 80128f0:	f240 639d 	movw	r3, #1693	; 0x69d
 80128f4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80128f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	da34      	bge.n	8012968 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80128fe:	78fb      	ldrb	r3, [r7, #3]
 8012900:	015a      	lsls	r2, r3, #5
 8012902:	68bb      	ldr	r3, [r7, #8]
 8012904:	4413      	add	r3, r2
 8012906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801290a:	68db      	ldr	r3, [r3, #12]
 801290c:	78fa      	ldrb	r2, [r7, #3]
 801290e:	0151      	lsls	r1, r2, #5
 8012910:	68ba      	ldr	r2, [r7, #8]
 8012912:	440a      	add	r2, r1
 8012914:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801291c:	60d3      	str	r3, [r2, #12]
      }

      break;
 801291e:	e023      	b.n	8012968 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8012920:	78fb      	ldrb	r3, [r7, #3]
 8012922:	015a      	lsls	r2, r3, #5
 8012924:	68bb      	ldr	r3, [r7, #8]
 8012926:	4413      	add	r3, r2
 8012928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801292c:	461a      	mov	r2, r3
 801292e:	f240 2325 	movw	r3, #549	; 0x225
 8012932:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8012934:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8012938:	2b00      	cmp	r3, #0
 801293a:	da17      	bge.n	801296c <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 801293c:	78fb      	ldrb	r3, [r7, #3]
 801293e:	015a      	lsls	r2, r3, #5
 8012940:	68bb      	ldr	r3, [r7, #8]
 8012942:	4413      	add	r3, r2
 8012944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012948:	68db      	ldr	r3, [r3, #12]
 801294a:	78fa      	ldrb	r2, [r7, #3]
 801294c:	0151      	lsls	r1, r2, #5
 801294e:	68ba      	ldr	r2, [r7, #8]
 8012950:	440a      	add	r2, r1
 8012952:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012956:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 801295a:	60d3      	str	r3, [r2, #12]
      }
      break;
 801295c:	e006      	b.n	801296c <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 801295e:	2301      	movs	r3, #1
 8012960:	75fb      	strb	r3, [r7, #23]
      break;
 8012962:	e004      	b.n	801296e <USB_HC_Init+0x11e>
      break;
 8012964:	bf00      	nop
 8012966:	e002      	b.n	801296e <USB_HC_Init+0x11e>
      break;
 8012968:	bf00      	nop
 801296a:	e000      	b.n	801296e <USB_HC_Init+0x11e>
      break;
 801296c:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 801296e:	68bb      	ldr	r3, [r7, #8]
 8012970:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012974:	699a      	ldr	r2, [r3, #24]
 8012976:	78fb      	ldrb	r3, [r7, #3]
 8012978:	f003 030f 	and.w	r3, r3, #15
 801297c:	2101      	movs	r1, #1
 801297e:	fa01 f303 	lsl.w	r3, r1, r3
 8012982:	68b9      	ldr	r1, [r7, #8]
 8012984:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012988:	4313      	orrs	r3, r2
 801298a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	699b      	ldr	r3, [r3, #24]
 8012990:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8012998:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801299c:	2b00      	cmp	r3, #0
 801299e:	da03      	bge.n	80129a8 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80129a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80129a4:	613b      	str	r3, [r7, #16]
 80129a6:	e001      	b.n	80129ac <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 80129a8:	2300      	movs	r3, #0
 80129aa:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80129ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80129b0:	2b02      	cmp	r3, #2
 80129b2:	d103      	bne.n	80129bc <USB_HC_Init+0x16c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80129b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80129b8:	60fb      	str	r3, [r7, #12]
 80129ba:	e001      	b.n	80129c0 <USB_HC_Init+0x170>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80129bc:	2300      	movs	r3, #0
 80129be:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80129c0:	787b      	ldrb	r3, [r7, #1]
 80129c2:	059b      	lsls	r3, r3, #22
 80129c4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80129c8:	78bb      	ldrb	r3, [r7, #2]
 80129ca:	02db      	lsls	r3, r3, #11
 80129cc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80129d0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80129d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80129d6:	049b      	lsls	r3, r3, #18
 80129d8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80129dc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80129de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80129e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80129e4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80129e6:	693b      	ldr	r3, [r7, #16]
 80129e8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80129ea:	78fb      	ldrb	r3, [r7, #3]
 80129ec:	0159      	lsls	r1, r3, #5
 80129ee:	68bb      	ldr	r3, [r7, #8]
 80129f0:	440b      	add	r3, r1
 80129f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80129f6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80129fc:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80129fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012a02:	2b03      	cmp	r3, #3
 8012a04:	d10f      	bne.n	8012a26 <USB_HC_Init+0x1d6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8012a06:	78fb      	ldrb	r3, [r7, #3]
 8012a08:	015a      	lsls	r2, r3, #5
 8012a0a:	68bb      	ldr	r3, [r7, #8]
 8012a0c:	4413      	add	r3, r2
 8012a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	78fa      	ldrb	r2, [r7, #3]
 8012a16:	0151      	lsls	r1, r2, #5
 8012a18:	68ba      	ldr	r2, [r7, #8]
 8012a1a:	440a      	add	r2, r1
 8012a1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012a20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012a24:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8012a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a28:	4618      	mov	r0, r3
 8012a2a:	371c      	adds	r7, #28
 8012a2c:	46bd      	mov	sp, r7
 8012a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a32:	4770      	bx	lr

08012a34 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8012a34:	b580      	push	{r7, lr}
 8012a36:	b088      	sub	sp, #32
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	6078      	str	r0, [r7, #4]
 8012a3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8012a42:	683b      	ldr	r3, [r7, #0]
 8012a44:	785b      	ldrb	r3, [r3, #1]
 8012a46:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8012a48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012a4c:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8012a4e:	683b      	ldr	r3, [r7, #0]
 8012a50:	691b      	ldr	r3, [r3, #16]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d018      	beq.n	8012a88 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8012a56:	683b      	ldr	r3, [r7, #0]
 8012a58:	691b      	ldr	r3, [r3, #16]
 8012a5a:	683a      	ldr	r2, [r7, #0]
 8012a5c:	8912      	ldrh	r2, [r2, #8]
 8012a5e:	4413      	add	r3, r2
 8012a60:	3b01      	subs	r3, #1
 8012a62:	683a      	ldr	r2, [r7, #0]
 8012a64:	8912      	ldrh	r2, [r2, #8]
 8012a66:	fbb3 f3f2 	udiv	r3, r3, r2
 8012a6a:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8012a6c:	8bfa      	ldrh	r2, [r7, #30]
 8012a6e:	8a7b      	ldrh	r3, [r7, #18]
 8012a70:	429a      	cmp	r2, r3
 8012a72:	d90b      	bls.n	8012a8c <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8012a74:	8a7b      	ldrh	r3, [r7, #18]
 8012a76:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8012a78:	8bfb      	ldrh	r3, [r7, #30]
 8012a7a:	683a      	ldr	r2, [r7, #0]
 8012a7c:	8912      	ldrh	r2, [r2, #8]
 8012a7e:	fb02 f203 	mul.w	r2, r2, r3
 8012a82:	683b      	ldr	r3, [r7, #0]
 8012a84:	611a      	str	r2, [r3, #16]
 8012a86:	e001      	b.n	8012a8c <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8012a88:	2301      	movs	r3, #1
 8012a8a:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 8012a8c:	683b      	ldr	r3, [r7, #0]
 8012a8e:	78db      	ldrb	r3, [r3, #3]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d006      	beq.n	8012aa2 <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8012a94:	8bfb      	ldrh	r3, [r7, #30]
 8012a96:	683a      	ldr	r2, [r7, #0]
 8012a98:	8912      	ldrh	r2, [r2, #8]
 8012a9a:	fb02 f203 	mul.w	r2, r2, r3
 8012a9e:	683b      	ldr	r3, [r7, #0]
 8012aa0:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8012aa2:	683b      	ldr	r3, [r7, #0]
 8012aa4:	691b      	ldr	r3, [r3, #16]
 8012aa6:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8012aaa:	8bfb      	ldrh	r3, [r7, #30]
 8012aac:	04d9      	lsls	r1, r3, #19
 8012aae:	4b5f      	ldr	r3, [pc, #380]	; (8012c2c <USB_HC_StartXfer+0x1f8>)
 8012ab0:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8012ab2:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8012ab4:	683b      	ldr	r3, [r7, #0]
 8012ab6:	7a9b      	ldrb	r3, [r3, #10]
 8012ab8:	075b      	lsls	r3, r3, #29
 8012aba:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8012abe:	6979      	ldr	r1, [r7, #20]
 8012ac0:	0148      	lsls	r0, r1, #5
 8012ac2:	69b9      	ldr	r1, [r7, #24]
 8012ac4:	4401      	add	r1, r0
 8012ac6:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8012aca:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8012acc:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8012ace:	69bb      	ldr	r3, [r7, #24]
 8012ad0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012ad4:	689b      	ldr	r3, [r3, #8]
 8012ad6:	f003 0301 	and.w	r3, r3, #1
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	bf0c      	ite	eq
 8012ade:	2301      	moveq	r3, #1
 8012ae0:	2300      	movne	r3, #0
 8012ae2:	b2db      	uxtb	r3, r3
 8012ae4:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8012ae6:	697b      	ldr	r3, [r7, #20]
 8012ae8:	015a      	lsls	r2, r3, #5
 8012aea:	69bb      	ldr	r3, [r7, #24]
 8012aec:	4413      	add	r3, r2
 8012aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	697a      	ldr	r2, [r7, #20]
 8012af6:	0151      	lsls	r1, r2, #5
 8012af8:	69ba      	ldr	r2, [r7, #24]
 8012afa:	440a      	add	r2, r1
 8012afc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012b00:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012b04:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8012b06:	697b      	ldr	r3, [r7, #20]
 8012b08:	015a      	lsls	r2, r3, #5
 8012b0a:	69bb      	ldr	r3, [r7, #24]
 8012b0c:	4413      	add	r3, r2
 8012b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012b12:	681a      	ldr	r2, [r3, #0]
 8012b14:	7c7b      	ldrb	r3, [r7, #17]
 8012b16:	075b      	lsls	r3, r3, #29
 8012b18:	6979      	ldr	r1, [r7, #20]
 8012b1a:	0148      	lsls	r0, r1, #5
 8012b1c:	69b9      	ldr	r1, [r7, #24]
 8012b1e:	4401      	add	r1, r0
 8012b20:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8012b24:	4313      	orrs	r3, r2
 8012b26:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8012b28:	697b      	ldr	r3, [r7, #20]
 8012b2a:	015a      	lsls	r2, r3, #5
 8012b2c:	69bb      	ldr	r3, [r7, #24]
 8012b2e:	4413      	add	r3, r2
 8012b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	4a3e      	ldr	r2, [pc, #248]	; (8012c30 <USB_HC_StartXfer+0x1fc>)
 8012b38:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8012b3a:	4b3d      	ldr	r3, [pc, #244]	; (8012c30 <USB_HC_StartXfer+0x1fc>)
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012b42:	4a3b      	ldr	r2, [pc, #236]	; (8012c30 <USB_HC_StartXfer+0x1fc>)
 8012b44:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8012b46:	683b      	ldr	r3, [r7, #0]
 8012b48:	78db      	ldrb	r3, [r3, #3]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d006      	beq.n	8012b5c <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8012b4e:	4b38      	ldr	r3, [pc, #224]	; (8012c30 <USB_HC_StartXfer+0x1fc>)
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012b56:	4a36      	ldr	r2, [pc, #216]	; (8012c30 <USB_HC_StartXfer+0x1fc>)
 8012b58:	6013      	str	r3, [r2, #0]
 8012b5a:	e005      	b.n	8012b68 <USB_HC_StartXfer+0x134>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8012b5c:	4b34      	ldr	r3, [pc, #208]	; (8012c30 <USB_HC_StartXfer+0x1fc>)
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012b64:	4a32      	ldr	r2, [pc, #200]	; (8012c30 <USB_HC_StartXfer+0x1fc>)
 8012b66:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8012b68:	4b31      	ldr	r3, [pc, #196]	; (8012c30 <USB_HC_StartXfer+0x1fc>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012b70:	4a2f      	ldr	r2, [pc, #188]	; (8012c30 <USB_HC_StartXfer+0x1fc>)
 8012b72:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8012b74:	697b      	ldr	r3, [r7, #20]
 8012b76:	015a      	lsls	r2, r3, #5
 8012b78:	69bb      	ldr	r3, [r7, #24]
 8012b7a:	4413      	add	r3, r2
 8012b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012b80:	461a      	mov	r2, r3
 8012b82:	4b2b      	ldr	r3, [pc, #172]	; (8012c30 <USB_HC_StartXfer+0x1fc>)
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	6013      	str	r3, [r2, #0]

    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8012b88:	683b      	ldr	r3, [r7, #0]
 8012b8a:	78db      	ldrb	r3, [r3, #3]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d148      	bne.n	8012c22 <USB_HC_StartXfer+0x1ee>
 8012b90:	683b      	ldr	r3, [r7, #0]
 8012b92:	691b      	ldr	r3, [r3, #16]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d044      	beq.n	8012c22 <USB_HC_StartXfer+0x1ee>
    {
      switch (hc->ep_type)
 8012b98:	683b      	ldr	r3, [r7, #0]
 8012b9a:	79db      	ldrb	r3, [r3, #7]
 8012b9c:	2b03      	cmp	r3, #3
 8012b9e:	d831      	bhi.n	8012c04 <USB_HC_StartXfer+0x1d0>
 8012ba0:	a201      	add	r2, pc, #4	; (adr r2, 8012ba8 <USB_HC_StartXfer+0x174>)
 8012ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ba6:	bf00      	nop
 8012ba8:	08012bb9 	.word	0x08012bb9
 8012bac:	08012bdd 	.word	0x08012bdd
 8012bb0:	08012bb9 	.word	0x08012bb9
 8012bb4:	08012bdd 	.word	0x08012bdd
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8012bb8:	683b      	ldr	r3, [r7, #0]
 8012bba:	691b      	ldr	r3, [r3, #16]
 8012bbc:	3303      	adds	r3, #3
 8012bbe:	089b      	lsrs	r3, r3, #2
 8012bc0:	81fb      	strh	r3, [r7, #14]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8012bc2:	89fa      	ldrh	r2, [r7, #14]
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bc8:	b29b      	uxth	r3, r3
 8012bca:	429a      	cmp	r2, r3
 8012bcc:	d91c      	bls.n	8012c08 <USB_HC_StartXfer+0x1d4>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	699b      	ldr	r3, [r3, #24]
 8012bd2:	f043 0220 	orr.w	r2, r3, #32
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	619a      	str	r2, [r3, #24]
          }
          break;
 8012bda:	e015      	b.n	8012c08 <USB_HC_StartXfer+0x1d4>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8012bdc:	683b      	ldr	r3, [r7, #0]
 8012bde:	691b      	ldr	r3, [r3, #16]
 8012be0:	3303      	adds	r3, #3
 8012be2:	089b      	lsrs	r3, r3, #2
 8012be4:	81fb      	strh	r3, [r7, #14]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8012be6:	89fa      	ldrh	r2, [r7, #14]
 8012be8:	69bb      	ldr	r3, [r7, #24]
 8012bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012bee:	691b      	ldr	r3, [r3, #16]
 8012bf0:	b29b      	uxth	r3, r3
 8012bf2:	429a      	cmp	r2, r3
 8012bf4:	d90a      	bls.n	8012c0c <USB_HC_StartXfer+0x1d8>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	699b      	ldr	r3, [r3, #24]
 8012bfa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	619a      	str	r2, [r3, #24]
          }
          break;
 8012c02:	e003      	b.n	8012c0c <USB_HC_StartXfer+0x1d8>

        default:
          break;
 8012c04:	bf00      	nop
 8012c06:	e002      	b.n	8012c0e <USB_HC_StartXfer+0x1da>
          break;
 8012c08:	bf00      	nop
 8012c0a:	e000      	b.n	8012c0e <USB_HC_StartXfer+0x1da>
          break;
 8012c0c:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8012c0e:	683b      	ldr	r3, [r7, #0]
 8012c10:	68d9      	ldr	r1, [r3, #12]
 8012c12:	683b      	ldr	r3, [r7, #0]
 8012c14:	785a      	ldrb	r2, [r3, #1]
 8012c16:	683b      	ldr	r3, [r7, #0]
 8012c18:	691b      	ldr	r3, [r3, #16]
 8012c1a:	b29b      	uxth	r3, r3
 8012c1c:	6878      	ldr	r0, [r7, #4]
 8012c1e:	f7ff fc23 	bl	8012468 <USB_WritePacket>
    }

  return HAL_OK;
 8012c22:	2300      	movs	r3, #0
}
 8012c24:	4618      	mov	r0, r3
 8012c26:	3720      	adds	r7, #32
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	bd80      	pop	{r7, pc}
 8012c2c:	1ff80000 	.word	0x1ff80000
 8012c30:	200003ec 	.word	0x200003ec

08012c34 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012c34:	b480      	push	{r7}
 8012c36:	b085      	sub	sp, #20
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012c46:	695b      	ldr	r3, [r3, #20]
 8012c48:	b29b      	uxth	r3, r3
}
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	3714      	adds	r7, #20
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c54:	4770      	bx	lr

08012c56 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8012c56:	b480      	push	{r7}
 8012c58:	b087      	sub	sp, #28
 8012c5a:	af00      	add	r7, sp, #0
 8012c5c:	6078      	str	r0, [r7, #4]
 8012c5e:	460b      	mov	r3, r1
 8012c60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8012c66:	78fb      	ldrb	r3, [r7, #3]
 8012c68:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	015a      	lsls	r2, r3, #5
 8012c72:	693b      	ldr	r3, [r7, #16]
 8012c74:	4413      	add	r3, r2
 8012c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	0c9b      	lsrs	r3, r3, #18
 8012c7e:	f003 0303 	and.w	r3, r3, #3
 8012c82:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8012c84:	68bb      	ldr	r3, [r7, #8]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d002      	beq.n	8012c90 <USB_HC_Halt+0x3a>
 8012c8a:	68bb      	ldr	r3, [r7, #8]
 8012c8c:	2b02      	cmp	r3, #2
 8012c8e:	d16c      	bne.n	8012d6a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	015a      	lsls	r2, r3, #5
 8012c94:	693b      	ldr	r3, [r7, #16]
 8012c96:	4413      	add	r3, r2
 8012c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	68fa      	ldr	r2, [r7, #12]
 8012ca0:	0151      	lsls	r1, r2, #5
 8012ca2:	693a      	ldr	r2, [r7, #16]
 8012ca4:	440a      	add	r2, r1
 8012ca6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012caa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012cae:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d143      	bne.n	8012d44 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	015a      	lsls	r2, r3, #5
 8012cc0:	693b      	ldr	r3, [r7, #16]
 8012cc2:	4413      	add	r3, r2
 8012cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	68fa      	ldr	r2, [r7, #12]
 8012ccc:	0151      	lsls	r1, r2, #5
 8012cce:	693a      	ldr	r2, [r7, #16]
 8012cd0:	440a      	add	r2, r1
 8012cd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012cd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012cda:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	015a      	lsls	r2, r3, #5
 8012ce0:	693b      	ldr	r3, [r7, #16]
 8012ce2:	4413      	add	r3, r2
 8012ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	68fa      	ldr	r2, [r7, #12]
 8012cec:	0151      	lsls	r1, r2, #5
 8012cee:	693a      	ldr	r2, [r7, #16]
 8012cf0:	440a      	add	r2, r1
 8012cf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012cf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012cfa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	015a      	lsls	r2, r3, #5
 8012d00:	693b      	ldr	r3, [r7, #16]
 8012d02:	4413      	add	r3, r2
 8012d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	68fa      	ldr	r2, [r7, #12]
 8012d0c:	0151      	lsls	r1, r2, #5
 8012d0e:	693a      	ldr	r2, [r7, #16]
 8012d10:	440a      	add	r2, r1
 8012d12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012d16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012d1a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8012d1c:	697b      	ldr	r3, [r7, #20]
 8012d1e:	3301      	adds	r3, #1
 8012d20:	617b      	str	r3, [r7, #20]
 8012d22:	697b      	ldr	r3, [r7, #20]
 8012d24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012d28:	d81d      	bhi.n	8012d66 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	015a      	lsls	r2, r3, #5
 8012d2e:	693b      	ldr	r3, [r7, #16]
 8012d30:	4413      	add	r3, r2
 8012d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012d3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012d40:	d0ec      	beq.n	8012d1c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8012d42:	e080      	b.n	8012e46 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	015a      	lsls	r2, r3, #5
 8012d48:	693b      	ldr	r3, [r7, #16]
 8012d4a:	4413      	add	r3, r2
 8012d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	68fa      	ldr	r2, [r7, #12]
 8012d54:	0151      	lsls	r1, r2, #5
 8012d56:	693a      	ldr	r2, [r7, #16]
 8012d58:	440a      	add	r2, r1
 8012d5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012d5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012d62:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8012d64:	e06f      	b.n	8012e46 <USB_HC_Halt+0x1f0>
          break;
 8012d66:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8012d68:	e06d      	b.n	8012e46 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	015a      	lsls	r2, r3, #5
 8012d6e:	693b      	ldr	r3, [r7, #16]
 8012d70:	4413      	add	r3, r2
 8012d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	68fa      	ldr	r2, [r7, #12]
 8012d7a:	0151      	lsls	r1, r2, #5
 8012d7c:	693a      	ldr	r2, [r7, #16]
 8012d7e:	440a      	add	r2, r1
 8012d80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012d84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012d88:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8012d8a:	693b      	ldr	r3, [r7, #16]
 8012d8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012d90:	691b      	ldr	r3, [r3, #16]
 8012d92:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d143      	bne.n	8012e22 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	015a      	lsls	r2, r3, #5
 8012d9e:	693b      	ldr	r3, [r7, #16]
 8012da0:	4413      	add	r3, r2
 8012da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	68fa      	ldr	r2, [r7, #12]
 8012daa:	0151      	lsls	r1, r2, #5
 8012dac:	693a      	ldr	r2, [r7, #16]
 8012dae:	440a      	add	r2, r1
 8012db0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012db4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012db8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	015a      	lsls	r2, r3, #5
 8012dbe:	693b      	ldr	r3, [r7, #16]
 8012dc0:	4413      	add	r3, r2
 8012dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	68fa      	ldr	r2, [r7, #12]
 8012dca:	0151      	lsls	r1, r2, #5
 8012dcc:	693a      	ldr	r2, [r7, #16]
 8012dce:	440a      	add	r2, r1
 8012dd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012dd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012dd8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	015a      	lsls	r2, r3, #5
 8012dde:	693b      	ldr	r3, [r7, #16]
 8012de0:	4413      	add	r3, r2
 8012de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	68fa      	ldr	r2, [r7, #12]
 8012dea:	0151      	lsls	r1, r2, #5
 8012dec:	693a      	ldr	r2, [r7, #16]
 8012dee:	440a      	add	r2, r1
 8012df0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012df4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012df8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8012dfa:	697b      	ldr	r3, [r7, #20]
 8012dfc:	3301      	adds	r3, #1
 8012dfe:	617b      	str	r3, [r7, #20]
 8012e00:	697b      	ldr	r3, [r7, #20]
 8012e02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012e06:	d81d      	bhi.n	8012e44 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	015a      	lsls	r2, r3, #5
 8012e0c:	693b      	ldr	r3, [r7, #16]
 8012e0e:	4413      	add	r3, r2
 8012e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012e1e:	d0ec      	beq.n	8012dfa <USB_HC_Halt+0x1a4>
 8012e20:	e011      	b.n	8012e46 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	015a      	lsls	r2, r3, #5
 8012e26:	693b      	ldr	r3, [r7, #16]
 8012e28:	4413      	add	r3, r2
 8012e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	68fa      	ldr	r2, [r7, #12]
 8012e32:	0151      	lsls	r1, r2, #5
 8012e34:	693a      	ldr	r2, [r7, #16]
 8012e36:	440a      	add	r2, r1
 8012e38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012e3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012e40:	6013      	str	r3, [r2, #0]
 8012e42:	e000      	b.n	8012e46 <USB_HC_Halt+0x1f0>
          break;
 8012e44:	bf00      	nop
    }
  }

  return HAL_OK;
 8012e46:	2300      	movs	r3, #0
}
 8012e48:	4618      	mov	r0, r3
 8012e4a:	371c      	adds	r7, #28
 8012e4c:	46bd      	mov	sp, r7
 8012e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e52:	4770      	bx	lr

08012e54 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b086      	sub	sp, #24
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8012e60:	2300      	movs	r3, #0
 8012e62:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8012e64:	6878      	ldr	r0, [r7, #4]
 8012e66:	f7ff fa7c 	bl	8012362 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8012e6a:	2110      	movs	r1, #16
 8012e6c:	6878      	ldr	r0, [r7, #4]
 8012e6e:	f7ff fab3 	bl	80123d8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8012e72:	6878      	ldr	r0, [r7, #4]
 8012e74:	f7ff fad6 	bl	8012424 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8012e78:	2300      	movs	r3, #0
 8012e7a:	613b      	str	r3, [r7, #16]
 8012e7c:	e01f      	b.n	8012ebe <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8012e7e:	693b      	ldr	r3, [r7, #16]
 8012e80:	015a      	lsls	r2, r3, #5
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	4413      	add	r3, r2
 8012e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8012e8e:	68bb      	ldr	r3, [r7, #8]
 8012e90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012e94:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8012e96:	68bb      	ldr	r3, [r7, #8]
 8012e98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012e9c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8012e9e:	68bb      	ldr	r3, [r7, #8]
 8012ea0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012ea4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8012ea6:	693b      	ldr	r3, [r7, #16]
 8012ea8:	015a      	lsls	r2, r3, #5
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	4413      	add	r3, r2
 8012eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012eb2:	461a      	mov	r2, r3
 8012eb4:	68bb      	ldr	r3, [r7, #8]
 8012eb6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8012eb8:	693b      	ldr	r3, [r7, #16]
 8012eba:	3301      	adds	r3, #1
 8012ebc:	613b      	str	r3, [r7, #16]
 8012ebe:	693b      	ldr	r3, [r7, #16]
 8012ec0:	2b0f      	cmp	r3, #15
 8012ec2:	d9dc      	bls.n	8012e7e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	613b      	str	r3, [r7, #16]
 8012ec8:	e034      	b.n	8012f34 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8012eca:	693b      	ldr	r3, [r7, #16]
 8012ecc:	015a      	lsls	r2, r3, #5
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	4413      	add	r3, r2
 8012ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8012eda:	68bb      	ldr	r3, [r7, #8]
 8012edc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012ee0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8012ee2:	68bb      	ldr	r3, [r7, #8]
 8012ee4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012ee8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8012eea:	68bb      	ldr	r3, [r7, #8]
 8012eec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012ef0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8012ef2:	693b      	ldr	r3, [r7, #16]
 8012ef4:	015a      	lsls	r2, r3, #5
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	4413      	add	r3, r2
 8012efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012efe:	461a      	mov	r2, r3
 8012f00:	68bb      	ldr	r3, [r7, #8]
 8012f02:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8012f04:	697b      	ldr	r3, [r7, #20]
 8012f06:	3301      	adds	r3, #1
 8012f08:	617b      	str	r3, [r7, #20]
 8012f0a:	697b      	ldr	r3, [r7, #20]
 8012f0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012f10:	d80c      	bhi.n	8012f2c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8012f12:	693b      	ldr	r3, [r7, #16]
 8012f14:	015a      	lsls	r2, r3, #5
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	4413      	add	r3, r2
 8012f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012f24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012f28:	d0ec      	beq.n	8012f04 <USB_StopHost+0xb0>
 8012f2a:	e000      	b.n	8012f2e <USB_StopHost+0xda>
        break;
 8012f2c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8012f2e:	693b      	ldr	r3, [r7, #16]
 8012f30:	3301      	adds	r3, #1
 8012f32:	613b      	str	r3, [r7, #16]
 8012f34:	693b      	ldr	r3, [r7, #16]
 8012f36:	2b0f      	cmp	r3, #15
 8012f38:	d9c7      	bls.n	8012eca <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012f40:	461a      	mov	r2, r3
 8012f42:	f04f 33ff 	mov.w	r3, #4294967295
 8012f46:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8012f4e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8012f50:	6878      	ldr	r0, [r7, #4]
 8012f52:	f7ff f9f5 	bl	8012340 <USB_EnableGlobalInt>

  return HAL_OK;
 8012f56:	2300      	movs	r3, #0
}
 8012f58:	4618      	mov	r0, r3
 8012f5a:	3718      	adds	r7, #24
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	bd80      	pop	{r7, pc}

08012f60 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012f60:	b580      	push	{r7, lr}
 8012f62:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8012f64:	4904      	ldr	r1, [pc, #16]	; (8012f78 <MX_FATFS_Init+0x18>)
 8012f66:	4805      	ldr	r0, [pc, #20]	; (8012f7c <MX_FATFS_Init+0x1c>)
 8012f68:	f005 ff58 	bl	8018e1c <FATFS_LinkDriver>
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	461a      	mov	r2, r3
 8012f70:	4b03      	ldr	r3, [pc, #12]	; (8012f80 <MX_FATFS_Init+0x20>)
 8012f72:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012f74:	bf00      	nop
 8012f76:	bd80      	pop	{r7, pc}
 8012f78:	20003960 	.word	0x20003960
 8012f7c:	0801fc94 	.word	0x0801fc94
 8012f80:	20007f70 	.word	0x20007f70

08012f84 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8012f84:	b480      	push	{r7}
 8012f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8012f88:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	46bd      	mov	sp, r7
 8012f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f92:	4770      	bx	lr

08012f94 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8012f94:	b480      	push	{r7}
 8012f96:	b083      	sub	sp, #12
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8012f9e:	2300      	movs	r3, #0
}
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	370c      	adds	r7, #12
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012faa:	4770      	bx	lr

08012fac <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8012fac:	b580      	push	{r7, lr}
 8012fae:	b084      	sub	sp, #16
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8012fb6:	2301      	movs	r3, #1
 8012fb8:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8012fba:	79fb      	ldrb	r3, [r7, #7]
 8012fbc:	4619      	mov	r1, r3
 8012fbe:	4808      	ldr	r0, [pc, #32]	; (8012fe0 <USBH_status+0x34>)
 8012fc0:	f001 fa2d 	bl	801441e <USBH_MSC_UnitIsReady>
 8012fc4:	4603      	mov	r3, r0
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d002      	beq.n	8012fd0 <USBH_status+0x24>
  {
    res = RES_OK;
 8012fca:	2300      	movs	r3, #0
 8012fcc:	73fb      	strb	r3, [r7, #15]
 8012fce:	e001      	b.n	8012fd4 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8012fd0:	2301      	movs	r3, #1
 8012fd2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8012fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	3710      	adds	r7, #16
 8012fda:	46bd      	mov	sp, r7
 8012fdc:	bd80      	pop	{r7, pc}
 8012fde:	bf00      	nop
 8012fe0:	20004bac 	.word	0x20004bac

08012fe4 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b094      	sub	sp, #80	; 0x50
 8012fe8:	af02      	add	r7, sp, #8
 8012fea:	60b9      	str	r1, [r7, #8]
 8012fec:	607a      	str	r2, [r7, #4]
 8012fee:	603b      	str	r3, [r7, #0]
 8012ff0:	4603      	mov	r3, r0
 8012ff2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012ff4:	2301      	movs	r3, #1
 8012ff6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8012ffa:	7bf9      	ldrb	r1, [r7, #15]
 8012ffc:	683b      	ldr	r3, [r7, #0]
 8012ffe:	9300      	str	r3, [sp, #0]
 8013000:	68bb      	ldr	r3, [r7, #8]
 8013002:	687a      	ldr	r2, [r7, #4]
 8013004:	4812      	ldr	r0, [pc, #72]	; (8013050 <USBH_read+0x6c>)
 8013006:	f001 fa54 	bl	80144b2 <USBH_MSC_Read>
 801300a:	4603      	mov	r3, r0
 801300c:	2b00      	cmp	r3, #0
 801300e:	d103      	bne.n	8013018 <USBH_read+0x34>
  {
    res = RES_OK;
 8013010:	2300      	movs	r3, #0
 8013012:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8013016:	e015      	b.n	8013044 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8013018:	f107 0210 	add.w	r2, r7, #16
 801301c:	7bfb      	ldrb	r3, [r7, #15]
 801301e:	4619      	mov	r1, r3
 8013020:	480b      	ldr	r0, [pc, #44]	; (8013050 <USBH_read+0x6c>)
 8013022:	f001 fa22 	bl	801446a <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8013026:	7f7b      	ldrb	r3, [r7, #29]
 8013028:	2b28      	cmp	r3, #40	; 0x28
 801302a:	d003      	beq.n	8013034 <USBH_read+0x50>
 801302c:	2b3a      	cmp	r3, #58	; 0x3a
 801302e:	d001      	beq.n	8013034 <USBH_read+0x50>
 8013030:	2b04      	cmp	r3, #4
 8013032:	d103      	bne.n	801303c <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8013034:	2303      	movs	r3, #3
 8013036:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 801303a:	e003      	b.n	8013044 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 801303c:	2301      	movs	r3, #1
 801303e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8013042:	bf00      	nop
    }
  }

  return res;
 8013044:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8013048:	4618      	mov	r0, r3
 801304a:	3748      	adds	r7, #72	; 0x48
 801304c:	46bd      	mov	sp, r7
 801304e:	bd80      	pop	{r7, pc}
 8013050:	20004bac 	.word	0x20004bac

08013054 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8013054:	b580      	push	{r7, lr}
 8013056:	b094      	sub	sp, #80	; 0x50
 8013058:	af02      	add	r7, sp, #8
 801305a:	60b9      	str	r1, [r7, #8]
 801305c:	607a      	str	r2, [r7, #4]
 801305e:	603b      	str	r3, [r7, #0]
 8013060:	4603      	mov	r3, r0
 8013062:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013064:	2301      	movs	r3, #1
 8013066:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 801306a:	7bf9      	ldrb	r1, [r7, #15]
 801306c:	683b      	ldr	r3, [r7, #0]
 801306e:	9300      	str	r3, [sp, #0]
 8013070:	68bb      	ldr	r3, [r7, #8]
 8013072:	687a      	ldr	r2, [r7, #4]
 8013074:	4817      	ldr	r0, [pc, #92]	; (80130d4 <USBH_write+0x80>)
 8013076:	f001 fa85 	bl	8014584 <USBH_MSC_Write>
 801307a:	4603      	mov	r3, r0
 801307c:	2b00      	cmp	r3, #0
 801307e:	d103      	bne.n	8013088 <USBH_write+0x34>
  {
    res = RES_OK;
 8013080:	2300      	movs	r3, #0
 8013082:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8013086:	e01f      	b.n	80130c8 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8013088:	f107 0210 	add.w	r2, r7, #16
 801308c:	7bfb      	ldrb	r3, [r7, #15]
 801308e:	4619      	mov	r1, r3
 8013090:	4810      	ldr	r0, [pc, #64]	; (80130d4 <USBH_write+0x80>)
 8013092:	f001 f9ea 	bl	801446a <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8013096:	7f7b      	ldrb	r3, [r7, #29]
 8013098:	2b27      	cmp	r3, #39	; 0x27
 801309a:	d009      	beq.n	80130b0 <USBH_write+0x5c>
 801309c:	2b27      	cmp	r3, #39	; 0x27
 801309e:	dc02      	bgt.n	80130a6 <USBH_write+0x52>
 80130a0:	2b04      	cmp	r3, #4
 80130a2:	d009      	beq.n	80130b8 <USBH_write+0x64>
 80130a4:	e00c      	b.n	80130c0 <USBH_write+0x6c>
 80130a6:	2b28      	cmp	r3, #40	; 0x28
 80130a8:	d006      	beq.n	80130b8 <USBH_write+0x64>
 80130aa:	2b3a      	cmp	r3, #58	; 0x3a
 80130ac:	d004      	beq.n	80130b8 <USBH_write+0x64>
 80130ae:	e007      	b.n	80130c0 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80130b0:	2302      	movs	r3, #2
 80130b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80130b6:	e007      	b.n	80130c8 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80130b8:	2303      	movs	r3, #3
 80130ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80130be:	e003      	b.n	80130c8 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 80130c0:	2301      	movs	r3, #1
 80130c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80130c6:	bf00      	nop
    }
  }

  return res;
 80130c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80130cc:	4618      	mov	r0, r3
 80130ce:	3748      	adds	r7, #72	; 0x48
 80130d0:	46bd      	mov	sp, r7
 80130d2:	bd80      	pop	{r7, pc}
 80130d4:	20004bac 	.word	0x20004bac

080130d8 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b090      	sub	sp, #64	; 0x40
 80130dc:	af00      	add	r7, sp, #0
 80130de:	4603      	mov	r3, r0
 80130e0:	603a      	str	r2, [r7, #0]
 80130e2:	71fb      	strb	r3, [r7, #7]
 80130e4:	460b      	mov	r3, r1
 80130e6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80130e8:	2301      	movs	r3, #1
 80130ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 80130ee:	79bb      	ldrb	r3, [r7, #6]
 80130f0:	2b03      	cmp	r3, #3
 80130f2:	d852      	bhi.n	801319a <USBH_ioctl+0xc2>
 80130f4:	a201      	add	r2, pc, #4	; (adr r2, 80130fc <USBH_ioctl+0x24>)
 80130f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130fa:	bf00      	nop
 80130fc:	0801310d 	.word	0x0801310d
 8013100:	08013115 	.word	0x08013115
 8013104:	0801313f 	.word	0x0801313f
 8013108:	0801316b 	.word	0x0801316b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 801310c:	2300      	movs	r3, #0
 801310e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8013112:	e045      	b.n	80131a0 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8013114:	f107 0208 	add.w	r2, r7, #8
 8013118:	79fb      	ldrb	r3, [r7, #7]
 801311a:	4619      	mov	r1, r3
 801311c:	4823      	ldr	r0, [pc, #140]	; (80131ac <USBH_ioctl+0xd4>)
 801311e:	f001 f9a4 	bl	801446a <USBH_MSC_GetLUNInfo>
 8013122:	4603      	mov	r3, r0
 8013124:	2b00      	cmp	r3, #0
 8013126:	d106      	bne.n	8013136 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8013128:	68fa      	ldr	r2, [r7, #12]
 801312a:	683b      	ldr	r3, [r7, #0]
 801312c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 801312e:	2300      	movs	r3, #0
 8013130:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8013134:	e034      	b.n	80131a0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8013136:	2301      	movs	r3, #1
 8013138:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 801313c:	e030      	b.n	80131a0 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 801313e:	f107 0208 	add.w	r2, r7, #8
 8013142:	79fb      	ldrb	r3, [r7, #7]
 8013144:	4619      	mov	r1, r3
 8013146:	4819      	ldr	r0, [pc, #100]	; (80131ac <USBH_ioctl+0xd4>)
 8013148:	f001 f98f 	bl	801446a <USBH_MSC_GetLUNInfo>
 801314c:	4603      	mov	r3, r0
 801314e:	2b00      	cmp	r3, #0
 8013150:	d107      	bne.n	8013162 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8013152:	8a3b      	ldrh	r3, [r7, #16]
 8013154:	461a      	mov	r2, r3
 8013156:	683b      	ldr	r3, [r7, #0]
 8013158:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 801315a:	2300      	movs	r3, #0
 801315c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8013160:	e01e      	b.n	80131a0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8013162:	2301      	movs	r3, #1
 8013164:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8013168:	e01a      	b.n	80131a0 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 801316a:	f107 0208 	add.w	r2, r7, #8
 801316e:	79fb      	ldrb	r3, [r7, #7]
 8013170:	4619      	mov	r1, r3
 8013172:	480e      	ldr	r0, [pc, #56]	; (80131ac <USBH_ioctl+0xd4>)
 8013174:	f001 f979 	bl	801446a <USBH_MSC_GetLUNInfo>
 8013178:	4603      	mov	r3, r0
 801317a:	2b00      	cmp	r3, #0
 801317c:	d109      	bne.n	8013192 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 801317e:	8a3b      	ldrh	r3, [r7, #16]
 8013180:	0a5b      	lsrs	r3, r3, #9
 8013182:	b29b      	uxth	r3, r3
 8013184:	461a      	mov	r2, r3
 8013186:	683b      	ldr	r3, [r7, #0]
 8013188:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 801318a:	2300      	movs	r3, #0
 801318c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8013190:	e006      	b.n	80131a0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8013192:	2301      	movs	r3, #1
 8013194:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8013198:	e002      	b.n	80131a0 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 801319a:	2304      	movs	r3, #4
 801319c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 80131a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80131a4:	4618      	mov	r0, r3
 80131a6:	3740      	adds	r7, #64	; 0x40
 80131a8:	46bd      	mov	sp, r7
 80131aa:	bd80      	pop	{r7, pc}
 80131ac:	20004bac 	.word	0x20004bac

080131b0 <MX_MEMS_Init>:
static void Hum_Sensor_Handler(uint32_t Instance);
static void Press_Sensor_Handler(uint32_t Instance);
static void MX_IKS01A3_DataLogTerminal_Init(void);
static void MX_IKS01A3_DataLogTerminal_Process(void);

void MX_MEMS_Init(void) {
 80131b0:	b580      	push	{r7, lr}
 80131b2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SV */

	/* USER CODE END SV */

	/* USER CODE BEGIN MEMS_Init_PreTreatment */
	UART_Write(
 80131b4:	4804      	ldr	r0, [pc, #16]	; (80131c8 <MX_MEMS_Init+0x18>)
 80131b6:	f7ee fcc1 	bl	8001b3c <UART_Write>
				"------------------------------------MEMS INIT STARTING------------------------------------\r\n");
	/* USER CODE END MEMS_Init_PreTreatment */

	/* Initialize the peripherals and the MEMS components */
	MX_IKS01A3_DataLogTerminal_Init();
 80131ba:	f000 f80f 	bl	80131dc <MX_IKS01A3_DataLogTerminal_Init>

	/* USER CODE BEGIN MEMS_Init_PostTreatment */
	UART_Write(
 80131be:	4803      	ldr	r0, [pc, #12]	; (80131cc <MX_MEMS_Init+0x1c>)
 80131c0:	f7ee fcbc 	bl	8001b3c <UART_Write>
	  			"------------------------------------MEMS INIT FINISHED------------------------------------\r\n");
	/* USER CODE END MEMS_Init_PostTreatment */
}
 80131c4:	bf00      	nop
 80131c6:	bd80      	pop	{r7, pc}
 80131c8:	0801f7d0 	.word	0x0801f7d0
 80131cc:	0801f830 	.word	0x0801f830

080131d0 <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void) {
 80131d0:	b580      	push	{r7, lr}
 80131d2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MEMS_Process_PreTreatment */

	/* USER CODE END MEMS_Process_PreTreatment */

	MX_IKS01A3_DataLogTerminal_Process();
 80131d4:	f000 f996 	bl	8013504 <MX_IKS01A3_DataLogTerminal_Process>

	/* USER CODE BEGIN MEMS_Process_PostTreatment */

	/* USER CODE END MEMS_Process_PostTreatment */
}
 80131d8:	bf00      	nop
 80131da:	bd80      	pop	{r7, pc}

080131dc <MX_IKS01A3_DataLogTerminal_Init>:

/**
 * @brief  Initialize the DataLogTerminal application
 * @retval None
 */
void MX_IKS01A3_DataLogTerminal_Init(void) {
 80131dc:	b5b0      	push	{r4, r5, r7, lr}
 80131de:	b088      	sub	sp, #32
 80131e0:	af04      	add	r7, sp, #16
//  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;

	/* Initialize Virtual COM Port */
//	BSP_COM_Init(COM1);

	IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0,
 80131e2:	2103      	movs	r1, #3
 80131e4:	2000      	movs	r0, #0
 80131e6:	f7f6 fa11 	bl	800960c <IKS01A3_MOTION_SENSOR_Init>
			MOTION_ACCELERO | MOTION_GYRO);

	IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2DW12_0, MOTION_ACCELERO);
 80131ea:	2102      	movs	r1, #2
 80131ec:	2001      	movs	r0, #1
 80131ee:	f7f6 fa0d 	bl	800960c <IKS01A3_MOTION_SENSOR_Init>

	IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2MDL_0, MOTION_MAGNETO);
 80131f2:	2104      	movs	r1, #4
 80131f4:	2002      	movs	r0, #2
 80131f6:	f7f6 fa09 	bl	800960c <IKS01A3_MOTION_SENSOR_Init>

	for (i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++) {
 80131fa:	2300      	movs	r3, #0
 80131fc:	60fb      	str	r3, [r7, #12]
 80131fe:	e0c3      	b.n	8013388 <MX_IKS01A3_DataLogTerminal_Init+0x1ac>
		IKS01A3_MOTION_SENSOR_GetCapabilities(i, &MotionCapabilities[i]);
 8013200:	68f8      	ldr	r0, [r7, #12]
 8013202:	68fa      	ldr	r2, [r7, #12]
 8013204:	4613      	mov	r3, r2
 8013206:	00db      	lsls	r3, r3, #3
 8013208:	1a9b      	subs	r3, r3, r2
 801320a:	009b      	lsls	r3, r3, #2
 801320c:	4ab1      	ldr	r2, [pc, #708]	; (80134d4 <MX_IKS01A3_DataLogTerminal_Init+0x2f8>)
 801320e:	4413      	add	r3, r2
 8013210:	4619      	mov	r1, r3
 8013212:	f7f6 faf1 	bl	80097f8 <IKS01A3_MOTION_SENSOR_GetCapabilities>
		snprintf(dataOut, MAX_BUF_SIZE,
				"\r\nMotion Sensor Instance %d capabilities: \r\n ACCELEROMETER: %d\r\n GYROSCOPE: %d\r\n MAGNETOMETER: %d\r\n LOW POWER: %d\r\n",
				i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro,
 8013216:	49af      	ldr	r1, [pc, #700]	; (80134d4 <MX_IKS01A3_DataLogTerminal_Init+0x2f8>)
 8013218:	68fa      	ldr	r2, [r7, #12]
 801321a:	4613      	mov	r3, r2
 801321c:	00db      	lsls	r3, r3, #3
 801321e:	1a9b      	subs	r3, r3, r2
 8013220:	009b      	lsls	r3, r3, #2
 8013222:	440b      	add	r3, r1
 8013224:	781b      	ldrb	r3, [r3, #0]
		snprintf(dataOut, MAX_BUF_SIZE,
 8013226:	4618      	mov	r0, r3
				i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro,
 8013228:	49aa      	ldr	r1, [pc, #680]	; (80134d4 <MX_IKS01A3_DataLogTerminal_Init+0x2f8>)
 801322a:	68fa      	ldr	r2, [r7, #12]
 801322c:	4613      	mov	r3, r2
 801322e:	00db      	lsls	r3, r3, #3
 8013230:	1a9b      	subs	r3, r3, r2
 8013232:	009b      	lsls	r3, r3, #2
 8013234:	440b      	add	r3, r1
 8013236:	3301      	adds	r3, #1
 8013238:	781b      	ldrb	r3, [r3, #0]
		snprintf(dataOut, MAX_BUF_SIZE,
 801323a:	461c      	mov	r4, r3
				MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 801323c:	49a5      	ldr	r1, [pc, #660]	; (80134d4 <MX_IKS01A3_DataLogTerminal_Init+0x2f8>)
 801323e:	68fa      	ldr	r2, [r7, #12]
 8013240:	4613      	mov	r3, r2
 8013242:	00db      	lsls	r3, r3, #3
 8013244:	1a9b      	subs	r3, r3, r2
 8013246:	009b      	lsls	r3, r3, #2
 8013248:	440b      	add	r3, r1
 801324a:	3302      	adds	r3, #2
 801324c:	781b      	ldrb	r3, [r3, #0]
		snprintf(dataOut, MAX_BUF_SIZE,
 801324e:	461d      	mov	r5, r3
				MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8013250:	49a0      	ldr	r1, [pc, #640]	; (80134d4 <MX_IKS01A3_DataLogTerminal_Init+0x2f8>)
 8013252:	68fa      	ldr	r2, [r7, #12]
 8013254:	4613      	mov	r3, r2
 8013256:	00db      	lsls	r3, r3, #3
 8013258:	1a9b      	subs	r3, r3, r2
 801325a:	009b      	lsls	r3, r3, #2
 801325c:	440b      	add	r3, r1
 801325e:	3303      	adds	r3, #3
 8013260:	781b      	ldrb	r3, [r3, #0]
		snprintf(dataOut, MAX_BUF_SIZE,
 8013262:	9303      	str	r3, [sp, #12]
 8013264:	9502      	str	r5, [sp, #8]
 8013266:	9401      	str	r4, [sp, #4]
 8013268:	9000      	str	r0, [sp, #0]
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	4a9a      	ldr	r2, [pc, #616]	; (80134d8 <MX_IKS01A3_DataLogTerminal_Init+0x2fc>)
 801326e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013272:	489a      	ldr	r0, [pc, #616]	; (80134dc <MX_IKS01A3_DataLogTerminal_Init+0x300>)
 8013274:	f009 fd50 	bl	801cd18 <sniprintf>
		printf("%s", dataOut);
 8013278:	4998      	ldr	r1, [pc, #608]	; (80134dc <MX_IKS01A3_DataLogTerminal_Init+0x300>)
 801327a:	4899      	ldr	r0, [pc, #612]	; (80134e0 <MX_IKS01A3_DataLogTerminal_Init+0x304>)
 801327c:	f009 fd24 	bl	801ccc8 <iprintf>
//    UART_Write(dataOut);
		floatToInt(MotionCapabilities[i].AccMaxOdr, &out_value_odr, 3);
 8013280:	4994      	ldr	r1, [pc, #592]	; (80134d4 <MX_IKS01A3_DataLogTerminal_Init+0x2f8>)
 8013282:	68fa      	ldr	r2, [r7, #12]
 8013284:	4613      	mov	r3, r2
 8013286:	00db      	lsls	r3, r3, #3
 8013288:	1a9b      	subs	r3, r3, r2
 801328a:	009b      	lsls	r3, r3, #2
 801328c:	440b      	add	r3, r1
 801328e:	3314      	adds	r3, #20
 8013290:	edd3 7a00 	vldr	s15, [r3]
 8013294:	463b      	mov	r3, r7
 8013296:	2103      	movs	r1, #3
 8013298:	4618      	mov	r0, r3
 801329a:	eeb0 0a67 	vmov.f32	s0, s15
 801329e:	f000 f99f 	bl	80135e0 <floatToInt>
		snprintf(dataOut, MAX_BUF_SIZE,
				" MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n",
				(int) out_value_odr.out_int, (int) out_value_odr.out_dec,
 80132a2:	687b      	ldr	r3, [r7, #4]
		snprintf(dataOut, MAX_BUF_SIZE,
 80132a4:	461c      	mov	r4, r3
				(int) out_value_odr.out_int, (int) out_value_odr.out_dec,
 80132a6:	68bb      	ldr	r3, [r7, #8]
		snprintf(dataOut, MAX_BUF_SIZE,
 80132a8:	4618      	mov	r0, r3
				(int) MotionCapabilities[i].AccMaxFS);
 80132aa:	498a      	ldr	r1, [pc, #552]	; (80134d4 <MX_IKS01A3_DataLogTerminal_Init+0x2f8>)
 80132ac:	68fa      	ldr	r2, [r7, #12]
 80132ae:	4613      	mov	r3, r2
 80132b0:	00db      	lsls	r3, r3, #3
 80132b2:	1a9b      	subs	r3, r3, r2
 80132b4:	009b      	lsls	r3, r3, #2
 80132b6:	440b      	add	r3, r1
 80132b8:	3308      	adds	r3, #8
 80132ba:	681b      	ldr	r3, [r3, #0]
		snprintf(dataOut, MAX_BUF_SIZE,
 80132bc:	9301      	str	r3, [sp, #4]
 80132be:	9000      	str	r0, [sp, #0]
 80132c0:	4623      	mov	r3, r4
 80132c2:	4a88      	ldr	r2, [pc, #544]	; (80134e4 <MX_IKS01A3_DataLogTerminal_Init+0x308>)
 80132c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80132c8:	4884      	ldr	r0, [pc, #528]	; (80134dc <MX_IKS01A3_DataLogTerminal_Init+0x300>)
 80132ca:	f009 fd25 	bl	801cd18 <sniprintf>
		printf("%s", dataOut);
 80132ce:	4983      	ldr	r1, [pc, #524]	; (80134dc <MX_IKS01A3_DataLogTerminal_Init+0x300>)
 80132d0:	4883      	ldr	r0, [pc, #524]	; (80134e0 <MX_IKS01A3_DataLogTerminal_Init+0x304>)
 80132d2:	f009 fcf9 	bl	801ccc8 <iprintf>
//    UART_Write(dataOut);
		floatToInt(MotionCapabilities[i].GyroMaxOdr, &out_value_odr, 3);
 80132d6:	497f      	ldr	r1, [pc, #508]	; (80134d4 <MX_IKS01A3_DataLogTerminal_Init+0x2f8>)
 80132d8:	68fa      	ldr	r2, [r7, #12]
 80132da:	4613      	mov	r3, r2
 80132dc:	00db      	lsls	r3, r3, #3
 80132de:	1a9b      	subs	r3, r3, r2
 80132e0:	009b      	lsls	r3, r3, #2
 80132e2:	440b      	add	r3, r1
 80132e4:	3310      	adds	r3, #16
 80132e6:	edd3 7a00 	vldr	s15, [r3]
 80132ea:	463b      	mov	r3, r7
 80132ec:	2103      	movs	r1, #3
 80132ee:	4618      	mov	r0, r3
 80132f0:	eeb0 0a67 	vmov.f32	s0, s15
 80132f4:	f000 f974 	bl	80135e0 <floatToInt>
		snprintf(dataOut, MAX_BUF_SIZE,
				" MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n",
				(int) out_value_odr.out_int, (int) out_value_odr.out_dec,
 80132f8:	687b      	ldr	r3, [r7, #4]
		snprintf(dataOut, MAX_BUF_SIZE,
 80132fa:	461c      	mov	r4, r3
				(int) out_value_odr.out_int, (int) out_value_odr.out_dec,
 80132fc:	68bb      	ldr	r3, [r7, #8]
		snprintf(dataOut, MAX_BUF_SIZE,
 80132fe:	4618      	mov	r0, r3
				(int) MotionCapabilities[i].GyroMaxFS);
 8013300:	4974      	ldr	r1, [pc, #464]	; (80134d4 <MX_IKS01A3_DataLogTerminal_Init+0x2f8>)
 8013302:	68fa      	ldr	r2, [r7, #12]
 8013304:	4613      	mov	r3, r2
 8013306:	00db      	lsls	r3, r3, #3
 8013308:	1a9b      	subs	r3, r3, r2
 801330a:	009b      	lsls	r3, r3, #2
 801330c:	440b      	add	r3, r1
 801330e:	3304      	adds	r3, #4
 8013310:	681b      	ldr	r3, [r3, #0]
		snprintf(dataOut, MAX_BUF_SIZE,
 8013312:	9301      	str	r3, [sp, #4]
 8013314:	9000      	str	r0, [sp, #0]
 8013316:	4623      	mov	r3, r4
 8013318:	4a73      	ldr	r2, [pc, #460]	; (80134e8 <MX_IKS01A3_DataLogTerminal_Init+0x30c>)
 801331a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801331e:	486f      	ldr	r0, [pc, #444]	; (80134dc <MX_IKS01A3_DataLogTerminal_Init+0x300>)
 8013320:	f009 fcfa 	bl	801cd18 <sniprintf>
		printf("%s", dataOut);
 8013324:	496d      	ldr	r1, [pc, #436]	; (80134dc <MX_IKS01A3_DataLogTerminal_Init+0x300>)
 8013326:	486e      	ldr	r0, [pc, #440]	; (80134e0 <MX_IKS01A3_DataLogTerminal_Init+0x304>)
 8013328:	f009 fcce 	bl	801ccc8 <iprintf>
//    UART_Write(dataOut);
		floatToInt(MotionCapabilities[i].MagMaxOdr, &out_value_odr, 3);
 801332c:	4969      	ldr	r1, [pc, #420]	; (80134d4 <MX_IKS01A3_DataLogTerminal_Init+0x2f8>)
 801332e:	68fa      	ldr	r2, [r7, #12]
 8013330:	4613      	mov	r3, r2
 8013332:	00db      	lsls	r3, r3, #3
 8013334:	1a9b      	subs	r3, r3, r2
 8013336:	009b      	lsls	r3, r3, #2
 8013338:	440b      	add	r3, r1
 801333a:	3318      	adds	r3, #24
 801333c:	edd3 7a00 	vldr	s15, [r3]
 8013340:	463b      	mov	r3, r7
 8013342:	2103      	movs	r1, #3
 8013344:	4618      	mov	r0, r3
 8013346:	eeb0 0a67 	vmov.f32	s0, s15
 801334a:	f000 f949 	bl	80135e0 <floatToInt>
		snprintf(dataOut, MAX_BUF_SIZE,
				" MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n",
				(int) out_value_odr.out_int, (int) out_value_odr.out_dec,
 801334e:	687b      	ldr	r3, [r7, #4]
		snprintf(dataOut, MAX_BUF_SIZE,
 8013350:	461c      	mov	r4, r3
				(int) out_value_odr.out_int, (int) out_value_odr.out_dec,
 8013352:	68bb      	ldr	r3, [r7, #8]
		snprintf(dataOut, MAX_BUF_SIZE,
 8013354:	4618      	mov	r0, r3
				(int) MotionCapabilities[i].MagMaxFS);
 8013356:	495f      	ldr	r1, [pc, #380]	; (80134d4 <MX_IKS01A3_DataLogTerminal_Init+0x2f8>)
 8013358:	68fa      	ldr	r2, [r7, #12]
 801335a:	4613      	mov	r3, r2
 801335c:	00db      	lsls	r3, r3, #3
 801335e:	1a9b      	subs	r3, r3, r2
 8013360:	009b      	lsls	r3, r3, #2
 8013362:	440b      	add	r3, r1
 8013364:	330c      	adds	r3, #12
 8013366:	681b      	ldr	r3, [r3, #0]
		snprintf(dataOut, MAX_BUF_SIZE,
 8013368:	9301      	str	r3, [sp, #4]
 801336a:	9000      	str	r0, [sp, #0]
 801336c:	4623      	mov	r3, r4
 801336e:	4a5f      	ldr	r2, [pc, #380]	; (80134ec <MX_IKS01A3_DataLogTerminal_Init+0x310>)
 8013370:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013374:	4859      	ldr	r0, [pc, #356]	; (80134dc <MX_IKS01A3_DataLogTerminal_Init+0x300>)
 8013376:	f009 fccf 	bl	801cd18 <sniprintf>
		printf("%s", dataOut);
 801337a:	4958      	ldr	r1, [pc, #352]	; (80134dc <MX_IKS01A3_DataLogTerminal_Init+0x300>)
 801337c:	4858      	ldr	r0, [pc, #352]	; (80134e0 <MX_IKS01A3_DataLogTerminal_Init+0x304>)
 801337e:	f009 fca3 	bl	801ccc8 <iprintf>
	for (i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++) {
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	3301      	adds	r3, #1
 8013386:	60fb      	str	r3, [r7, #12]
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	2b02      	cmp	r3, #2
 801338c:	f67f af38 	bls.w	8013200 <MX_IKS01A3_DataLogTerminal_Init+0x24>
//    UART_Write(dataOut);
	}

	IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_TEMPERATURE | ENV_HUMIDITY);
 8013390:	2105      	movs	r1, #5
 8013392:	2000      	movs	r0, #0
 8013394:	f7f5 fdbc 	bl	8008f10 <IKS01A3_ENV_SENSOR_Init>

	IKS01A3_ENV_SENSOR_Init(IKS01A3_LPS22HH_0, ENV_TEMPERATURE | ENV_PRESSURE);
 8013398:	2103      	movs	r1, #3
 801339a:	2001      	movs	r0, #1
 801339c:	f7f5 fdb8 	bl	8008f10 <IKS01A3_ENV_SENSOR_Init>

	IKS01A3_ENV_SENSOR_Init(IKS01A3_STTS751_0, ENV_TEMPERATURE);
 80133a0:	2101      	movs	r1, #1
 80133a2:	2002      	movs	r0, #2
 80133a4:	f7f5 fdb4 	bl	8008f10 <IKS01A3_ENV_SENSOR_Init>

	for (i = 0; i < IKS01A3_ENV_INSTANCES_NBR; i++) {
 80133a8:	2300      	movs	r3, #0
 80133aa:	60fb      	str	r3, [r7, #12]
 80133ac:	e08a      	b.n	80134c4 <MX_IKS01A3_DataLogTerminal_Init+0x2e8>
		IKS01A3_ENV_SENSOR_GetCapabilities(i, &EnvCapabilities[i]);
 80133ae:	68f8      	ldr	r0, [r7, #12]
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	011b      	lsls	r3, r3, #4
 80133b4:	4a4e      	ldr	r2, [pc, #312]	; (80134f0 <MX_IKS01A3_DataLogTerminal_Init+0x314>)
 80133b6:	4413      	add	r3, r2
 80133b8:	4619      	mov	r1, r3
 80133ba:	f7f5 fe9f 	bl	80090fc <IKS01A3_ENV_SENSOR_GetCapabilities>
		snprintf(dataOut, MAX_BUF_SIZE,
				"\r\nEnvironmental Sensor Instance %d capabilities: \r\n TEMPERATURE: %d\r\n PRESSURE: %d\r\n HUMIDITY: %d\r\n LOW POWER: %d\r\n",
				i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure,
 80133be:	4a4c      	ldr	r2, [pc, #304]	; (80134f0 <MX_IKS01A3_DataLogTerminal_Init+0x314>)
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	011b      	lsls	r3, r3, #4
 80133c4:	4413      	add	r3, r2
 80133c6:	781b      	ldrb	r3, [r3, #0]
		snprintf(dataOut, MAX_BUF_SIZE,
 80133c8:	4619      	mov	r1, r3
				i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure,
 80133ca:	4a49      	ldr	r2, [pc, #292]	; (80134f0 <MX_IKS01A3_DataLogTerminal_Init+0x314>)
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	011b      	lsls	r3, r3, #4
 80133d0:	4413      	add	r3, r2
 80133d2:	3301      	adds	r3, #1
 80133d4:	781b      	ldrb	r3, [r3, #0]
		snprintf(dataOut, MAX_BUF_SIZE,
 80133d6:	4618      	mov	r0, r3
				EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 80133d8:	4a45      	ldr	r2, [pc, #276]	; (80134f0 <MX_IKS01A3_DataLogTerminal_Init+0x314>)
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	011b      	lsls	r3, r3, #4
 80133de:	4413      	add	r3, r2
 80133e0:	3302      	adds	r3, #2
 80133e2:	781b      	ldrb	r3, [r3, #0]
		snprintf(dataOut, MAX_BUF_SIZE,
 80133e4:	461c      	mov	r4, r3
				EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 80133e6:	4a42      	ldr	r2, [pc, #264]	; (80134f0 <MX_IKS01A3_DataLogTerminal_Init+0x314>)
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	011b      	lsls	r3, r3, #4
 80133ec:	4413      	add	r3, r2
 80133ee:	3303      	adds	r3, #3
 80133f0:	781b      	ldrb	r3, [r3, #0]
		snprintf(dataOut, MAX_BUF_SIZE,
 80133f2:	9303      	str	r3, [sp, #12]
 80133f4:	9402      	str	r4, [sp, #8]
 80133f6:	9001      	str	r0, [sp, #4]
 80133f8:	9100      	str	r1, [sp, #0]
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	4a3d      	ldr	r2, [pc, #244]	; (80134f4 <MX_IKS01A3_DataLogTerminal_Init+0x318>)
 80133fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013402:	4836      	ldr	r0, [pc, #216]	; (80134dc <MX_IKS01A3_DataLogTerminal_Init+0x300>)
 8013404:	f009 fc88 	bl	801cd18 <sniprintf>
		printf("%s", dataOut);
 8013408:	4934      	ldr	r1, [pc, #208]	; (80134dc <MX_IKS01A3_DataLogTerminal_Init+0x300>)
 801340a:	4835      	ldr	r0, [pc, #212]	; (80134e0 <MX_IKS01A3_DataLogTerminal_Init+0x304>)
 801340c:	f009 fc5c 	bl	801ccc8 <iprintf>
//    UART_Write(dataOut);
		floatToInt(EnvCapabilities[i].TempMaxOdr, &out_value_odr, 3);
 8013410:	4a37      	ldr	r2, [pc, #220]	; (80134f0 <MX_IKS01A3_DataLogTerminal_Init+0x314>)
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	011b      	lsls	r3, r3, #4
 8013416:	4413      	add	r3, r2
 8013418:	3308      	adds	r3, #8
 801341a:	edd3 7a00 	vldr	s15, [r3]
 801341e:	463b      	mov	r3, r7
 8013420:	2103      	movs	r1, #3
 8013422:	4618      	mov	r0, r3
 8013424:	eeb0 0a67 	vmov.f32	s0, s15
 8013428:	f000 f8da 	bl	80135e0 <floatToInt>
		snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n",
				(int) out_value_odr.out_int, (int) out_value_odr.out_dec);
 801342c:	687b      	ldr	r3, [r7, #4]
		snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n",
 801342e:	461a      	mov	r2, r3
				(int) out_value_odr.out_int, (int) out_value_odr.out_dec);
 8013430:	68bb      	ldr	r3, [r7, #8]
		snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n",
 8013432:	9300      	str	r3, [sp, #0]
 8013434:	4613      	mov	r3, r2
 8013436:	4a30      	ldr	r2, [pc, #192]	; (80134f8 <MX_IKS01A3_DataLogTerminal_Init+0x31c>)
 8013438:	f44f 7180 	mov.w	r1, #256	; 0x100
 801343c:	4827      	ldr	r0, [pc, #156]	; (80134dc <MX_IKS01A3_DataLogTerminal_Init+0x300>)
 801343e:	f009 fc6b 	bl	801cd18 <sniprintf>
		printf("%s", dataOut);
 8013442:	4926      	ldr	r1, [pc, #152]	; (80134dc <MX_IKS01A3_DataLogTerminal_Init+0x300>)
 8013444:	4826      	ldr	r0, [pc, #152]	; (80134e0 <MX_IKS01A3_DataLogTerminal_Init+0x304>)
 8013446:	f009 fc3f 	bl	801ccc8 <iprintf>
//    UART_Write(dataOut);
		floatToInt(EnvCapabilities[i].PressMaxOdr, &out_value_odr, 3);
 801344a:	4a29      	ldr	r2, [pc, #164]	; (80134f0 <MX_IKS01A3_DataLogTerminal_Init+0x314>)
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	011b      	lsls	r3, r3, #4
 8013450:	4413      	add	r3, r2
 8013452:	330c      	adds	r3, #12
 8013454:	edd3 7a00 	vldr	s15, [r3]
 8013458:	463b      	mov	r3, r7
 801345a:	2103      	movs	r1, #3
 801345c:	4618      	mov	r0, r3
 801345e:	eeb0 0a67 	vmov.f32	s0, s15
 8013462:	f000 f8bd 	bl	80135e0 <floatToInt>
		snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n",
				(int) out_value_odr.out_int, (int) out_value_odr.out_dec);
 8013466:	687b      	ldr	r3, [r7, #4]
		snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n",
 8013468:	461a      	mov	r2, r3
				(int) out_value_odr.out_int, (int) out_value_odr.out_dec);
 801346a:	68bb      	ldr	r3, [r7, #8]
		snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n",
 801346c:	9300      	str	r3, [sp, #0]
 801346e:	4613      	mov	r3, r2
 8013470:	4a22      	ldr	r2, [pc, #136]	; (80134fc <MX_IKS01A3_DataLogTerminal_Init+0x320>)
 8013472:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013476:	4819      	ldr	r0, [pc, #100]	; (80134dc <MX_IKS01A3_DataLogTerminal_Init+0x300>)
 8013478:	f009 fc4e 	bl	801cd18 <sniprintf>
		printf("%s", dataOut);
 801347c:	4917      	ldr	r1, [pc, #92]	; (80134dc <MX_IKS01A3_DataLogTerminal_Init+0x300>)
 801347e:	4818      	ldr	r0, [pc, #96]	; (80134e0 <MX_IKS01A3_DataLogTerminal_Init+0x304>)
 8013480:	f009 fc22 	bl	801ccc8 <iprintf>
//    UART_Write(dataOut);
		floatToInt(EnvCapabilities[i].HumMaxOdr, &out_value_odr, 3);
 8013484:	4a1a      	ldr	r2, [pc, #104]	; (80134f0 <MX_IKS01A3_DataLogTerminal_Init+0x314>)
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	011b      	lsls	r3, r3, #4
 801348a:	4413      	add	r3, r2
 801348c:	3304      	adds	r3, #4
 801348e:	edd3 7a00 	vldr	s15, [r3]
 8013492:	463b      	mov	r3, r7
 8013494:	2103      	movs	r1, #3
 8013496:	4618      	mov	r0, r3
 8013498:	eeb0 0a67 	vmov.f32	s0, s15
 801349c:	f000 f8a0 	bl	80135e0 <floatToInt>
		snprintf(dataOut, MAX_BUF_SIZE, " MAX HUM ODR: %d.%03d Hz\r\n",
				(int) out_value_odr.out_int, (int) out_value_odr.out_dec);
 80134a0:	687b      	ldr	r3, [r7, #4]
		snprintf(dataOut, MAX_BUF_SIZE, " MAX HUM ODR: %d.%03d Hz\r\n",
 80134a2:	461a      	mov	r2, r3
				(int) out_value_odr.out_int, (int) out_value_odr.out_dec);
 80134a4:	68bb      	ldr	r3, [r7, #8]
		snprintf(dataOut, MAX_BUF_SIZE, " MAX HUM ODR: %d.%03d Hz\r\n",
 80134a6:	9300      	str	r3, [sp, #0]
 80134a8:	4613      	mov	r3, r2
 80134aa:	4a15      	ldr	r2, [pc, #84]	; (8013500 <MX_IKS01A3_DataLogTerminal_Init+0x324>)
 80134ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80134b0:	480a      	ldr	r0, [pc, #40]	; (80134dc <MX_IKS01A3_DataLogTerminal_Init+0x300>)
 80134b2:	f009 fc31 	bl	801cd18 <sniprintf>
		printf("%s", dataOut);
 80134b6:	4909      	ldr	r1, [pc, #36]	; (80134dc <MX_IKS01A3_DataLogTerminal_Init+0x300>)
 80134b8:	4809      	ldr	r0, [pc, #36]	; (80134e0 <MX_IKS01A3_DataLogTerminal_Init+0x304>)
 80134ba:	f009 fc05 	bl	801ccc8 <iprintf>
	for (i = 0; i < IKS01A3_ENV_INSTANCES_NBR; i++) {
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	3301      	adds	r3, #1
 80134c2:	60fb      	str	r3, [r7, #12]
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	2b02      	cmp	r3, #2
 80134c8:	f67f af71 	bls.w	80133ae <MX_IKS01A3_DataLogTerminal_Init+0x1d2>
//    UART_Write(dataOut);
	}

}
 80134cc:	bf00      	nop
 80134ce:	3710      	adds	r7, #16
 80134d0:	46bd      	mov	sp, r7
 80134d2:	bdb0      	pop	{r4, r5, r7, pc}
 80134d4:	200003f0 	.word	0x200003f0
 80134d8:	0801f890 	.word	0x0801f890
 80134dc:	20008274 	.word	0x20008274
 80134e0:	0801f904 	.word	0x0801f904
 80134e4:	0801f908 	.word	0x0801f908
 80134e8:	0801f934 	.word	0x0801f934
 80134ec:	0801f964 	.word	0x0801f964
 80134f0:	20000444 	.word	0x20000444
 80134f4:	0801f990 	.word	0x0801f990
 80134f8:	0801fa04 	.word	0x0801fa04
 80134fc:	0801fa20 	.word	0x0801fa20
 8013500:	0801fa40 	.word	0x0801fa40

08013504 <MX_IKS01A3_DataLogTerminal_Process>:

/**
 * @brief  Process of the DataLogTerminal application
 * @retval None
 */
void MX_IKS01A3_DataLogTerminal_Process(void) {
 8013504:	b580      	push	{r7, lr}
 8013506:	b082      	sub	sp, #8
 8013508:	af00      	add	r7, sp, #0
//    PushButtonDetected = 0;
//
//    /* Do nothing */
//  }

	for (i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++) {
 801350a:	2300      	movs	r3, #0
 801350c:	607b      	str	r3, [r7, #4]
 801350e:	e02e      	b.n	801356e <MX_IKS01A3_DataLogTerminal_Process+0x6a>
		if (MotionCapabilities[i].Acc) {
 8013510:	4930      	ldr	r1, [pc, #192]	; (80135d4 <MX_IKS01A3_DataLogTerminal_Process+0xd0>)
 8013512:	687a      	ldr	r2, [r7, #4]
 8013514:	4613      	mov	r3, r2
 8013516:	00db      	lsls	r3, r3, #3
 8013518:	1a9b      	subs	r3, r3, r2
 801351a:	009b      	lsls	r3, r3, #2
 801351c:	440b      	add	r3, r1
 801351e:	781b      	ldrb	r3, [r3, #0]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d003      	beq.n	801352c <MX_IKS01A3_DataLogTerminal_Process+0x28>
			Accelero_Sensor_Handler(i);
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	4618      	mov	r0, r3
 8013528:	f000 f8e4 	bl	80136f4 <Accelero_Sensor_Handler>
		}
		if (MotionCapabilities[i].Gyro) {
 801352c:	4929      	ldr	r1, [pc, #164]	; (80135d4 <MX_IKS01A3_DataLogTerminal_Process+0xd0>)
 801352e:	687a      	ldr	r2, [r7, #4]
 8013530:	4613      	mov	r3, r2
 8013532:	00db      	lsls	r3, r3, #3
 8013534:	1a9b      	subs	r3, r3, r2
 8013536:	009b      	lsls	r3, r3, #2
 8013538:	440b      	add	r3, r1
 801353a:	3301      	adds	r3, #1
 801353c:	781b      	ldrb	r3, [r3, #0]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d003      	beq.n	801354a <MX_IKS01A3_DataLogTerminal_Process+0x46>
			Gyro_Sensor_Handler(i);
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	4618      	mov	r0, r3
 8013546:	f000 f90f 	bl	8013768 <Gyro_Sensor_Handler>
		}
		if (MotionCapabilities[i].Magneto) {
 801354a:	4922      	ldr	r1, [pc, #136]	; (80135d4 <MX_IKS01A3_DataLogTerminal_Process+0xd0>)
 801354c:	687a      	ldr	r2, [r7, #4]
 801354e:	4613      	mov	r3, r2
 8013550:	00db      	lsls	r3, r3, #3
 8013552:	1a9b      	subs	r3, r3, r2
 8013554:	009b      	lsls	r3, r3, #2
 8013556:	440b      	add	r3, r1
 8013558:	3302      	adds	r3, #2
 801355a:	781b      	ldrb	r3, [r3, #0]
 801355c:	2b00      	cmp	r3, #0
 801355e:	d003      	beq.n	8013568 <MX_IKS01A3_DataLogTerminal_Process+0x64>
			Magneto_Sensor_Handler(i);
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	4618      	mov	r0, r3
 8013564:	f000 f93a 	bl	80137dc <Magneto_Sensor_Handler>
	for (i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++) {
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	3301      	adds	r3, #1
 801356c:	607b      	str	r3, [r7, #4]
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	2b02      	cmp	r3, #2
 8013572:	d9cd      	bls.n	8013510 <MX_IKS01A3_DataLogTerminal_Process+0xc>
		}
	}

	for (i = 0; i < IKS01A3_ENV_INSTANCES_NBR; i++) {
 8013574:	2300      	movs	r3, #0
 8013576:	607b      	str	r3, [r7, #4]
 8013578:	e025      	b.n	80135c6 <MX_IKS01A3_DataLogTerminal_Process+0xc2>
		if (EnvCapabilities[i].Humidity) {
 801357a:	4a17      	ldr	r2, [pc, #92]	; (80135d8 <MX_IKS01A3_DataLogTerminal_Process+0xd4>)
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	011b      	lsls	r3, r3, #4
 8013580:	4413      	add	r3, r2
 8013582:	3302      	adds	r3, #2
 8013584:	781b      	ldrb	r3, [r3, #0]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d003      	beq.n	8013592 <MX_IKS01A3_DataLogTerminal_Process+0x8e>
			Hum_Sensor_Handler(i);
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	4618      	mov	r0, r3
 801358e:	f000 f9e9 	bl	8013964 <Hum_Sensor_Handler>
		}
		if (EnvCapabilities[i].Temperature) {
 8013592:	4a11      	ldr	r2, [pc, #68]	; (80135d8 <MX_IKS01A3_DataLogTerminal_Process+0xd4>)
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	011b      	lsls	r3, r3, #4
 8013598:	4413      	add	r3, r2
 801359a:	781b      	ldrb	r3, [r3, #0]
 801359c:	2b00      	cmp	r3, #0
 801359e:	d003      	beq.n	80135a8 <MX_IKS01A3_DataLogTerminal_Process+0xa4>
			Temp_Sensor_Handler(i);
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	4618      	mov	r0, r3
 80135a4:	f000 f954 	bl	8013850 <Temp_Sensor_Handler>
		}
		if (EnvCapabilities[i].Pressure) {
 80135a8:	4a0b      	ldr	r2, [pc, #44]	; (80135d8 <MX_IKS01A3_DataLogTerminal_Process+0xd4>)
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	011b      	lsls	r3, r3, #4
 80135ae:	4413      	add	r3, r2
 80135b0:	3301      	adds	r3, #1
 80135b2:	781b      	ldrb	r3, [r3, #0]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d003      	beq.n	80135c0 <MX_IKS01A3_DataLogTerminal_Process+0xbc>
			Press_Sensor_Handler(i);
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	4618      	mov	r0, r3
 80135bc:	f000 f990 	bl	80138e0 <Press_Sensor_Handler>
	for (i = 0; i < IKS01A3_ENV_INSTANCES_NBR; i++) {
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	3301      	adds	r3, #1
 80135c4:	607b      	str	r3, [r7, #4]
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	2b02      	cmp	r3, #2
 80135ca:	d9d6      	bls.n	801357a <MX_IKS01A3_DataLogTerminal_Process+0x76>
		}
	}

//  HAL_Delay( 1000 );
}
 80135cc:	bf00      	nop
 80135ce:	3708      	adds	r7, #8
 80135d0:	46bd      	mov	sp, r7
 80135d2:	bd80      	pop	{r7, pc}
 80135d4:	200003f0 	.word	0x200003f0
 80135d8:	20000444 	.word	0x20000444
 80135dc:	00000000 	.word	0x00000000

080135e0 <floatToInt>:
 * @param  out_value the pointer to the output integer structure
 * @param  dec_prec the decimal precision to be used
 * @retval None
 */
static void floatToInt(float in, displayFloatToInt_t *out_value,
		int32_t dec_prec) {
 80135e0:	b5b0      	push	{r4, r5, r7, lr}
 80135e2:	b084      	sub	sp, #16
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	ed87 0a03 	vstr	s0, [r7, #12]
 80135ea:	60b8      	str	r0, [r7, #8]
 80135ec:	6079      	str	r1, [r7, #4]
	if (in >= 0.0f) {
 80135ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80135f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80135f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135fa:	db03      	blt.n	8013604 <floatToInt+0x24>
		out_value->sign = 0;
 80135fc:	68bb      	ldr	r3, [r7, #8]
 80135fe:	2200      	movs	r2, #0
 8013600:	701a      	strb	r2, [r3, #0]
 8013602:	e008      	b.n	8013616 <floatToInt+0x36>
	} else {
		out_value->sign = 1;
 8013604:	68bb      	ldr	r3, [r7, #8]
 8013606:	2201      	movs	r2, #1
 8013608:	701a      	strb	r2, [r3, #0]
		in = -in;
 801360a:	edd7 7a03 	vldr	s15, [r7, #12]
 801360e:	eef1 7a67 	vneg.f32	s15, s15
 8013612:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	in = in + (0.5f / pow(10, dec_prec));
 8013616:	68f8      	ldr	r0, [r7, #12]
 8013618:	f7ec ff96 	bl	8000548 <__aeabi_f2d>
 801361c:	4604      	mov	r4, r0
 801361e:	460d      	mov	r5, r1
 8013620:	6878      	ldr	r0, [r7, #4]
 8013622:	f7ec ff7f 	bl	8000524 <__aeabi_i2d>
 8013626:	4602      	mov	r2, r0
 8013628:	460b      	mov	r3, r1
 801362a:	ec43 2b11 	vmov	d1, r2, r3
 801362e:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 80136e8 <floatToInt+0x108>
 8013632:	f00a fbc1 	bl	801ddb8 <pow>
 8013636:	ec53 2b10 	vmov	r2, r3, d0
 801363a:	f04f 0000 	mov.w	r0, #0
 801363e:	492c      	ldr	r1, [pc, #176]	; (80136f0 <floatToInt+0x110>)
 8013640:	f7ed f904 	bl	800084c <__aeabi_ddiv>
 8013644:	4602      	mov	r2, r0
 8013646:	460b      	mov	r3, r1
 8013648:	4620      	mov	r0, r4
 801364a:	4629      	mov	r1, r5
 801364c:	f7ec fe1e 	bl	800028c <__adddf3>
 8013650:	4603      	mov	r3, r0
 8013652:	460c      	mov	r4, r1
 8013654:	4618      	mov	r0, r3
 8013656:	4621      	mov	r1, r4
 8013658:	f7ed faa6 	bl	8000ba8 <__aeabi_d2f>
 801365c:	4603      	mov	r3, r0
 801365e:	60fb      	str	r3, [r7, #12]
	out_value->out_int = (int32_t) in;
 8013660:	edd7 7a03 	vldr	s15, [r7, #12]
 8013664:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013668:	ee17 2a90 	vmov	r2, s15
 801366c:	68bb      	ldr	r3, [r7, #8]
 801366e:	605a      	str	r2, [r3, #4]
	in = in - (float) (out_value->out_int);
 8013670:	68bb      	ldr	r3, [r7, #8]
 8013672:	685b      	ldr	r3, [r3, #4]
 8013674:	ee07 3a90 	vmov	s15, r3
 8013678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801367c:	ed97 7a03 	vldr	s14, [r7, #12]
 8013680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013684:	edc7 7a03 	vstr	s15, [r7, #12]
	out_value->out_dec = (int32_t) trunc(in * pow(10, dec_prec));
 8013688:	68f8      	ldr	r0, [r7, #12]
 801368a:	f7ec ff5d 	bl	8000548 <__aeabi_f2d>
 801368e:	4604      	mov	r4, r0
 8013690:	460d      	mov	r5, r1
 8013692:	6878      	ldr	r0, [r7, #4]
 8013694:	f7ec ff46 	bl	8000524 <__aeabi_i2d>
 8013698:	4602      	mov	r2, r0
 801369a:	460b      	mov	r3, r1
 801369c:	ec43 2b11 	vmov	d1, r2, r3
 80136a0:	ed9f 0b11 	vldr	d0, [pc, #68]	; 80136e8 <floatToInt+0x108>
 80136a4:	f00a fb88 	bl	801ddb8 <pow>
 80136a8:	ec53 2b10 	vmov	r2, r3, d0
 80136ac:	4620      	mov	r0, r4
 80136ae:	4629      	mov	r1, r5
 80136b0:	f7ec ffa2 	bl	80005f8 <__aeabi_dmul>
 80136b4:	4603      	mov	r3, r0
 80136b6:	460c      	mov	r4, r1
 80136b8:	ec44 3b17 	vmov	d7, r3, r4
 80136bc:	eeb0 0a47 	vmov.f32	s0, s14
 80136c0:	eef0 0a67 	vmov.f32	s1, s15
 80136c4:	f00a fb3e 	bl	801dd44 <trunc>
 80136c8:	ec54 3b10 	vmov	r3, r4, d0
 80136cc:	4618      	mov	r0, r3
 80136ce:	4621      	mov	r1, r4
 80136d0:	f7ed fa42 	bl	8000b58 <__aeabi_d2iz>
 80136d4:	4603      	mov	r3, r0
 80136d6:	461a      	mov	r2, r3
 80136d8:	68bb      	ldr	r3, [r7, #8]
 80136da:	609a      	str	r2, [r3, #8]
}
 80136dc:	bf00      	nop
 80136de:	3710      	adds	r7, #16
 80136e0:	46bd      	mov	sp, r7
 80136e2:	bdb0      	pop	{r4, r5, r7, pc}
 80136e4:	f3af 8000 	nop.w
 80136e8:	00000000 	.word	0x00000000
 80136ec:	40240000 	.word	0x40240000
 80136f0:	3fe00000 	.word	0x3fe00000

080136f4 <Accelero_Sensor_Handler>:
/**
 * @brief  Handles the accelerometer axes data getting/sending
 * @param  Instance the device instance
 * @retval None
 */
static void Accelero_Sensor_Handler(uint32_t Instance) {
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b088      	sub	sp, #32
 80136f8:	af02      	add	r7, sp, #8
 80136fa:	6078      	str	r0, [r7, #4]
//	int32_t fullScale;
	IKS01A3_MOTION_SENSOR_Axes_t acceleration;
//	displayFloatToInt_t out_value;
//	uint8_t whoami;

	if (IKS01A3_MOTION_SENSOR_GetAxes(Instance, MOTION_ACCELERO,
 80136fc:	f107 030c 	add.w	r3, r7, #12
 8013700:	461a      	mov	r2, r3
 8013702:	2102      	movs	r1, #2
 8013704:	6878      	ldr	r0, [r7, #4]
 8013706:	f7f6 f8a1 	bl	800984c <IKS01A3_MOTION_SENSOR_GetAxes>
 801370a:	4603      	mov	r3, r0
 801370c:	2b00      	cmp	r3, #0
 801370e:	d007      	beq.n	8013720 <Accelero_Sensor_Handler+0x2c>
			&acceleration)) {
		snprintf(Acceleration, MAX_BUF_SIZE, "Error;",
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	4a10      	ldr	r2, [pc, #64]	; (8013754 <Accelero_Sensor_Handler+0x60>)
 8013714:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013718:	480f      	ldr	r0, [pc, #60]	; (8013758 <Accelero_Sensor_Handler+0x64>)
 801371a:	f009 fafd 	bl	801cd18 <sniprintf>
 801371e:	e00b      	b.n	8013738 <Accelero_Sensor_Handler+0x44>
				(int) Instance);
	} else {
		snprintf(Acceleration, MAX_BUF_SIZE, "%d;%d;%d;", (int) acceleration.x,
 8013720:	68f9      	ldr	r1, [r7, #12]
				(int) acceleration.y, (int) acceleration.z);
 8013722:	693b      	ldr	r3, [r7, #16]
 8013724:	697a      	ldr	r2, [r7, #20]
		snprintf(Acceleration, MAX_BUF_SIZE, "%d;%d;%d;", (int) acceleration.x,
 8013726:	9201      	str	r2, [sp, #4]
 8013728:	9300      	str	r3, [sp, #0]
 801372a:	460b      	mov	r3, r1
 801372c:	4a0b      	ldr	r2, [pc, #44]	; (801375c <Accelero_Sensor_Handler+0x68>)
 801372e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013732:	4809      	ldr	r0, [pc, #36]	; (8013758 <Accelero_Sensor_Handler+0x64>)
 8013734:	f009 faf0 	bl	801cd18 <sniprintf>
	}

	//printf("%s", dataOut);
	UART_Write("Acc ");
 8013738:	4809      	ldr	r0, [pc, #36]	; (8013760 <Accelero_Sensor_Handler+0x6c>)
 801373a:	f7ee f9ff 	bl	8001b3c <UART_Write>
	UART_Write(Acceleration);
 801373e:	4806      	ldr	r0, [pc, #24]	; (8013758 <Accelero_Sensor_Handler+0x64>)
 8013740:	f7ee f9fc 	bl	8001b3c <UART_Write>
	UART_Write("\r\n");
 8013744:	4807      	ldr	r0, [pc, #28]	; (8013764 <Accelero_Sensor_Handler+0x70>)
 8013746:	f7ee f9f9 	bl	8001b3c <UART_Write>
//					(int) fullScale);
//		}
//		//printf("%s", dataOut);
//		USB_Write(dataOut);
//	}
}
 801374a:	bf00      	nop
 801374c:	3718      	adds	r7, #24
 801374e:	46bd      	mov	sp, r7
 8013750:	bd80      	pop	{r7, pc}
 8013752:	bf00      	nop
 8013754:	0801fa5c 	.word	0x0801fa5c
 8013758:	20008174 	.word	0x20008174
 801375c:	0801fa64 	.word	0x0801fa64
 8013760:	0801fa70 	.word	0x0801fa70
 8013764:	0801fa78 	.word	0x0801fa78

08013768 <Gyro_Sensor_Handler>:
/**
 * @brief  Handles the gyroscope axes data getting/sending
 * @param  Instance the device instance
 * @retval None
 */
static void Gyro_Sensor_Handler(uint32_t Instance) {
 8013768:	b580      	push	{r7, lr}
 801376a:	b088      	sub	sp, #32
 801376c:	af02      	add	r7, sp, #8
 801376e:	6078      	str	r0, [r7, #4]
//	int32_t fullScale;
	IKS01A3_MOTION_SENSOR_Axes_t angular_velocity;
//	displayFloatToInt_t out_value;
//	uint8_t whoami;

	if (IKS01A3_MOTION_SENSOR_GetAxes(Instance, MOTION_GYRO,
 8013770:	f107 030c 	add.w	r3, r7, #12
 8013774:	461a      	mov	r2, r3
 8013776:	2101      	movs	r1, #1
 8013778:	6878      	ldr	r0, [r7, #4]
 801377a:	f7f6 f867 	bl	800984c <IKS01A3_MOTION_SENSOR_GetAxes>
 801377e:	4603      	mov	r3, r0
 8013780:	2b00      	cmp	r3, #0
 8013782:	d007      	beq.n	8013794 <Gyro_Sensor_Handler+0x2c>
			&angular_velocity)) {
		snprintf(Gyroscope, MAX_BUF_SIZE, "Error;",
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	4a10      	ldr	r2, [pc, #64]	; (80137c8 <Gyro_Sensor_Handler+0x60>)
 8013788:	f44f 7180 	mov.w	r1, #256	; 0x100
 801378c:	480f      	ldr	r0, [pc, #60]	; (80137cc <Gyro_Sensor_Handler+0x64>)
 801378e:	f009 fac3 	bl	801cd18 <sniprintf>
 8013792:	e00b      	b.n	80137ac <Gyro_Sensor_Handler+0x44>
				(int) Instance);
	} else {
		snprintf(Gyroscope, MAX_BUF_SIZE, "%d;%d;%d;", (int) angular_velocity.x,
 8013794:	68f9      	ldr	r1, [r7, #12]
				(int) angular_velocity.y, (int) angular_velocity.z);
 8013796:	693b      	ldr	r3, [r7, #16]
 8013798:	697a      	ldr	r2, [r7, #20]
		snprintf(Gyroscope, MAX_BUF_SIZE, "%d;%d;%d;", (int) angular_velocity.x,
 801379a:	9201      	str	r2, [sp, #4]
 801379c:	9300      	str	r3, [sp, #0]
 801379e:	460b      	mov	r3, r1
 80137a0:	4a0b      	ldr	r2, [pc, #44]	; (80137d0 <Gyro_Sensor_Handler+0x68>)
 80137a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80137a6:	4809      	ldr	r0, [pc, #36]	; (80137cc <Gyro_Sensor_Handler+0x64>)
 80137a8:	f009 fab6 	bl	801cd18 <sniprintf>
	}

	//printf("%s", dataOut);
	UART_Write("Gyr ");
 80137ac:	4809      	ldr	r0, [pc, #36]	; (80137d4 <Gyro_Sensor_Handler+0x6c>)
 80137ae:	f7ee f9c5 	bl	8001b3c <UART_Write>
	UART_Write(Gyroscope);
 80137b2:	4806      	ldr	r0, [pc, #24]	; (80137cc <Gyro_Sensor_Handler+0x64>)
 80137b4:	f7ee f9c2 	bl	8001b3c <UART_Write>
	UART_Write("\r\n");
 80137b8:	4807      	ldr	r0, [pc, #28]	; (80137d8 <Gyro_Sensor_Handler+0x70>)
 80137ba:	f7ee f9bf 	bl	8001b3c <UART_Write>
//					(int) Instance, (int) fullScale);
//		}
//		//printf("%s", dataOut);
//		USB_Write(dataOut);
//	}
}
 80137be:	bf00      	nop
 80137c0:	3718      	adds	r7, #24
 80137c2:	46bd      	mov	sp, r7
 80137c4:	bd80      	pop	{r7, pc}
 80137c6:	bf00      	nop
 80137c8:	0801fa5c 	.word	0x0801fa5c
 80137cc:	20008374 	.word	0x20008374
 80137d0:	0801fa64 	.word	0x0801fa64
 80137d4:	0801fa7c 	.word	0x0801fa7c
 80137d8:	0801fa78 	.word	0x0801fa78

080137dc <Magneto_Sensor_Handler>:
/**
 * @brief  Handles the magneto axes data getting/sending
 * @param  Instance the device instance
 * @retval None
 */
static void Magneto_Sensor_Handler(uint32_t Instance) {
 80137dc:	b580      	push	{r7, lr}
 80137de:	b088      	sub	sp, #32
 80137e0:	af02      	add	r7, sp, #8
 80137e2:	6078      	str	r0, [r7, #4]
//	int32_t fullScale;
	IKS01A3_MOTION_SENSOR_Axes_t magnetic_field;
//	displayFloatToInt_t out_value;
//	uint8_t whoami;

	if (IKS01A3_MOTION_SENSOR_GetAxes(Instance, MOTION_MAGNETO,
 80137e4:	f107 030c 	add.w	r3, r7, #12
 80137e8:	461a      	mov	r2, r3
 80137ea:	2104      	movs	r1, #4
 80137ec:	6878      	ldr	r0, [r7, #4]
 80137ee:	f7f6 f82d 	bl	800984c <IKS01A3_MOTION_SENSOR_GetAxes>
 80137f2:	4603      	mov	r3, r0
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d007      	beq.n	8013808 <Magneto_Sensor_Handler+0x2c>
			&magnetic_field)) {
		snprintf(Magnetometer, MAX_BUF_SIZE, "Error;",
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	4a10      	ldr	r2, [pc, #64]	; (801383c <Magneto_Sensor_Handler+0x60>)
 80137fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013800:	480f      	ldr	r0, [pc, #60]	; (8013840 <Magneto_Sensor_Handler+0x64>)
 8013802:	f009 fa89 	bl	801cd18 <sniprintf>
 8013806:	e00b      	b.n	8013820 <Magneto_Sensor_Handler+0x44>
				(int) Instance);
	} else {
		snprintf(Magnetometer, MAX_BUF_SIZE, "%d;%d;%d;", (int) magnetic_field.x,
 8013808:	68f9      	ldr	r1, [r7, #12]
				(int) magnetic_field.y, (int) magnetic_field.z);
 801380a:	693b      	ldr	r3, [r7, #16]
 801380c:	697a      	ldr	r2, [r7, #20]
		snprintf(Magnetometer, MAX_BUF_SIZE, "%d;%d;%d;", (int) magnetic_field.x,
 801380e:	9201      	str	r2, [sp, #4]
 8013810:	9300      	str	r3, [sp, #0]
 8013812:	460b      	mov	r3, r1
 8013814:	4a0b      	ldr	r2, [pc, #44]	; (8013844 <Magneto_Sensor_Handler+0x68>)
 8013816:	f44f 7180 	mov.w	r1, #256	; 0x100
 801381a:	4809      	ldr	r0, [pc, #36]	; (8013840 <Magneto_Sensor_Handler+0x64>)
 801381c:	f009 fa7c 	bl	801cd18 <sniprintf>
	}

	//printf("%s", dataOut);
	UART_Write("Mag ");
 8013820:	4809      	ldr	r0, [pc, #36]	; (8013848 <Magneto_Sensor_Handler+0x6c>)
 8013822:	f7ee f98b 	bl	8001b3c <UART_Write>
	UART_Write(Magnetometer);
 8013826:	4806      	ldr	r0, [pc, #24]	; (8013840 <Magneto_Sensor_Handler+0x64>)
 8013828:	f7ee f988 	bl	8001b3c <UART_Write>
	UART_Write("\r\n");
 801382c:	4807      	ldr	r0, [pc, #28]	; (801384c <Magneto_Sensor_Handler+0x70>)
 801382e:	f7ee f985 	bl	8001b3c <UART_Write>
//		}
//
//		//printf("%s", dataOut);
//		USB_Write(dataOut);
//	}
}
 8013832:	bf00      	nop
 8013834:	3718      	adds	r7, #24
 8013836:	46bd      	mov	sp, r7
 8013838:	bd80      	pop	{r7, pc}
 801383a:	bf00      	nop
 801383c:	0801fa5c 	.word	0x0801fa5c
 8013840:	20008074 	.word	0x20008074
 8013844:	0801fa64 	.word	0x0801fa64
 8013848:	0801fa84 	.word	0x0801fa84
 801384c:	0801fa78 	.word	0x0801fa78

08013850 <Temp_Sensor_Handler>:
/**
 * @brief  Handles the temperature data getting/sending
 * @param  Instance the device instance
 * @retval None
 */
static void Temp_Sensor_Handler(uint32_t Instance) {
 8013850:	b580      	push	{r7, lr}
 8013852:	b088      	sub	sp, #32
 8013854:	af02      	add	r7, sp, #8
 8013856:	6078      	str	r0, [r7, #4]
//	float odr;
	float temperature;
	displayFloatToInt_t out_value;
//	uint8_t whoami;

	if (IKS01A3_ENV_SENSOR_GetValue(Instance, ENV_TEMPERATURE, &temperature)) {
 8013858:	f107 0314 	add.w	r3, r7, #20
 801385c:	461a      	mov	r2, r3
 801385e:	2101      	movs	r1, #1
 8013860:	6878      	ldr	r0, [r7, #4]
 8013862:	f7f5 fc75 	bl	8009150 <IKS01A3_ENV_SENSOR_GetValue>
 8013866:	4603      	mov	r3, r0
 8013868:	2b00      	cmp	r3, #0
 801386a:	d007      	beq.n	801387c <Temp_Sensor_Handler+0x2c>
		snprintf(Temperature, MAX_BUF_SIZE, "Error;",
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	4a17      	ldr	r2, [pc, #92]	; (80138cc <Temp_Sensor_Handler+0x7c>)
 8013870:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013874:	4816      	ldr	r0, [pc, #88]	; (80138d0 <Temp_Sensor_Handler+0x80>)
 8013876:	f009 fa4f 	bl	801cd18 <sniprintf>
 801387a:	e01a      	b.n	80138b2 <Temp_Sensor_Handler+0x62>
				(int) Instance);
	} else {
		floatToInt(temperature, &out_value, 2);
 801387c:	edd7 7a05 	vldr	s15, [r7, #20]
 8013880:	f107 0308 	add.w	r3, r7, #8
 8013884:	2102      	movs	r1, #2
 8013886:	4618      	mov	r0, r3
 8013888:	eeb0 0a67 	vmov.f32	s0, s15
 801388c:	f7ff fea8 	bl	80135e0 <floatToInt>
		snprintf(Temperature, MAX_BUF_SIZE, "%c%d.%02d degC;",
				((out_value.sign) ? '-' : '+'), (int) out_value.out_int,
 8013890:	f997 3008 	ldrsb.w	r3, [r7, #8]
		snprintf(Temperature, MAX_BUF_SIZE, "%c%d.%02d degC;",
 8013894:	2b00      	cmp	r3, #0
 8013896:	d001      	beq.n	801389c <Temp_Sensor_Handler+0x4c>
 8013898:	232d      	movs	r3, #45	; 0x2d
 801389a:	e000      	b.n	801389e <Temp_Sensor_Handler+0x4e>
 801389c:	232b      	movs	r3, #43	; 0x2b
				((out_value.sign) ? '-' : '+'), (int) out_value.out_int,
 801389e:	68fa      	ldr	r2, [r7, #12]
				(int) out_value.out_dec);
 80138a0:	6939      	ldr	r1, [r7, #16]
		snprintf(Temperature, MAX_BUF_SIZE, "%c%d.%02d degC;",
 80138a2:	9101      	str	r1, [sp, #4]
 80138a4:	9200      	str	r2, [sp, #0]
 80138a6:	4a0b      	ldr	r2, [pc, #44]	; (80138d4 <Temp_Sensor_Handler+0x84>)
 80138a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80138ac:	4808      	ldr	r0, [pc, #32]	; (80138d0 <Temp_Sensor_Handler+0x80>)
 80138ae:	f009 fa33 	bl	801cd18 <sniprintf>
	}

	//printf("%s", dataOut);
	UART_Write("Temp ");
 80138b2:	4809      	ldr	r0, [pc, #36]	; (80138d8 <Temp_Sensor_Handler+0x88>)
 80138b4:	f7ee f942 	bl	8001b3c <UART_Write>
	UART_Write(Temperature);
 80138b8:	4805      	ldr	r0, [pc, #20]	; (80138d0 <Temp_Sensor_Handler+0x80>)
 80138ba:	f7ee f93f 	bl	8001b3c <UART_Write>
	UART_Write("\r\n");
 80138be:	4807      	ldr	r0, [pc, #28]	; (80138dc <Temp_Sensor_Handler+0x8c>)
 80138c0:	f7ee f93c 	bl	8001b3c <UART_Write>
//
//		//printf("%s", dataOut);
//		;
//		USB_Write(dataOut);
//	}
}
 80138c4:	bf00      	nop
 80138c6:	3718      	adds	r7, #24
 80138c8:	46bd      	mov	sp, r7
 80138ca:	bd80      	pop	{r7, pc}
 80138cc:	0801fa5c 	.word	0x0801fa5c
 80138d0:	20007f74 	.word	0x20007f74
 80138d4:	0801fa8c 	.word	0x0801fa8c
 80138d8:	0801fa9c 	.word	0x0801fa9c
 80138dc:	0801fa78 	.word	0x0801fa78

080138e0 <Press_Sensor_Handler>:
/**
 * @brief  Handles the pressure sensor data getting/sending
 * @param  Instance the device instance
 * @retval None
 */
static void Press_Sensor_Handler(uint32_t Instance) {
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b088      	sub	sp, #32
 80138e4:	af02      	add	r7, sp, #8
 80138e6:	6078      	str	r0, [r7, #4]
//	float odr;
	float pressure;
	displayFloatToInt_t out_value;
//	uint8_t whoami;

	if (IKS01A3_ENV_SENSOR_GetValue(Instance, ENV_PRESSURE, &pressure)) {
 80138e8:	f107 0314 	add.w	r3, r7, #20
 80138ec:	461a      	mov	r2, r3
 80138ee:	2102      	movs	r1, #2
 80138f0:	6878      	ldr	r0, [r7, #4]
 80138f2:	f7f5 fc2d 	bl	8009150 <IKS01A3_ENV_SENSOR_GetValue>
 80138f6:	4603      	mov	r3, r0
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d007      	beq.n	801390c <Press_Sensor_Handler+0x2c>
		snprintf(Pressure, MAX_BUF_SIZE, "Error;",
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	4a14      	ldr	r2, [pc, #80]	; (8013950 <Press_Sensor_Handler+0x70>)
 8013900:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013904:	4813      	ldr	r0, [pc, #76]	; (8013954 <Press_Sensor_Handler+0x74>)
 8013906:	f009 fa07 	bl	801cd18 <sniprintf>
 801390a:	e014      	b.n	8013936 <Press_Sensor_Handler+0x56>
				(int) Instance);
	} else {
		floatToInt(pressure, &out_value, 2);
 801390c:	edd7 7a05 	vldr	s15, [r7, #20]
 8013910:	f107 0308 	add.w	r3, r7, #8
 8013914:	2102      	movs	r1, #2
 8013916:	4618      	mov	r0, r3
 8013918:	eeb0 0a67 	vmov.f32	s0, s15
 801391c:	f7ff fe60 	bl	80135e0 <floatToInt>
		snprintf(Pressure, MAX_BUF_SIZE, "%d.%02d hPa;", (int) out_value.out_int,
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	461a      	mov	r2, r3
				(int) out_value.out_dec);
 8013924:	693b      	ldr	r3, [r7, #16]
		snprintf(Pressure, MAX_BUF_SIZE, "%d.%02d hPa;", (int) out_value.out_int,
 8013926:	9300      	str	r3, [sp, #0]
 8013928:	4613      	mov	r3, r2
 801392a:	4a0b      	ldr	r2, [pc, #44]	; (8013958 <Press_Sensor_Handler+0x78>)
 801392c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013930:	4808      	ldr	r0, [pc, #32]	; (8013954 <Press_Sensor_Handler+0x74>)
 8013932:	f009 f9f1 	bl	801cd18 <sniprintf>
	}

	//printf("%s", dataOut);
	UART_Write("Pres ");
 8013936:	4809      	ldr	r0, [pc, #36]	; (801395c <Press_Sensor_Handler+0x7c>)
 8013938:	f7ee f900 	bl	8001b3c <UART_Write>
	UART_Write(Pressure);
 801393c:	4805      	ldr	r0, [pc, #20]	; (8013954 <Press_Sensor_Handler+0x74>)
 801393e:	f7ee f8fd 	bl	8001b3c <UART_Write>
	UART_Write("\r\n");
 8013942:	4807      	ldr	r0, [pc, #28]	; (8013960 <Press_Sensor_Handler+0x80>)
 8013944:	f7ee f8fa 	bl	8001b3c <UART_Write>
//
//		//printf("%s", dataOut);
//		;
//		USB_Write(dataOut);
//	}
}
 8013948:	bf00      	nop
 801394a:	3718      	adds	r7, #24
 801394c:	46bd      	mov	sp, r7
 801394e:	bd80      	pop	{r7, pc}
 8013950:	0801fa5c 	.word	0x0801fa5c
 8013954:	20008474 	.word	0x20008474
 8013958:	0801faa4 	.word	0x0801faa4
 801395c:	0801fab4 	.word	0x0801fab4
 8013960:	0801fa78 	.word	0x0801fa78

08013964 <Hum_Sensor_Handler>:
/**
 * @brief  Handles the humidity data getting/sending
 * @param  Instance the device instance
 * @retval None
 */
static void Hum_Sensor_Handler(uint32_t Instance) {
 8013964:	b580      	push	{r7, lr}
 8013966:	b088      	sub	sp, #32
 8013968:	af02      	add	r7, sp, #8
 801396a:	6078      	str	r0, [r7, #4]
//	float odr;
	float humidity;
	displayFloatToInt_t out_value;
//	uint8_t whoami;

	if (IKS01A3_ENV_SENSOR_GetValue(Instance, ENV_HUMIDITY, &humidity)) {
 801396c:	f107 0314 	add.w	r3, r7, #20
 8013970:	461a      	mov	r2, r3
 8013972:	2104      	movs	r1, #4
 8013974:	6878      	ldr	r0, [r7, #4]
 8013976:	f7f5 fbeb 	bl	8009150 <IKS01A3_ENV_SENSOR_GetValue>
 801397a:	4603      	mov	r3, r0
 801397c:	2b00      	cmp	r3, #0
 801397e:	d007      	beq.n	8013990 <Hum_Sensor_Handler+0x2c>
		snprintf(Humidity, MAX_BUF_SIZE, "Error;",
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	4a14      	ldr	r2, [pc, #80]	; (80139d4 <Hum_Sensor_Handler+0x70>)
 8013984:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013988:	4813      	ldr	r0, [pc, #76]	; (80139d8 <Hum_Sensor_Handler+0x74>)
 801398a:	f009 f9c5 	bl	801cd18 <sniprintf>
 801398e:	e014      	b.n	80139ba <Hum_Sensor_Handler+0x56>
				(int) Instance);
	} else {
		floatToInt(humidity, &out_value, 2);
 8013990:	edd7 7a05 	vldr	s15, [r7, #20]
 8013994:	f107 0308 	add.w	r3, r7, #8
 8013998:	2102      	movs	r1, #2
 801399a:	4618      	mov	r0, r3
 801399c:	eeb0 0a67 	vmov.f32	s0, s15
 80139a0:	f7ff fe1e 	bl	80135e0 <floatToInt>
		snprintf(Humidity, MAX_BUF_SIZE, "%d.%02d%;", (int) out_value.out_int,
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	461a      	mov	r2, r3
				(int) out_value.out_dec);
 80139a8:	693b      	ldr	r3, [r7, #16]
		snprintf(Humidity, MAX_BUF_SIZE, "%d.%02d%;", (int) out_value.out_int,
 80139aa:	9300      	str	r3, [sp, #0]
 80139ac:	4613      	mov	r3, r2
 80139ae:	4a0b      	ldr	r2, [pc, #44]	; (80139dc <Hum_Sensor_Handler+0x78>)
 80139b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80139b4:	4808      	ldr	r0, [pc, #32]	; (80139d8 <Hum_Sensor_Handler+0x74>)
 80139b6:	f009 f9af 	bl	801cd18 <sniprintf>
	}

	//printf("%s", dataOut);
	UART_Write("Hum ");
 80139ba:	4809      	ldr	r0, [pc, #36]	; (80139e0 <Hum_Sensor_Handler+0x7c>)
 80139bc:	f7ee f8be 	bl	8001b3c <UART_Write>
	UART_Write(Humidity);
 80139c0:	4805      	ldr	r0, [pc, #20]	; (80139d8 <Hum_Sensor_Handler+0x74>)
 80139c2:	f7ee f8bb 	bl	8001b3c <UART_Write>
	UART_Write("\r\n");
 80139c6:	4807      	ldr	r0, [pc, #28]	; (80139e4 <Hum_Sensor_Handler+0x80>)
 80139c8:	f7ee f8b8 	bl	8001b3c <UART_Write>
//
//		//printf("%s", dataOut);
//		;
//		USB_Write(dataOut);
//	}
}
 80139cc:	bf00      	nop
 80139ce:	3718      	adds	r7, #24
 80139d0:	46bd      	mov	sp, r7
 80139d2:	bd80      	pop	{r7, pc}
 80139d4:	0801fa5c 	.word	0x0801fa5c
 80139d8:	20008574 	.word	0x20008574
 80139dc:	0801fabc 	.word	0x0801fabc
 80139e0:	0801fac8 	.word	0x0801fac8
 80139e4:	0801fa78 	.word	0x0801fa78

080139e8 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80139e8:	b590      	push	{r4, r7, lr}
 80139ea:	b089      	sub	sp, #36	; 0x24
 80139ec:	af04      	add	r7, sp, #16
 80139ee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80139f6:	7919      	ldrb	r1, [r3, #4]
 80139f8:	2350      	movs	r3, #80	; 0x50
 80139fa:	2206      	movs	r2, #6
 80139fc:	6878      	ldr	r0, [r7, #4]
 80139fe:	f001 fc4f 	bl	80152a0 <USBH_FindInterface>
 8013a02:	4603      	mov	r3, r0
 8013a04:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8013a06:	7bfb      	ldrb	r3, [r7, #15]
 8013a08:	2bff      	cmp	r3, #255	; 0xff
 8013a0a:	d002      	beq.n	8013a12 <USBH_MSC_InterfaceInit+0x2a>
 8013a0c:	7bfb      	ldrb	r3, [r7, #15]
 8013a0e:	2b01      	cmp	r3, #1
 8013a10:	d901      	bls.n	8013a16 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8013a12:	2302      	movs	r3, #2
 8013a14:	e0ef      	b.n	8013bf6 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8013a16:	7bfb      	ldrb	r3, [r7, #15]
 8013a18:	4619      	mov	r1, r3
 8013a1a:	6878      	ldr	r0, [r7, #4]
 8013a1c:	f001 fc24 	bl	8015268 <USBH_SelectInterface>
 8013a20:	4603      	mov	r3, r0
 8013a22:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8013a24:	7bbb      	ldrb	r3, [r7, #14]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d001      	beq.n	8013a2e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8013a2a:	2302      	movs	r3, #2
 8013a2c:	e0e3      	b.n	8013bf6 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8013a34:	f44f 7080 	mov.w	r0, #256	; 0x100
 8013a38:	f009 f87a 	bl	801cb30 <malloc>
 8013a3c:	4603      	mov	r3, r0
 8013a3e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013a46:	69db      	ldr	r3, [r3, #28]
 8013a48:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8013a4a:	68bb      	ldr	r3, [r7, #8]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d101      	bne.n	8013a54 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8013a50:	2302      	movs	r3, #2
 8013a52:	e0d0      	b.n	8013bf6 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8013a54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013a58:	2100      	movs	r1, #0
 8013a5a:	68b8      	ldr	r0, [r7, #8]
 8013a5c:	f009 f883 	bl	801cb66 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8013a60:	7bfb      	ldrb	r3, [r7, #15]
 8013a62:	687a      	ldr	r2, [r7, #4]
 8013a64:	211a      	movs	r1, #26
 8013a66:	fb01 f303 	mul.w	r3, r1, r3
 8013a6a:	4413      	add	r3, r2
 8013a6c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8013a70:	781b      	ldrb	r3, [r3, #0]
 8013a72:	b25b      	sxtb	r3, r3
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	da16      	bge.n	8013aa6 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8013a78:	7bfb      	ldrb	r3, [r7, #15]
 8013a7a:	687a      	ldr	r2, [r7, #4]
 8013a7c:	211a      	movs	r1, #26
 8013a7e:	fb01 f303 	mul.w	r3, r1, r3
 8013a82:	4413      	add	r3, r2
 8013a84:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8013a88:	781a      	ldrb	r2, [r3, #0]
 8013a8a:	68bb      	ldr	r3, [r7, #8]
 8013a8c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8013a8e:	7bfb      	ldrb	r3, [r7, #15]
 8013a90:	687a      	ldr	r2, [r7, #4]
 8013a92:	211a      	movs	r1, #26
 8013a94:	fb01 f303 	mul.w	r3, r1, r3
 8013a98:	4413      	add	r3, r2
 8013a9a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8013a9e:	881a      	ldrh	r2, [r3, #0]
 8013aa0:	68bb      	ldr	r3, [r7, #8]
 8013aa2:	815a      	strh	r2, [r3, #10]
 8013aa4:	e015      	b.n	8013ad2 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8013aa6:	7bfb      	ldrb	r3, [r7, #15]
 8013aa8:	687a      	ldr	r2, [r7, #4]
 8013aaa:	211a      	movs	r1, #26
 8013aac:	fb01 f303 	mul.w	r3, r1, r3
 8013ab0:	4413      	add	r3, r2
 8013ab2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8013ab6:	781a      	ldrb	r2, [r3, #0]
 8013ab8:	68bb      	ldr	r3, [r7, #8]
 8013aba:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8013abc:	7bfb      	ldrb	r3, [r7, #15]
 8013abe:	687a      	ldr	r2, [r7, #4]
 8013ac0:	211a      	movs	r1, #26
 8013ac2:	fb01 f303 	mul.w	r3, r1, r3
 8013ac6:	4413      	add	r3, r2
 8013ac8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8013acc:	881a      	ldrh	r2, [r3, #0]
 8013ace:	68bb      	ldr	r3, [r7, #8]
 8013ad0:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8013ad2:	7bfb      	ldrb	r3, [r7, #15]
 8013ad4:	687a      	ldr	r2, [r7, #4]
 8013ad6:	211a      	movs	r1, #26
 8013ad8:	fb01 f303 	mul.w	r3, r1, r3
 8013adc:	4413      	add	r3, r2
 8013ade:	f203 3356 	addw	r3, r3, #854	; 0x356
 8013ae2:	781b      	ldrb	r3, [r3, #0]
 8013ae4:	b25b      	sxtb	r3, r3
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	da16      	bge.n	8013b18 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8013aea:	7bfb      	ldrb	r3, [r7, #15]
 8013aec:	687a      	ldr	r2, [r7, #4]
 8013aee:	211a      	movs	r1, #26
 8013af0:	fb01 f303 	mul.w	r3, r1, r3
 8013af4:	4413      	add	r3, r2
 8013af6:	f203 3356 	addw	r3, r3, #854	; 0x356
 8013afa:	781a      	ldrb	r2, [r3, #0]
 8013afc:	68bb      	ldr	r3, [r7, #8]
 8013afe:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8013b00:	7bfb      	ldrb	r3, [r7, #15]
 8013b02:	687a      	ldr	r2, [r7, #4]
 8013b04:	211a      	movs	r1, #26
 8013b06:	fb01 f303 	mul.w	r3, r1, r3
 8013b0a:	4413      	add	r3, r2
 8013b0c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8013b10:	881a      	ldrh	r2, [r3, #0]
 8013b12:	68bb      	ldr	r3, [r7, #8]
 8013b14:	815a      	strh	r2, [r3, #10]
 8013b16:	e015      	b.n	8013b44 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8013b18:	7bfb      	ldrb	r3, [r7, #15]
 8013b1a:	687a      	ldr	r2, [r7, #4]
 8013b1c:	211a      	movs	r1, #26
 8013b1e:	fb01 f303 	mul.w	r3, r1, r3
 8013b22:	4413      	add	r3, r2
 8013b24:	f203 3356 	addw	r3, r3, #854	; 0x356
 8013b28:	781a      	ldrb	r2, [r3, #0]
 8013b2a:	68bb      	ldr	r3, [r7, #8]
 8013b2c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8013b2e:	7bfb      	ldrb	r3, [r7, #15]
 8013b30:	687a      	ldr	r2, [r7, #4]
 8013b32:	211a      	movs	r1, #26
 8013b34:	fb01 f303 	mul.w	r3, r1, r3
 8013b38:	4413      	add	r3, r2
 8013b3a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8013b3e:	881a      	ldrh	r2, [r3, #0]
 8013b40:	68bb      	ldr	r3, [r7, #8]
 8013b42:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8013b44:	68bb      	ldr	r3, [r7, #8]
 8013b46:	2200      	movs	r2, #0
 8013b48:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8013b4a:	68bb      	ldr	r3, [r7, #8]
 8013b4c:	2200      	movs	r2, #0
 8013b4e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8013b50:	68bb      	ldr	r3, [r7, #8]
 8013b52:	2200      	movs	r2, #0
 8013b54:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8013b56:	68bb      	ldr	r3, [r7, #8]
 8013b58:	799b      	ldrb	r3, [r3, #6]
 8013b5a:	4619      	mov	r1, r3
 8013b5c:	6878      	ldr	r0, [r7, #4]
 8013b5e:	f002 fdc2 	bl	80166e6 <USBH_AllocPipe>
 8013b62:	4603      	mov	r3, r0
 8013b64:	461a      	mov	r2, r3
 8013b66:	68bb      	ldr	r3, [r7, #8]
 8013b68:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8013b6a:	68bb      	ldr	r3, [r7, #8]
 8013b6c:	79db      	ldrb	r3, [r3, #7]
 8013b6e:	4619      	mov	r1, r3
 8013b70:	6878      	ldr	r0, [r7, #4]
 8013b72:	f002 fdb8 	bl	80166e6 <USBH_AllocPipe>
 8013b76:	4603      	mov	r3, r0
 8013b78:	461a      	mov	r2, r3
 8013b7a:	68bb      	ldr	r3, [r7, #8]
 8013b7c:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8013b7e:	6878      	ldr	r0, [r7, #4]
 8013b80:	f000 fda4 	bl	80146cc <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8013b84:	68bb      	ldr	r3, [r7, #8]
 8013b86:	7959      	ldrb	r1, [r3, #5]
 8013b88:	68bb      	ldr	r3, [r7, #8]
 8013b8a:	7998      	ldrb	r0, [r3, #6]
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8013b98:	68ba      	ldr	r2, [r7, #8]
 8013b9a:	8912      	ldrh	r2, [r2, #8]
 8013b9c:	9202      	str	r2, [sp, #8]
 8013b9e:	2202      	movs	r2, #2
 8013ba0:	9201      	str	r2, [sp, #4]
 8013ba2:	9300      	str	r3, [sp, #0]
 8013ba4:	4623      	mov	r3, r4
 8013ba6:	4602      	mov	r2, r0
 8013ba8:	6878      	ldr	r0, [r7, #4]
 8013baa:	f002 fd6d 	bl	8016688 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8013bae:	68bb      	ldr	r3, [r7, #8]
 8013bb0:	7919      	ldrb	r1, [r3, #4]
 8013bb2:	68bb      	ldr	r3, [r7, #8]
 8013bb4:	79d8      	ldrb	r0, [r3, #7]
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8013bc2:	68ba      	ldr	r2, [r7, #8]
 8013bc4:	8952      	ldrh	r2, [r2, #10]
 8013bc6:	9202      	str	r2, [sp, #8]
 8013bc8:	2202      	movs	r2, #2
 8013bca:	9201      	str	r2, [sp, #4]
 8013bcc:	9300      	str	r3, [sp, #0]
 8013bce:	4623      	mov	r3, r4
 8013bd0:	4602      	mov	r2, r0
 8013bd2:	6878      	ldr	r0, [r7, #4]
 8013bd4:	f002 fd58 	bl	8016688 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8013bd8:	68bb      	ldr	r3, [r7, #8]
 8013bda:	791b      	ldrb	r3, [r3, #4]
 8013bdc:	2200      	movs	r2, #0
 8013bde:	4619      	mov	r1, r3
 8013be0:	6878      	ldr	r0, [r7, #4]
 8013be2:	f008 fede 	bl	801c9a2 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8013be6:	68bb      	ldr	r3, [r7, #8]
 8013be8:	795b      	ldrb	r3, [r3, #5]
 8013bea:	2200      	movs	r2, #0
 8013bec:	4619      	mov	r1, r3
 8013bee:	6878      	ldr	r0, [r7, #4]
 8013bf0:	f008 fed7 	bl	801c9a2 <USBH_LL_SetToggle>

  return USBH_OK;
 8013bf4:	2300      	movs	r3, #0
}
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	3714      	adds	r7, #20
 8013bfa:	46bd      	mov	sp, r7
 8013bfc:	bd90      	pop	{r4, r7, pc}

08013bfe <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8013bfe:	b580      	push	{r7, lr}
 8013c00:	b084      	sub	sp, #16
 8013c02:	af00      	add	r7, sp, #0
 8013c04:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013c0c:	69db      	ldr	r3, [r3, #28]
 8013c0e:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	795b      	ldrb	r3, [r3, #5]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d00e      	beq.n	8013c36 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	795b      	ldrb	r3, [r3, #5]
 8013c1c:	4619      	mov	r1, r3
 8013c1e:	6878      	ldr	r0, [r7, #4]
 8013c20:	f002 fd51 	bl	80166c6 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	795b      	ldrb	r3, [r3, #5]
 8013c28:	4619      	mov	r1, r3
 8013c2a:	6878      	ldr	r0, [r7, #4]
 8013c2c:	f002 fd7c 	bl	8016728 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	2200      	movs	r2, #0
 8013c34:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	791b      	ldrb	r3, [r3, #4]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d00e      	beq.n	8013c5c <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	791b      	ldrb	r3, [r3, #4]
 8013c42:	4619      	mov	r1, r3
 8013c44:	6878      	ldr	r0, [r7, #4]
 8013c46:	f002 fd3e 	bl	80166c6 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	791b      	ldrb	r3, [r3, #4]
 8013c4e:	4619      	mov	r1, r3
 8013c50:	6878      	ldr	r0, [r7, #4]
 8013c52:	f002 fd69 	bl	8016728 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	2200      	movs	r2, #0
 8013c5a:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013c62:	69db      	ldr	r3, [r3, #28]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d00b      	beq.n	8013c80 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013c6e:	69db      	ldr	r3, [r3, #28]
 8013c70:	4618      	mov	r0, r3
 8013c72:	f008 ff65 	bl	801cb40 <free>
    phost->pActiveClass->pData = 0U;
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013c7c:	2200      	movs	r2, #0
 8013c7e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8013c80:	2300      	movs	r3, #0
}
 8013c82:	4618      	mov	r0, r3
 8013c84:	3710      	adds	r7, #16
 8013c86:	46bd      	mov	sp, r7
 8013c88:	bd80      	pop	{r7, pc}

08013c8a <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8013c8a:	b580      	push	{r7, lr}
 8013c8c:	b084      	sub	sp, #16
 8013c8e:	af00      	add	r7, sp, #0
 8013c90:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013c98:	69db      	ldr	r3, [r3, #28]
 8013c9a:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8013c9c:	2301      	movs	r3, #1
 8013c9e:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8013ca0:	68bb      	ldr	r3, [r7, #8]
 8013ca2:	7b9b      	ldrb	r3, [r3, #14]
 8013ca4:	2b02      	cmp	r3, #2
 8013ca6:	d004      	beq.n	8013cb2 <USBH_MSC_ClassRequest+0x28>
 8013ca8:	2b03      	cmp	r3, #3
 8013caa:	d03e      	beq.n	8013d2a <USBH_MSC_ClassRequest+0xa0>
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d000      	beq.n	8013cb2 <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 8013cb0:	e04a      	b.n	8013d48 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8013cb2:	68bb      	ldr	r3, [r7, #8]
 8013cb4:	4619      	mov	r1, r3
 8013cb6:	6878      	ldr	r0, [r7, #4]
 8013cb8:	f000 fcea 	bl	8014690 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8013cbc:	4603      	mov	r3, r0
 8013cbe:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 8013cc0:	7bfb      	ldrb	r3, [r7, #15]
 8013cc2:	2b03      	cmp	r3, #3
 8013cc4:	d104      	bne.n	8013cd0 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 8013cc6:	68bb      	ldr	r3, [r7, #8]
 8013cc8:	2200      	movs	r2, #0
 8013cca:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8013ccc:	2300      	movs	r3, #0
 8013cce:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 8013cd0:	7bfb      	ldrb	r3, [r7, #15]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d135      	bne.n	8013d42 <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8013cd6:	68bb      	ldr	r3, [r7, #8]
 8013cd8:	781b      	ldrb	r3, [r3, #0]
 8013cda:	2b02      	cmp	r3, #2
 8013cdc:	d804      	bhi.n	8013ce8 <USBH_MSC_ClassRequest+0x5e>
 8013cde:	68bb      	ldr	r3, [r7, #8]
 8013ce0:	781b      	ldrb	r3, [r3, #0]
 8013ce2:	3301      	adds	r3, #1
 8013ce4:	b2da      	uxtb	r2, r3
 8013ce6:	e000      	b.n	8013cea <USBH_MSC_ClassRequest+0x60>
 8013ce8:	2202      	movs	r2, #2
 8013cea:	68bb      	ldr	r3, [r7, #8]
 8013cec:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8013cee:	2300      	movs	r3, #0
 8013cf0:	73bb      	strb	r3, [r7, #14]
 8013cf2:	e014      	b.n	8013d1e <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8013cf4:	7bbb      	ldrb	r3, [r7, #14]
 8013cf6:	68ba      	ldr	r2, [r7, #8]
 8013cf8:	2134      	movs	r1, #52	; 0x34
 8013cfa:	fb01 f303 	mul.w	r3, r1, r3
 8013cfe:	4413      	add	r3, r2
 8013d00:	3392      	adds	r3, #146	; 0x92
 8013d02:	2202      	movs	r2, #2
 8013d04:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8013d06:	7bbb      	ldrb	r3, [r7, #14]
 8013d08:	68ba      	ldr	r2, [r7, #8]
 8013d0a:	2134      	movs	r1, #52	; 0x34
 8013d0c:	fb01 f303 	mul.w	r3, r1, r3
 8013d10:	4413      	add	r3, r2
 8013d12:	33c1      	adds	r3, #193	; 0xc1
 8013d14:	2200      	movs	r2, #0
 8013d16:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8013d18:	7bbb      	ldrb	r3, [r7, #14]
 8013d1a:	3301      	adds	r3, #1
 8013d1c:	73bb      	strb	r3, [r7, #14]
 8013d1e:	68bb      	ldr	r3, [r7, #8]
 8013d20:	781b      	ldrb	r3, [r3, #0]
 8013d22:	7bba      	ldrb	r2, [r7, #14]
 8013d24:	429a      	cmp	r2, r3
 8013d26:	d3e5      	bcc.n	8013cf4 <USBH_MSC_ClassRequest+0x6a>
      break;
 8013d28:	e00b      	b.n	8013d42 <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8013d2a:	2100      	movs	r1, #0
 8013d2c:	6878      	ldr	r0, [r7, #4]
 8013d2e:	f002 f878 	bl	8015e22 <USBH_ClrFeature>
 8013d32:	4603      	mov	r3, r0
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d106      	bne.n	8013d46 <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8013d38:	68bb      	ldr	r3, [r7, #8]
 8013d3a:	7bda      	ldrb	r2, [r3, #15]
 8013d3c:	68bb      	ldr	r3, [r7, #8]
 8013d3e:	739a      	strb	r2, [r3, #14]
      break;
 8013d40:	e001      	b.n	8013d46 <USBH_MSC_ClassRequest+0xbc>
      break;
 8013d42:	bf00      	nop
 8013d44:	e000      	b.n	8013d48 <USBH_MSC_ClassRequest+0xbe>
      break;
 8013d46:	bf00      	nop
  }

  return status;
 8013d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	3710      	adds	r7, #16
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	bd80      	pop	{r7, pc}
	...

08013d54 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b086      	sub	sp, #24
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013d62:	69db      	ldr	r3, [r3, #28]
 8013d64:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8013d66:	2301      	movs	r3, #1
 8013d68:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8013d6a:	2301      	movs	r3, #1
 8013d6c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8013d6e:	2301      	movs	r3, #1
 8013d70:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8013d72:	693b      	ldr	r3, [r7, #16]
 8013d74:	7b1b      	ldrb	r3, [r3, #12]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d003      	beq.n	8013d82 <USBH_MSC_Process+0x2e>
 8013d7a:	2b01      	cmp	r3, #1
 8013d7c:	f000 8271 	beq.w	8014262 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8013d80:	e272      	b.n	8014268 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8013d82:	693b      	ldr	r3, [r7, #16]
 8013d84:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8013d88:	693b      	ldr	r3, [r7, #16]
 8013d8a:	781b      	ldrb	r3, [r3, #0]
 8013d8c:	b29b      	uxth	r3, r3
 8013d8e:	429a      	cmp	r2, r3
 8013d90:	f080 824f 	bcs.w	8014232 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8013d94:	693b      	ldr	r3, [r7, #16]
 8013d96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8013d9a:	4619      	mov	r1, r3
 8013d9c:	693a      	ldr	r2, [r7, #16]
 8013d9e:	2334      	movs	r3, #52	; 0x34
 8013da0:	fb03 f301 	mul.w	r3, r3, r1
 8013da4:	4413      	add	r3, r2
 8013da6:	3391      	adds	r3, #145	; 0x91
 8013da8:	2201      	movs	r2, #1
 8013daa:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8013dac:	693b      	ldr	r3, [r7, #16]
 8013dae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8013db2:	4619      	mov	r1, r3
 8013db4:	693a      	ldr	r2, [r7, #16]
 8013db6:	2334      	movs	r3, #52	; 0x34
 8013db8:	fb03 f301 	mul.w	r3, r3, r1
 8013dbc:	4413      	add	r3, r2
 8013dbe:	3390      	adds	r3, #144	; 0x90
 8013dc0:	781b      	ldrb	r3, [r3, #0]
 8013dc2:	2b08      	cmp	r3, #8
 8013dc4:	f200 8243 	bhi.w	801424e <USBH_MSC_Process+0x4fa>
 8013dc8:	a201      	add	r2, pc, #4	; (adr r2, 8013dd0 <USBH_MSC_Process+0x7c>)
 8013dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013dce:	bf00      	nop
 8013dd0:	08013df5 	.word	0x08013df5
 8013dd4:	0801424f 	.word	0x0801424f
 8013dd8:	08013ebd 	.word	0x08013ebd
 8013ddc:	08014041 	.word	0x08014041
 8013de0:	08013e1b 	.word	0x08013e1b
 8013de4:	0801410d 	.word	0x0801410d
 8013de8:	0801424f 	.word	0x0801424f
 8013dec:	0801424f 	.word	0x0801424f
 8013df0:	08014221 	.word	0x08014221
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8013df4:	693b      	ldr	r3, [r7, #16]
 8013df6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8013dfa:	4619      	mov	r1, r3
 8013dfc:	693a      	ldr	r2, [r7, #16]
 8013dfe:	2334      	movs	r3, #52	; 0x34
 8013e00:	fb03 f301 	mul.w	r3, r3, r1
 8013e04:	4413      	add	r3, r2
 8013e06:	3390      	adds	r3, #144	; 0x90
 8013e08:	2204      	movs	r2, #4
 8013e0a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8013e12:	693b      	ldr	r3, [r7, #16]
 8013e14:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8013e18:	e222      	b.n	8014260 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8013e1a:	693b      	ldr	r3, [r7, #16]
 8013e1c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8013e20:	b2d9      	uxtb	r1, r3
 8013e22:	693b      	ldr	r3, [r7, #16]
 8013e24:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8013e28:	461a      	mov	r2, r3
 8013e2a:	2334      	movs	r3, #52	; 0x34
 8013e2c:	fb03 f302 	mul.w	r3, r3, r2
 8013e30:	3398      	adds	r3, #152	; 0x98
 8013e32:	693a      	ldr	r2, [r7, #16]
 8013e34:	4413      	add	r3, r2
 8013e36:	3307      	adds	r3, #7
 8013e38:	461a      	mov	r2, r3
 8013e3a:	6878      	ldr	r0, [r7, #4]
 8013e3c:	f000 ff68 	bl	8014d10 <USBH_MSC_SCSI_Inquiry>
 8013e40:	4603      	mov	r3, r0
 8013e42:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8013e44:	7bfb      	ldrb	r3, [r7, #15]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d10b      	bne.n	8013e62 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8013e4a:	693b      	ldr	r3, [r7, #16]
 8013e4c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8013e50:	4619      	mov	r1, r3
 8013e52:	693a      	ldr	r2, [r7, #16]
 8013e54:	2334      	movs	r3, #52	; 0x34
 8013e56:	fb03 f301 	mul.w	r3, r3, r1
 8013e5a:	4413      	add	r3, r2
 8013e5c:	3390      	adds	r3, #144	; 0x90
 8013e5e:	2202      	movs	r2, #2
 8013e60:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8013e62:	7bfb      	ldrb	r3, [r7, #15]
 8013e64:	2b02      	cmp	r3, #2
 8013e66:	d10c      	bne.n	8013e82 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8013e68:	693b      	ldr	r3, [r7, #16]
 8013e6a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8013e6e:	4619      	mov	r1, r3
 8013e70:	693a      	ldr	r2, [r7, #16]
 8013e72:	2334      	movs	r3, #52	; 0x34
 8013e74:	fb03 f301 	mul.w	r3, r3, r1
 8013e78:	4413      	add	r3, r2
 8013e7a:	3390      	adds	r3, #144	; 0x90
 8013e7c:	2205      	movs	r2, #5
 8013e7e:	701a      	strb	r2, [r3, #0]
            break;
 8013e80:	e1e7      	b.n	8014252 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8013e82:	7bfb      	ldrb	r3, [r7, #15]
 8013e84:	2b04      	cmp	r3, #4
 8013e86:	f040 81e4 	bne.w	8014252 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8013e8a:	693b      	ldr	r3, [r7, #16]
 8013e8c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8013e90:	4619      	mov	r1, r3
 8013e92:	693a      	ldr	r2, [r7, #16]
 8013e94:	2334      	movs	r3, #52	; 0x34
 8013e96:	fb03 f301 	mul.w	r3, r3, r1
 8013e9a:	4413      	add	r3, r2
 8013e9c:	3390      	adds	r3, #144	; 0x90
 8013e9e:	2201      	movs	r2, #1
 8013ea0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8013ea2:	693b      	ldr	r3, [r7, #16]
 8013ea4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8013ea8:	4619      	mov	r1, r3
 8013eaa:	693a      	ldr	r2, [r7, #16]
 8013eac:	2334      	movs	r3, #52	; 0x34
 8013eae:	fb03 f301 	mul.w	r3, r3, r1
 8013eb2:	4413      	add	r3, r2
 8013eb4:	3391      	adds	r3, #145	; 0x91
 8013eb6:	2202      	movs	r2, #2
 8013eb8:	701a      	strb	r2, [r3, #0]
            break;
 8013eba:	e1ca      	b.n	8014252 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8013ebc:	693b      	ldr	r3, [r7, #16]
 8013ebe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8013ec2:	b2db      	uxtb	r3, r3
 8013ec4:	4619      	mov	r1, r3
 8013ec6:	6878      	ldr	r0, [r7, #4]
 8013ec8:	f000 fe64 	bl	8014b94 <USBH_MSC_SCSI_TestUnitReady>
 8013ecc:	4603      	mov	r3, r0
 8013ece:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8013ed0:	7bbb      	ldrb	r3, [r7, #14]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d149      	bne.n	8013f6a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8013ed6:	693b      	ldr	r3, [r7, #16]
 8013ed8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8013edc:	4619      	mov	r1, r3
 8013ede:	693a      	ldr	r2, [r7, #16]
 8013ee0:	2334      	movs	r3, #52	; 0x34
 8013ee2:	fb03 f301 	mul.w	r3, r3, r1
 8013ee6:	4413      	add	r3, r2
 8013ee8:	3392      	adds	r3, #146	; 0x92
 8013eea:	781b      	ldrb	r3, [r3, #0]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d00c      	beq.n	8013f0a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8013ef0:	693b      	ldr	r3, [r7, #16]
 8013ef2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8013ef6:	4619      	mov	r1, r3
 8013ef8:	693a      	ldr	r2, [r7, #16]
 8013efa:	2334      	movs	r3, #52	; 0x34
 8013efc:	fb03 f301 	mul.w	r3, r3, r1
 8013f00:	4413      	add	r3, r2
 8013f02:	33c1      	adds	r3, #193	; 0xc1
 8013f04:	2201      	movs	r2, #1
 8013f06:	701a      	strb	r2, [r3, #0]
 8013f08:	e00b      	b.n	8013f22 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8013f0a:	693b      	ldr	r3, [r7, #16]
 8013f0c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8013f10:	4619      	mov	r1, r3
 8013f12:	693a      	ldr	r2, [r7, #16]
 8013f14:	2334      	movs	r3, #52	; 0x34
 8013f16:	fb03 f301 	mul.w	r3, r3, r1
 8013f1a:	4413      	add	r3, r2
 8013f1c:	33c1      	adds	r3, #193	; 0xc1
 8013f1e:	2200      	movs	r2, #0
 8013f20:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8013f22:	693b      	ldr	r3, [r7, #16]
 8013f24:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8013f28:	4619      	mov	r1, r3
 8013f2a:	693a      	ldr	r2, [r7, #16]
 8013f2c:	2334      	movs	r3, #52	; 0x34
 8013f2e:	fb03 f301 	mul.w	r3, r3, r1
 8013f32:	4413      	add	r3, r2
 8013f34:	3390      	adds	r3, #144	; 0x90
 8013f36:	2203      	movs	r2, #3
 8013f38:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8013f3a:	693b      	ldr	r3, [r7, #16]
 8013f3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8013f40:	4619      	mov	r1, r3
 8013f42:	693a      	ldr	r2, [r7, #16]
 8013f44:	2334      	movs	r3, #52	; 0x34
 8013f46:	fb03 f301 	mul.w	r3, r3, r1
 8013f4a:	4413      	add	r3, r2
 8013f4c:	3391      	adds	r3, #145	; 0x91
 8013f4e:	2200      	movs	r2, #0
 8013f50:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8013f52:	693b      	ldr	r3, [r7, #16]
 8013f54:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8013f58:	4619      	mov	r1, r3
 8013f5a:	693a      	ldr	r2, [r7, #16]
 8013f5c:	2334      	movs	r3, #52	; 0x34
 8013f5e:	fb03 f301 	mul.w	r3, r3, r1
 8013f62:	4413      	add	r3, r2
 8013f64:	3392      	adds	r3, #146	; 0x92
 8013f66:	2200      	movs	r2, #0
 8013f68:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8013f6a:	7bbb      	ldrb	r3, [r7, #14]
 8013f6c:	2b02      	cmp	r3, #2
 8013f6e:	d14a      	bne.n	8014006 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8013f70:	693b      	ldr	r3, [r7, #16]
 8013f72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8013f76:	4619      	mov	r1, r3
 8013f78:	693a      	ldr	r2, [r7, #16]
 8013f7a:	2334      	movs	r3, #52	; 0x34
 8013f7c:	fb03 f301 	mul.w	r3, r3, r1
 8013f80:	4413      	add	r3, r2
 8013f82:	3392      	adds	r3, #146	; 0x92
 8013f84:	781b      	ldrb	r3, [r3, #0]
 8013f86:	2b02      	cmp	r3, #2
 8013f88:	d00c      	beq.n	8013fa4 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8013f8a:	693b      	ldr	r3, [r7, #16]
 8013f8c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8013f90:	4619      	mov	r1, r3
 8013f92:	693a      	ldr	r2, [r7, #16]
 8013f94:	2334      	movs	r3, #52	; 0x34
 8013f96:	fb03 f301 	mul.w	r3, r3, r1
 8013f9a:	4413      	add	r3, r2
 8013f9c:	33c1      	adds	r3, #193	; 0xc1
 8013f9e:	2201      	movs	r2, #1
 8013fa0:	701a      	strb	r2, [r3, #0]
 8013fa2:	e00b      	b.n	8013fbc <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8013fa4:	693b      	ldr	r3, [r7, #16]
 8013fa6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8013faa:	4619      	mov	r1, r3
 8013fac:	693a      	ldr	r2, [r7, #16]
 8013fae:	2334      	movs	r3, #52	; 0x34
 8013fb0:	fb03 f301 	mul.w	r3, r3, r1
 8013fb4:	4413      	add	r3, r2
 8013fb6:	33c1      	adds	r3, #193	; 0xc1
 8013fb8:	2200      	movs	r2, #0
 8013fba:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8013fbc:	693b      	ldr	r3, [r7, #16]
 8013fbe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8013fc2:	4619      	mov	r1, r3
 8013fc4:	693a      	ldr	r2, [r7, #16]
 8013fc6:	2334      	movs	r3, #52	; 0x34
 8013fc8:	fb03 f301 	mul.w	r3, r3, r1
 8013fcc:	4413      	add	r3, r2
 8013fce:	3390      	adds	r3, #144	; 0x90
 8013fd0:	2205      	movs	r2, #5
 8013fd2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8013fd4:	693b      	ldr	r3, [r7, #16]
 8013fd6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8013fda:	4619      	mov	r1, r3
 8013fdc:	693a      	ldr	r2, [r7, #16]
 8013fde:	2334      	movs	r3, #52	; 0x34
 8013fe0:	fb03 f301 	mul.w	r3, r3, r1
 8013fe4:	4413      	add	r3, r2
 8013fe6:	3391      	adds	r3, #145	; 0x91
 8013fe8:	2201      	movs	r2, #1
 8013fea:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8013fec:	693b      	ldr	r3, [r7, #16]
 8013fee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8013ff2:	4619      	mov	r1, r3
 8013ff4:	693a      	ldr	r2, [r7, #16]
 8013ff6:	2334      	movs	r3, #52	; 0x34
 8013ff8:	fb03 f301 	mul.w	r3, r3, r1
 8013ffc:	4413      	add	r3, r2
 8013ffe:	3392      	adds	r3, #146	; 0x92
 8014000:	2202      	movs	r2, #2
 8014002:	701a      	strb	r2, [r3, #0]
            break;
 8014004:	e127      	b.n	8014256 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8014006:	7bbb      	ldrb	r3, [r7, #14]
 8014008:	2b04      	cmp	r3, #4
 801400a:	f040 8124 	bne.w	8014256 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 801400e:	693b      	ldr	r3, [r7, #16]
 8014010:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8014014:	4619      	mov	r1, r3
 8014016:	693a      	ldr	r2, [r7, #16]
 8014018:	2334      	movs	r3, #52	; 0x34
 801401a:	fb03 f301 	mul.w	r3, r3, r1
 801401e:	4413      	add	r3, r2
 8014020:	3390      	adds	r3, #144	; 0x90
 8014022:	2201      	movs	r2, #1
 8014024:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8014026:	693b      	ldr	r3, [r7, #16]
 8014028:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801402c:	4619      	mov	r1, r3
 801402e:	693a      	ldr	r2, [r7, #16]
 8014030:	2334      	movs	r3, #52	; 0x34
 8014032:	fb03 f301 	mul.w	r3, r3, r1
 8014036:	4413      	add	r3, r2
 8014038:	3391      	adds	r3, #145	; 0x91
 801403a:	2202      	movs	r2, #2
 801403c:	701a      	strb	r2, [r3, #0]
            break;
 801403e:	e10a      	b.n	8014256 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8014040:	693b      	ldr	r3, [r7, #16]
 8014042:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8014046:	b2d9      	uxtb	r1, r3
 8014048:	693b      	ldr	r3, [r7, #16]
 801404a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801404e:	461a      	mov	r2, r3
 8014050:	2334      	movs	r3, #52	; 0x34
 8014052:	fb03 f302 	mul.w	r3, r3, r2
 8014056:	3390      	adds	r3, #144	; 0x90
 8014058:	693a      	ldr	r2, [r7, #16]
 801405a:	4413      	add	r3, r2
 801405c:	3304      	adds	r3, #4
 801405e:	461a      	mov	r2, r3
 8014060:	6878      	ldr	r0, [r7, #4]
 8014062:	f000 fdda 	bl	8014c1a <USBH_MSC_SCSI_ReadCapacity>
 8014066:	4603      	mov	r3, r0
 8014068:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 801406a:	7bfb      	ldrb	r3, [r7, #15]
 801406c:	2b00      	cmp	r3, #0
 801406e:	d120      	bne.n	80140b2 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8014070:	693b      	ldr	r3, [r7, #16]
 8014072:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8014076:	4619      	mov	r1, r3
 8014078:	693a      	ldr	r2, [r7, #16]
 801407a:	2334      	movs	r3, #52	; 0x34
 801407c:	fb03 f301 	mul.w	r3, r3, r1
 8014080:	4413      	add	r3, r2
 8014082:	3390      	adds	r3, #144	; 0x90
 8014084:	2201      	movs	r2, #1
 8014086:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8014088:	693b      	ldr	r3, [r7, #16]
 801408a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801408e:	4619      	mov	r1, r3
 8014090:	693a      	ldr	r2, [r7, #16]
 8014092:	2334      	movs	r3, #52	; 0x34
 8014094:	fb03 f301 	mul.w	r3, r3, r1
 8014098:	4413      	add	r3, r2
 801409a:	3391      	adds	r3, #145	; 0x91
 801409c:	2200      	movs	r2, #0
 801409e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80140a0:	693b      	ldr	r3, [r7, #16]
 80140a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80140a6:	3301      	adds	r3, #1
 80140a8:	b29a      	uxth	r2, r3
 80140aa:	693b      	ldr	r3, [r7, #16]
 80140ac:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80140b0:	e0d3      	b.n	801425a <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 80140b2:	7bfb      	ldrb	r3, [r7, #15]
 80140b4:	2b02      	cmp	r3, #2
 80140b6:	d10c      	bne.n	80140d2 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80140b8:	693b      	ldr	r3, [r7, #16]
 80140ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80140be:	4619      	mov	r1, r3
 80140c0:	693a      	ldr	r2, [r7, #16]
 80140c2:	2334      	movs	r3, #52	; 0x34
 80140c4:	fb03 f301 	mul.w	r3, r3, r1
 80140c8:	4413      	add	r3, r2
 80140ca:	3390      	adds	r3, #144	; 0x90
 80140cc:	2205      	movs	r2, #5
 80140ce:	701a      	strb	r2, [r3, #0]
            break;
 80140d0:	e0c3      	b.n	801425a <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80140d2:	7bfb      	ldrb	r3, [r7, #15]
 80140d4:	2b04      	cmp	r3, #4
 80140d6:	f040 80c0 	bne.w	801425a <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80140da:	693b      	ldr	r3, [r7, #16]
 80140dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80140e0:	4619      	mov	r1, r3
 80140e2:	693a      	ldr	r2, [r7, #16]
 80140e4:	2334      	movs	r3, #52	; 0x34
 80140e6:	fb03 f301 	mul.w	r3, r3, r1
 80140ea:	4413      	add	r3, r2
 80140ec:	3390      	adds	r3, #144	; 0x90
 80140ee:	2201      	movs	r2, #1
 80140f0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80140f2:	693b      	ldr	r3, [r7, #16]
 80140f4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80140f8:	4619      	mov	r1, r3
 80140fa:	693a      	ldr	r2, [r7, #16]
 80140fc:	2334      	movs	r3, #52	; 0x34
 80140fe:	fb03 f301 	mul.w	r3, r3, r1
 8014102:	4413      	add	r3, r2
 8014104:	3391      	adds	r3, #145	; 0x91
 8014106:	2202      	movs	r2, #2
 8014108:	701a      	strb	r2, [r3, #0]
            break;
 801410a:	e0a6      	b.n	801425a <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 801410c:	693b      	ldr	r3, [r7, #16]
 801410e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8014112:	b2d9      	uxtb	r1, r3
 8014114:	693b      	ldr	r3, [r7, #16]
 8014116:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801411a:	461a      	mov	r2, r3
 801411c:	2334      	movs	r3, #52	; 0x34
 801411e:	fb03 f302 	mul.w	r3, r3, r2
 8014122:	3398      	adds	r3, #152	; 0x98
 8014124:	693a      	ldr	r2, [r7, #16]
 8014126:	4413      	add	r3, r2
 8014128:	3304      	adds	r3, #4
 801412a:	461a      	mov	r2, r3
 801412c:	6878      	ldr	r0, [r7, #4]
 801412e:	f000 fe94 	bl	8014e5a <USBH_MSC_SCSI_RequestSense>
 8014132:	4603      	mov	r3, r0
 8014134:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8014136:	7bfb      	ldrb	r3, [r7, #15]
 8014138:	2b00      	cmp	r3, #0
 801413a:	d145      	bne.n	80141c8 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 801413c:	693b      	ldr	r3, [r7, #16]
 801413e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8014142:	4619      	mov	r1, r3
 8014144:	693a      	ldr	r2, [r7, #16]
 8014146:	2334      	movs	r3, #52	; 0x34
 8014148:	fb03 f301 	mul.w	r3, r3, r1
 801414c:	4413      	add	r3, r2
 801414e:	339c      	adds	r3, #156	; 0x9c
 8014150:	781b      	ldrb	r3, [r3, #0]
 8014152:	2b06      	cmp	r3, #6
 8014154:	d00c      	beq.n	8014170 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8014156:	693b      	ldr	r3, [r7, #16]
 8014158:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801415c:	4619      	mov	r1, r3
 801415e:	693a      	ldr	r2, [r7, #16]
 8014160:	2334      	movs	r3, #52	; 0x34
 8014162:	fb03 f301 	mul.w	r3, r3, r1
 8014166:	4413      	add	r3, r2
 8014168:	339c      	adds	r3, #156	; 0x9c
 801416a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 801416c:	2b02      	cmp	r3, #2
 801416e:	d117      	bne.n	80141a0 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8014176:	693b      	ldr	r3, [r7, #16]
 8014178:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801417c:	1ad3      	subs	r3, r2, r3
 801417e:	f242 720f 	movw	r2, #9999	; 0x270f
 8014182:	4293      	cmp	r3, r2
 8014184:	d80c      	bhi.n	80141a0 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8014186:	693b      	ldr	r3, [r7, #16]
 8014188:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801418c:	4619      	mov	r1, r3
 801418e:	693a      	ldr	r2, [r7, #16]
 8014190:	2334      	movs	r3, #52	; 0x34
 8014192:	fb03 f301 	mul.w	r3, r3, r1
 8014196:	4413      	add	r3, r2
 8014198:	3390      	adds	r3, #144	; 0x90
 801419a:	2202      	movs	r2, #2
 801419c:	701a      	strb	r2, [r3, #0]
                  break;
 801419e:	e05f      	b.n	8014260 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80141a0:	693b      	ldr	r3, [r7, #16]
 80141a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80141a6:	4619      	mov	r1, r3
 80141a8:	693a      	ldr	r2, [r7, #16]
 80141aa:	2334      	movs	r3, #52	; 0x34
 80141ac:	fb03 f301 	mul.w	r3, r3, r1
 80141b0:	4413      	add	r3, r2
 80141b2:	3390      	adds	r3, #144	; 0x90
 80141b4:	2201      	movs	r2, #1
 80141b6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80141b8:	693b      	ldr	r3, [r7, #16]
 80141ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80141be:	3301      	adds	r3, #1
 80141c0:	b29a      	uxth	r2, r3
 80141c2:	693b      	ldr	r3, [r7, #16]
 80141c4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 80141c8:	7bfb      	ldrb	r3, [r7, #15]
 80141ca:	2b02      	cmp	r3, #2
 80141cc:	d10c      	bne.n	80141e8 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80141ce:	693b      	ldr	r3, [r7, #16]
 80141d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80141d4:	4619      	mov	r1, r3
 80141d6:	693a      	ldr	r2, [r7, #16]
 80141d8:	2334      	movs	r3, #52	; 0x34
 80141da:	fb03 f301 	mul.w	r3, r3, r1
 80141de:	4413      	add	r3, r2
 80141e0:	3390      	adds	r3, #144	; 0x90
 80141e2:	2208      	movs	r2, #8
 80141e4:	701a      	strb	r2, [r3, #0]
            break;
 80141e6:	e03a      	b.n	801425e <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80141e8:	7bfb      	ldrb	r3, [r7, #15]
 80141ea:	2b04      	cmp	r3, #4
 80141ec:	d137      	bne.n	801425e <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80141ee:	693b      	ldr	r3, [r7, #16]
 80141f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80141f4:	4619      	mov	r1, r3
 80141f6:	693a      	ldr	r2, [r7, #16]
 80141f8:	2334      	movs	r3, #52	; 0x34
 80141fa:	fb03 f301 	mul.w	r3, r3, r1
 80141fe:	4413      	add	r3, r2
 8014200:	3390      	adds	r3, #144	; 0x90
 8014202:	2201      	movs	r2, #1
 8014204:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8014206:	693b      	ldr	r3, [r7, #16]
 8014208:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801420c:	4619      	mov	r1, r3
 801420e:	693a      	ldr	r2, [r7, #16]
 8014210:	2334      	movs	r3, #52	; 0x34
 8014212:	fb03 f301 	mul.w	r3, r3, r1
 8014216:	4413      	add	r3, r2
 8014218:	3391      	adds	r3, #145	; 0x91
 801421a:	2202      	movs	r2, #2
 801421c:	701a      	strb	r2, [r3, #0]
            break;
 801421e:	e01e      	b.n	801425e <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8014220:	693b      	ldr	r3, [r7, #16]
 8014222:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8014226:	3301      	adds	r3, #1
 8014228:	b29a      	uxth	r2, r3
 801422a:	693b      	ldr	r3, [r7, #16]
 801422c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8014230:	e016      	b.n	8014260 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8014232:	693b      	ldr	r3, [r7, #16]
 8014234:	2200      	movs	r2, #0
 8014236:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 801423a:	693b      	ldr	r3, [r7, #16]
 801423c:	2201      	movs	r2, #1
 801423e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8014246:	2102      	movs	r1, #2
 8014248:	6878      	ldr	r0, [r7, #4]
 801424a:	4798      	blx	r3
      break;
 801424c:	e00c      	b.n	8014268 <USBH_MSC_Process+0x514>
            break;
 801424e:	bf00      	nop
 8014250:	e00a      	b.n	8014268 <USBH_MSC_Process+0x514>
            break;
 8014252:	bf00      	nop
 8014254:	e008      	b.n	8014268 <USBH_MSC_Process+0x514>
            break;
 8014256:	bf00      	nop
 8014258:	e006      	b.n	8014268 <USBH_MSC_Process+0x514>
            break;
 801425a:	bf00      	nop
 801425c:	e004      	b.n	8014268 <USBH_MSC_Process+0x514>
            break;
 801425e:	bf00      	nop
      break;
 8014260:	e002      	b.n	8014268 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8014262:	2300      	movs	r3, #0
 8014264:	75fb      	strb	r3, [r7, #23]
      break;
 8014266:	bf00      	nop
  }
  return error;
 8014268:	7dfb      	ldrb	r3, [r7, #23]
}
 801426a:	4618      	mov	r0, r3
 801426c:	3718      	adds	r7, #24
 801426e:	46bd      	mov	sp, r7
 8014270:	bd80      	pop	{r7, pc}
 8014272:	bf00      	nop

08014274 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8014274:	b480      	push	{r7}
 8014276:	b083      	sub	sp, #12
 8014278:	af00      	add	r7, sp, #0
 801427a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 801427c:	2300      	movs	r3, #0
}
 801427e:	4618      	mov	r0, r3
 8014280:	370c      	adds	r7, #12
 8014282:	46bd      	mov	sp, r7
 8014284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014288:	4770      	bx	lr

0801428a <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 801428a:	b580      	push	{r7, lr}
 801428c:	b088      	sub	sp, #32
 801428e:	af02      	add	r7, sp, #8
 8014290:	6078      	str	r0, [r7, #4]
 8014292:	460b      	mov	r3, r1
 8014294:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801429c:	69db      	ldr	r3, [r3, #28]
 801429e:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80142a0:	2301      	movs	r3, #1
 80142a2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80142a4:	2301      	movs	r3, #1
 80142a6:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80142a8:	78fb      	ldrb	r3, [r7, #3]
 80142aa:	693a      	ldr	r2, [r7, #16]
 80142ac:	2134      	movs	r1, #52	; 0x34
 80142ae:	fb01 f303 	mul.w	r3, r1, r3
 80142b2:	4413      	add	r3, r2
 80142b4:	3390      	adds	r3, #144	; 0x90
 80142b6:	781b      	ldrb	r3, [r3, #0]
 80142b8:	2b06      	cmp	r3, #6
 80142ba:	d004      	beq.n	80142c6 <USBH_MSC_RdWrProcess+0x3c>
 80142bc:	2b07      	cmp	r3, #7
 80142be:	d037      	beq.n	8014330 <USBH_MSC_RdWrProcess+0xa6>
 80142c0:	2b05      	cmp	r3, #5
 80142c2:	d06a      	beq.n	801439a <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 80142c4:	e0a6      	b.n	8014414 <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80142c6:	78f9      	ldrb	r1, [r7, #3]
 80142c8:	2300      	movs	r3, #0
 80142ca:	9300      	str	r3, [sp, #0]
 80142cc:	2300      	movs	r3, #0
 80142ce:	2200      	movs	r2, #0
 80142d0:	6878      	ldr	r0, [r7, #4]
 80142d2:	f000 fea6 	bl	8015022 <USBH_MSC_SCSI_Read>
 80142d6:	4603      	mov	r3, r0
 80142d8:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 80142da:	7bfb      	ldrb	r3, [r7, #15]
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d10b      	bne.n	80142f8 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80142e0:	78fb      	ldrb	r3, [r7, #3]
 80142e2:	693a      	ldr	r2, [r7, #16]
 80142e4:	2134      	movs	r1, #52	; 0x34
 80142e6:	fb01 f303 	mul.w	r3, r1, r3
 80142ea:	4413      	add	r3, r2
 80142ec:	3390      	adds	r3, #144	; 0x90
 80142ee:	2201      	movs	r2, #1
 80142f0:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80142f2:	2300      	movs	r3, #0
 80142f4:	75fb      	strb	r3, [r7, #23]
      break;
 80142f6:	e088      	b.n	801440a <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 80142f8:	7bfb      	ldrb	r3, [r7, #15]
 80142fa:	2b02      	cmp	r3, #2
 80142fc:	d109      	bne.n	8014312 <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80142fe:	78fb      	ldrb	r3, [r7, #3]
 8014300:	693a      	ldr	r2, [r7, #16]
 8014302:	2134      	movs	r1, #52	; 0x34
 8014304:	fb01 f303 	mul.w	r3, r1, r3
 8014308:	4413      	add	r3, r2
 801430a:	3390      	adds	r3, #144	; 0x90
 801430c:	2205      	movs	r2, #5
 801430e:	701a      	strb	r2, [r3, #0]
      break;
 8014310:	e07b      	b.n	801440a <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8014312:	7bfb      	ldrb	r3, [r7, #15]
 8014314:	2b04      	cmp	r3, #4
 8014316:	d178      	bne.n	801440a <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8014318:	78fb      	ldrb	r3, [r7, #3]
 801431a:	693a      	ldr	r2, [r7, #16]
 801431c:	2134      	movs	r1, #52	; 0x34
 801431e:	fb01 f303 	mul.w	r3, r1, r3
 8014322:	4413      	add	r3, r2
 8014324:	3390      	adds	r3, #144	; 0x90
 8014326:	2208      	movs	r2, #8
 8014328:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 801432a:	2302      	movs	r3, #2
 801432c:	75fb      	strb	r3, [r7, #23]
      break;
 801432e:	e06c      	b.n	801440a <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8014330:	78f9      	ldrb	r1, [r7, #3]
 8014332:	2300      	movs	r3, #0
 8014334:	9300      	str	r3, [sp, #0]
 8014336:	2300      	movs	r3, #0
 8014338:	2200      	movs	r2, #0
 801433a:	6878      	ldr	r0, [r7, #4]
 801433c:	f000 fe06 	bl	8014f4c <USBH_MSC_SCSI_Write>
 8014340:	4603      	mov	r3, r0
 8014342:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8014344:	7bfb      	ldrb	r3, [r7, #15]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d10b      	bne.n	8014362 <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 801434a:	78fb      	ldrb	r3, [r7, #3]
 801434c:	693a      	ldr	r2, [r7, #16]
 801434e:	2134      	movs	r1, #52	; 0x34
 8014350:	fb01 f303 	mul.w	r3, r1, r3
 8014354:	4413      	add	r3, r2
 8014356:	3390      	adds	r3, #144	; 0x90
 8014358:	2201      	movs	r2, #1
 801435a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 801435c:	2300      	movs	r3, #0
 801435e:	75fb      	strb	r3, [r7, #23]
      break;
 8014360:	e055      	b.n	801440e <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 8014362:	7bfb      	ldrb	r3, [r7, #15]
 8014364:	2b02      	cmp	r3, #2
 8014366:	d109      	bne.n	801437c <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8014368:	78fb      	ldrb	r3, [r7, #3]
 801436a:	693a      	ldr	r2, [r7, #16]
 801436c:	2134      	movs	r1, #52	; 0x34
 801436e:	fb01 f303 	mul.w	r3, r1, r3
 8014372:	4413      	add	r3, r2
 8014374:	3390      	adds	r3, #144	; 0x90
 8014376:	2205      	movs	r2, #5
 8014378:	701a      	strb	r2, [r3, #0]
      break;
 801437a:	e048      	b.n	801440e <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 801437c:	7bfb      	ldrb	r3, [r7, #15]
 801437e:	2b04      	cmp	r3, #4
 8014380:	d145      	bne.n	801440e <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8014382:	78fb      	ldrb	r3, [r7, #3]
 8014384:	693a      	ldr	r2, [r7, #16]
 8014386:	2134      	movs	r1, #52	; 0x34
 8014388:	fb01 f303 	mul.w	r3, r1, r3
 801438c:	4413      	add	r3, r2
 801438e:	3390      	adds	r3, #144	; 0x90
 8014390:	2208      	movs	r2, #8
 8014392:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8014394:	2302      	movs	r3, #2
 8014396:	75fb      	strb	r3, [r7, #23]
      break;
 8014398:	e039      	b.n	801440e <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 801439a:	78fb      	ldrb	r3, [r7, #3]
 801439c:	2234      	movs	r2, #52	; 0x34
 801439e:	fb02 f303 	mul.w	r3, r2, r3
 80143a2:	3398      	adds	r3, #152	; 0x98
 80143a4:	693a      	ldr	r2, [r7, #16]
 80143a6:	4413      	add	r3, r2
 80143a8:	1d1a      	adds	r2, r3, #4
 80143aa:	78fb      	ldrb	r3, [r7, #3]
 80143ac:	4619      	mov	r1, r3
 80143ae:	6878      	ldr	r0, [r7, #4]
 80143b0:	f000 fd53 	bl	8014e5a <USBH_MSC_SCSI_RequestSense>
 80143b4:	4603      	mov	r3, r0
 80143b6:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 80143b8:	7bfb      	ldrb	r3, [r7, #15]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d113      	bne.n	80143e6 <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80143be:	78fb      	ldrb	r3, [r7, #3]
 80143c0:	693a      	ldr	r2, [r7, #16]
 80143c2:	2134      	movs	r1, #52	; 0x34
 80143c4:	fb01 f303 	mul.w	r3, r1, r3
 80143c8:	4413      	add	r3, r2
 80143ca:	3390      	adds	r3, #144	; 0x90
 80143cc:	2201      	movs	r2, #1
 80143ce:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80143d0:	78fb      	ldrb	r3, [r7, #3]
 80143d2:	693a      	ldr	r2, [r7, #16]
 80143d4:	2134      	movs	r1, #52	; 0x34
 80143d6:	fb01 f303 	mul.w	r3, r1, r3
 80143da:	4413      	add	r3, r2
 80143dc:	3391      	adds	r3, #145	; 0x91
 80143de:	2202      	movs	r2, #2
 80143e0:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 80143e2:	2302      	movs	r3, #2
 80143e4:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 80143e6:	7bfb      	ldrb	r3, [r7, #15]
 80143e8:	2b02      	cmp	r3, #2
 80143ea:	d012      	beq.n	8014412 <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80143ec:	7bfb      	ldrb	r3, [r7, #15]
 80143ee:	2b04      	cmp	r3, #4
 80143f0:	d10f      	bne.n	8014412 <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80143f2:	78fb      	ldrb	r3, [r7, #3]
 80143f4:	693a      	ldr	r2, [r7, #16]
 80143f6:	2134      	movs	r1, #52	; 0x34
 80143f8:	fb01 f303 	mul.w	r3, r1, r3
 80143fc:	4413      	add	r3, r2
 80143fe:	3390      	adds	r3, #144	; 0x90
 8014400:	2208      	movs	r2, #8
 8014402:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8014404:	2302      	movs	r3, #2
 8014406:	75fb      	strb	r3, [r7, #23]
      break;
 8014408:	e003      	b.n	8014412 <USBH_MSC_RdWrProcess+0x188>
      break;
 801440a:	bf00      	nop
 801440c:	e002      	b.n	8014414 <USBH_MSC_RdWrProcess+0x18a>
      break;
 801440e:	bf00      	nop
 8014410:	e000      	b.n	8014414 <USBH_MSC_RdWrProcess+0x18a>
      break;
 8014412:	bf00      	nop

  }
  return error;
 8014414:	7dfb      	ldrb	r3, [r7, #23]
}
 8014416:	4618      	mov	r0, r3
 8014418:	3718      	adds	r7, #24
 801441a:	46bd      	mov	sp, r7
 801441c:	bd80      	pop	{r7, pc}

0801441e <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 801441e:	b480      	push	{r7}
 8014420:	b085      	sub	sp, #20
 8014422:	af00      	add	r7, sp, #0
 8014424:	6078      	str	r0, [r7, #4]
 8014426:	460b      	mov	r3, r1
 8014428:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014430:	69db      	ldr	r3, [r3, #28]
 8014432:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	781b      	ldrb	r3, [r3, #0]
 8014438:	b2db      	uxtb	r3, r3
 801443a:	2b0b      	cmp	r3, #11
 801443c:	d10c      	bne.n	8014458 <USBH_MSC_UnitIsReady+0x3a>
 801443e:	78fb      	ldrb	r3, [r7, #3]
 8014440:	68ba      	ldr	r2, [r7, #8]
 8014442:	2134      	movs	r1, #52	; 0x34
 8014444:	fb01 f303 	mul.w	r3, r1, r3
 8014448:	4413      	add	r3, r2
 801444a:	3391      	adds	r3, #145	; 0x91
 801444c:	781b      	ldrb	r3, [r3, #0]
 801444e:	2b00      	cmp	r3, #0
 8014450:	d102      	bne.n	8014458 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8014452:	2301      	movs	r3, #1
 8014454:	73fb      	strb	r3, [r7, #15]
 8014456:	e001      	b.n	801445c <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8014458:	2300      	movs	r3, #0
 801445a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 801445c:	7bfb      	ldrb	r3, [r7, #15]
}
 801445e:	4618      	mov	r0, r3
 8014460:	3714      	adds	r7, #20
 8014462:	46bd      	mov	sp, r7
 8014464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014468:	4770      	bx	lr

0801446a <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 801446a:	b580      	push	{r7, lr}
 801446c:	b086      	sub	sp, #24
 801446e:	af00      	add	r7, sp, #0
 8014470:	60f8      	str	r0, [r7, #12]
 8014472:	460b      	mov	r3, r1
 8014474:	607a      	str	r2, [r7, #4]
 8014476:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801447e:	69db      	ldr	r3, [r3, #28]
 8014480:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	781b      	ldrb	r3, [r3, #0]
 8014486:	b2db      	uxtb	r3, r3
 8014488:	2b0b      	cmp	r3, #11
 801448a:	d10d      	bne.n	80144a8 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 801448c:	7afb      	ldrb	r3, [r7, #11]
 801448e:	2234      	movs	r2, #52	; 0x34
 8014490:	fb02 f303 	mul.w	r3, r2, r3
 8014494:	3390      	adds	r3, #144	; 0x90
 8014496:	697a      	ldr	r2, [r7, #20]
 8014498:	4413      	add	r3, r2
 801449a:	2234      	movs	r2, #52	; 0x34
 801449c:	4619      	mov	r1, r3
 801449e:	6878      	ldr	r0, [r7, #4]
 80144a0:	f008 fb56 	bl	801cb50 <memcpy>
    return USBH_OK;
 80144a4:	2300      	movs	r3, #0
 80144a6:	e000      	b.n	80144aa <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80144a8:	2302      	movs	r3, #2
  }
}
 80144aa:	4618      	mov	r0, r3
 80144ac:	3718      	adds	r7, #24
 80144ae:	46bd      	mov	sp, r7
 80144b0:	bd80      	pop	{r7, pc}

080144b2 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80144b2:	b580      	push	{r7, lr}
 80144b4:	b088      	sub	sp, #32
 80144b6:	af02      	add	r7, sp, #8
 80144b8:	60f8      	str	r0, [r7, #12]
 80144ba:	607a      	str	r2, [r7, #4]
 80144bc:	603b      	str	r3, [r7, #0]
 80144be:	460b      	mov	r3, r1
 80144c0:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80144c8:	69db      	ldr	r3, [r3, #28]
 80144ca:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80144d2:	b2db      	uxtb	r3, r3
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d00e      	beq.n	80144f6 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	781b      	ldrb	r3, [r3, #0]
 80144dc:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80144de:	2b0b      	cmp	r3, #11
 80144e0:	d109      	bne.n	80144f6 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80144e2:	7afb      	ldrb	r3, [r7, #11]
 80144e4:	697a      	ldr	r2, [r7, #20]
 80144e6:	2134      	movs	r1, #52	; 0x34
 80144e8:	fb01 f303 	mul.w	r3, r1, r3
 80144ec:	4413      	add	r3, r2
 80144ee:	3390      	adds	r3, #144	; 0x90
 80144f0:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80144f2:	2b01      	cmp	r3, #1
 80144f4:	d001      	beq.n	80144fa <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 80144f6:	2302      	movs	r3, #2
 80144f8:	e040      	b.n	801457c <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 80144fa:	697b      	ldr	r3, [r7, #20]
 80144fc:	2206      	movs	r2, #6
 80144fe:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8014500:	7afb      	ldrb	r3, [r7, #11]
 8014502:	697a      	ldr	r2, [r7, #20]
 8014504:	2134      	movs	r1, #52	; 0x34
 8014506:	fb01 f303 	mul.w	r3, r1, r3
 801450a:	4413      	add	r3, r2
 801450c:	3390      	adds	r3, #144	; 0x90
 801450e:	2206      	movs	r2, #6
 8014510:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8014512:	7afb      	ldrb	r3, [r7, #11]
 8014514:	b29a      	uxth	r2, r3
 8014516:	697b      	ldr	r3, [r7, #20]
 8014518:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 801451c:	7af9      	ldrb	r1, [r7, #11]
 801451e:	6a3b      	ldr	r3, [r7, #32]
 8014520:	9300      	str	r3, [sp, #0]
 8014522:	683b      	ldr	r3, [r7, #0]
 8014524:	687a      	ldr	r2, [r7, #4]
 8014526:	68f8      	ldr	r0, [r7, #12]
 8014528:	f000 fd7b 	bl	8015022 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8014532:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8014534:	e016      	b.n	8014564 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 801453c:	693b      	ldr	r3, [r7, #16]
 801453e:	1ad2      	subs	r2, r2, r3
 8014540:	6a3b      	ldr	r3, [r7, #32]
 8014542:	f242 7110 	movw	r1, #10000	; 0x2710
 8014546:	fb01 f303 	mul.w	r3, r1, r3
 801454a:	429a      	cmp	r2, r3
 801454c:	d805      	bhi.n	801455a <USBH_MSC_Read+0xa8>
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8014554:	b2db      	uxtb	r3, r3
 8014556:	2b00      	cmp	r3, #0
 8014558:	d104      	bne.n	8014564 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 801455a:	697b      	ldr	r3, [r7, #20]
 801455c:	2201      	movs	r2, #1
 801455e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8014560:	2302      	movs	r3, #2
 8014562:	e00b      	b.n	801457c <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8014564:	7afb      	ldrb	r3, [r7, #11]
 8014566:	4619      	mov	r1, r3
 8014568:	68f8      	ldr	r0, [r7, #12]
 801456a:	f7ff fe8e 	bl	801428a <USBH_MSC_RdWrProcess>
 801456e:	4603      	mov	r3, r0
 8014570:	2b01      	cmp	r3, #1
 8014572:	d0e0      	beq.n	8014536 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8014574:	697b      	ldr	r3, [r7, #20]
 8014576:	2201      	movs	r2, #1
 8014578:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 801457a:	2300      	movs	r3, #0
}
 801457c:	4618      	mov	r0, r3
 801457e:	3718      	adds	r7, #24
 8014580:	46bd      	mov	sp, r7
 8014582:	bd80      	pop	{r7, pc}

08014584 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8014584:	b580      	push	{r7, lr}
 8014586:	b088      	sub	sp, #32
 8014588:	af02      	add	r7, sp, #8
 801458a:	60f8      	str	r0, [r7, #12]
 801458c:	607a      	str	r2, [r7, #4]
 801458e:	603b      	str	r3, [r7, #0]
 8014590:	460b      	mov	r3, r1
 8014592:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801459a:	69db      	ldr	r3, [r3, #28]
 801459c:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80145a4:	b2db      	uxtb	r3, r3
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d00e      	beq.n	80145c8 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	781b      	ldrb	r3, [r3, #0]
 80145ae:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80145b0:	2b0b      	cmp	r3, #11
 80145b2:	d109      	bne.n	80145c8 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80145b4:	7afb      	ldrb	r3, [r7, #11]
 80145b6:	697a      	ldr	r2, [r7, #20]
 80145b8:	2134      	movs	r1, #52	; 0x34
 80145ba:	fb01 f303 	mul.w	r3, r1, r3
 80145be:	4413      	add	r3, r2
 80145c0:	3390      	adds	r3, #144	; 0x90
 80145c2:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80145c4:	2b01      	cmp	r3, #1
 80145c6:	d001      	beq.n	80145cc <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 80145c8:	2302      	movs	r3, #2
 80145ca:	e040      	b.n	801464e <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 80145cc:	697b      	ldr	r3, [r7, #20]
 80145ce:	2207      	movs	r2, #7
 80145d0:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80145d2:	7afb      	ldrb	r3, [r7, #11]
 80145d4:	697a      	ldr	r2, [r7, #20]
 80145d6:	2134      	movs	r1, #52	; 0x34
 80145d8:	fb01 f303 	mul.w	r3, r1, r3
 80145dc:	4413      	add	r3, r2
 80145de:	3390      	adds	r3, #144	; 0x90
 80145e0:	2207      	movs	r2, #7
 80145e2:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80145e4:	7afb      	ldrb	r3, [r7, #11]
 80145e6:	b29a      	uxth	r2, r3
 80145e8:	697b      	ldr	r3, [r7, #20]
 80145ea:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80145ee:	7af9      	ldrb	r1, [r7, #11]
 80145f0:	6a3b      	ldr	r3, [r7, #32]
 80145f2:	9300      	str	r3, [sp, #0]
 80145f4:	683b      	ldr	r3, [r7, #0]
 80145f6:	687a      	ldr	r2, [r7, #4]
 80145f8:	68f8      	ldr	r0, [r7, #12]
 80145fa:	f000 fca7 	bl	8014f4c <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8014604:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8014606:	e016      	b.n	8014636 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 801460e:	693b      	ldr	r3, [r7, #16]
 8014610:	1ad2      	subs	r2, r2, r3
 8014612:	6a3b      	ldr	r3, [r7, #32]
 8014614:	f242 7110 	movw	r1, #10000	; 0x2710
 8014618:	fb01 f303 	mul.w	r3, r1, r3
 801461c:	429a      	cmp	r2, r3
 801461e:	d805      	bhi.n	801462c <USBH_MSC_Write+0xa8>
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8014626:	b2db      	uxtb	r3, r3
 8014628:	2b00      	cmp	r3, #0
 801462a:	d104      	bne.n	8014636 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 801462c:	697b      	ldr	r3, [r7, #20]
 801462e:	2201      	movs	r2, #1
 8014630:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8014632:	2302      	movs	r3, #2
 8014634:	e00b      	b.n	801464e <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8014636:	7afb      	ldrb	r3, [r7, #11]
 8014638:	4619      	mov	r1, r3
 801463a:	68f8      	ldr	r0, [r7, #12]
 801463c:	f7ff fe25 	bl	801428a <USBH_MSC_RdWrProcess>
 8014640:	4603      	mov	r3, r0
 8014642:	2b01      	cmp	r3, #1
 8014644:	d0e0      	beq.n	8014608 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8014646:	697b      	ldr	r3, [r7, #20]
 8014648:	2201      	movs	r2, #1
 801464a:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 801464c:	2300      	movs	r3, #0
}
 801464e:	4618      	mov	r0, r3
 8014650:	3718      	adds	r7, #24
 8014652:	46bd      	mov	sp, r7
 8014654:	bd80      	pop	{r7, pc}

08014656 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8014656:	b580      	push	{r7, lr}
 8014658:	b082      	sub	sp, #8
 801465a:	af00      	add	r7, sp, #0
 801465c:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	2221      	movs	r2, #33	; 0x21
 8014662:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	22ff      	movs	r2, #255	; 0xff
 8014668:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	2200      	movs	r2, #0
 801466e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	2200      	movs	r2, #0
 8014674:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	2200      	movs	r2, #0
 801467a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 801467c:	2200      	movs	r2, #0
 801467e:	2100      	movs	r1, #0
 8014680:	6878      	ldr	r0, [r7, #4]
 8014682:	f001 fdae 	bl	80161e2 <USBH_CtlReq>
 8014686:	4603      	mov	r3, r0
}
 8014688:	4618      	mov	r0, r3
 801468a:	3708      	adds	r7, #8
 801468c:	46bd      	mov	sp, r7
 801468e:	bd80      	pop	{r7, pc}

08014690 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8014690:	b580      	push	{r7, lr}
 8014692:	b082      	sub	sp, #8
 8014694:	af00      	add	r7, sp, #0
 8014696:	6078      	str	r0, [r7, #4]
 8014698:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	22a1      	movs	r2, #161	; 0xa1
 801469e:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	22fe      	movs	r2, #254	; 0xfe
 80146a4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	2200      	movs	r2, #0
 80146aa:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	2200      	movs	r2, #0
 80146b0:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	2201      	movs	r2, #1
 80146b6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 80146b8:	2201      	movs	r2, #1
 80146ba:	6839      	ldr	r1, [r7, #0]
 80146bc:	6878      	ldr	r0, [r7, #4]
 80146be:	f001 fd90 	bl	80161e2 <USBH_CtlReq>
 80146c2:	4603      	mov	r3, r0
}
 80146c4:	4618      	mov	r0, r3
 80146c6:	3708      	adds	r7, #8
 80146c8:	46bd      	mov	sp, r7
 80146ca:	bd80      	pop	{r7, pc}

080146cc <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80146cc:	b480      	push	{r7}
 80146ce:	b085      	sub	sp, #20
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80146da:	69db      	ldr	r3, [r3, #28]
 80146dc:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	4a09      	ldr	r2, [pc, #36]	; (8014708 <USBH_MSC_BOT_Init+0x3c>)
 80146e2:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	4a09      	ldr	r2, [pc, #36]	; (801470c <USBH_MSC_BOT_Init+0x40>)
 80146e8:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	2201      	movs	r2, #1
 80146ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	2201      	movs	r2, #1
 80146f6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 80146fa:	2300      	movs	r3, #0
}
 80146fc:	4618      	mov	r0, r3
 80146fe:	3714      	adds	r7, #20
 8014700:	46bd      	mov	sp, r7
 8014702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014706:	4770      	bx	lr
 8014708:	43425355 	.word	0x43425355
 801470c:	20304050 	.word	0x20304050

08014710 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8014710:	b580      	push	{r7, lr}
 8014712:	b088      	sub	sp, #32
 8014714:	af02      	add	r7, sp, #8
 8014716:	6078      	str	r0, [r7, #4]
 8014718:	460b      	mov	r3, r1
 801471a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 801471c:	2301      	movs	r3, #1
 801471e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8014720:	2301      	movs	r3, #1
 8014722:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8014724:	2301      	movs	r3, #1
 8014726:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8014728:	2300      	movs	r3, #0
 801472a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014732:	69db      	ldr	r3, [r3, #28]
 8014734:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8014736:	2300      	movs	r3, #0
 8014738:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 801473a:	693b      	ldr	r3, [r7, #16]
 801473c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014740:	3b01      	subs	r3, #1
 8014742:	2b0a      	cmp	r3, #10
 8014744:	f200 81a1 	bhi.w	8014a8a <USBH_MSC_BOT_Process+0x37a>
 8014748:	a201      	add	r2, pc, #4	; (adr r2, 8014750 <USBH_MSC_BOT_Process+0x40>)
 801474a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801474e:	bf00      	nop
 8014750:	0801477d 	.word	0x0801477d
 8014754:	080147a7 	.word	0x080147a7
 8014758:	08014811 	.word	0x08014811
 801475c:	0801482f 	.word	0x0801482f
 8014760:	080148b3 	.word	0x080148b3
 8014764:	080148d7 	.word	0x080148d7
 8014768:	08014971 	.word	0x08014971
 801476c:	0801498d 	.word	0x0801498d
 8014770:	080149df 	.word	0x080149df
 8014774:	08014a0f 	.word	0x08014a0f
 8014778:	08014a71 	.word	0x08014a71
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 801477c:	693b      	ldr	r3, [r7, #16]
 801477e:	78fa      	ldrb	r2, [r7, #3]
 8014780:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8014784:	693b      	ldr	r3, [r7, #16]
 8014786:	2202      	movs	r2, #2
 8014788:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 801478c:	693b      	ldr	r3, [r7, #16]
 801478e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8014792:	693b      	ldr	r3, [r7, #16]
 8014794:	795a      	ldrb	r2, [r3, #5]
 8014796:	2301      	movs	r3, #1
 8014798:	9300      	str	r3, [sp, #0]
 801479a:	4613      	mov	r3, r2
 801479c:	221f      	movs	r2, #31
 801479e:	6878      	ldr	r0, [r7, #4]
 80147a0:	f001 ff2f 	bl	8016602 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 80147a4:	e180      	b.n	8014aa8 <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80147a6:	693b      	ldr	r3, [r7, #16]
 80147a8:	795b      	ldrb	r3, [r3, #5]
 80147aa:	4619      	mov	r1, r3
 80147ac:	6878      	ldr	r0, [r7, #4]
 80147ae:	f008 f8d7 	bl	801c960 <USBH_LL_GetURBState>
 80147b2:	4603      	mov	r3, r0
 80147b4:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80147b6:	7d3b      	ldrb	r3, [r7, #20]
 80147b8:	2b01      	cmp	r3, #1
 80147ba:	d118      	bne.n	80147ee <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80147bc:	693b      	ldr	r3, [r7, #16]
 80147be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d00f      	beq.n	80147e4 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80147c4:	693b      	ldr	r3, [r7, #16]
 80147c6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80147ca:	b25b      	sxtb	r3, r3
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	da04      	bge.n	80147da <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 80147d0:	693b      	ldr	r3, [r7, #16]
 80147d2:	2203      	movs	r2, #3
 80147d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80147d8:	e159      	b.n	8014a8e <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 80147da:	693b      	ldr	r3, [r7, #16]
 80147dc:	2205      	movs	r2, #5
 80147de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80147e2:	e154      	b.n	8014a8e <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80147e4:	693b      	ldr	r3, [r7, #16]
 80147e6:	2207      	movs	r2, #7
 80147e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80147ec:	e14f      	b.n	8014a8e <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 80147ee:	7d3b      	ldrb	r3, [r7, #20]
 80147f0:	2b02      	cmp	r3, #2
 80147f2:	d104      	bne.n	80147fe <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80147f4:	693b      	ldr	r3, [r7, #16]
 80147f6:	2201      	movs	r2, #1
 80147f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80147fc:	e147      	b.n	8014a8e <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 80147fe:	7d3b      	ldrb	r3, [r7, #20]
 8014800:	2b05      	cmp	r3, #5
 8014802:	f040 8144 	bne.w	8014a8e <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8014806:	693b      	ldr	r3, [r7, #16]
 8014808:	220a      	movs	r2, #10
 801480a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 801480e:	e13e      	b.n	8014a8e <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8014810:	693b      	ldr	r3, [r7, #16]
 8014812:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8014816:	693b      	ldr	r3, [r7, #16]
 8014818:	895a      	ldrh	r2, [r3, #10]
 801481a:	693b      	ldr	r3, [r7, #16]
 801481c:	791b      	ldrb	r3, [r3, #4]
 801481e:	6878      	ldr	r0, [r7, #4]
 8014820:	f001 ff14 	bl	801664c <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8014824:	693b      	ldr	r3, [r7, #16]
 8014826:	2204      	movs	r2, #4
 8014828:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 801482c:	e13c      	b.n	8014aa8 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 801482e:	693b      	ldr	r3, [r7, #16]
 8014830:	791b      	ldrb	r3, [r3, #4]
 8014832:	4619      	mov	r1, r3
 8014834:	6878      	ldr	r0, [r7, #4]
 8014836:	f008 f893 	bl	801c960 <USBH_LL_GetURBState>
 801483a:	4603      	mov	r3, r0
 801483c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 801483e:	7d3b      	ldrb	r3, [r7, #20]
 8014840:	2b01      	cmp	r3, #1
 8014842:	d12d      	bne.n	80148a0 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8014844:	693b      	ldr	r3, [r7, #16]
 8014846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014848:	693a      	ldr	r2, [r7, #16]
 801484a:	8952      	ldrh	r2, [r2, #10]
 801484c:	4293      	cmp	r3, r2
 801484e:	d910      	bls.n	8014872 <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8014850:	693b      	ldr	r3, [r7, #16]
 8014852:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014856:	693a      	ldr	r2, [r7, #16]
 8014858:	8952      	ldrh	r2, [r2, #10]
 801485a:	441a      	add	r2, r3
 801485c:	693b      	ldr	r3, [r7, #16]
 801485e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8014862:	693b      	ldr	r3, [r7, #16]
 8014864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014866:	693a      	ldr	r2, [r7, #16]
 8014868:	8952      	ldrh	r2, [r2, #10]
 801486a:	1a9a      	subs	r2, r3, r2
 801486c:	693b      	ldr	r3, [r7, #16]
 801486e:	65da      	str	r2, [r3, #92]	; 0x5c
 8014870:	e002      	b.n	8014878 <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8014872:	693b      	ldr	r3, [r7, #16]
 8014874:	2200      	movs	r2, #0
 8014876:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8014878:	693b      	ldr	r3, [r7, #16]
 801487a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801487c:	2b00      	cmp	r3, #0
 801487e:	d00a      	beq.n	8014896 <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8014880:	693b      	ldr	r3, [r7, #16]
 8014882:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8014886:	693b      	ldr	r3, [r7, #16]
 8014888:	895a      	ldrh	r2, [r3, #10]
 801488a:	693b      	ldr	r3, [r7, #16]
 801488c:	791b      	ldrb	r3, [r3, #4]
 801488e:	6878      	ldr	r0, [r7, #4]
 8014890:	f001 fedc 	bl	801664c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8014894:	e0fd      	b.n	8014a92 <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8014896:	693b      	ldr	r3, [r7, #16]
 8014898:	2207      	movs	r2, #7
 801489a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 801489e:	e0f8      	b.n	8014a92 <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 80148a0:	7d3b      	ldrb	r3, [r7, #20]
 80148a2:	2b05      	cmp	r3, #5
 80148a4:	f040 80f5 	bne.w	8014a92 <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80148a8:	693b      	ldr	r3, [r7, #16]
 80148aa:	2209      	movs	r2, #9
 80148ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80148b0:	e0ef      	b.n	8014a92 <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80148b2:	693b      	ldr	r3, [r7, #16]
 80148b4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80148b8:	693b      	ldr	r3, [r7, #16]
 80148ba:	891a      	ldrh	r2, [r3, #8]
 80148bc:	693b      	ldr	r3, [r7, #16]
 80148be:	7958      	ldrb	r0, [r3, #5]
 80148c0:	2301      	movs	r3, #1
 80148c2:	9300      	str	r3, [sp, #0]
 80148c4:	4603      	mov	r3, r0
 80148c6:	6878      	ldr	r0, [r7, #4]
 80148c8:	f001 fe9b 	bl	8016602 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80148cc:	693b      	ldr	r3, [r7, #16]
 80148ce:	2206      	movs	r2, #6
 80148d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80148d4:	e0e8      	b.n	8014aa8 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80148d6:	693b      	ldr	r3, [r7, #16]
 80148d8:	795b      	ldrb	r3, [r3, #5]
 80148da:	4619      	mov	r1, r3
 80148dc:	6878      	ldr	r0, [r7, #4]
 80148de:	f008 f83f 	bl	801c960 <USBH_LL_GetURBState>
 80148e2:	4603      	mov	r3, r0
 80148e4:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80148e6:	7d3b      	ldrb	r3, [r7, #20]
 80148e8:	2b01      	cmp	r3, #1
 80148ea:	d130      	bne.n	801494e <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 80148ec:	693b      	ldr	r3, [r7, #16]
 80148ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80148f0:	693a      	ldr	r2, [r7, #16]
 80148f2:	8912      	ldrh	r2, [r2, #8]
 80148f4:	4293      	cmp	r3, r2
 80148f6:	d910      	bls.n	801491a <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 80148f8:	693b      	ldr	r3, [r7, #16]
 80148fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80148fe:	693a      	ldr	r2, [r7, #16]
 8014900:	8912      	ldrh	r2, [r2, #8]
 8014902:	441a      	add	r2, r3
 8014904:	693b      	ldr	r3, [r7, #16]
 8014906:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 801490a:	693b      	ldr	r3, [r7, #16]
 801490c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801490e:	693a      	ldr	r2, [r7, #16]
 8014910:	8912      	ldrh	r2, [r2, #8]
 8014912:	1a9a      	subs	r2, r3, r2
 8014914:	693b      	ldr	r3, [r7, #16]
 8014916:	65da      	str	r2, [r3, #92]	; 0x5c
 8014918:	e002      	b.n	8014920 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 801491a:	693b      	ldr	r3, [r7, #16]
 801491c:	2200      	movs	r2, #0
 801491e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8014920:	693b      	ldr	r3, [r7, #16]
 8014922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014924:	2b00      	cmp	r3, #0
 8014926:	d00d      	beq.n	8014944 <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8014928:	693b      	ldr	r3, [r7, #16]
 801492a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 801492e:	693b      	ldr	r3, [r7, #16]
 8014930:	891a      	ldrh	r2, [r3, #8]
 8014932:	693b      	ldr	r3, [r7, #16]
 8014934:	7958      	ldrb	r0, [r3, #5]
 8014936:	2301      	movs	r3, #1
 8014938:	9300      	str	r3, [sp, #0]
 801493a:	4603      	mov	r3, r0
 801493c:	6878      	ldr	r0, [r7, #4]
 801493e:	f001 fe60 	bl	8016602 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8014942:	e0a8      	b.n	8014a96 <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8014944:	693b      	ldr	r3, [r7, #16]
 8014946:	2207      	movs	r2, #7
 8014948:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 801494c:	e0a3      	b.n	8014a96 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 801494e:	7d3b      	ldrb	r3, [r7, #20]
 8014950:	2b02      	cmp	r3, #2
 8014952:	d104      	bne.n	801495e <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8014954:	693b      	ldr	r3, [r7, #16]
 8014956:	2205      	movs	r2, #5
 8014958:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 801495c:	e09b      	b.n	8014a96 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 801495e:	7d3b      	ldrb	r3, [r7, #20]
 8014960:	2b05      	cmp	r3, #5
 8014962:	f040 8098 	bne.w	8014a96 <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8014966:	693b      	ldr	r3, [r7, #16]
 8014968:	220a      	movs	r2, #10
 801496a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 801496e:	e092      	b.n	8014a96 <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8014970:	693b      	ldr	r3, [r7, #16]
 8014972:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8014976:	693b      	ldr	r3, [r7, #16]
 8014978:	791b      	ldrb	r3, [r3, #4]
 801497a:	220d      	movs	r2, #13
 801497c:	6878      	ldr	r0, [r7, #4]
 801497e:	f001 fe65 	bl	801664c <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8014982:	693b      	ldr	r3, [r7, #16]
 8014984:	2208      	movs	r2, #8
 8014986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 801498a:	e08d      	b.n	8014aa8 <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 801498c:	693b      	ldr	r3, [r7, #16]
 801498e:	791b      	ldrb	r3, [r3, #4]
 8014990:	4619      	mov	r1, r3
 8014992:	6878      	ldr	r0, [r7, #4]
 8014994:	f007 ffe4 	bl	801c960 <USBH_LL_GetURBState>
 8014998:	4603      	mov	r3, r0
 801499a:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 801499c:	7d3b      	ldrb	r3, [r7, #20]
 801499e:	2b01      	cmp	r3, #1
 80149a0:	d115      	bne.n	80149ce <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80149a2:	693b      	ldr	r3, [r7, #16]
 80149a4:	2201      	movs	r2, #1
 80149a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80149aa:	693b      	ldr	r3, [r7, #16]
 80149ac:	2201      	movs	r2, #1
 80149ae:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 80149b2:	6878      	ldr	r0, [r7, #4]
 80149b4:	f000 f8aa 	bl	8014b0c <USBH_MSC_DecodeCSW>
 80149b8:	4603      	mov	r3, r0
 80149ba:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 80149bc:	7d7b      	ldrb	r3, [r7, #21]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d102      	bne.n	80149c8 <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 80149c2:	2300      	movs	r3, #0
 80149c4:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 80149c6:	e068      	b.n	8014a9a <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 80149c8:	2302      	movs	r3, #2
 80149ca:	75fb      	strb	r3, [r7, #23]
      break;
 80149cc:	e065      	b.n	8014a9a <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 80149ce:	7d3b      	ldrb	r3, [r7, #20]
 80149d0:	2b05      	cmp	r3, #5
 80149d2:	d162      	bne.n	8014a9a <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80149d4:	693b      	ldr	r3, [r7, #16]
 80149d6:	2209      	movs	r2, #9
 80149d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80149dc:	e05d      	b.n	8014a9a <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 80149de:	78fb      	ldrb	r3, [r7, #3]
 80149e0:	2200      	movs	r2, #0
 80149e2:	4619      	mov	r1, r3
 80149e4:	6878      	ldr	r0, [r7, #4]
 80149e6:	f000 f865 	bl	8014ab4 <USBH_MSC_BOT_Abort>
 80149ea:	4603      	mov	r3, r0
 80149ec:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80149ee:	7dbb      	ldrb	r3, [r7, #22]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d104      	bne.n	80149fe <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80149f4:	693b      	ldr	r3, [r7, #16]
 80149f6:	2207      	movs	r2, #7
 80149f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 80149fc:	e04f      	b.n	8014a9e <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 80149fe:	7dbb      	ldrb	r3, [r7, #22]
 8014a00:	2b04      	cmp	r3, #4
 8014a02:	d14c      	bne.n	8014a9e <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8014a04:	693b      	ldr	r3, [r7, #16]
 8014a06:	220b      	movs	r2, #11
 8014a08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8014a0c:	e047      	b.n	8014a9e <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8014a0e:	78fb      	ldrb	r3, [r7, #3]
 8014a10:	2201      	movs	r2, #1
 8014a12:	4619      	mov	r1, r3
 8014a14:	6878      	ldr	r0, [r7, #4]
 8014a16:	f000 f84d 	bl	8014ab4 <USBH_MSC_BOT_Abort>
 8014a1a:	4603      	mov	r3, r0
 8014a1c:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8014a1e:	7dbb      	ldrb	r3, [r7, #22]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d11d      	bne.n	8014a60 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8014a24:	693b      	ldr	r3, [r7, #16]
 8014a26:	795b      	ldrb	r3, [r3, #5]
 8014a28:	4619      	mov	r1, r3
 8014a2a:	6878      	ldr	r0, [r7, #4]
 8014a2c:	f007 ffec 	bl	801ca08 <USBH_LL_GetToggle>
 8014a30:	4603      	mov	r3, r0
 8014a32:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8014a34:	693b      	ldr	r3, [r7, #16]
 8014a36:	7959      	ldrb	r1, [r3, #5]
 8014a38:	7bfb      	ldrb	r3, [r7, #15]
 8014a3a:	f1c3 0301 	rsb	r3, r3, #1
 8014a3e:	b2db      	uxtb	r3, r3
 8014a40:	461a      	mov	r2, r3
 8014a42:	6878      	ldr	r0, [r7, #4]
 8014a44:	f007 ffad 	bl	801c9a2 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8014a48:	693b      	ldr	r3, [r7, #16]
 8014a4a:	791b      	ldrb	r3, [r3, #4]
 8014a4c:	2200      	movs	r2, #0
 8014a4e:	4619      	mov	r1, r3
 8014a50:	6878      	ldr	r0, [r7, #4]
 8014a52:	f007 ffa6 	bl	801c9a2 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8014a56:	693b      	ldr	r3, [r7, #16]
 8014a58:	2209      	movs	r2, #9
 8014a5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8014a5e:	e020      	b.n	8014aa2 <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 8014a60:	7dbb      	ldrb	r3, [r7, #22]
 8014a62:	2b04      	cmp	r3, #4
 8014a64:	d11d      	bne.n	8014aa2 <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8014a66:	693b      	ldr	r3, [r7, #16]
 8014a68:	220b      	movs	r2, #11
 8014a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8014a6e:	e018      	b.n	8014aa2 <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8014a70:	6878      	ldr	r0, [r7, #4]
 8014a72:	f7ff fdf0 	bl	8014656 <USBH_MSC_BOT_REQ_Reset>
 8014a76:	4603      	mov	r3, r0
 8014a78:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8014a7a:	7dfb      	ldrb	r3, [r7, #23]
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d112      	bne.n	8014aa6 <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8014a80:	693b      	ldr	r3, [r7, #16]
 8014a82:	2201      	movs	r2, #1
 8014a84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8014a88:	e00d      	b.n	8014aa6 <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 8014a8a:	bf00      	nop
 8014a8c:	e00c      	b.n	8014aa8 <USBH_MSC_BOT_Process+0x398>
      break;
 8014a8e:	bf00      	nop
 8014a90:	e00a      	b.n	8014aa8 <USBH_MSC_BOT_Process+0x398>
      break;
 8014a92:	bf00      	nop
 8014a94:	e008      	b.n	8014aa8 <USBH_MSC_BOT_Process+0x398>
      break;
 8014a96:	bf00      	nop
 8014a98:	e006      	b.n	8014aa8 <USBH_MSC_BOT_Process+0x398>
      break;
 8014a9a:	bf00      	nop
 8014a9c:	e004      	b.n	8014aa8 <USBH_MSC_BOT_Process+0x398>
      break;
 8014a9e:	bf00      	nop
 8014aa0:	e002      	b.n	8014aa8 <USBH_MSC_BOT_Process+0x398>
      break;
 8014aa2:	bf00      	nop
 8014aa4:	e000      	b.n	8014aa8 <USBH_MSC_BOT_Process+0x398>
      break;
 8014aa6:	bf00      	nop
  }
  return status;
 8014aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8014aaa:	4618      	mov	r0, r3
 8014aac:	3718      	adds	r7, #24
 8014aae:	46bd      	mov	sp, r7
 8014ab0:	bd80      	pop	{r7, pc}
 8014ab2:	bf00      	nop

08014ab4 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8014ab4:	b580      	push	{r7, lr}
 8014ab6:	b084      	sub	sp, #16
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	6078      	str	r0, [r7, #4]
 8014abc:	460b      	mov	r3, r1
 8014abe:	70fb      	strb	r3, [r7, #3]
 8014ac0:	4613      	mov	r3, r2
 8014ac2:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8014ac4:	2302      	movs	r3, #2
 8014ac6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014ace:	69db      	ldr	r3, [r3, #28]
 8014ad0:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8014ad2:	78bb      	ldrb	r3, [r7, #2]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d002      	beq.n	8014ade <USBH_MSC_BOT_Abort+0x2a>
 8014ad8:	2b01      	cmp	r3, #1
 8014ada:	d009      	beq.n	8014af0 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8014adc:	e011      	b.n	8014b02 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8014ade:	68bb      	ldr	r3, [r7, #8]
 8014ae0:	79db      	ldrb	r3, [r3, #7]
 8014ae2:	4619      	mov	r1, r3
 8014ae4:	6878      	ldr	r0, [r7, #4]
 8014ae6:	f001 f99c 	bl	8015e22 <USBH_ClrFeature>
 8014aea:	4603      	mov	r3, r0
 8014aec:	73fb      	strb	r3, [r7, #15]
      break;
 8014aee:	e008      	b.n	8014b02 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8014af0:	68bb      	ldr	r3, [r7, #8]
 8014af2:	799b      	ldrb	r3, [r3, #6]
 8014af4:	4619      	mov	r1, r3
 8014af6:	6878      	ldr	r0, [r7, #4]
 8014af8:	f001 f993 	bl	8015e22 <USBH_ClrFeature>
 8014afc:	4603      	mov	r3, r0
 8014afe:	73fb      	strb	r3, [r7, #15]
      break;
 8014b00:	bf00      	nop
  }
  return status;
 8014b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b04:	4618      	mov	r0, r3
 8014b06:	3710      	adds	r7, #16
 8014b08:	46bd      	mov	sp, r7
 8014b0a:	bd80      	pop	{r7, pc}

08014b0c <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b084      	sub	sp, #16
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014b1a:	69db      	ldr	r3, [r3, #28]
 8014b1c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8014b1e:	2301      	movs	r3, #1
 8014b20:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8014b22:	68bb      	ldr	r3, [r7, #8]
 8014b24:	791b      	ldrb	r3, [r3, #4]
 8014b26:	4619      	mov	r1, r3
 8014b28:	6878      	ldr	r0, [r7, #4]
 8014b2a:	f007 fe87 	bl	801c83c <USBH_LL_GetLastXferSize>
 8014b2e:	4603      	mov	r3, r0
 8014b30:	2b0d      	cmp	r3, #13
 8014b32:	d002      	beq.n	8014b3a <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8014b34:	2302      	movs	r3, #2
 8014b36:	73fb      	strb	r3, [r7, #15]
 8014b38:	e024      	b.n	8014b84 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8014b3a:	68bb      	ldr	r3, [r7, #8]
 8014b3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014b3e:	4a14      	ldr	r2, [pc, #80]	; (8014b90 <USBH_MSC_DecodeCSW+0x84>)
 8014b40:	4293      	cmp	r3, r2
 8014b42:	d11d      	bne.n	8014b80 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8014b44:	68bb      	ldr	r3, [r7, #8]
 8014b46:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8014b48:	68bb      	ldr	r3, [r7, #8]
 8014b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014b4c:	429a      	cmp	r2, r3
 8014b4e:	d119      	bne.n	8014b84 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8014b50:	68bb      	ldr	r3, [r7, #8]
 8014b52:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d102      	bne.n	8014b60 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	73fb      	strb	r3, [r7, #15]
 8014b5e:	e011      	b.n	8014b84 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8014b60:	68bb      	ldr	r3, [r7, #8]
 8014b62:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8014b66:	2b01      	cmp	r3, #1
 8014b68:	d102      	bne.n	8014b70 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8014b6a:	2301      	movs	r3, #1
 8014b6c:	73fb      	strb	r3, [r7, #15]
 8014b6e:	e009      	b.n	8014b84 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8014b70:	68bb      	ldr	r3, [r7, #8]
 8014b72:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8014b76:	2b02      	cmp	r3, #2
 8014b78:	d104      	bne.n	8014b84 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8014b7a:	2302      	movs	r3, #2
 8014b7c:	73fb      	strb	r3, [r7, #15]
 8014b7e:	e001      	b.n	8014b84 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8014b80:	2302      	movs	r3, #2
 8014b82:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8014b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b86:	4618      	mov	r0, r3
 8014b88:	3710      	adds	r7, #16
 8014b8a:	46bd      	mov	sp, r7
 8014b8c:	bd80      	pop	{r7, pc}
 8014b8e:	bf00      	nop
 8014b90:	53425355 	.word	0x53425355

08014b94 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8014b94:	b580      	push	{r7, lr}
 8014b96:	b084      	sub	sp, #16
 8014b98:	af00      	add	r7, sp, #0
 8014b9a:	6078      	str	r0, [r7, #4]
 8014b9c:	460b      	mov	r3, r1
 8014b9e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8014ba0:	2302      	movs	r3, #2
 8014ba2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014baa:	69db      	ldr	r3, [r3, #28]
 8014bac:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8014bae:	68bb      	ldr	r3, [r7, #8]
 8014bb0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8014bb4:	2b01      	cmp	r3, #1
 8014bb6:	d002      	beq.n	8014bbe <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8014bb8:	2b02      	cmp	r3, #2
 8014bba:	d021      	beq.n	8014c00 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8014bbc:	e028      	b.n	8014c10 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8014bbe:	68bb      	ldr	r3, [r7, #8]
 8014bc0:	2200      	movs	r2, #0
 8014bc2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8014bc4:	68bb      	ldr	r3, [r7, #8]
 8014bc6:	2200      	movs	r2, #0
 8014bc8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8014bcc:	68bb      	ldr	r3, [r7, #8]
 8014bce:	220a      	movs	r2, #10
 8014bd0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8014bd4:	68bb      	ldr	r3, [r7, #8]
 8014bd6:	3363      	adds	r3, #99	; 0x63
 8014bd8:	2210      	movs	r2, #16
 8014bda:	2100      	movs	r1, #0
 8014bdc:	4618      	mov	r0, r3
 8014bde:	f007 ffc2 	bl	801cb66 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8014be2:	68bb      	ldr	r3, [r7, #8]
 8014be4:	2200      	movs	r2, #0
 8014be6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8014bea:	68bb      	ldr	r3, [r7, #8]
 8014bec:	2201      	movs	r2, #1
 8014bee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8014bf2:	68bb      	ldr	r3, [r7, #8]
 8014bf4:	2202      	movs	r2, #2
 8014bf6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8014bfa:	2301      	movs	r3, #1
 8014bfc:	73fb      	strb	r3, [r7, #15]
      break;
 8014bfe:	e007      	b.n	8014c10 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8014c00:	78fb      	ldrb	r3, [r7, #3]
 8014c02:	4619      	mov	r1, r3
 8014c04:	6878      	ldr	r0, [r7, #4]
 8014c06:	f7ff fd83 	bl	8014710 <USBH_MSC_BOT_Process>
 8014c0a:	4603      	mov	r3, r0
 8014c0c:	73fb      	strb	r3, [r7, #15]
      break;
 8014c0e:	bf00      	nop
  }

  return error;
 8014c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c12:	4618      	mov	r0, r3
 8014c14:	3710      	adds	r7, #16
 8014c16:	46bd      	mov	sp, r7
 8014c18:	bd80      	pop	{r7, pc}

08014c1a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8014c1a:	b580      	push	{r7, lr}
 8014c1c:	b086      	sub	sp, #24
 8014c1e:	af00      	add	r7, sp, #0
 8014c20:	60f8      	str	r0, [r7, #12]
 8014c22:	460b      	mov	r3, r1
 8014c24:	607a      	str	r2, [r7, #4]
 8014c26:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8014c28:	2301      	movs	r3, #1
 8014c2a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014c32:	69db      	ldr	r3, [r3, #28]
 8014c34:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8014c36:	693b      	ldr	r3, [r7, #16]
 8014c38:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8014c3c:	2b01      	cmp	r3, #1
 8014c3e:	d002      	beq.n	8014c46 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8014c40:	2b02      	cmp	r3, #2
 8014c42:	d027      	beq.n	8014c94 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8014c44:	e05f      	b.n	8014d06 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8014c46:	693b      	ldr	r3, [r7, #16]
 8014c48:	2208      	movs	r2, #8
 8014c4a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8014c4c:	693b      	ldr	r3, [r7, #16]
 8014c4e:	2280      	movs	r2, #128	; 0x80
 8014c50:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8014c54:	693b      	ldr	r3, [r7, #16]
 8014c56:	220a      	movs	r2, #10
 8014c58:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8014c5c:	693b      	ldr	r3, [r7, #16]
 8014c5e:	3363      	adds	r3, #99	; 0x63
 8014c60:	2210      	movs	r2, #16
 8014c62:	2100      	movs	r1, #0
 8014c64:	4618      	mov	r0, r3
 8014c66:	f007 ff7e 	bl	801cb66 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8014c6a:	693b      	ldr	r3, [r7, #16]
 8014c6c:	2225      	movs	r2, #37	; 0x25
 8014c6e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8014c72:	693b      	ldr	r3, [r7, #16]
 8014c74:	2201      	movs	r2, #1
 8014c76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8014c7a:	693b      	ldr	r3, [r7, #16]
 8014c7c:	2202      	movs	r2, #2
 8014c7e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8014c82:	693b      	ldr	r3, [r7, #16]
 8014c84:	f103 0210 	add.w	r2, r3, #16
 8014c88:	693b      	ldr	r3, [r7, #16]
 8014c8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8014c8e:	2301      	movs	r3, #1
 8014c90:	75fb      	strb	r3, [r7, #23]
      break;
 8014c92:	e038      	b.n	8014d06 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8014c94:	7afb      	ldrb	r3, [r7, #11]
 8014c96:	4619      	mov	r1, r3
 8014c98:	68f8      	ldr	r0, [r7, #12]
 8014c9a:	f7ff fd39 	bl	8014710 <USBH_MSC_BOT_Process>
 8014c9e:	4603      	mov	r3, r0
 8014ca0:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8014ca2:	7dfb      	ldrb	r3, [r7, #23]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d12d      	bne.n	8014d04 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8014ca8:	693b      	ldr	r3, [r7, #16]
 8014caa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014cae:	3303      	adds	r3, #3
 8014cb0:	781b      	ldrb	r3, [r3, #0]
 8014cb2:	461a      	mov	r2, r3
 8014cb4:	693b      	ldr	r3, [r7, #16]
 8014cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014cba:	3302      	adds	r3, #2
 8014cbc:	781b      	ldrb	r3, [r3, #0]
 8014cbe:	021b      	lsls	r3, r3, #8
 8014cc0:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8014cc2:	693b      	ldr	r3, [r7, #16]
 8014cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014cc8:	3301      	adds	r3, #1
 8014cca:	781b      	ldrb	r3, [r3, #0]
 8014ccc:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8014cce:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8014cd0:	693b      	ldr	r3, [r7, #16]
 8014cd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014cd6:	781b      	ldrb	r3, [r3, #0]
 8014cd8:	061b      	lsls	r3, r3, #24
 8014cda:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8014ce0:	693b      	ldr	r3, [r7, #16]
 8014ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014ce6:	3307      	adds	r3, #7
 8014ce8:	781b      	ldrb	r3, [r3, #0]
 8014cea:	b29a      	uxth	r2, r3
 8014cec:	693b      	ldr	r3, [r7, #16]
 8014cee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014cf2:	3306      	adds	r3, #6
 8014cf4:	781b      	ldrb	r3, [r3, #0]
 8014cf6:	b29b      	uxth	r3, r3
 8014cf8:	021b      	lsls	r3, r3, #8
 8014cfa:	b29b      	uxth	r3, r3
 8014cfc:	4313      	orrs	r3, r2
 8014cfe:	b29a      	uxth	r2, r3
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	809a      	strh	r2, [r3, #4]
      break;
 8014d04:	bf00      	nop
  }

  return error;
 8014d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8014d08:	4618      	mov	r0, r3
 8014d0a:	3718      	adds	r7, #24
 8014d0c:	46bd      	mov	sp, r7
 8014d0e:	bd80      	pop	{r7, pc}

08014d10 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8014d10:	b580      	push	{r7, lr}
 8014d12:	b086      	sub	sp, #24
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	60f8      	str	r0, [r7, #12]
 8014d18:	460b      	mov	r3, r1
 8014d1a:	607a      	str	r2, [r7, #4]
 8014d1c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8014d1e:	2302      	movs	r3, #2
 8014d20:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014d28:	69db      	ldr	r3, [r3, #28]
 8014d2a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8014d2c:	693b      	ldr	r3, [r7, #16]
 8014d2e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8014d32:	2b01      	cmp	r3, #1
 8014d34:	d002      	beq.n	8014d3c <USBH_MSC_SCSI_Inquiry+0x2c>
 8014d36:	2b02      	cmp	r3, #2
 8014d38:	d03d      	beq.n	8014db6 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8014d3a:	e089      	b.n	8014e50 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8014d3c:	693b      	ldr	r3, [r7, #16]
 8014d3e:	2224      	movs	r2, #36	; 0x24
 8014d40:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8014d42:	693b      	ldr	r3, [r7, #16]
 8014d44:	2280      	movs	r2, #128	; 0x80
 8014d46:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8014d4a:	693b      	ldr	r3, [r7, #16]
 8014d4c:	220a      	movs	r2, #10
 8014d4e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8014d52:	693b      	ldr	r3, [r7, #16]
 8014d54:	3363      	adds	r3, #99	; 0x63
 8014d56:	220a      	movs	r2, #10
 8014d58:	2100      	movs	r1, #0
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	f007 ff03 	bl	801cb66 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8014d60:	693b      	ldr	r3, [r7, #16]
 8014d62:	2212      	movs	r2, #18
 8014d64:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8014d68:	7afb      	ldrb	r3, [r7, #11]
 8014d6a:	015b      	lsls	r3, r3, #5
 8014d6c:	b2da      	uxtb	r2, r3
 8014d6e:	693b      	ldr	r3, [r7, #16]
 8014d70:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8014d74:	693b      	ldr	r3, [r7, #16]
 8014d76:	2200      	movs	r2, #0
 8014d78:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8014d7c:	693b      	ldr	r3, [r7, #16]
 8014d7e:	2200      	movs	r2, #0
 8014d80:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8014d84:	693b      	ldr	r3, [r7, #16]
 8014d86:	2224      	movs	r2, #36	; 0x24
 8014d88:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8014d8c:	693b      	ldr	r3, [r7, #16]
 8014d8e:	2200      	movs	r2, #0
 8014d90:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8014d94:	693b      	ldr	r3, [r7, #16]
 8014d96:	2201      	movs	r2, #1
 8014d98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8014d9c:	693b      	ldr	r3, [r7, #16]
 8014d9e:	2202      	movs	r2, #2
 8014da0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8014da4:	693b      	ldr	r3, [r7, #16]
 8014da6:	f103 0210 	add.w	r2, r3, #16
 8014daa:	693b      	ldr	r3, [r7, #16]
 8014dac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8014db0:	2301      	movs	r3, #1
 8014db2:	75fb      	strb	r3, [r7, #23]
      break;
 8014db4:	e04c      	b.n	8014e50 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8014db6:	7afb      	ldrb	r3, [r7, #11]
 8014db8:	4619      	mov	r1, r3
 8014dba:	68f8      	ldr	r0, [r7, #12]
 8014dbc:	f7ff fca8 	bl	8014710 <USBH_MSC_BOT_Process>
 8014dc0:	4603      	mov	r3, r0
 8014dc2:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8014dc4:	7dfb      	ldrb	r3, [r7, #23]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d141      	bne.n	8014e4e <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8014dca:	2222      	movs	r2, #34	; 0x22
 8014dcc:	2100      	movs	r1, #0
 8014dce:	6878      	ldr	r0, [r7, #4]
 8014dd0:	f007 fec9 	bl	801cb66 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8014dd4:	693b      	ldr	r3, [r7, #16]
 8014dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014dda:	781b      	ldrb	r3, [r3, #0]
 8014ddc:	f003 031f 	and.w	r3, r3, #31
 8014de0:	b2da      	uxtb	r2, r3
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8014de6:	693b      	ldr	r3, [r7, #16]
 8014de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014dec:	781b      	ldrb	r3, [r3, #0]
 8014dee:	095b      	lsrs	r3, r3, #5
 8014df0:	b2da      	uxtb	r2, r3
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8014df6:	693b      	ldr	r3, [r7, #16]
 8014df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014dfc:	3301      	adds	r3, #1
 8014dfe:	781b      	ldrb	r3, [r3, #0]
 8014e00:	b25b      	sxtb	r3, r3
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	da03      	bge.n	8014e0e <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	2201      	movs	r2, #1
 8014e0a:	709a      	strb	r2, [r3, #2]
 8014e0c:	e002      	b.n	8014e14 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	2200      	movs	r2, #0
 8014e12:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	1cd8      	adds	r0, r3, #3
 8014e18:	693b      	ldr	r3, [r7, #16]
 8014e1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014e1e:	3308      	adds	r3, #8
 8014e20:	2208      	movs	r2, #8
 8014e22:	4619      	mov	r1, r3
 8014e24:	f007 fe94 	bl	801cb50 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	f103 000c 	add.w	r0, r3, #12
 8014e2e:	693b      	ldr	r3, [r7, #16]
 8014e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014e34:	3310      	adds	r3, #16
 8014e36:	2210      	movs	r2, #16
 8014e38:	4619      	mov	r1, r3
 8014e3a:	f007 fe89 	bl	801cb50 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	331d      	adds	r3, #29
 8014e42:	693a      	ldr	r2, [r7, #16]
 8014e44:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8014e48:	3220      	adds	r2, #32
 8014e4a:	6812      	ldr	r2, [r2, #0]
 8014e4c:	601a      	str	r2, [r3, #0]
      break;
 8014e4e:	bf00      	nop
  }

  return error;
 8014e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e52:	4618      	mov	r0, r3
 8014e54:	3718      	adds	r7, #24
 8014e56:	46bd      	mov	sp, r7
 8014e58:	bd80      	pop	{r7, pc}

08014e5a <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8014e5a:	b580      	push	{r7, lr}
 8014e5c:	b086      	sub	sp, #24
 8014e5e:	af00      	add	r7, sp, #0
 8014e60:	60f8      	str	r0, [r7, #12]
 8014e62:	460b      	mov	r3, r1
 8014e64:	607a      	str	r2, [r7, #4]
 8014e66:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8014e68:	2302      	movs	r3, #2
 8014e6a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014e72:	69db      	ldr	r3, [r3, #28]
 8014e74:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8014e76:	693b      	ldr	r3, [r7, #16]
 8014e78:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8014e7c:	2b01      	cmp	r3, #1
 8014e7e:	d002      	beq.n	8014e86 <USBH_MSC_SCSI_RequestSense+0x2c>
 8014e80:	2b02      	cmp	r3, #2
 8014e82:	d03d      	beq.n	8014f00 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8014e84:	e05d      	b.n	8014f42 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8014e86:	693b      	ldr	r3, [r7, #16]
 8014e88:	220e      	movs	r2, #14
 8014e8a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8014e8c:	693b      	ldr	r3, [r7, #16]
 8014e8e:	2280      	movs	r2, #128	; 0x80
 8014e90:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8014e94:	693b      	ldr	r3, [r7, #16]
 8014e96:	220a      	movs	r2, #10
 8014e98:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8014e9c:	693b      	ldr	r3, [r7, #16]
 8014e9e:	3363      	adds	r3, #99	; 0x63
 8014ea0:	2210      	movs	r2, #16
 8014ea2:	2100      	movs	r1, #0
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	f007 fe5e 	bl	801cb66 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8014eaa:	693b      	ldr	r3, [r7, #16]
 8014eac:	2203      	movs	r2, #3
 8014eae:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8014eb2:	7afb      	ldrb	r3, [r7, #11]
 8014eb4:	015b      	lsls	r3, r3, #5
 8014eb6:	b2da      	uxtb	r2, r3
 8014eb8:	693b      	ldr	r3, [r7, #16]
 8014eba:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8014ebe:	693b      	ldr	r3, [r7, #16]
 8014ec0:	2200      	movs	r2, #0
 8014ec2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8014ec6:	693b      	ldr	r3, [r7, #16]
 8014ec8:	2200      	movs	r2, #0
 8014eca:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8014ece:	693b      	ldr	r3, [r7, #16]
 8014ed0:	220e      	movs	r2, #14
 8014ed2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8014ed6:	693b      	ldr	r3, [r7, #16]
 8014ed8:	2200      	movs	r2, #0
 8014eda:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8014ede:	693b      	ldr	r3, [r7, #16]
 8014ee0:	2201      	movs	r2, #1
 8014ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8014ee6:	693b      	ldr	r3, [r7, #16]
 8014ee8:	2202      	movs	r2, #2
 8014eea:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8014eee:	693b      	ldr	r3, [r7, #16]
 8014ef0:	f103 0210 	add.w	r2, r3, #16
 8014ef4:	693b      	ldr	r3, [r7, #16]
 8014ef6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8014efa:	2301      	movs	r3, #1
 8014efc:	75fb      	strb	r3, [r7, #23]
      break;
 8014efe:	e020      	b.n	8014f42 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8014f00:	7afb      	ldrb	r3, [r7, #11]
 8014f02:	4619      	mov	r1, r3
 8014f04:	68f8      	ldr	r0, [r7, #12]
 8014f06:	f7ff fc03 	bl	8014710 <USBH_MSC_BOT_Process>
 8014f0a:	4603      	mov	r3, r0
 8014f0c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8014f0e:	7dfb      	ldrb	r3, [r7, #23]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d115      	bne.n	8014f40 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8014f14:	693b      	ldr	r3, [r7, #16]
 8014f16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014f1a:	3302      	adds	r3, #2
 8014f1c:	781b      	ldrb	r3, [r3, #0]
 8014f1e:	f003 030f 	and.w	r3, r3, #15
 8014f22:	b2da      	uxtb	r2, r3
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8014f28:	693b      	ldr	r3, [r7, #16]
 8014f2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014f2e:	7b1a      	ldrb	r2, [r3, #12]
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8014f34:	693b      	ldr	r3, [r7, #16]
 8014f36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014f3a:	7b5a      	ldrb	r2, [r3, #13]
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	709a      	strb	r2, [r3, #2]
      break;
 8014f40:	bf00      	nop
  }

  return error;
 8014f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f44:	4618      	mov	r0, r3
 8014f46:	3718      	adds	r7, #24
 8014f48:	46bd      	mov	sp, r7
 8014f4a:	bd80      	pop	{r7, pc}

08014f4c <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	b086      	sub	sp, #24
 8014f50:	af00      	add	r7, sp, #0
 8014f52:	60f8      	str	r0, [r7, #12]
 8014f54:	607a      	str	r2, [r7, #4]
 8014f56:	603b      	str	r3, [r7, #0]
 8014f58:	460b      	mov	r3, r1
 8014f5a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8014f5c:	2302      	movs	r3, #2
 8014f5e:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014f66:	69db      	ldr	r3, [r3, #28]
 8014f68:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8014f6a:	693b      	ldr	r3, [r7, #16]
 8014f6c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8014f70:	2b01      	cmp	r3, #1
 8014f72:	d002      	beq.n	8014f7a <USBH_MSC_SCSI_Write+0x2e>
 8014f74:	2b02      	cmp	r3, #2
 8014f76:	d047      	beq.n	8015008 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8014f78:	e04e      	b.n	8015018 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8014f7a:	693b      	ldr	r3, [r7, #16]
 8014f7c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8014f80:	461a      	mov	r2, r3
 8014f82:	6a3b      	ldr	r3, [r7, #32]
 8014f84:	fb03 f202 	mul.w	r2, r3, r2
 8014f88:	693b      	ldr	r3, [r7, #16]
 8014f8a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8014f8c:	693b      	ldr	r3, [r7, #16]
 8014f8e:	2200      	movs	r2, #0
 8014f90:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8014f94:	693b      	ldr	r3, [r7, #16]
 8014f96:	220a      	movs	r2, #10
 8014f98:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8014f9c:	693b      	ldr	r3, [r7, #16]
 8014f9e:	3363      	adds	r3, #99	; 0x63
 8014fa0:	2210      	movs	r2, #16
 8014fa2:	2100      	movs	r1, #0
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	f007 fdde 	bl	801cb66 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8014faa:	693b      	ldr	r3, [r7, #16]
 8014fac:	222a      	movs	r2, #42	; 0x2a
 8014fae:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8014fb2:	79fa      	ldrb	r2, [r7, #7]
 8014fb4:	693b      	ldr	r3, [r7, #16]
 8014fb6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8014fba:	79ba      	ldrb	r2, [r7, #6]
 8014fbc:	693b      	ldr	r3, [r7, #16]
 8014fbe:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8014fc2:	797a      	ldrb	r2, [r7, #5]
 8014fc4:	693b      	ldr	r3, [r7, #16]
 8014fc6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8014fca:	1d3b      	adds	r3, r7, #4
 8014fcc:	781a      	ldrb	r2, [r3, #0]
 8014fce:	693b      	ldr	r3, [r7, #16]
 8014fd0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8014fd4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8014fd8:	693b      	ldr	r3, [r7, #16]
 8014fda:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8014fde:	f107 0320 	add.w	r3, r7, #32
 8014fe2:	781a      	ldrb	r2, [r3, #0]
 8014fe4:	693b      	ldr	r3, [r7, #16]
 8014fe6:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8014fea:	693b      	ldr	r3, [r7, #16]
 8014fec:	2201      	movs	r2, #1
 8014fee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8014ff2:	693b      	ldr	r3, [r7, #16]
 8014ff4:	2202      	movs	r2, #2
 8014ff6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8014ffa:	693b      	ldr	r3, [r7, #16]
 8014ffc:	683a      	ldr	r2, [r7, #0]
 8014ffe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8015002:	2301      	movs	r3, #1
 8015004:	75fb      	strb	r3, [r7, #23]
      break;
 8015006:	e007      	b.n	8015018 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8015008:	7afb      	ldrb	r3, [r7, #11]
 801500a:	4619      	mov	r1, r3
 801500c:	68f8      	ldr	r0, [r7, #12]
 801500e:	f7ff fb7f 	bl	8014710 <USBH_MSC_BOT_Process>
 8015012:	4603      	mov	r3, r0
 8015014:	75fb      	strb	r3, [r7, #23]
      break;
 8015016:	bf00      	nop
  }

  return error;
 8015018:	7dfb      	ldrb	r3, [r7, #23]
}
 801501a:	4618      	mov	r0, r3
 801501c:	3718      	adds	r7, #24
 801501e:	46bd      	mov	sp, r7
 8015020:	bd80      	pop	{r7, pc}

08015022 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8015022:	b580      	push	{r7, lr}
 8015024:	b086      	sub	sp, #24
 8015026:	af00      	add	r7, sp, #0
 8015028:	60f8      	str	r0, [r7, #12]
 801502a:	607a      	str	r2, [r7, #4]
 801502c:	603b      	str	r3, [r7, #0]
 801502e:	460b      	mov	r3, r1
 8015030:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8015032:	2302      	movs	r3, #2
 8015034:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801503c:	69db      	ldr	r3, [r3, #28]
 801503e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8015040:	693b      	ldr	r3, [r7, #16]
 8015042:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8015046:	2b01      	cmp	r3, #1
 8015048:	d002      	beq.n	8015050 <USBH_MSC_SCSI_Read+0x2e>
 801504a:	2b02      	cmp	r3, #2
 801504c:	d047      	beq.n	80150de <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 801504e:	e04e      	b.n	80150ee <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8015050:	693b      	ldr	r3, [r7, #16]
 8015052:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8015056:	461a      	mov	r2, r3
 8015058:	6a3b      	ldr	r3, [r7, #32]
 801505a:	fb03 f202 	mul.w	r2, r3, r2
 801505e:	693b      	ldr	r3, [r7, #16]
 8015060:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8015062:	693b      	ldr	r3, [r7, #16]
 8015064:	2280      	movs	r2, #128	; 0x80
 8015066:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 801506a:	693b      	ldr	r3, [r7, #16]
 801506c:	220a      	movs	r2, #10
 801506e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8015072:	693b      	ldr	r3, [r7, #16]
 8015074:	3363      	adds	r3, #99	; 0x63
 8015076:	2210      	movs	r2, #16
 8015078:	2100      	movs	r1, #0
 801507a:	4618      	mov	r0, r3
 801507c:	f007 fd73 	bl	801cb66 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8015080:	693b      	ldr	r3, [r7, #16]
 8015082:	2228      	movs	r2, #40	; 0x28
 8015084:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8015088:	79fa      	ldrb	r2, [r7, #7]
 801508a:	693b      	ldr	r3, [r7, #16]
 801508c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8015090:	79ba      	ldrb	r2, [r7, #6]
 8015092:	693b      	ldr	r3, [r7, #16]
 8015094:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8015098:	797a      	ldrb	r2, [r7, #5]
 801509a:	693b      	ldr	r3, [r7, #16]
 801509c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80150a0:	1d3b      	adds	r3, r7, #4
 80150a2:	781a      	ldrb	r2, [r3, #0]
 80150a4:	693b      	ldr	r3, [r7, #16]
 80150a6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80150aa:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80150ae:	693b      	ldr	r3, [r7, #16]
 80150b0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80150b4:	f107 0320 	add.w	r3, r7, #32
 80150b8:	781a      	ldrb	r2, [r3, #0]
 80150ba:	693b      	ldr	r3, [r7, #16]
 80150bc:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80150c0:	693b      	ldr	r3, [r7, #16]
 80150c2:	2201      	movs	r2, #1
 80150c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80150c8:	693b      	ldr	r3, [r7, #16]
 80150ca:	2202      	movs	r2, #2
 80150cc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80150d0:	693b      	ldr	r3, [r7, #16]
 80150d2:	683a      	ldr	r2, [r7, #0]
 80150d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80150d8:	2301      	movs	r3, #1
 80150da:	75fb      	strb	r3, [r7, #23]
      break;
 80150dc:	e007      	b.n	80150ee <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 80150de:	7afb      	ldrb	r3, [r7, #11]
 80150e0:	4619      	mov	r1, r3
 80150e2:	68f8      	ldr	r0, [r7, #12]
 80150e4:	f7ff fb14 	bl	8014710 <USBH_MSC_BOT_Process>
 80150e8:	4603      	mov	r3, r0
 80150ea:	75fb      	strb	r3, [r7, #23]
      break;
 80150ec:	bf00      	nop
  }

  return error;
 80150ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80150f0:	4618      	mov	r0, r3
 80150f2:	3718      	adds	r7, #24
 80150f4:	46bd      	mov	sp, r7
 80150f6:	bd80      	pop	{r7, pc}

080150f8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80150f8:	b580      	push	{r7, lr}
 80150fa:	b084      	sub	sp, #16
 80150fc:	af00      	add	r7, sp, #0
 80150fe:	60f8      	str	r0, [r7, #12]
 8015100:	60b9      	str	r1, [r7, #8]
 8015102:	4613      	mov	r3, r2
 8015104:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	2b00      	cmp	r3, #0
 801510a:	d101      	bne.n	8015110 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 801510c:	2302      	movs	r3, #2
 801510e:	e029      	b.n	8015164 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	79fa      	ldrb	r2, [r7, #7]
 8015114:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	2200      	movs	r2, #0
 801511c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	2200      	movs	r2, #0
 8015124:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8015128:	68f8      	ldr	r0, [r7, #12]
 801512a:	f000 f81f 	bl	801516c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	2200      	movs	r2, #0
 8015132:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	2200      	movs	r2, #0
 801513a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	2200      	movs	r2, #0
 8015142:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	2200      	movs	r2, #0
 801514a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 801514e:	68bb      	ldr	r3, [r7, #8]
 8015150:	2b00      	cmp	r3, #0
 8015152:	d003      	beq.n	801515c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	68ba      	ldr	r2, [r7, #8]
 8015158:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 801515c:	68f8      	ldr	r0, [r7, #12]
 801515e:	f007 fabb 	bl	801c6d8 <USBH_LL_Init>

  return USBH_OK;
 8015162:	2300      	movs	r3, #0
}
 8015164:	4618      	mov	r0, r3
 8015166:	3710      	adds	r7, #16
 8015168:	46bd      	mov	sp, r7
 801516a:	bd80      	pop	{r7, pc}

0801516c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 801516c:	b480      	push	{r7}
 801516e:	b085      	sub	sp, #20
 8015170:	af00      	add	r7, sp, #0
 8015172:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8015174:	2300      	movs	r3, #0
 8015176:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8015178:	2300      	movs	r3, #0
 801517a:	60fb      	str	r3, [r7, #12]
 801517c:	e009      	b.n	8015192 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 801517e:	687a      	ldr	r2, [r7, #4]
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	33e0      	adds	r3, #224	; 0xe0
 8015184:	009b      	lsls	r3, r3, #2
 8015186:	4413      	add	r3, r2
 8015188:	2200      	movs	r2, #0
 801518a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	3301      	adds	r3, #1
 8015190:	60fb      	str	r3, [r7, #12]
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	2b0e      	cmp	r3, #14
 8015196:	d9f2      	bls.n	801517e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8015198:	2300      	movs	r3, #0
 801519a:	60fb      	str	r3, [r7, #12]
 801519c:	e009      	b.n	80151b2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 801519e:	687a      	ldr	r2, [r7, #4]
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	4413      	add	r3, r2
 80151a4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80151a8:	2200      	movs	r2, #0
 80151aa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	3301      	adds	r3, #1
 80151b0:	60fb      	str	r3, [r7, #12]
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80151b8:	d3f1      	bcc.n	801519e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	2200      	movs	r2, #0
 80151be:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	2200      	movs	r2, #0
 80151c4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	2201      	movs	r2, #1
 80151ca:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	2200      	movs	r2, #0
 80151d0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	2201      	movs	r2, #1
 80151d8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	2240      	movs	r2, #64	; 0x40
 80151de:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	2200      	movs	r2, #0
 80151e4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	2200      	movs	r2, #0
 80151ea:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	2201      	movs	r2, #1
 80151f2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	2200      	movs	r2, #0
 80151fa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	2200      	movs	r2, #0
 8015202:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8015206:	2300      	movs	r3, #0
}
 8015208:	4618      	mov	r0, r3
 801520a:	3714      	adds	r7, #20
 801520c:	46bd      	mov	sp, r7
 801520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015212:	4770      	bx	lr

08015214 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8015214:	b480      	push	{r7}
 8015216:	b085      	sub	sp, #20
 8015218:	af00      	add	r7, sp, #0
 801521a:	6078      	str	r0, [r7, #4]
 801521c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 801521e:	2300      	movs	r3, #0
 8015220:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8015222:	683b      	ldr	r3, [r7, #0]
 8015224:	2b00      	cmp	r3, #0
 8015226:	d016      	beq.n	8015256 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 801522e:	2b00      	cmp	r3, #0
 8015230:	d10e      	bne.n	8015250 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8015238:	1c59      	adds	r1, r3, #1
 801523a:	687a      	ldr	r2, [r7, #4]
 801523c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8015240:	687a      	ldr	r2, [r7, #4]
 8015242:	33de      	adds	r3, #222	; 0xde
 8015244:	6839      	ldr	r1, [r7, #0]
 8015246:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 801524a:	2300      	movs	r3, #0
 801524c:	73fb      	strb	r3, [r7, #15]
 801524e:	e004      	b.n	801525a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8015250:	2302      	movs	r3, #2
 8015252:	73fb      	strb	r3, [r7, #15]
 8015254:	e001      	b.n	801525a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8015256:	2302      	movs	r3, #2
 8015258:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801525a:	7bfb      	ldrb	r3, [r7, #15]
}
 801525c:	4618      	mov	r0, r3
 801525e:	3714      	adds	r7, #20
 8015260:	46bd      	mov	sp, r7
 8015262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015266:	4770      	bx	lr

08015268 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8015268:	b480      	push	{r7}
 801526a:	b085      	sub	sp, #20
 801526c:	af00      	add	r7, sp, #0
 801526e:	6078      	str	r0, [r7, #4]
 8015270:	460b      	mov	r3, r1
 8015272:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8015274:	2300      	movs	r3, #0
 8015276:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 801527e:	78fa      	ldrb	r2, [r7, #3]
 8015280:	429a      	cmp	r2, r3
 8015282:	d204      	bcs.n	801528e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	78fa      	ldrb	r2, [r7, #3]
 8015288:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 801528c:	e001      	b.n	8015292 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 801528e:	2302      	movs	r3, #2
 8015290:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8015292:	7bfb      	ldrb	r3, [r7, #15]
}
 8015294:	4618      	mov	r0, r3
 8015296:	3714      	adds	r7, #20
 8015298:	46bd      	mov	sp, r7
 801529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801529e:	4770      	bx	lr

080152a0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80152a0:	b480      	push	{r7}
 80152a2:	b087      	sub	sp, #28
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	6078      	str	r0, [r7, #4]
 80152a8:	4608      	mov	r0, r1
 80152aa:	4611      	mov	r1, r2
 80152ac:	461a      	mov	r2, r3
 80152ae:	4603      	mov	r3, r0
 80152b0:	70fb      	strb	r3, [r7, #3]
 80152b2:	460b      	mov	r3, r1
 80152b4:	70bb      	strb	r3, [r7, #2]
 80152b6:	4613      	mov	r3, r2
 80152b8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80152ba:	2300      	movs	r3, #0
 80152bc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80152be:	2300      	movs	r3, #0
 80152c0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80152c8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80152ca:	e025      	b.n	8015318 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80152cc:	7dfb      	ldrb	r3, [r7, #23]
 80152ce:	221a      	movs	r2, #26
 80152d0:	fb02 f303 	mul.w	r3, r2, r3
 80152d4:	3308      	adds	r3, #8
 80152d6:	68fa      	ldr	r2, [r7, #12]
 80152d8:	4413      	add	r3, r2
 80152da:	3302      	adds	r3, #2
 80152dc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80152de:	693b      	ldr	r3, [r7, #16]
 80152e0:	795b      	ldrb	r3, [r3, #5]
 80152e2:	78fa      	ldrb	r2, [r7, #3]
 80152e4:	429a      	cmp	r2, r3
 80152e6:	d002      	beq.n	80152ee <USBH_FindInterface+0x4e>
 80152e8:	78fb      	ldrb	r3, [r7, #3]
 80152ea:	2bff      	cmp	r3, #255	; 0xff
 80152ec:	d111      	bne.n	8015312 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80152ee:	693b      	ldr	r3, [r7, #16]
 80152f0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80152f2:	78ba      	ldrb	r2, [r7, #2]
 80152f4:	429a      	cmp	r2, r3
 80152f6:	d002      	beq.n	80152fe <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80152f8:	78bb      	ldrb	r3, [r7, #2]
 80152fa:	2bff      	cmp	r3, #255	; 0xff
 80152fc:	d109      	bne.n	8015312 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80152fe:	693b      	ldr	r3, [r7, #16]
 8015300:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8015302:	787a      	ldrb	r2, [r7, #1]
 8015304:	429a      	cmp	r2, r3
 8015306:	d002      	beq.n	801530e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8015308:	787b      	ldrb	r3, [r7, #1]
 801530a:	2bff      	cmp	r3, #255	; 0xff
 801530c:	d101      	bne.n	8015312 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 801530e:	7dfb      	ldrb	r3, [r7, #23]
 8015310:	e006      	b.n	8015320 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8015312:	7dfb      	ldrb	r3, [r7, #23]
 8015314:	3301      	adds	r3, #1
 8015316:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8015318:	7dfb      	ldrb	r3, [r7, #23]
 801531a:	2b01      	cmp	r3, #1
 801531c:	d9d6      	bls.n	80152cc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 801531e:	23ff      	movs	r3, #255	; 0xff
}
 8015320:	4618      	mov	r0, r3
 8015322:	371c      	adds	r7, #28
 8015324:	46bd      	mov	sp, r7
 8015326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801532a:	4770      	bx	lr

0801532c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 801532c:	b580      	push	{r7, lr}
 801532e:	b082      	sub	sp, #8
 8015330:	af00      	add	r7, sp, #0
 8015332:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8015334:	6878      	ldr	r0, [r7, #4]
 8015336:	f007 fa0b 	bl	801c750 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 801533a:	2101      	movs	r1, #1
 801533c:	6878      	ldr	r0, [r7, #4]
 801533e:	f007 fb22 	bl	801c986 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8015342:	2300      	movs	r3, #0
}
 8015344:	4618      	mov	r0, r3
 8015346:	3708      	adds	r7, #8
 8015348:	46bd      	mov	sp, r7
 801534a:	bd80      	pop	{r7, pc}

0801534c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 801534c:	b580      	push	{r7, lr}
 801534e:	b088      	sub	sp, #32
 8015350:	af04      	add	r7, sp, #16
 8015352:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8015354:	2302      	movs	r3, #2
 8015356:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8015358:	2300      	movs	r3, #0
 801535a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8015362:	b2db      	uxtb	r3, r3
 8015364:	2b01      	cmp	r3, #1
 8015366:	d102      	bne.n	801536e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	2203      	movs	r2, #3
 801536c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	781b      	ldrb	r3, [r3, #0]
 8015372:	b2db      	uxtb	r3, r3
 8015374:	2b0b      	cmp	r3, #11
 8015376:	f200 81b3 	bhi.w	80156e0 <USBH_Process+0x394>
 801537a:	a201      	add	r2, pc, #4	; (adr r2, 8015380 <USBH_Process+0x34>)
 801537c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015380:	080153b1 	.word	0x080153b1
 8015384:	080153e3 	.word	0x080153e3
 8015388:	0801544b 	.word	0x0801544b
 801538c:	0801567b 	.word	0x0801567b
 8015390:	080156e1 	.word	0x080156e1
 8015394:	080154ef 	.word	0x080154ef
 8015398:	08015621 	.word	0x08015621
 801539c:	08015525 	.word	0x08015525
 80153a0:	08015545 	.word	0x08015545
 80153a4:	08015565 	.word	0x08015565
 80153a8:	08015593 	.word	0x08015593
 80153ac:	08015663 	.word	0x08015663
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80153b6:	b2db      	uxtb	r3, r3
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	f000 8193 	beq.w	80156e4 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	2201      	movs	r2, #1
 80153c2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80153c4:	20c8      	movs	r0, #200	; 0xc8
 80153c6:	f007 fb52 	bl	801ca6e <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80153ca:	6878      	ldr	r0, [r7, #4]
 80153cc:	f007 fa1b 	bl	801c806 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	2200      	movs	r2, #0
 80153d4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	2200      	movs	r2, #0
 80153dc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80153e0:	e180      	b.n	80156e4 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80153e8:	2b01      	cmp	r3, #1
 80153ea:	d107      	bne.n	80153fc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	2200      	movs	r2, #0
 80153f0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	2202      	movs	r2, #2
 80153f8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80153fa:	e182      	b.n	8015702 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8015402:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015406:	d914      	bls.n	8015432 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 801540e:	3301      	adds	r3, #1
 8015410:	b2da      	uxtb	r2, r3
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 801541e:	2b03      	cmp	r3, #3
 8015420:	d903      	bls.n	801542a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	220d      	movs	r2, #13
 8015426:	701a      	strb	r2, [r3, #0]
      break;
 8015428:	e16b      	b.n	8015702 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	2200      	movs	r2, #0
 801542e:	701a      	strb	r2, [r3, #0]
      break;
 8015430:	e167      	b.n	8015702 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8015438:	f103 020a 	add.w	r2, r3, #10
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8015442:	200a      	movs	r0, #10
 8015444:	f007 fb13 	bl	801ca6e <USBH_Delay>
      break;
 8015448:	e15b      	b.n	8015702 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8015450:	2b00      	cmp	r3, #0
 8015452:	d005      	beq.n	8015460 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801545a:	2104      	movs	r1, #4
 801545c:	6878      	ldr	r0, [r7, #4]
 801545e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8015460:	2064      	movs	r0, #100	; 0x64
 8015462:	f007 fb04 	bl	801ca6e <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8015466:	6878      	ldr	r0, [r7, #4]
 8015468:	f007 f9a8 	bl	801c7bc <USBH_LL_GetSpeed>
 801546c:	4603      	mov	r3, r0
 801546e:	461a      	mov	r2, r3
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	2205      	movs	r2, #5
 801547a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 801547c:	2100      	movs	r1, #0
 801547e:	6878      	ldr	r0, [r7, #4]
 8015480:	f001 f931 	bl	80166e6 <USBH_AllocPipe>
 8015484:	4603      	mov	r3, r0
 8015486:	461a      	mov	r2, r3
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 801548c:	2180      	movs	r1, #128	; 0x80
 801548e:	6878      	ldr	r0, [r7, #4]
 8015490:	f001 f929 	bl	80166e6 <USBH_AllocPipe>
 8015494:	4603      	mov	r3, r0
 8015496:	461a      	mov	r2, r3
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	7919      	ldrb	r1, [r3, #4]
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80154ac:	687a      	ldr	r2, [r7, #4]
 80154ae:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80154b0:	b292      	uxth	r2, r2
 80154b2:	9202      	str	r2, [sp, #8]
 80154b4:	2200      	movs	r2, #0
 80154b6:	9201      	str	r2, [sp, #4]
 80154b8:	9300      	str	r3, [sp, #0]
 80154ba:	4603      	mov	r3, r0
 80154bc:	2280      	movs	r2, #128	; 0x80
 80154be:	6878      	ldr	r0, [r7, #4]
 80154c0:	f001 f8e2 	bl	8016688 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	7959      	ldrb	r1, [r3, #5]
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80154d4:	687a      	ldr	r2, [r7, #4]
 80154d6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80154d8:	b292      	uxth	r2, r2
 80154da:	9202      	str	r2, [sp, #8]
 80154dc:	2200      	movs	r2, #0
 80154de:	9201      	str	r2, [sp, #4]
 80154e0:	9300      	str	r3, [sp, #0]
 80154e2:	4603      	mov	r3, r0
 80154e4:	2200      	movs	r2, #0
 80154e6:	6878      	ldr	r0, [r7, #4]
 80154e8:	f001 f8ce 	bl	8016688 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80154ec:	e109      	b.n	8015702 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80154ee:	6878      	ldr	r0, [r7, #4]
 80154f0:	f000 f90c 	bl	801570c <USBH_HandleEnum>
 80154f4:	4603      	mov	r3, r0
 80154f6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80154f8:	7bbb      	ldrb	r3, [r7, #14]
 80154fa:	b2db      	uxtb	r3, r3
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	f040 80f3 	bne.w	80156e8 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	2200      	movs	r2, #0
 8015506:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8015510:	2b01      	cmp	r3, #1
 8015512:	d103      	bne.n	801551c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	2208      	movs	r2, #8
 8015518:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 801551a:	e0e5      	b.n	80156e8 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	2207      	movs	r2, #7
 8015520:	701a      	strb	r2, [r3, #0]
      break;
 8015522:	e0e1      	b.n	80156e8 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801552a:	2b00      	cmp	r3, #0
 801552c:	f000 80de 	beq.w	80156ec <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8015536:	2101      	movs	r1, #1
 8015538:	6878      	ldr	r0, [r7, #4]
 801553a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	2208      	movs	r2, #8
 8015540:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8015542:	e0d3      	b.n	80156ec <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 801554a:	b29b      	uxth	r3, r3
 801554c:	4619      	mov	r1, r3
 801554e:	6878      	ldr	r0, [r7, #4]
 8015550:	f000 fc20 	bl	8015d94 <USBH_SetCfg>
 8015554:	4603      	mov	r3, r0
 8015556:	2b00      	cmp	r3, #0
 8015558:	f040 80ca 	bne.w	80156f0 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	2209      	movs	r2, #9
 8015560:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8015562:	e0c5      	b.n	80156f0 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 801556a:	f003 0320 	and.w	r3, r3, #32
 801556e:	2b00      	cmp	r3, #0
 8015570:	d00b      	beq.n	801558a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8015572:	2101      	movs	r1, #1
 8015574:	6878      	ldr	r0, [r7, #4]
 8015576:	f000 fc30 	bl	8015dda <USBH_SetFeature>
 801557a:	4603      	mov	r3, r0
 801557c:	2b00      	cmp	r3, #0
 801557e:	f040 80b9 	bne.w	80156f4 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	220a      	movs	r2, #10
 8015586:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8015588:	e0b4      	b.n	80156f4 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	220a      	movs	r2, #10
 801558e:	701a      	strb	r2, [r3, #0]
      break;
 8015590:	e0b0      	b.n	80156f4 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8015598:	2b00      	cmp	r3, #0
 801559a:	f000 80ad 	beq.w	80156f8 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	2200      	movs	r2, #0
 80155a2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80155a6:	2300      	movs	r3, #0
 80155a8:	73fb      	strb	r3, [r7, #15]
 80155aa:	e016      	b.n	80155da <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80155ac:	7bfa      	ldrb	r2, [r7, #15]
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	32de      	adds	r2, #222	; 0xde
 80155b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155b6:	791a      	ldrb	r2, [r3, #4]
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80155be:	429a      	cmp	r2, r3
 80155c0:	d108      	bne.n	80155d4 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80155c2:	7bfa      	ldrb	r2, [r7, #15]
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	32de      	adds	r2, #222	; 0xde
 80155c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80155d2:	e005      	b.n	80155e0 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80155d4:	7bfb      	ldrb	r3, [r7, #15]
 80155d6:	3301      	adds	r3, #1
 80155d8:	73fb      	strb	r3, [r7, #15]
 80155da:	7bfb      	ldrb	r3, [r7, #15]
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d0e5      	beq.n	80155ac <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d016      	beq.n	8015618 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80155f0:	689b      	ldr	r3, [r3, #8]
 80155f2:	6878      	ldr	r0, [r7, #4]
 80155f4:	4798      	blx	r3
 80155f6:	4603      	mov	r3, r0
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d109      	bne.n	8015610 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	2206      	movs	r2, #6
 8015600:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8015608:	2103      	movs	r1, #3
 801560a:	6878      	ldr	r0, [r7, #4]
 801560c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 801560e:	e073      	b.n	80156f8 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	220d      	movs	r2, #13
 8015614:	701a      	strb	r2, [r3, #0]
      break;
 8015616:	e06f      	b.n	80156f8 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	220d      	movs	r2, #13
 801561c:	701a      	strb	r2, [r3, #0]
      break;
 801561e:	e06b      	b.n	80156f8 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015626:	2b00      	cmp	r3, #0
 8015628:	d017      	beq.n	801565a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015630:	691b      	ldr	r3, [r3, #16]
 8015632:	6878      	ldr	r0, [r7, #4]
 8015634:	4798      	blx	r3
 8015636:	4603      	mov	r3, r0
 8015638:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 801563a:	7bbb      	ldrb	r3, [r7, #14]
 801563c:	b2db      	uxtb	r3, r3
 801563e:	2b00      	cmp	r3, #0
 8015640:	d103      	bne.n	801564a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	220b      	movs	r2, #11
 8015646:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8015648:	e058      	b.n	80156fc <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 801564a:	7bbb      	ldrb	r3, [r7, #14]
 801564c:	b2db      	uxtb	r3, r3
 801564e:	2b02      	cmp	r3, #2
 8015650:	d154      	bne.n	80156fc <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	220d      	movs	r2, #13
 8015656:	701a      	strb	r2, [r3, #0]
      break;
 8015658:	e050      	b.n	80156fc <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	220d      	movs	r2, #13
 801565e:	701a      	strb	r2, [r3, #0]
      break;
 8015660:	e04c      	b.n	80156fc <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015668:	2b00      	cmp	r3, #0
 801566a:	d049      	beq.n	8015700 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015672:	695b      	ldr	r3, [r3, #20]
 8015674:	6878      	ldr	r0, [r7, #4]
 8015676:	4798      	blx	r3
      }
      break;
 8015678:	e042      	b.n	8015700 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	2200      	movs	r2, #0
 801567e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8015682:	6878      	ldr	r0, [r7, #4]
 8015684:	f7ff fd72 	bl	801516c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801568e:	2b00      	cmp	r3, #0
 8015690:	d009      	beq.n	80156a6 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015698:	68db      	ldr	r3, [r3, #12]
 801569a:	6878      	ldr	r0, [r7, #4]
 801569c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	2200      	movs	r2, #0
 80156a2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d005      	beq.n	80156bc <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80156b6:	2105      	movs	r1, #5
 80156b8:	6878      	ldr	r0, [r7, #4]
 80156ba:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80156c2:	b2db      	uxtb	r3, r3
 80156c4:	2b01      	cmp	r3, #1
 80156c6:	d107      	bne.n	80156d8 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	2200      	movs	r2, #0
 80156cc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80156d0:	6878      	ldr	r0, [r7, #4]
 80156d2:	f7ff fe2b 	bl	801532c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80156d6:	e014      	b.n	8015702 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80156d8:	6878      	ldr	r0, [r7, #4]
 80156da:	f007 f839 	bl	801c750 <USBH_LL_Start>
      break;
 80156de:	e010      	b.n	8015702 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80156e0:	bf00      	nop
 80156e2:	e00e      	b.n	8015702 <USBH_Process+0x3b6>
      break;
 80156e4:	bf00      	nop
 80156e6:	e00c      	b.n	8015702 <USBH_Process+0x3b6>
      break;
 80156e8:	bf00      	nop
 80156ea:	e00a      	b.n	8015702 <USBH_Process+0x3b6>
    break;
 80156ec:	bf00      	nop
 80156ee:	e008      	b.n	8015702 <USBH_Process+0x3b6>
      break;
 80156f0:	bf00      	nop
 80156f2:	e006      	b.n	8015702 <USBH_Process+0x3b6>
      break;
 80156f4:	bf00      	nop
 80156f6:	e004      	b.n	8015702 <USBH_Process+0x3b6>
      break;
 80156f8:	bf00      	nop
 80156fa:	e002      	b.n	8015702 <USBH_Process+0x3b6>
      break;
 80156fc:	bf00      	nop
 80156fe:	e000      	b.n	8015702 <USBH_Process+0x3b6>
      break;
 8015700:	bf00      	nop
  }
  return USBH_OK;
 8015702:	2300      	movs	r3, #0
}
 8015704:	4618      	mov	r0, r3
 8015706:	3710      	adds	r7, #16
 8015708:	46bd      	mov	sp, r7
 801570a:	bd80      	pop	{r7, pc}

0801570c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 801570c:	b580      	push	{r7, lr}
 801570e:	b088      	sub	sp, #32
 8015710:	af04      	add	r7, sp, #16
 8015712:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8015714:	2301      	movs	r3, #1
 8015716:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8015718:	2301      	movs	r3, #1
 801571a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	785b      	ldrb	r3, [r3, #1]
 8015720:	2b07      	cmp	r3, #7
 8015722:	f200 81c1 	bhi.w	8015aa8 <USBH_HandleEnum+0x39c>
 8015726:	a201      	add	r2, pc, #4	; (adr r2, 801572c <USBH_HandleEnum+0x20>)
 8015728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801572c:	0801574d 	.word	0x0801574d
 8015730:	0801580b 	.word	0x0801580b
 8015734:	08015875 	.word	0x08015875
 8015738:	08015903 	.word	0x08015903
 801573c:	0801596d 	.word	0x0801596d
 8015740:	080159dd 	.word	0x080159dd
 8015744:	08015a23 	.word	0x08015a23
 8015748:	08015a69 	.word	0x08015a69
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 801574c:	2108      	movs	r1, #8
 801574e:	6878      	ldr	r0, [r7, #4]
 8015750:	f000 fa50 	bl	8015bf4 <USBH_Get_DevDesc>
 8015754:	4603      	mov	r3, r0
 8015756:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8015758:	7bbb      	ldrb	r3, [r7, #14]
 801575a:	2b00      	cmp	r3, #0
 801575c:	d130      	bne.n	80157c0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	2201      	movs	r2, #1
 801576c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	7919      	ldrb	r1, [r3, #4]
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 801577e:	687a      	ldr	r2, [r7, #4]
 8015780:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8015782:	b292      	uxth	r2, r2
 8015784:	9202      	str	r2, [sp, #8]
 8015786:	2200      	movs	r2, #0
 8015788:	9201      	str	r2, [sp, #4]
 801578a:	9300      	str	r3, [sp, #0]
 801578c:	4603      	mov	r3, r0
 801578e:	2280      	movs	r2, #128	; 0x80
 8015790:	6878      	ldr	r0, [r7, #4]
 8015792:	f000 ff79 	bl	8016688 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	7959      	ldrb	r1, [r3, #5]
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80157a6:	687a      	ldr	r2, [r7, #4]
 80157a8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80157aa:	b292      	uxth	r2, r2
 80157ac:	9202      	str	r2, [sp, #8]
 80157ae:	2200      	movs	r2, #0
 80157b0:	9201      	str	r2, [sp, #4]
 80157b2:	9300      	str	r3, [sp, #0]
 80157b4:	4603      	mov	r3, r0
 80157b6:	2200      	movs	r2, #0
 80157b8:	6878      	ldr	r0, [r7, #4]
 80157ba:	f000 ff65 	bl	8016688 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80157be:	e175      	b.n	8015aac <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80157c0:	7bbb      	ldrb	r3, [r7, #14]
 80157c2:	2b03      	cmp	r3, #3
 80157c4:	f040 8172 	bne.w	8015aac <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80157ce:	3301      	adds	r3, #1
 80157d0:	b2da      	uxtb	r2, r3
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80157de:	2b03      	cmp	r3, #3
 80157e0:	d903      	bls.n	80157ea <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	220d      	movs	r2, #13
 80157e6:	701a      	strb	r2, [r3, #0]
      break;
 80157e8:	e160      	b.n	8015aac <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	795b      	ldrb	r3, [r3, #5]
 80157ee:	4619      	mov	r1, r3
 80157f0:	6878      	ldr	r0, [r7, #4]
 80157f2:	f000 ff99 	bl	8016728 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	791b      	ldrb	r3, [r3, #4]
 80157fa:	4619      	mov	r1, r3
 80157fc:	6878      	ldr	r0, [r7, #4]
 80157fe:	f000 ff93 	bl	8016728 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	2200      	movs	r2, #0
 8015806:	701a      	strb	r2, [r3, #0]
      break;
 8015808:	e150      	b.n	8015aac <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 801580a:	2112      	movs	r1, #18
 801580c:	6878      	ldr	r0, [r7, #4]
 801580e:	f000 f9f1 	bl	8015bf4 <USBH_Get_DevDesc>
 8015812:	4603      	mov	r3, r0
 8015814:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8015816:	7bbb      	ldrb	r3, [r7, #14]
 8015818:	2b00      	cmp	r3, #0
 801581a:	d103      	bne.n	8015824 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	2202      	movs	r2, #2
 8015820:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8015822:	e145      	b.n	8015ab0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015824:	7bbb      	ldrb	r3, [r7, #14]
 8015826:	2b03      	cmp	r3, #3
 8015828:	f040 8142 	bne.w	8015ab0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015832:	3301      	adds	r3, #1
 8015834:	b2da      	uxtb	r2, r3
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015842:	2b03      	cmp	r3, #3
 8015844:	d903      	bls.n	801584e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	220d      	movs	r2, #13
 801584a:	701a      	strb	r2, [r3, #0]
      break;
 801584c:	e130      	b.n	8015ab0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	795b      	ldrb	r3, [r3, #5]
 8015852:	4619      	mov	r1, r3
 8015854:	6878      	ldr	r0, [r7, #4]
 8015856:	f000 ff67 	bl	8016728 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	791b      	ldrb	r3, [r3, #4]
 801585e:	4619      	mov	r1, r3
 8015860:	6878      	ldr	r0, [r7, #4]
 8015862:	f000 ff61 	bl	8016728 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	2200      	movs	r2, #0
 801586a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	2200      	movs	r2, #0
 8015870:	701a      	strb	r2, [r3, #0]
      break;
 8015872:	e11d      	b.n	8015ab0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8015874:	2101      	movs	r1, #1
 8015876:	6878      	ldr	r0, [r7, #4]
 8015878:	f000 fa68 	bl	8015d4c <USBH_SetAddress>
 801587c:	4603      	mov	r3, r0
 801587e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8015880:	7bbb      	ldrb	r3, [r7, #14]
 8015882:	2b00      	cmp	r3, #0
 8015884:	d132      	bne.n	80158ec <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8015886:	2002      	movs	r0, #2
 8015888:	f007 f8f1 	bl	801ca6e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	2201      	movs	r2, #1
 8015890:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	2203      	movs	r2, #3
 8015898:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	7919      	ldrb	r1, [r3, #4]
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80158aa:	687a      	ldr	r2, [r7, #4]
 80158ac:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80158ae:	b292      	uxth	r2, r2
 80158b0:	9202      	str	r2, [sp, #8]
 80158b2:	2200      	movs	r2, #0
 80158b4:	9201      	str	r2, [sp, #4]
 80158b6:	9300      	str	r3, [sp, #0]
 80158b8:	4603      	mov	r3, r0
 80158ba:	2280      	movs	r2, #128	; 0x80
 80158bc:	6878      	ldr	r0, [r7, #4]
 80158be:	f000 fee3 	bl	8016688 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	7959      	ldrb	r1, [r3, #5]
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80158d2:	687a      	ldr	r2, [r7, #4]
 80158d4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80158d6:	b292      	uxth	r2, r2
 80158d8:	9202      	str	r2, [sp, #8]
 80158da:	2200      	movs	r2, #0
 80158dc:	9201      	str	r2, [sp, #4]
 80158de:	9300      	str	r3, [sp, #0]
 80158e0:	4603      	mov	r3, r0
 80158e2:	2200      	movs	r2, #0
 80158e4:	6878      	ldr	r0, [r7, #4]
 80158e6:	f000 fecf 	bl	8016688 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80158ea:	e0e3      	b.n	8015ab4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80158ec:	7bbb      	ldrb	r3, [r7, #14]
 80158ee:	2b03      	cmp	r3, #3
 80158f0:	f040 80e0 	bne.w	8015ab4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	220d      	movs	r2, #13
 80158f8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	2200      	movs	r2, #0
 80158fe:	705a      	strb	r2, [r3, #1]
      break;
 8015900:	e0d8      	b.n	8015ab4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8015902:	2109      	movs	r1, #9
 8015904:	6878      	ldr	r0, [r7, #4]
 8015906:	f000 f99d 	bl	8015c44 <USBH_Get_CfgDesc>
 801590a:	4603      	mov	r3, r0
 801590c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801590e:	7bbb      	ldrb	r3, [r7, #14]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d103      	bne.n	801591c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	2204      	movs	r2, #4
 8015918:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801591a:	e0cd      	b.n	8015ab8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801591c:	7bbb      	ldrb	r3, [r7, #14]
 801591e:	2b03      	cmp	r3, #3
 8015920:	f040 80ca 	bne.w	8015ab8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801592a:	3301      	adds	r3, #1
 801592c:	b2da      	uxtb	r2, r3
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801593a:	2b03      	cmp	r3, #3
 801593c:	d903      	bls.n	8015946 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	220d      	movs	r2, #13
 8015942:	701a      	strb	r2, [r3, #0]
      break;
 8015944:	e0b8      	b.n	8015ab8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	795b      	ldrb	r3, [r3, #5]
 801594a:	4619      	mov	r1, r3
 801594c:	6878      	ldr	r0, [r7, #4]
 801594e:	f000 feeb 	bl	8016728 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	791b      	ldrb	r3, [r3, #4]
 8015956:	4619      	mov	r1, r3
 8015958:	6878      	ldr	r0, [r7, #4]
 801595a:	f000 fee5 	bl	8016728 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	2200      	movs	r2, #0
 8015962:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	2200      	movs	r2, #0
 8015968:	701a      	strb	r2, [r3, #0]
      break;
 801596a:	e0a5      	b.n	8015ab8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8015972:	4619      	mov	r1, r3
 8015974:	6878      	ldr	r0, [r7, #4]
 8015976:	f000 f965 	bl	8015c44 <USBH_Get_CfgDesc>
 801597a:	4603      	mov	r3, r0
 801597c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801597e:	7bbb      	ldrb	r3, [r7, #14]
 8015980:	2b00      	cmp	r3, #0
 8015982:	d103      	bne.n	801598c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	2205      	movs	r2, #5
 8015988:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801598a:	e097      	b.n	8015abc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801598c:	7bbb      	ldrb	r3, [r7, #14]
 801598e:	2b03      	cmp	r3, #3
 8015990:	f040 8094 	bne.w	8015abc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801599a:	3301      	adds	r3, #1
 801599c:	b2da      	uxtb	r2, r3
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80159aa:	2b03      	cmp	r3, #3
 80159ac:	d903      	bls.n	80159b6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	220d      	movs	r2, #13
 80159b2:	701a      	strb	r2, [r3, #0]
      break;
 80159b4:	e082      	b.n	8015abc <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	795b      	ldrb	r3, [r3, #5]
 80159ba:	4619      	mov	r1, r3
 80159bc:	6878      	ldr	r0, [r7, #4]
 80159be:	f000 feb3 	bl	8016728 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	791b      	ldrb	r3, [r3, #4]
 80159c6:	4619      	mov	r1, r3
 80159c8:	6878      	ldr	r0, [r7, #4]
 80159ca:	f000 fead 	bl	8016728 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	2200      	movs	r2, #0
 80159d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	2200      	movs	r2, #0
 80159d8:	701a      	strb	r2, [r3, #0]
      break;
 80159da:	e06f      	b.n	8015abc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d019      	beq.n	8015a1a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80159f2:	23ff      	movs	r3, #255	; 0xff
 80159f4:	6878      	ldr	r0, [r7, #4]
 80159f6:	f000 f949 	bl	8015c8c <USBH_Get_StringDesc>
 80159fa:	4603      	mov	r3, r0
 80159fc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80159fe:	7bbb      	ldrb	r3, [r7, #14]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d103      	bne.n	8015a0c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	2206      	movs	r2, #6
 8015a08:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8015a0a:	e059      	b.n	8015ac0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015a0c:	7bbb      	ldrb	r3, [r7, #14]
 8015a0e:	2b03      	cmp	r3, #3
 8015a10:	d156      	bne.n	8015ac0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	2206      	movs	r2, #6
 8015a16:	705a      	strb	r2, [r3, #1]
      break;
 8015a18:	e052      	b.n	8015ac0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	2206      	movs	r2, #6
 8015a1e:	705a      	strb	r2, [r3, #1]
      break;
 8015a20:	e04e      	b.n	8015ac0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d019      	beq.n	8015a60 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8015a38:	23ff      	movs	r3, #255	; 0xff
 8015a3a:	6878      	ldr	r0, [r7, #4]
 8015a3c:	f000 f926 	bl	8015c8c <USBH_Get_StringDesc>
 8015a40:	4603      	mov	r3, r0
 8015a42:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8015a44:	7bbb      	ldrb	r3, [r7, #14]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d103      	bne.n	8015a52 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	2207      	movs	r2, #7
 8015a4e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8015a50:	e038      	b.n	8015ac4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015a52:	7bbb      	ldrb	r3, [r7, #14]
 8015a54:	2b03      	cmp	r3, #3
 8015a56:	d135      	bne.n	8015ac4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	2207      	movs	r2, #7
 8015a5c:	705a      	strb	r2, [r3, #1]
      break;
 8015a5e:	e031      	b.n	8015ac4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	2207      	movs	r2, #7
 8015a64:	705a      	strb	r2, [r3, #1]
      break;
 8015a66:	e02d      	b.n	8015ac4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d017      	beq.n	8015aa2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8015a7e:	23ff      	movs	r3, #255	; 0xff
 8015a80:	6878      	ldr	r0, [r7, #4]
 8015a82:	f000 f903 	bl	8015c8c <USBH_Get_StringDesc>
 8015a86:	4603      	mov	r3, r0
 8015a88:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8015a8a:	7bbb      	ldrb	r3, [r7, #14]
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d102      	bne.n	8015a96 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8015a90:	2300      	movs	r3, #0
 8015a92:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8015a94:	e018      	b.n	8015ac8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015a96:	7bbb      	ldrb	r3, [r7, #14]
 8015a98:	2b03      	cmp	r3, #3
 8015a9a:	d115      	bne.n	8015ac8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8015a9c:	2300      	movs	r3, #0
 8015a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8015aa0:	e012      	b.n	8015ac8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8015aa2:	2300      	movs	r3, #0
 8015aa4:	73fb      	strb	r3, [r7, #15]
      break;
 8015aa6:	e00f      	b.n	8015ac8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8015aa8:	bf00      	nop
 8015aaa:	e00e      	b.n	8015aca <USBH_HandleEnum+0x3be>
      break;
 8015aac:	bf00      	nop
 8015aae:	e00c      	b.n	8015aca <USBH_HandleEnum+0x3be>
      break;
 8015ab0:	bf00      	nop
 8015ab2:	e00a      	b.n	8015aca <USBH_HandleEnum+0x3be>
      break;
 8015ab4:	bf00      	nop
 8015ab6:	e008      	b.n	8015aca <USBH_HandleEnum+0x3be>
      break;
 8015ab8:	bf00      	nop
 8015aba:	e006      	b.n	8015aca <USBH_HandleEnum+0x3be>
      break;
 8015abc:	bf00      	nop
 8015abe:	e004      	b.n	8015aca <USBH_HandleEnum+0x3be>
      break;
 8015ac0:	bf00      	nop
 8015ac2:	e002      	b.n	8015aca <USBH_HandleEnum+0x3be>
      break;
 8015ac4:	bf00      	nop
 8015ac6:	e000      	b.n	8015aca <USBH_HandleEnum+0x3be>
      break;
 8015ac8:	bf00      	nop
  }
  return Status;
 8015aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8015acc:	4618      	mov	r0, r3
 8015ace:	3710      	adds	r7, #16
 8015ad0:	46bd      	mov	sp, r7
 8015ad2:	bd80      	pop	{r7, pc}

08015ad4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8015ad4:	b480      	push	{r7}
 8015ad6:	b083      	sub	sp, #12
 8015ad8:	af00      	add	r7, sp, #0
 8015ada:	6078      	str	r0, [r7, #4]
 8015adc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	683a      	ldr	r2, [r7, #0]
 8015ae2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8015ae6:	bf00      	nop
 8015ae8:	370c      	adds	r7, #12
 8015aea:	46bd      	mov	sp, r7
 8015aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015af0:	4770      	bx	lr

08015af2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8015af2:	b580      	push	{r7, lr}
 8015af4:	b082      	sub	sp, #8
 8015af6:	af00      	add	r7, sp, #0
 8015af8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8015b00:	1c5a      	adds	r2, r3, #1
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8015b08:	6878      	ldr	r0, [r7, #4]
 8015b0a:	f000 f804 	bl	8015b16 <USBH_HandleSof>
}
 8015b0e:	bf00      	nop
 8015b10:	3708      	adds	r7, #8
 8015b12:	46bd      	mov	sp, r7
 8015b14:	bd80      	pop	{r7, pc}

08015b16 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8015b16:	b580      	push	{r7, lr}
 8015b18:	b082      	sub	sp, #8
 8015b1a:	af00      	add	r7, sp, #0
 8015b1c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	781b      	ldrb	r3, [r3, #0]
 8015b22:	b2db      	uxtb	r3, r3
 8015b24:	2b0b      	cmp	r3, #11
 8015b26:	d10a      	bne.n	8015b3e <USBH_HandleSof+0x28>
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d005      	beq.n	8015b3e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015b38:	699b      	ldr	r3, [r3, #24]
 8015b3a:	6878      	ldr	r0, [r7, #4]
 8015b3c:	4798      	blx	r3
  }
}
 8015b3e:	bf00      	nop
 8015b40:	3708      	adds	r7, #8
 8015b42:	46bd      	mov	sp, r7
 8015b44:	bd80      	pop	{r7, pc}

08015b46 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8015b46:	b480      	push	{r7}
 8015b48:	b083      	sub	sp, #12
 8015b4a:	af00      	add	r7, sp, #0
 8015b4c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	2201      	movs	r2, #1
 8015b52:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8015b56:	bf00      	nop
}
 8015b58:	370c      	adds	r7, #12
 8015b5a:	46bd      	mov	sp, r7
 8015b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b60:	4770      	bx	lr

08015b62 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8015b62:	b480      	push	{r7}
 8015b64:	b083      	sub	sp, #12
 8015b66:	af00      	add	r7, sp, #0
 8015b68:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	2200      	movs	r2, #0
 8015b6e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8015b72:	bf00      	nop
}
 8015b74:	370c      	adds	r7, #12
 8015b76:	46bd      	mov	sp, r7
 8015b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b7c:	4770      	bx	lr

08015b7e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8015b7e:	b480      	push	{r7}
 8015b80:	b083      	sub	sp, #12
 8015b82:	af00      	add	r7, sp, #0
 8015b84:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	2201      	movs	r2, #1
 8015b8a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	2200      	movs	r2, #0
 8015b92:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	2200      	movs	r2, #0
 8015b9a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8015b9e:	2300      	movs	r3, #0
}
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	370c      	adds	r7, #12
 8015ba4:	46bd      	mov	sp, r7
 8015ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015baa:	4770      	bx	lr

08015bac <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b082      	sub	sp, #8
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	2201      	movs	r2, #1
 8015bb8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	2200      	movs	r2, #0
 8015bc0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	2200      	movs	r2, #0
 8015bc8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8015bcc:	6878      	ldr	r0, [r7, #4]
 8015bce:	f006 fdda 	bl	801c786 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	791b      	ldrb	r3, [r3, #4]
 8015bd6:	4619      	mov	r1, r3
 8015bd8:	6878      	ldr	r0, [r7, #4]
 8015bda:	f000 fda5 	bl	8016728 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	795b      	ldrb	r3, [r3, #5]
 8015be2:	4619      	mov	r1, r3
 8015be4:	6878      	ldr	r0, [r7, #4]
 8015be6:	f000 fd9f 	bl	8016728 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8015bea:	2300      	movs	r3, #0
}
 8015bec:	4618      	mov	r0, r3
 8015bee:	3708      	adds	r7, #8
 8015bf0:	46bd      	mov	sp, r7
 8015bf2:	bd80      	pop	{r7, pc}

08015bf4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8015bf4:	b580      	push	{r7, lr}
 8015bf6:	b086      	sub	sp, #24
 8015bf8:	af02      	add	r7, sp, #8
 8015bfa:	6078      	str	r0, [r7, #4]
 8015bfc:	460b      	mov	r3, r1
 8015bfe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8015c06:	78fb      	ldrb	r3, [r7, #3]
 8015c08:	b29b      	uxth	r3, r3
 8015c0a:	9300      	str	r3, [sp, #0]
 8015c0c:	4613      	mov	r3, r2
 8015c0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015c12:	2100      	movs	r1, #0
 8015c14:	6878      	ldr	r0, [r7, #4]
 8015c16:	f000 f864 	bl	8015ce2 <USBH_GetDescriptor>
 8015c1a:	4603      	mov	r3, r0
 8015c1c:	73fb      	strb	r3, [r7, #15]
 8015c1e:	7bfb      	ldrb	r3, [r7, #15]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d10a      	bne.n	8015c3a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	f203 3026 	addw	r0, r3, #806	; 0x326
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8015c30:	78fa      	ldrb	r2, [r7, #3]
 8015c32:	b292      	uxth	r2, r2
 8015c34:	4619      	mov	r1, r3
 8015c36:	f000 f918 	bl	8015e6a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8015c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c3c:	4618      	mov	r0, r3
 8015c3e:	3710      	adds	r7, #16
 8015c40:	46bd      	mov	sp, r7
 8015c42:	bd80      	pop	{r7, pc}

08015c44 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8015c44:	b580      	push	{r7, lr}
 8015c46:	b086      	sub	sp, #24
 8015c48:	af02      	add	r7, sp, #8
 8015c4a:	6078      	str	r0, [r7, #4]
 8015c4c:	460b      	mov	r3, r1
 8015c4e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	331c      	adds	r3, #28
 8015c54:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8015c56:	887b      	ldrh	r3, [r7, #2]
 8015c58:	9300      	str	r3, [sp, #0]
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015c60:	2100      	movs	r1, #0
 8015c62:	6878      	ldr	r0, [r7, #4]
 8015c64:	f000 f83d 	bl	8015ce2 <USBH_GetDescriptor>
 8015c68:	4603      	mov	r3, r0
 8015c6a:	72fb      	strb	r3, [r7, #11]
 8015c6c:	7afb      	ldrb	r3, [r7, #11]
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d107      	bne.n	8015c82 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8015c78:	887a      	ldrh	r2, [r7, #2]
 8015c7a:	68f9      	ldr	r1, [r7, #12]
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	f000 f964 	bl	8015f4a <USBH_ParseCfgDesc>
  }

  return status;
 8015c82:	7afb      	ldrb	r3, [r7, #11]
}
 8015c84:	4618      	mov	r0, r3
 8015c86:	3710      	adds	r7, #16
 8015c88:	46bd      	mov	sp, r7
 8015c8a:	bd80      	pop	{r7, pc}

08015c8c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8015c8c:	b580      	push	{r7, lr}
 8015c8e:	b088      	sub	sp, #32
 8015c90:	af02      	add	r7, sp, #8
 8015c92:	60f8      	str	r0, [r7, #12]
 8015c94:	607a      	str	r2, [r7, #4]
 8015c96:	461a      	mov	r2, r3
 8015c98:	460b      	mov	r3, r1
 8015c9a:	72fb      	strb	r3, [r7, #11]
 8015c9c:	4613      	mov	r3, r2
 8015c9e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8015ca0:	7afb      	ldrb	r3, [r7, #11]
 8015ca2:	b29b      	uxth	r3, r3
 8015ca4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8015ca8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8015cb0:	893b      	ldrh	r3, [r7, #8]
 8015cb2:	9300      	str	r3, [sp, #0]
 8015cb4:	460b      	mov	r3, r1
 8015cb6:	2100      	movs	r1, #0
 8015cb8:	68f8      	ldr	r0, [r7, #12]
 8015cba:	f000 f812 	bl	8015ce2 <USBH_GetDescriptor>
 8015cbe:	4603      	mov	r3, r0
 8015cc0:	75fb      	strb	r3, [r7, #23]
 8015cc2:	7dfb      	ldrb	r3, [r7, #23]
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d107      	bne.n	8015cd8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8015cc8:	68fb      	ldr	r3, [r7, #12]
 8015cca:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8015cce:	893a      	ldrh	r2, [r7, #8]
 8015cd0:	6879      	ldr	r1, [r7, #4]
 8015cd2:	4618      	mov	r0, r3
 8015cd4:	f000 fa37 	bl	8016146 <USBH_ParseStringDesc>
  }

  return status;
 8015cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8015cda:	4618      	mov	r0, r3
 8015cdc:	3718      	adds	r7, #24
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	bd80      	pop	{r7, pc}

08015ce2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8015ce2:	b580      	push	{r7, lr}
 8015ce4:	b084      	sub	sp, #16
 8015ce6:	af00      	add	r7, sp, #0
 8015ce8:	60f8      	str	r0, [r7, #12]
 8015cea:	607b      	str	r3, [r7, #4]
 8015cec:	460b      	mov	r3, r1
 8015cee:	72fb      	strb	r3, [r7, #11]
 8015cf0:	4613      	mov	r3, r2
 8015cf2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	789b      	ldrb	r3, [r3, #2]
 8015cf8:	2b01      	cmp	r3, #1
 8015cfa:	d11c      	bne.n	8015d36 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8015cfc:	7afb      	ldrb	r3, [r7, #11]
 8015cfe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015d02:	b2da      	uxtb	r2, r3
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	2206      	movs	r2, #6
 8015d0c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	893a      	ldrh	r2, [r7, #8]
 8015d12:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8015d14:	893b      	ldrh	r3, [r7, #8]
 8015d16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015d1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015d1e:	d104      	bne.n	8015d2a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	f240 4209 	movw	r2, #1033	; 0x409
 8015d26:	829a      	strh	r2, [r3, #20]
 8015d28:	e002      	b.n	8015d30 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	2200      	movs	r2, #0
 8015d2e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8015d30:	68fb      	ldr	r3, [r7, #12]
 8015d32:	8b3a      	ldrh	r2, [r7, #24]
 8015d34:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8015d36:	8b3b      	ldrh	r3, [r7, #24]
 8015d38:	461a      	mov	r2, r3
 8015d3a:	6879      	ldr	r1, [r7, #4]
 8015d3c:	68f8      	ldr	r0, [r7, #12]
 8015d3e:	f000 fa50 	bl	80161e2 <USBH_CtlReq>
 8015d42:	4603      	mov	r3, r0
}
 8015d44:	4618      	mov	r0, r3
 8015d46:	3710      	adds	r7, #16
 8015d48:	46bd      	mov	sp, r7
 8015d4a:	bd80      	pop	{r7, pc}

08015d4c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8015d4c:	b580      	push	{r7, lr}
 8015d4e:	b082      	sub	sp, #8
 8015d50:	af00      	add	r7, sp, #0
 8015d52:	6078      	str	r0, [r7, #4]
 8015d54:	460b      	mov	r3, r1
 8015d56:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	789b      	ldrb	r3, [r3, #2]
 8015d5c:	2b01      	cmp	r3, #1
 8015d5e:	d10f      	bne.n	8015d80 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	2200      	movs	r2, #0
 8015d64:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	2205      	movs	r2, #5
 8015d6a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8015d6c:	78fb      	ldrb	r3, [r7, #3]
 8015d6e:	b29a      	uxth	r2, r3
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	2200      	movs	r2, #0
 8015d78:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	2200      	movs	r2, #0
 8015d7e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8015d80:	2200      	movs	r2, #0
 8015d82:	2100      	movs	r1, #0
 8015d84:	6878      	ldr	r0, [r7, #4]
 8015d86:	f000 fa2c 	bl	80161e2 <USBH_CtlReq>
 8015d8a:	4603      	mov	r3, r0
}
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	3708      	adds	r7, #8
 8015d90:	46bd      	mov	sp, r7
 8015d92:	bd80      	pop	{r7, pc}

08015d94 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8015d94:	b580      	push	{r7, lr}
 8015d96:	b082      	sub	sp, #8
 8015d98:	af00      	add	r7, sp, #0
 8015d9a:	6078      	str	r0, [r7, #4]
 8015d9c:	460b      	mov	r3, r1
 8015d9e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	789b      	ldrb	r3, [r3, #2]
 8015da4:	2b01      	cmp	r3, #1
 8015da6:	d10e      	bne.n	8015dc6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	2200      	movs	r2, #0
 8015dac:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	2209      	movs	r2, #9
 8015db2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	887a      	ldrh	r2, [r7, #2]
 8015db8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	2200      	movs	r2, #0
 8015dbe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	2200      	movs	r2, #0
 8015dc4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8015dc6:	2200      	movs	r2, #0
 8015dc8:	2100      	movs	r1, #0
 8015dca:	6878      	ldr	r0, [r7, #4]
 8015dcc:	f000 fa09 	bl	80161e2 <USBH_CtlReq>
 8015dd0:	4603      	mov	r3, r0
}
 8015dd2:	4618      	mov	r0, r3
 8015dd4:	3708      	adds	r7, #8
 8015dd6:	46bd      	mov	sp, r7
 8015dd8:	bd80      	pop	{r7, pc}

08015dda <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8015dda:	b580      	push	{r7, lr}
 8015ddc:	b082      	sub	sp, #8
 8015dde:	af00      	add	r7, sp, #0
 8015de0:	6078      	str	r0, [r7, #4]
 8015de2:	460b      	mov	r3, r1
 8015de4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	789b      	ldrb	r3, [r3, #2]
 8015dea:	2b01      	cmp	r3, #1
 8015dec:	d10f      	bne.n	8015e0e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	2200      	movs	r2, #0
 8015df2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	2203      	movs	r2, #3
 8015df8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8015dfa:	78fb      	ldrb	r3, [r7, #3]
 8015dfc:	b29a      	uxth	r2, r3
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	2200      	movs	r2, #0
 8015e06:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	2200      	movs	r2, #0
 8015e0c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8015e0e:	2200      	movs	r2, #0
 8015e10:	2100      	movs	r1, #0
 8015e12:	6878      	ldr	r0, [r7, #4]
 8015e14:	f000 f9e5 	bl	80161e2 <USBH_CtlReq>
 8015e18:	4603      	mov	r3, r0
}
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	3708      	adds	r7, #8
 8015e1e:	46bd      	mov	sp, r7
 8015e20:	bd80      	pop	{r7, pc}

08015e22 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8015e22:	b580      	push	{r7, lr}
 8015e24:	b082      	sub	sp, #8
 8015e26:	af00      	add	r7, sp, #0
 8015e28:	6078      	str	r0, [r7, #4]
 8015e2a:	460b      	mov	r3, r1
 8015e2c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	789b      	ldrb	r3, [r3, #2]
 8015e32:	2b01      	cmp	r3, #1
 8015e34:	d10f      	bne.n	8015e56 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	2202      	movs	r2, #2
 8015e3a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	2201      	movs	r2, #1
 8015e40:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	2200      	movs	r2, #0
 8015e46:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8015e48:	78fb      	ldrb	r3, [r7, #3]
 8015e4a:	b29a      	uxth	r2, r3
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	2200      	movs	r2, #0
 8015e54:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8015e56:	2200      	movs	r2, #0
 8015e58:	2100      	movs	r1, #0
 8015e5a:	6878      	ldr	r0, [r7, #4]
 8015e5c:	f000 f9c1 	bl	80161e2 <USBH_CtlReq>
 8015e60:	4603      	mov	r3, r0
}
 8015e62:	4618      	mov	r0, r3
 8015e64:	3708      	adds	r7, #8
 8015e66:	46bd      	mov	sp, r7
 8015e68:	bd80      	pop	{r7, pc}

08015e6a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8015e6a:	b480      	push	{r7}
 8015e6c:	b085      	sub	sp, #20
 8015e6e:	af00      	add	r7, sp, #0
 8015e70:	60f8      	str	r0, [r7, #12]
 8015e72:	60b9      	str	r1, [r7, #8]
 8015e74:	4613      	mov	r3, r2
 8015e76:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8015e78:	68bb      	ldr	r3, [r7, #8]
 8015e7a:	781a      	ldrb	r2, [r3, #0]
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8015e80:	68bb      	ldr	r3, [r7, #8]
 8015e82:	785a      	ldrb	r2, [r3, #1]
 8015e84:	68fb      	ldr	r3, [r7, #12]
 8015e86:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8015e88:	68bb      	ldr	r3, [r7, #8]
 8015e8a:	3302      	adds	r3, #2
 8015e8c:	781b      	ldrb	r3, [r3, #0]
 8015e8e:	b29a      	uxth	r2, r3
 8015e90:	68bb      	ldr	r3, [r7, #8]
 8015e92:	3303      	adds	r3, #3
 8015e94:	781b      	ldrb	r3, [r3, #0]
 8015e96:	b29b      	uxth	r3, r3
 8015e98:	021b      	lsls	r3, r3, #8
 8015e9a:	b29b      	uxth	r3, r3
 8015e9c:	4313      	orrs	r3, r2
 8015e9e:	b29a      	uxth	r2, r3
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8015ea4:	68bb      	ldr	r3, [r7, #8]
 8015ea6:	791a      	ldrb	r2, [r3, #4]
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8015eac:	68bb      	ldr	r3, [r7, #8]
 8015eae:	795a      	ldrb	r2, [r3, #5]
 8015eb0:	68fb      	ldr	r3, [r7, #12]
 8015eb2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8015eb4:	68bb      	ldr	r3, [r7, #8]
 8015eb6:	799a      	ldrb	r2, [r3, #6]
 8015eb8:	68fb      	ldr	r3, [r7, #12]
 8015eba:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8015ebc:	68bb      	ldr	r3, [r7, #8]
 8015ebe:	79da      	ldrb	r2, [r3, #7]
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8015ec4:	88fb      	ldrh	r3, [r7, #6]
 8015ec6:	2b08      	cmp	r3, #8
 8015ec8:	d939      	bls.n	8015f3e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8015eca:	68bb      	ldr	r3, [r7, #8]
 8015ecc:	3308      	adds	r3, #8
 8015ece:	781b      	ldrb	r3, [r3, #0]
 8015ed0:	b29a      	uxth	r2, r3
 8015ed2:	68bb      	ldr	r3, [r7, #8]
 8015ed4:	3309      	adds	r3, #9
 8015ed6:	781b      	ldrb	r3, [r3, #0]
 8015ed8:	b29b      	uxth	r3, r3
 8015eda:	021b      	lsls	r3, r3, #8
 8015edc:	b29b      	uxth	r3, r3
 8015ede:	4313      	orrs	r3, r2
 8015ee0:	b29a      	uxth	r2, r3
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8015ee6:	68bb      	ldr	r3, [r7, #8]
 8015ee8:	330a      	adds	r3, #10
 8015eea:	781b      	ldrb	r3, [r3, #0]
 8015eec:	b29a      	uxth	r2, r3
 8015eee:	68bb      	ldr	r3, [r7, #8]
 8015ef0:	330b      	adds	r3, #11
 8015ef2:	781b      	ldrb	r3, [r3, #0]
 8015ef4:	b29b      	uxth	r3, r3
 8015ef6:	021b      	lsls	r3, r3, #8
 8015ef8:	b29b      	uxth	r3, r3
 8015efa:	4313      	orrs	r3, r2
 8015efc:	b29a      	uxth	r2, r3
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8015f02:	68bb      	ldr	r3, [r7, #8]
 8015f04:	330c      	adds	r3, #12
 8015f06:	781b      	ldrb	r3, [r3, #0]
 8015f08:	b29a      	uxth	r2, r3
 8015f0a:	68bb      	ldr	r3, [r7, #8]
 8015f0c:	330d      	adds	r3, #13
 8015f0e:	781b      	ldrb	r3, [r3, #0]
 8015f10:	b29b      	uxth	r3, r3
 8015f12:	021b      	lsls	r3, r3, #8
 8015f14:	b29b      	uxth	r3, r3
 8015f16:	4313      	orrs	r3, r2
 8015f18:	b29a      	uxth	r2, r3
 8015f1a:	68fb      	ldr	r3, [r7, #12]
 8015f1c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8015f1e:	68bb      	ldr	r3, [r7, #8]
 8015f20:	7b9a      	ldrb	r2, [r3, #14]
 8015f22:	68fb      	ldr	r3, [r7, #12]
 8015f24:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8015f26:	68bb      	ldr	r3, [r7, #8]
 8015f28:	7bda      	ldrb	r2, [r3, #15]
 8015f2a:	68fb      	ldr	r3, [r7, #12]
 8015f2c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8015f2e:	68bb      	ldr	r3, [r7, #8]
 8015f30:	7c1a      	ldrb	r2, [r3, #16]
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8015f36:	68bb      	ldr	r3, [r7, #8]
 8015f38:	7c5a      	ldrb	r2, [r3, #17]
 8015f3a:	68fb      	ldr	r3, [r7, #12]
 8015f3c:	745a      	strb	r2, [r3, #17]
  }
}
 8015f3e:	bf00      	nop
 8015f40:	3714      	adds	r7, #20
 8015f42:	46bd      	mov	sp, r7
 8015f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f48:	4770      	bx	lr

08015f4a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8015f4a:	b580      	push	{r7, lr}
 8015f4c:	b08a      	sub	sp, #40	; 0x28
 8015f4e:	af00      	add	r7, sp, #0
 8015f50:	60f8      	str	r0, [r7, #12]
 8015f52:	60b9      	str	r1, [r7, #8]
 8015f54:	4613      	mov	r3, r2
 8015f56:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8015f58:	68bb      	ldr	r3, [r7, #8]
 8015f5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8015f5c:	2300      	movs	r3, #0
 8015f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8015f62:	2300      	movs	r3, #0
 8015f64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8015f68:	68bb      	ldr	r3, [r7, #8]
 8015f6a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8015f6c:	68bb      	ldr	r3, [r7, #8]
 8015f6e:	781a      	ldrb	r2, [r3, #0]
 8015f70:	68fb      	ldr	r3, [r7, #12]
 8015f72:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8015f74:	68bb      	ldr	r3, [r7, #8]
 8015f76:	785a      	ldrb	r2, [r3, #1]
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8015f7c:	68bb      	ldr	r3, [r7, #8]
 8015f7e:	3302      	adds	r3, #2
 8015f80:	781b      	ldrb	r3, [r3, #0]
 8015f82:	b29a      	uxth	r2, r3
 8015f84:	68bb      	ldr	r3, [r7, #8]
 8015f86:	3303      	adds	r3, #3
 8015f88:	781b      	ldrb	r3, [r3, #0]
 8015f8a:	b29b      	uxth	r3, r3
 8015f8c:	021b      	lsls	r3, r3, #8
 8015f8e:	b29b      	uxth	r3, r3
 8015f90:	4313      	orrs	r3, r2
 8015f92:	b29a      	uxth	r2, r3
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8015f98:	68bb      	ldr	r3, [r7, #8]
 8015f9a:	791a      	ldrb	r2, [r3, #4]
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8015fa0:	68bb      	ldr	r3, [r7, #8]
 8015fa2:	795a      	ldrb	r2, [r3, #5]
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8015fa8:	68bb      	ldr	r3, [r7, #8]
 8015faa:	799a      	ldrb	r2, [r3, #6]
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8015fb0:	68bb      	ldr	r3, [r7, #8]
 8015fb2:	79da      	ldrb	r2, [r3, #7]
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8015fb8:	68bb      	ldr	r3, [r7, #8]
 8015fba:	7a1a      	ldrb	r2, [r3, #8]
 8015fbc:	68fb      	ldr	r3, [r7, #12]
 8015fbe:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8015fc0:	88fb      	ldrh	r3, [r7, #6]
 8015fc2:	2b09      	cmp	r3, #9
 8015fc4:	d95f      	bls.n	8016086 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8015fc6:	2309      	movs	r3, #9
 8015fc8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8015fca:	2300      	movs	r3, #0
 8015fcc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8015fce:	e051      	b.n	8016074 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8015fd0:	f107 0316 	add.w	r3, r7, #22
 8015fd4:	4619      	mov	r1, r3
 8015fd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015fd8:	f000 f8e8 	bl	80161ac <USBH_GetNextDesc>
 8015fdc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8015fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fe0:	785b      	ldrb	r3, [r3, #1]
 8015fe2:	2b04      	cmp	r3, #4
 8015fe4:	d146      	bne.n	8016074 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8015fe6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015fea:	221a      	movs	r2, #26
 8015fec:	fb02 f303 	mul.w	r3, r2, r3
 8015ff0:	3308      	adds	r3, #8
 8015ff2:	68fa      	ldr	r2, [r7, #12]
 8015ff4:	4413      	add	r3, r2
 8015ff6:	3302      	adds	r3, #2
 8015ff8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8015ffa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015ffc:	69f8      	ldr	r0, [r7, #28]
 8015ffe:	f000 f846 	bl	801608e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8016002:	2300      	movs	r3, #0
 8016004:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8016008:	2300      	movs	r3, #0
 801600a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 801600c:	e022      	b.n	8016054 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 801600e:	f107 0316 	add.w	r3, r7, #22
 8016012:	4619      	mov	r1, r3
 8016014:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016016:	f000 f8c9 	bl	80161ac <USBH_GetNextDesc>
 801601a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 801601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801601e:	785b      	ldrb	r3, [r3, #1]
 8016020:	2b05      	cmp	r3, #5
 8016022:	d117      	bne.n	8016054 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8016024:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016028:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801602c:	3201      	adds	r2, #1
 801602e:	00d2      	lsls	r2, r2, #3
 8016030:	211a      	movs	r1, #26
 8016032:	fb01 f303 	mul.w	r3, r1, r3
 8016036:	4413      	add	r3, r2
 8016038:	3308      	adds	r3, #8
 801603a:	68fa      	ldr	r2, [r7, #12]
 801603c:	4413      	add	r3, r2
 801603e:	3304      	adds	r3, #4
 8016040:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8016042:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016044:	69b8      	ldr	r0, [r7, #24]
 8016046:	f000 f851 	bl	80160ec <USBH_ParseEPDesc>
            ep_ix++;
 801604a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801604e:	3301      	adds	r3, #1
 8016050:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8016054:	69fb      	ldr	r3, [r7, #28]
 8016056:	791b      	ldrb	r3, [r3, #4]
 8016058:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801605c:	429a      	cmp	r2, r3
 801605e:	d204      	bcs.n	801606a <USBH_ParseCfgDesc+0x120>
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	885a      	ldrh	r2, [r3, #2]
 8016064:	8afb      	ldrh	r3, [r7, #22]
 8016066:	429a      	cmp	r2, r3
 8016068:	d8d1      	bhi.n	801600e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 801606a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801606e:	3301      	adds	r3, #1
 8016070:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8016074:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016078:	2b01      	cmp	r3, #1
 801607a:	d804      	bhi.n	8016086 <USBH_ParseCfgDesc+0x13c>
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	885a      	ldrh	r2, [r3, #2]
 8016080:	8afb      	ldrh	r3, [r7, #22]
 8016082:	429a      	cmp	r2, r3
 8016084:	d8a4      	bhi.n	8015fd0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8016086:	bf00      	nop
 8016088:	3728      	adds	r7, #40	; 0x28
 801608a:	46bd      	mov	sp, r7
 801608c:	bd80      	pop	{r7, pc}

0801608e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 801608e:	b480      	push	{r7}
 8016090:	b083      	sub	sp, #12
 8016092:	af00      	add	r7, sp, #0
 8016094:	6078      	str	r0, [r7, #4]
 8016096:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8016098:	683b      	ldr	r3, [r7, #0]
 801609a:	781a      	ldrb	r2, [r3, #0]
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80160a0:	683b      	ldr	r3, [r7, #0]
 80160a2:	785a      	ldrb	r2, [r3, #1]
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80160a8:	683b      	ldr	r3, [r7, #0]
 80160aa:	789a      	ldrb	r2, [r3, #2]
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80160b0:	683b      	ldr	r3, [r7, #0]
 80160b2:	78da      	ldrb	r2, [r3, #3]
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80160b8:	683b      	ldr	r3, [r7, #0]
 80160ba:	791a      	ldrb	r2, [r3, #4]
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80160c0:	683b      	ldr	r3, [r7, #0]
 80160c2:	795a      	ldrb	r2, [r3, #5]
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80160c8:	683b      	ldr	r3, [r7, #0]
 80160ca:	799a      	ldrb	r2, [r3, #6]
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80160d0:	683b      	ldr	r3, [r7, #0]
 80160d2:	79da      	ldrb	r2, [r3, #7]
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80160d8:	683b      	ldr	r3, [r7, #0]
 80160da:	7a1a      	ldrb	r2, [r3, #8]
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	721a      	strb	r2, [r3, #8]
}
 80160e0:	bf00      	nop
 80160e2:	370c      	adds	r7, #12
 80160e4:	46bd      	mov	sp, r7
 80160e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ea:	4770      	bx	lr

080160ec <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80160ec:	b480      	push	{r7}
 80160ee:	b083      	sub	sp, #12
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	6078      	str	r0, [r7, #4]
 80160f4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80160f6:	683b      	ldr	r3, [r7, #0]
 80160f8:	781a      	ldrb	r2, [r3, #0]
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80160fe:	683b      	ldr	r3, [r7, #0]
 8016100:	785a      	ldrb	r2, [r3, #1]
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8016106:	683b      	ldr	r3, [r7, #0]
 8016108:	789a      	ldrb	r2, [r3, #2]
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 801610e:	683b      	ldr	r3, [r7, #0]
 8016110:	78da      	ldrb	r2, [r3, #3]
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8016116:	683b      	ldr	r3, [r7, #0]
 8016118:	3304      	adds	r3, #4
 801611a:	781b      	ldrb	r3, [r3, #0]
 801611c:	b29a      	uxth	r2, r3
 801611e:	683b      	ldr	r3, [r7, #0]
 8016120:	3305      	adds	r3, #5
 8016122:	781b      	ldrb	r3, [r3, #0]
 8016124:	b29b      	uxth	r3, r3
 8016126:	021b      	lsls	r3, r3, #8
 8016128:	b29b      	uxth	r3, r3
 801612a:	4313      	orrs	r3, r2
 801612c:	b29a      	uxth	r2, r3
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8016132:	683b      	ldr	r3, [r7, #0]
 8016134:	799a      	ldrb	r2, [r3, #6]
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	719a      	strb	r2, [r3, #6]
}
 801613a:	bf00      	nop
 801613c:	370c      	adds	r7, #12
 801613e:	46bd      	mov	sp, r7
 8016140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016144:	4770      	bx	lr

08016146 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8016146:	b480      	push	{r7}
 8016148:	b087      	sub	sp, #28
 801614a:	af00      	add	r7, sp, #0
 801614c:	60f8      	str	r0, [r7, #12]
 801614e:	60b9      	str	r1, [r7, #8]
 8016150:	4613      	mov	r3, r2
 8016152:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	3301      	adds	r3, #1
 8016158:	781b      	ldrb	r3, [r3, #0]
 801615a:	2b03      	cmp	r3, #3
 801615c:	d120      	bne.n	80161a0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	781b      	ldrb	r3, [r3, #0]
 8016162:	1e9a      	subs	r2, r3, #2
 8016164:	88fb      	ldrh	r3, [r7, #6]
 8016166:	4293      	cmp	r3, r2
 8016168:	bf28      	it	cs
 801616a:	4613      	movcs	r3, r2
 801616c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	3302      	adds	r3, #2
 8016172:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8016174:	2300      	movs	r3, #0
 8016176:	82fb      	strh	r3, [r7, #22]
 8016178:	e00b      	b.n	8016192 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 801617a:	8afb      	ldrh	r3, [r7, #22]
 801617c:	68fa      	ldr	r2, [r7, #12]
 801617e:	4413      	add	r3, r2
 8016180:	781a      	ldrb	r2, [r3, #0]
 8016182:	68bb      	ldr	r3, [r7, #8]
 8016184:	701a      	strb	r2, [r3, #0]
      pdest++;
 8016186:	68bb      	ldr	r3, [r7, #8]
 8016188:	3301      	adds	r3, #1
 801618a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 801618c:	8afb      	ldrh	r3, [r7, #22]
 801618e:	3302      	adds	r3, #2
 8016190:	82fb      	strh	r3, [r7, #22]
 8016192:	8afa      	ldrh	r2, [r7, #22]
 8016194:	8abb      	ldrh	r3, [r7, #20]
 8016196:	429a      	cmp	r2, r3
 8016198:	d3ef      	bcc.n	801617a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 801619a:	68bb      	ldr	r3, [r7, #8]
 801619c:	2200      	movs	r2, #0
 801619e:	701a      	strb	r2, [r3, #0]
  }
}
 80161a0:	bf00      	nop
 80161a2:	371c      	adds	r7, #28
 80161a4:	46bd      	mov	sp, r7
 80161a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161aa:	4770      	bx	lr

080161ac <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80161ac:	b480      	push	{r7}
 80161ae:	b085      	sub	sp, #20
 80161b0:	af00      	add	r7, sp, #0
 80161b2:	6078      	str	r0, [r7, #4]
 80161b4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80161b6:	683b      	ldr	r3, [r7, #0]
 80161b8:	881a      	ldrh	r2, [r3, #0]
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	781b      	ldrb	r3, [r3, #0]
 80161be:	b29b      	uxth	r3, r3
 80161c0:	4413      	add	r3, r2
 80161c2:	b29a      	uxth	r2, r3
 80161c4:	683b      	ldr	r3, [r7, #0]
 80161c6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	781b      	ldrb	r3, [r3, #0]
 80161cc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	4413      	add	r3, r2
 80161d2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80161d4:	68fb      	ldr	r3, [r7, #12]
}
 80161d6:	4618      	mov	r0, r3
 80161d8:	3714      	adds	r7, #20
 80161da:	46bd      	mov	sp, r7
 80161dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161e0:	4770      	bx	lr

080161e2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80161e2:	b580      	push	{r7, lr}
 80161e4:	b086      	sub	sp, #24
 80161e6:	af00      	add	r7, sp, #0
 80161e8:	60f8      	str	r0, [r7, #12]
 80161ea:	60b9      	str	r1, [r7, #8]
 80161ec:	4613      	mov	r3, r2
 80161ee:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80161f0:	2301      	movs	r3, #1
 80161f2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	789b      	ldrb	r3, [r3, #2]
 80161f8:	2b01      	cmp	r3, #1
 80161fa:	d002      	beq.n	8016202 <USBH_CtlReq+0x20>
 80161fc:	2b02      	cmp	r3, #2
 80161fe:	d00f      	beq.n	8016220 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8016200:	e027      	b.n	8016252 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	68ba      	ldr	r2, [r7, #8]
 8016206:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	88fa      	ldrh	r2, [r7, #6]
 801620c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	2201      	movs	r2, #1
 8016212:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8016214:	68fb      	ldr	r3, [r7, #12]
 8016216:	2202      	movs	r2, #2
 8016218:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 801621a:	2301      	movs	r3, #1
 801621c:	75fb      	strb	r3, [r7, #23]
      break;
 801621e:	e018      	b.n	8016252 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8016220:	68f8      	ldr	r0, [r7, #12]
 8016222:	f000 f81b 	bl	801625c <USBH_HandleControl>
 8016226:	4603      	mov	r3, r0
 8016228:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 801622a:	7dfb      	ldrb	r3, [r7, #23]
 801622c:	2b00      	cmp	r3, #0
 801622e:	d002      	beq.n	8016236 <USBH_CtlReq+0x54>
 8016230:	7dfb      	ldrb	r3, [r7, #23]
 8016232:	2b03      	cmp	r3, #3
 8016234:	d106      	bne.n	8016244 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	2201      	movs	r2, #1
 801623a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	2200      	movs	r2, #0
 8016240:	761a      	strb	r2, [r3, #24]
      break;
 8016242:	e005      	b.n	8016250 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8016244:	7dfb      	ldrb	r3, [r7, #23]
 8016246:	2b02      	cmp	r3, #2
 8016248:	d102      	bne.n	8016250 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	2201      	movs	r2, #1
 801624e:	709a      	strb	r2, [r3, #2]
      break;
 8016250:	bf00      	nop
  }
  return status;
 8016252:	7dfb      	ldrb	r3, [r7, #23]
}
 8016254:	4618      	mov	r0, r3
 8016256:	3718      	adds	r7, #24
 8016258:	46bd      	mov	sp, r7
 801625a:	bd80      	pop	{r7, pc}

0801625c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 801625c:	b580      	push	{r7, lr}
 801625e:	b086      	sub	sp, #24
 8016260:	af02      	add	r7, sp, #8
 8016262:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8016264:	2301      	movs	r3, #1
 8016266:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8016268:	2300      	movs	r3, #0
 801626a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	7e1b      	ldrb	r3, [r3, #24]
 8016270:	3b01      	subs	r3, #1
 8016272:	2b0a      	cmp	r3, #10
 8016274:	f200 8158 	bhi.w	8016528 <USBH_HandleControl+0x2cc>
 8016278:	a201      	add	r2, pc, #4	; (adr r2, 8016280 <USBH_HandleControl+0x24>)
 801627a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801627e:	bf00      	nop
 8016280:	080162ad 	.word	0x080162ad
 8016284:	080162c7 	.word	0x080162c7
 8016288:	08016331 	.word	0x08016331
 801628c:	08016357 	.word	0x08016357
 8016290:	0801638f 	.word	0x0801638f
 8016294:	080163bb 	.word	0x080163bb
 8016298:	0801640d 	.word	0x0801640d
 801629c:	0801642f 	.word	0x0801642f
 80162a0:	0801646b 	.word	0x0801646b
 80162a4:	08016493 	.word	0x08016493
 80162a8:	080164d1 	.word	0x080164d1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	f103 0110 	add.w	r1, r3, #16
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	795b      	ldrb	r3, [r3, #5]
 80162b6:	461a      	mov	r2, r3
 80162b8:	6878      	ldr	r0, [r7, #4]
 80162ba:	f000 f945 	bl	8016548 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	2202      	movs	r2, #2
 80162c2:	761a      	strb	r2, [r3, #24]
      break;
 80162c4:	e13b      	b.n	801653e <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	795b      	ldrb	r3, [r3, #5]
 80162ca:	4619      	mov	r1, r3
 80162cc:	6878      	ldr	r0, [r7, #4]
 80162ce:	f006 fb47 	bl	801c960 <USBH_LL_GetURBState>
 80162d2:	4603      	mov	r3, r0
 80162d4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80162d6:	7bbb      	ldrb	r3, [r7, #14]
 80162d8:	2b01      	cmp	r3, #1
 80162da:	d11e      	bne.n	801631a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	7c1b      	ldrb	r3, [r3, #16]
 80162e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80162e4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	8adb      	ldrh	r3, [r3, #22]
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d00a      	beq.n	8016304 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80162ee:	7b7b      	ldrb	r3, [r7, #13]
 80162f0:	2b80      	cmp	r3, #128	; 0x80
 80162f2:	d103      	bne.n	80162fc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	2203      	movs	r2, #3
 80162f8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80162fa:	e117      	b.n	801652c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	2205      	movs	r2, #5
 8016300:	761a      	strb	r2, [r3, #24]
      break;
 8016302:	e113      	b.n	801652c <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8016304:	7b7b      	ldrb	r3, [r7, #13]
 8016306:	2b80      	cmp	r3, #128	; 0x80
 8016308:	d103      	bne.n	8016312 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	2209      	movs	r2, #9
 801630e:	761a      	strb	r2, [r3, #24]
      break;
 8016310:	e10c      	b.n	801652c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	2207      	movs	r2, #7
 8016316:	761a      	strb	r2, [r3, #24]
      break;
 8016318:	e108      	b.n	801652c <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 801631a:	7bbb      	ldrb	r3, [r7, #14]
 801631c:	2b04      	cmp	r3, #4
 801631e:	d003      	beq.n	8016328 <USBH_HandleControl+0xcc>
 8016320:	7bbb      	ldrb	r3, [r7, #14]
 8016322:	2b02      	cmp	r3, #2
 8016324:	f040 8102 	bne.w	801652c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	220b      	movs	r2, #11
 801632c:	761a      	strb	r2, [r3, #24]
      break;
 801632e:	e0fd      	b.n	801652c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8016336:	b29a      	uxth	r2, r3
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	6899      	ldr	r1, [r3, #8]
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	899a      	ldrh	r2, [r3, #12]
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	791b      	ldrb	r3, [r3, #4]
 8016348:	6878      	ldr	r0, [r7, #4]
 801634a:	f000 f93c 	bl	80165c6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	2204      	movs	r2, #4
 8016352:	761a      	strb	r2, [r3, #24]
      break;
 8016354:	e0f3      	b.n	801653e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	791b      	ldrb	r3, [r3, #4]
 801635a:	4619      	mov	r1, r3
 801635c:	6878      	ldr	r0, [r7, #4]
 801635e:	f006 faff 	bl	801c960 <USBH_LL_GetURBState>
 8016362:	4603      	mov	r3, r0
 8016364:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8016366:	7bbb      	ldrb	r3, [r7, #14]
 8016368:	2b01      	cmp	r3, #1
 801636a:	d102      	bne.n	8016372 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	2209      	movs	r2, #9
 8016370:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8016372:	7bbb      	ldrb	r3, [r7, #14]
 8016374:	2b05      	cmp	r3, #5
 8016376:	d102      	bne.n	801637e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8016378:	2303      	movs	r3, #3
 801637a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801637c:	e0d8      	b.n	8016530 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 801637e:	7bbb      	ldrb	r3, [r7, #14]
 8016380:	2b04      	cmp	r3, #4
 8016382:	f040 80d5 	bne.w	8016530 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	220b      	movs	r2, #11
 801638a:	761a      	strb	r2, [r3, #24]
      break;
 801638c:	e0d0      	b.n	8016530 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	6899      	ldr	r1, [r3, #8]
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	899a      	ldrh	r2, [r3, #12]
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	7958      	ldrb	r0, [r3, #5]
 801639a:	2301      	movs	r3, #1
 801639c:	9300      	str	r3, [sp, #0]
 801639e:	4603      	mov	r3, r0
 80163a0:	6878      	ldr	r0, [r7, #4]
 80163a2:	f000 f8eb 	bl	801657c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80163ac:	b29a      	uxth	r2, r3
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	2206      	movs	r2, #6
 80163b6:	761a      	strb	r2, [r3, #24]
      break;
 80163b8:	e0c1      	b.n	801653e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	795b      	ldrb	r3, [r3, #5]
 80163be:	4619      	mov	r1, r3
 80163c0:	6878      	ldr	r0, [r7, #4]
 80163c2:	f006 facd 	bl	801c960 <USBH_LL_GetURBState>
 80163c6:	4603      	mov	r3, r0
 80163c8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80163ca:	7bbb      	ldrb	r3, [r7, #14]
 80163cc:	2b01      	cmp	r3, #1
 80163ce:	d103      	bne.n	80163d8 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	2207      	movs	r2, #7
 80163d4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80163d6:	e0ad      	b.n	8016534 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 80163d8:	7bbb      	ldrb	r3, [r7, #14]
 80163da:	2b05      	cmp	r3, #5
 80163dc:	d105      	bne.n	80163ea <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	220c      	movs	r2, #12
 80163e2:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80163e4:	2303      	movs	r3, #3
 80163e6:	73fb      	strb	r3, [r7, #15]
      break;
 80163e8:	e0a4      	b.n	8016534 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 80163ea:	7bbb      	ldrb	r3, [r7, #14]
 80163ec:	2b02      	cmp	r3, #2
 80163ee:	d103      	bne.n	80163f8 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	2205      	movs	r2, #5
 80163f4:	761a      	strb	r2, [r3, #24]
      break;
 80163f6:	e09d      	b.n	8016534 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 80163f8:	7bbb      	ldrb	r3, [r7, #14]
 80163fa:	2b04      	cmp	r3, #4
 80163fc:	f040 809a 	bne.w	8016534 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	220b      	movs	r2, #11
 8016404:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8016406:	2302      	movs	r3, #2
 8016408:	73fb      	strb	r3, [r7, #15]
      break;
 801640a:	e093      	b.n	8016534 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	791b      	ldrb	r3, [r3, #4]
 8016410:	2200      	movs	r2, #0
 8016412:	2100      	movs	r1, #0
 8016414:	6878      	ldr	r0, [r7, #4]
 8016416:	f000 f8d6 	bl	80165c6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8016420:	b29a      	uxth	r2, r3
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	2208      	movs	r2, #8
 801642a:	761a      	strb	r2, [r3, #24]

      break;
 801642c:	e087      	b.n	801653e <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	791b      	ldrb	r3, [r3, #4]
 8016432:	4619      	mov	r1, r3
 8016434:	6878      	ldr	r0, [r7, #4]
 8016436:	f006 fa93 	bl	801c960 <USBH_LL_GetURBState>
 801643a:	4603      	mov	r3, r0
 801643c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 801643e:	7bbb      	ldrb	r3, [r7, #14]
 8016440:	2b01      	cmp	r3, #1
 8016442:	d105      	bne.n	8016450 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	220d      	movs	r2, #13
 8016448:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 801644a:	2300      	movs	r3, #0
 801644c:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801644e:	e073      	b.n	8016538 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8016450:	7bbb      	ldrb	r3, [r7, #14]
 8016452:	2b04      	cmp	r3, #4
 8016454:	d103      	bne.n	801645e <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	220b      	movs	r2, #11
 801645a:	761a      	strb	r2, [r3, #24]
      break;
 801645c:	e06c      	b.n	8016538 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 801645e:	7bbb      	ldrb	r3, [r7, #14]
 8016460:	2b05      	cmp	r3, #5
 8016462:	d169      	bne.n	8016538 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8016464:	2303      	movs	r3, #3
 8016466:	73fb      	strb	r3, [r7, #15]
      break;
 8016468:	e066      	b.n	8016538 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	795a      	ldrb	r2, [r3, #5]
 801646e:	2301      	movs	r3, #1
 8016470:	9300      	str	r3, [sp, #0]
 8016472:	4613      	mov	r3, r2
 8016474:	2200      	movs	r2, #0
 8016476:	2100      	movs	r1, #0
 8016478:	6878      	ldr	r0, [r7, #4]
 801647a:	f000 f87f 	bl	801657c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8016484:	b29a      	uxth	r2, r3
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	220a      	movs	r2, #10
 801648e:	761a      	strb	r2, [r3, #24]
      break;
 8016490:	e055      	b.n	801653e <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	795b      	ldrb	r3, [r3, #5]
 8016496:	4619      	mov	r1, r3
 8016498:	6878      	ldr	r0, [r7, #4]
 801649a:	f006 fa61 	bl	801c960 <USBH_LL_GetURBState>
 801649e:	4603      	mov	r3, r0
 80164a0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80164a2:	7bbb      	ldrb	r3, [r7, #14]
 80164a4:	2b01      	cmp	r3, #1
 80164a6:	d105      	bne.n	80164b4 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 80164a8:	2300      	movs	r3, #0
 80164aa:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	220d      	movs	r2, #13
 80164b0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80164b2:	e043      	b.n	801653c <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 80164b4:	7bbb      	ldrb	r3, [r7, #14]
 80164b6:	2b02      	cmp	r3, #2
 80164b8:	d103      	bne.n	80164c2 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	2209      	movs	r2, #9
 80164be:	761a      	strb	r2, [r3, #24]
      break;
 80164c0:	e03c      	b.n	801653c <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 80164c2:	7bbb      	ldrb	r3, [r7, #14]
 80164c4:	2b04      	cmp	r3, #4
 80164c6:	d139      	bne.n	801653c <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	220b      	movs	r2, #11
 80164cc:	761a      	strb	r2, [r3, #24]
      break;
 80164ce:	e035      	b.n	801653c <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	7e5b      	ldrb	r3, [r3, #25]
 80164d4:	3301      	adds	r3, #1
 80164d6:	b2da      	uxtb	r2, r3
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	765a      	strb	r2, [r3, #25]
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	7e5b      	ldrb	r3, [r3, #25]
 80164e0:	2b02      	cmp	r3, #2
 80164e2:	d806      	bhi.n	80164f2 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	2201      	movs	r2, #1
 80164e8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	2201      	movs	r2, #1
 80164ee:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80164f0:	e025      	b.n	801653e <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80164f8:	2106      	movs	r1, #6
 80164fa:	6878      	ldr	r0, [r7, #4]
 80164fc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	2200      	movs	r2, #0
 8016502:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	795b      	ldrb	r3, [r3, #5]
 8016508:	4619      	mov	r1, r3
 801650a:	6878      	ldr	r0, [r7, #4]
 801650c:	f000 f90c 	bl	8016728 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	791b      	ldrb	r3, [r3, #4]
 8016514:	4619      	mov	r1, r3
 8016516:	6878      	ldr	r0, [r7, #4]
 8016518:	f000 f906 	bl	8016728 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	2200      	movs	r2, #0
 8016520:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8016522:	2302      	movs	r3, #2
 8016524:	73fb      	strb	r3, [r7, #15]
      break;
 8016526:	e00a      	b.n	801653e <USBH_HandleControl+0x2e2>

    default:
      break;
 8016528:	bf00      	nop
 801652a:	e008      	b.n	801653e <USBH_HandleControl+0x2e2>
      break;
 801652c:	bf00      	nop
 801652e:	e006      	b.n	801653e <USBH_HandleControl+0x2e2>
      break;
 8016530:	bf00      	nop
 8016532:	e004      	b.n	801653e <USBH_HandleControl+0x2e2>
      break;
 8016534:	bf00      	nop
 8016536:	e002      	b.n	801653e <USBH_HandleControl+0x2e2>
      break;
 8016538:	bf00      	nop
 801653a:	e000      	b.n	801653e <USBH_HandleControl+0x2e2>
      break;
 801653c:	bf00      	nop
  }

  return status;
 801653e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016540:	4618      	mov	r0, r3
 8016542:	3710      	adds	r7, #16
 8016544:	46bd      	mov	sp, r7
 8016546:	bd80      	pop	{r7, pc}

08016548 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8016548:	b580      	push	{r7, lr}
 801654a:	b088      	sub	sp, #32
 801654c:	af04      	add	r7, sp, #16
 801654e:	60f8      	str	r0, [r7, #12]
 8016550:	60b9      	str	r1, [r7, #8]
 8016552:	4613      	mov	r3, r2
 8016554:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8016556:	79f9      	ldrb	r1, [r7, #7]
 8016558:	2300      	movs	r3, #0
 801655a:	9303      	str	r3, [sp, #12]
 801655c:	2308      	movs	r3, #8
 801655e:	9302      	str	r3, [sp, #8]
 8016560:	68bb      	ldr	r3, [r7, #8]
 8016562:	9301      	str	r3, [sp, #4]
 8016564:	2300      	movs	r3, #0
 8016566:	9300      	str	r3, [sp, #0]
 8016568:	2300      	movs	r3, #0
 801656a:	2200      	movs	r2, #0
 801656c:	68f8      	ldr	r0, [r7, #12]
 801656e:	f006 f9c6 	bl	801c8fe <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8016572:	2300      	movs	r3, #0
}
 8016574:	4618      	mov	r0, r3
 8016576:	3710      	adds	r7, #16
 8016578:	46bd      	mov	sp, r7
 801657a:	bd80      	pop	{r7, pc}

0801657c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 801657c:	b580      	push	{r7, lr}
 801657e:	b088      	sub	sp, #32
 8016580:	af04      	add	r7, sp, #16
 8016582:	60f8      	str	r0, [r7, #12]
 8016584:	60b9      	str	r1, [r7, #8]
 8016586:	4611      	mov	r1, r2
 8016588:	461a      	mov	r2, r3
 801658a:	460b      	mov	r3, r1
 801658c:	80fb      	strh	r3, [r7, #6]
 801658e:	4613      	mov	r3, r2
 8016590:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8016592:	68fb      	ldr	r3, [r7, #12]
 8016594:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016598:	2b00      	cmp	r3, #0
 801659a:	d001      	beq.n	80165a0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 801659c:	2300      	movs	r3, #0
 801659e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80165a0:	7979      	ldrb	r1, [r7, #5]
 80165a2:	7e3b      	ldrb	r3, [r7, #24]
 80165a4:	9303      	str	r3, [sp, #12]
 80165a6:	88fb      	ldrh	r3, [r7, #6]
 80165a8:	9302      	str	r3, [sp, #8]
 80165aa:	68bb      	ldr	r3, [r7, #8]
 80165ac:	9301      	str	r3, [sp, #4]
 80165ae:	2301      	movs	r3, #1
 80165b0:	9300      	str	r3, [sp, #0]
 80165b2:	2300      	movs	r3, #0
 80165b4:	2200      	movs	r2, #0
 80165b6:	68f8      	ldr	r0, [r7, #12]
 80165b8:	f006 f9a1 	bl	801c8fe <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80165bc:	2300      	movs	r3, #0
}
 80165be:	4618      	mov	r0, r3
 80165c0:	3710      	adds	r7, #16
 80165c2:	46bd      	mov	sp, r7
 80165c4:	bd80      	pop	{r7, pc}

080165c6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80165c6:	b580      	push	{r7, lr}
 80165c8:	b088      	sub	sp, #32
 80165ca:	af04      	add	r7, sp, #16
 80165cc:	60f8      	str	r0, [r7, #12]
 80165ce:	60b9      	str	r1, [r7, #8]
 80165d0:	4611      	mov	r1, r2
 80165d2:	461a      	mov	r2, r3
 80165d4:	460b      	mov	r3, r1
 80165d6:	80fb      	strh	r3, [r7, #6]
 80165d8:	4613      	mov	r3, r2
 80165da:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80165dc:	7979      	ldrb	r1, [r7, #5]
 80165de:	2300      	movs	r3, #0
 80165e0:	9303      	str	r3, [sp, #12]
 80165e2:	88fb      	ldrh	r3, [r7, #6]
 80165e4:	9302      	str	r3, [sp, #8]
 80165e6:	68bb      	ldr	r3, [r7, #8]
 80165e8:	9301      	str	r3, [sp, #4]
 80165ea:	2301      	movs	r3, #1
 80165ec:	9300      	str	r3, [sp, #0]
 80165ee:	2300      	movs	r3, #0
 80165f0:	2201      	movs	r2, #1
 80165f2:	68f8      	ldr	r0, [r7, #12]
 80165f4:	f006 f983 	bl	801c8fe <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80165f8:	2300      	movs	r3, #0

}
 80165fa:	4618      	mov	r0, r3
 80165fc:	3710      	adds	r7, #16
 80165fe:	46bd      	mov	sp, r7
 8016600:	bd80      	pop	{r7, pc}

08016602 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8016602:	b580      	push	{r7, lr}
 8016604:	b088      	sub	sp, #32
 8016606:	af04      	add	r7, sp, #16
 8016608:	60f8      	str	r0, [r7, #12]
 801660a:	60b9      	str	r1, [r7, #8]
 801660c:	4611      	mov	r1, r2
 801660e:	461a      	mov	r2, r3
 8016610:	460b      	mov	r3, r1
 8016612:	80fb      	strh	r3, [r7, #6]
 8016614:	4613      	mov	r3, r2
 8016616:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8016618:	68fb      	ldr	r3, [r7, #12]
 801661a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801661e:	2b00      	cmp	r3, #0
 8016620:	d001      	beq.n	8016626 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8016622:	2300      	movs	r3, #0
 8016624:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8016626:	7979      	ldrb	r1, [r7, #5]
 8016628:	7e3b      	ldrb	r3, [r7, #24]
 801662a:	9303      	str	r3, [sp, #12]
 801662c:	88fb      	ldrh	r3, [r7, #6]
 801662e:	9302      	str	r3, [sp, #8]
 8016630:	68bb      	ldr	r3, [r7, #8]
 8016632:	9301      	str	r3, [sp, #4]
 8016634:	2301      	movs	r3, #1
 8016636:	9300      	str	r3, [sp, #0]
 8016638:	2302      	movs	r3, #2
 801663a:	2200      	movs	r2, #0
 801663c:	68f8      	ldr	r0, [r7, #12]
 801663e:	f006 f95e 	bl	801c8fe <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8016642:	2300      	movs	r3, #0
}
 8016644:	4618      	mov	r0, r3
 8016646:	3710      	adds	r7, #16
 8016648:	46bd      	mov	sp, r7
 801664a:	bd80      	pop	{r7, pc}

0801664c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 801664c:	b580      	push	{r7, lr}
 801664e:	b088      	sub	sp, #32
 8016650:	af04      	add	r7, sp, #16
 8016652:	60f8      	str	r0, [r7, #12]
 8016654:	60b9      	str	r1, [r7, #8]
 8016656:	4611      	mov	r1, r2
 8016658:	461a      	mov	r2, r3
 801665a:	460b      	mov	r3, r1
 801665c:	80fb      	strh	r3, [r7, #6]
 801665e:	4613      	mov	r3, r2
 8016660:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8016662:	7979      	ldrb	r1, [r7, #5]
 8016664:	2300      	movs	r3, #0
 8016666:	9303      	str	r3, [sp, #12]
 8016668:	88fb      	ldrh	r3, [r7, #6]
 801666a:	9302      	str	r3, [sp, #8]
 801666c:	68bb      	ldr	r3, [r7, #8]
 801666e:	9301      	str	r3, [sp, #4]
 8016670:	2301      	movs	r3, #1
 8016672:	9300      	str	r3, [sp, #0]
 8016674:	2302      	movs	r3, #2
 8016676:	2201      	movs	r2, #1
 8016678:	68f8      	ldr	r0, [r7, #12]
 801667a:	f006 f940 	bl	801c8fe <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 801667e:	2300      	movs	r3, #0
}
 8016680:	4618      	mov	r0, r3
 8016682:	3710      	adds	r7, #16
 8016684:	46bd      	mov	sp, r7
 8016686:	bd80      	pop	{r7, pc}

08016688 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8016688:	b580      	push	{r7, lr}
 801668a:	b086      	sub	sp, #24
 801668c:	af04      	add	r7, sp, #16
 801668e:	6078      	str	r0, [r7, #4]
 8016690:	4608      	mov	r0, r1
 8016692:	4611      	mov	r1, r2
 8016694:	461a      	mov	r2, r3
 8016696:	4603      	mov	r3, r0
 8016698:	70fb      	strb	r3, [r7, #3]
 801669a:	460b      	mov	r3, r1
 801669c:	70bb      	strb	r3, [r7, #2]
 801669e:	4613      	mov	r3, r2
 80166a0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80166a2:	7878      	ldrb	r0, [r7, #1]
 80166a4:	78ba      	ldrb	r2, [r7, #2]
 80166a6:	78f9      	ldrb	r1, [r7, #3]
 80166a8:	8b3b      	ldrh	r3, [r7, #24]
 80166aa:	9302      	str	r3, [sp, #8]
 80166ac:	7d3b      	ldrb	r3, [r7, #20]
 80166ae:	9301      	str	r3, [sp, #4]
 80166b0:	7c3b      	ldrb	r3, [r7, #16]
 80166b2:	9300      	str	r3, [sp, #0]
 80166b4:	4603      	mov	r3, r0
 80166b6:	6878      	ldr	r0, [r7, #4]
 80166b8:	f006 f8d3 	bl	801c862 <USBH_LL_OpenPipe>

  return USBH_OK;
 80166bc:	2300      	movs	r3, #0
}
 80166be:	4618      	mov	r0, r3
 80166c0:	3708      	adds	r7, #8
 80166c2:	46bd      	mov	sp, r7
 80166c4:	bd80      	pop	{r7, pc}

080166c6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80166c6:	b580      	push	{r7, lr}
 80166c8:	b082      	sub	sp, #8
 80166ca:	af00      	add	r7, sp, #0
 80166cc:	6078      	str	r0, [r7, #4]
 80166ce:	460b      	mov	r3, r1
 80166d0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80166d2:	78fb      	ldrb	r3, [r7, #3]
 80166d4:	4619      	mov	r1, r3
 80166d6:	6878      	ldr	r0, [r7, #4]
 80166d8:	f006 f8f2 	bl	801c8c0 <USBH_LL_ClosePipe>

  return USBH_OK;
 80166dc:	2300      	movs	r3, #0
}
 80166de:	4618      	mov	r0, r3
 80166e0:	3708      	adds	r7, #8
 80166e2:	46bd      	mov	sp, r7
 80166e4:	bd80      	pop	{r7, pc}

080166e6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80166e6:	b580      	push	{r7, lr}
 80166e8:	b084      	sub	sp, #16
 80166ea:	af00      	add	r7, sp, #0
 80166ec:	6078      	str	r0, [r7, #4]
 80166ee:	460b      	mov	r3, r1
 80166f0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80166f2:	6878      	ldr	r0, [r7, #4]
 80166f4:	f000 f836 	bl	8016764 <USBH_GetFreePipe>
 80166f8:	4603      	mov	r3, r0
 80166fa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80166fc:	89fb      	ldrh	r3, [r7, #14]
 80166fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016702:	4293      	cmp	r3, r2
 8016704:	d00a      	beq.n	801671c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8016706:	78fa      	ldrb	r2, [r7, #3]
 8016708:	89fb      	ldrh	r3, [r7, #14]
 801670a:	f003 030f 	and.w	r3, r3, #15
 801670e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8016712:	6879      	ldr	r1, [r7, #4]
 8016714:	33e0      	adds	r3, #224	; 0xe0
 8016716:	009b      	lsls	r3, r3, #2
 8016718:	440b      	add	r3, r1
 801671a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 801671c:	89fb      	ldrh	r3, [r7, #14]
 801671e:	b2db      	uxtb	r3, r3
}
 8016720:	4618      	mov	r0, r3
 8016722:	3710      	adds	r7, #16
 8016724:	46bd      	mov	sp, r7
 8016726:	bd80      	pop	{r7, pc}

08016728 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8016728:	b480      	push	{r7}
 801672a:	b083      	sub	sp, #12
 801672c:	af00      	add	r7, sp, #0
 801672e:	6078      	str	r0, [r7, #4]
 8016730:	460b      	mov	r3, r1
 8016732:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8016734:	78fb      	ldrb	r3, [r7, #3]
 8016736:	2b0a      	cmp	r3, #10
 8016738:	d80d      	bhi.n	8016756 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 801673a:	78fb      	ldrb	r3, [r7, #3]
 801673c:	687a      	ldr	r2, [r7, #4]
 801673e:	33e0      	adds	r3, #224	; 0xe0
 8016740:	009b      	lsls	r3, r3, #2
 8016742:	4413      	add	r3, r2
 8016744:	685a      	ldr	r2, [r3, #4]
 8016746:	78fb      	ldrb	r3, [r7, #3]
 8016748:	f3c2 020e 	ubfx	r2, r2, #0, #15
 801674c:	6879      	ldr	r1, [r7, #4]
 801674e:	33e0      	adds	r3, #224	; 0xe0
 8016750:	009b      	lsls	r3, r3, #2
 8016752:	440b      	add	r3, r1
 8016754:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8016756:	2300      	movs	r3, #0
}
 8016758:	4618      	mov	r0, r3
 801675a:	370c      	adds	r7, #12
 801675c:	46bd      	mov	sp, r7
 801675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016762:	4770      	bx	lr

08016764 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8016764:	b480      	push	{r7}
 8016766:	b085      	sub	sp, #20
 8016768:	af00      	add	r7, sp, #0
 801676a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 801676c:	2300      	movs	r3, #0
 801676e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8016770:	2300      	movs	r3, #0
 8016772:	73fb      	strb	r3, [r7, #15]
 8016774:	e00f      	b.n	8016796 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8016776:	7bfb      	ldrb	r3, [r7, #15]
 8016778:	687a      	ldr	r2, [r7, #4]
 801677a:	33e0      	adds	r3, #224	; 0xe0
 801677c:	009b      	lsls	r3, r3, #2
 801677e:	4413      	add	r3, r2
 8016780:	685b      	ldr	r3, [r3, #4]
 8016782:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016786:	2b00      	cmp	r3, #0
 8016788:	d102      	bne.n	8016790 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 801678a:	7bfb      	ldrb	r3, [r7, #15]
 801678c:	b29b      	uxth	r3, r3
 801678e:	e007      	b.n	80167a0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8016790:	7bfb      	ldrb	r3, [r7, #15]
 8016792:	3301      	adds	r3, #1
 8016794:	73fb      	strb	r3, [r7, #15]
 8016796:	7bfb      	ldrb	r3, [r7, #15]
 8016798:	2b0a      	cmp	r3, #10
 801679a:	d9ec      	bls.n	8016776 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 801679c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80167a0:	4618      	mov	r0, r3
 80167a2:	3714      	adds	r7, #20
 80167a4:	46bd      	mov	sp, r7
 80167a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167aa:	4770      	bx	lr

080167ac <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80167ac:	b580      	push	{r7, lr}
 80167ae:	b084      	sub	sp, #16
 80167b0:	af00      	add	r7, sp, #0
 80167b2:	4603      	mov	r3, r0
 80167b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80167b6:	79fb      	ldrb	r3, [r7, #7]
 80167b8:	4a08      	ldr	r2, [pc, #32]	; (80167dc <disk_status+0x30>)
 80167ba:	009b      	lsls	r3, r3, #2
 80167bc:	4413      	add	r3, r2
 80167be:	685b      	ldr	r3, [r3, #4]
 80167c0:	685b      	ldr	r3, [r3, #4]
 80167c2:	79fa      	ldrb	r2, [r7, #7]
 80167c4:	4905      	ldr	r1, [pc, #20]	; (80167dc <disk_status+0x30>)
 80167c6:	440a      	add	r2, r1
 80167c8:	7a12      	ldrb	r2, [r2, #8]
 80167ca:	4610      	mov	r0, r2
 80167cc:	4798      	blx	r3
 80167ce:	4603      	mov	r3, r0
 80167d0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80167d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80167d4:	4618      	mov	r0, r3
 80167d6:	3710      	adds	r7, #16
 80167d8:	46bd      	mov	sp, r7
 80167da:	bd80      	pop	{r7, pc}
 80167dc:	2000049c 	.word	0x2000049c

080167e0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80167e0:	b580      	push	{r7, lr}
 80167e2:	b084      	sub	sp, #16
 80167e4:	af00      	add	r7, sp, #0
 80167e6:	4603      	mov	r3, r0
 80167e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80167ea:	2300      	movs	r3, #0
 80167ec:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80167ee:	79fb      	ldrb	r3, [r7, #7]
 80167f0:	4a0d      	ldr	r2, [pc, #52]	; (8016828 <disk_initialize+0x48>)
 80167f2:	5cd3      	ldrb	r3, [r2, r3]
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d111      	bne.n	801681c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80167f8:	79fb      	ldrb	r3, [r7, #7]
 80167fa:	4a0b      	ldr	r2, [pc, #44]	; (8016828 <disk_initialize+0x48>)
 80167fc:	2101      	movs	r1, #1
 80167fe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8016800:	79fb      	ldrb	r3, [r7, #7]
 8016802:	4a09      	ldr	r2, [pc, #36]	; (8016828 <disk_initialize+0x48>)
 8016804:	009b      	lsls	r3, r3, #2
 8016806:	4413      	add	r3, r2
 8016808:	685b      	ldr	r3, [r3, #4]
 801680a:	681b      	ldr	r3, [r3, #0]
 801680c:	79fa      	ldrb	r2, [r7, #7]
 801680e:	4906      	ldr	r1, [pc, #24]	; (8016828 <disk_initialize+0x48>)
 8016810:	440a      	add	r2, r1
 8016812:	7a12      	ldrb	r2, [r2, #8]
 8016814:	4610      	mov	r0, r2
 8016816:	4798      	blx	r3
 8016818:	4603      	mov	r3, r0
 801681a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801681c:	7bfb      	ldrb	r3, [r7, #15]
}
 801681e:	4618      	mov	r0, r3
 8016820:	3710      	adds	r7, #16
 8016822:	46bd      	mov	sp, r7
 8016824:	bd80      	pop	{r7, pc}
 8016826:	bf00      	nop
 8016828:	2000049c 	.word	0x2000049c

0801682c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801682c:	b590      	push	{r4, r7, lr}
 801682e:	b087      	sub	sp, #28
 8016830:	af00      	add	r7, sp, #0
 8016832:	60b9      	str	r1, [r7, #8]
 8016834:	607a      	str	r2, [r7, #4]
 8016836:	603b      	str	r3, [r7, #0]
 8016838:	4603      	mov	r3, r0
 801683a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801683c:	7bfb      	ldrb	r3, [r7, #15]
 801683e:	4a0a      	ldr	r2, [pc, #40]	; (8016868 <disk_read+0x3c>)
 8016840:	009b      	lsls	r3, r3, #2
 8016842:	4413      	add	r3, r2
 8016844:	685b      	ldr	r3, [r3, #4]
 8016846:	689c      	ldr	r4, [r3, #8]
 8016848:	7bfb      	ldrb	r3, [r7, #15]
 801684a:	4a07      	ldr	r2, [pc, #28]	; (8016868 <disk_read+0x3c>)
 801684c:	4413      	add	r3, r2
 801684e:	7a18      	ldrb	r0, [r3, #8]
 8016850:	683b      	ldr	r3, [r7, #0]
 8016852:	687a      	ldr	r2, [r7, #4]
 8016854:	68b9      	ldr	r1, [r7, #8]
 8016856:	47a0      	blx	r4
 8016858:	4603      	mov	r3, r0
 801685a:	75fb      	strb	r3, [r7, #23]
  return res;
 801685c:	7dfb      	ldrb	r3, [r7, #23]
}
 801685e:	4618      	mov	r0, r3
 8016860:	371c      	adds	r7, #28
 8016862:	46bd      	mov	sp, r7
 8016864:	bd90      	pop	{r4, r7, pc}
 8016866:	bf00      	nop
 8016868:	2000049c 	.word	0x2000049c

0801686c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801686c:	b590      	push	{r4, r7, lr}
 801686e:	b087      	sub	sp, #28
 8016870:	af00      	add	r7, sp, #0
 8016872:	60b9      	str	r1, [r7, #8]
 8016874:	607a      	str	r2, [r7, #4]
 8016876:	603b      	str	r3, [r7, #0]
 8016878:	4603      	mov	r3, r0
 801687a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801687c:	7bfb      	ldrb	r3, [r7, #15]
 801687e:	4a0a      	ldr	r2, [pc, #40]	; (80168a8 <disk_write+0x3c>)
 8016880:	009b      	lsls	r3, r3, #2
 8016882:	4413      	add	r3, r2
 8016884:	685b      	ldr	r3, [r3, #4]
 8016886:	68dc      	ldr	r4, [r3, #12]
 8016888:	7bfb      	ldrb	r3, [r7, #15]
 801688a:	4a07      	ldr	r2, [pc, #28]	; (80168a8 <disk_write+0x3c>)
 801688c:	4413      	add	r3, r2
 801688e:	7a18      	ldrb	r0, [r3, #8]
 8016890:	683b      	ldr	r3, [r7, #0]
 8016892:	687a      	ldr	r2, [r7, #4]
 8016894:	68b9      	ldr	r1, [r7, #8]
 8016896:	47a0      	blx	r4
 8016898:	4603      	mov	r3, r0
 801689a:	75fb      	strb	r3, [r7, #23]
  return res;
 801689c:	7dfb      	ldrb	r3, [r7, #23]
}
 801689e:	4618      	mov	r0, r3
 80168a0:	371c      	adds	r7, #28
 80168a2:	46bd      	mov	sp, r7
 80168a4:	bd90      	pop	{r4, r7, pc}
 80168a6:	bf00      	nop
 80168a8:	2000049c 	.word	0x2000049c

080168ac <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80168ac:	b580      	push	{r7, lr}
 80168ae:	b084      	sub	sp, #16
 80168b0:	af00      	add	r7, sp, #0
 80168b2:	4603      	mov	r3, r0
 80168b4:	603a      	str	r2, [r7, #0]
 80168b6:	71fb      	strb	r3, [r7, #7]
 80168b8:	460b      	mov	r3, r1
 80168ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80168bc:	79fb      	ldrb	r3, [r7, #7]
 80168be:	4a09      	ldr	r2, [pc, #36]	; (80168e4 <disk_ioctl+0x38>)
 80168c0:	009b      	lsls	r3, r3, #2
 80168c2:	4413      	add	r3, r2
 80168c4:	685b      	ldr	r3, [r3, #4]
 80168c6:	691b      	ldr	r3, [r3, #16]
 80168c8:	79fa      	ldrb	r2, [r7, #7]
 80168ca:	4906      	ldr	r1, [pc, #24]	; (80168e4 <disk_ioctl+0x38>)
 80168cc:	440a      	add	r2, r1
 80168ce:	7a10      	ldrb	r0, [r2, #8]
 80168d0:	79b9      	ldrb	r1, [r7, #6]
 80168d2:	683a      	ldr	r2, [r7, #0]
 80168d4:	4798      	blx	r3
 80168d6:	4603      	mov	r3, r0
 80168d8:	73fb      	strb	r3, [r7, #15]
  return res;
 80168da:	7bfb      	ldrb	r3, [r7, #15]
}
 80168dc:	4618      	mov	r0, r3
 80168de:	3710      	adds	r7, #16
 80168e0:	46bd      	mov	sp, r7
 80168e2:	bd80      	pop	{r7, pc}
 80168e4:	2000049c 	.word	0x2000049c

080168e8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80168e8:	b480      	push	{r7}
 80168ea:	b085      	sub	sp, #20
 80168ec:	af00      	add	r7, sp, #0
 80168ee:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	3301      	adds	r3, #1
 80168f4:	781b      	ldrb	r3, [r3, #0]
 80168f6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80168f8:	89fb      	ldrh	r3, [r7, #14]
 80168fa:	021b      	lsls	r3, r3, #8
 80168fc:	b21a      	sxth	r2, r3
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	781b      	ldrb	r3, [r3, #0]
 8016902:	b21b      	sxth	r3, r3
 8016904:	4313      	orrs	r3, r2
 8016906:	b21b      	sxth	r3, r3
 8016908:	81fb      	strh	r3, [r7, #14]
	return rv;
 801690a:	89fb      	ldrh	r3, [r7, #14]
}
 801690c:	4618      	mov	r0, r3
 801690e:	3714      	adds	r7, #20
 8016910:	46bd      	mov	sp, r7
 8016912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016916:	4770      	bx	lr

08016918 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8016918:	b480      	push	{r7}
 801691a:	b085      	sub	sp, #20
 801691c:	af00      	add	r7, sp, #0
 801691e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	3303      	adds	r3, #3
 8016924:	781b      	ldrb	r3, [r3, #0]
 8016926:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8016928:	68fb      	ldr	r3, [r7, #12]
 801692a:	021b      	lsls	r3, r3, #8
 801692c:	687a      	ldr	r2, [r7, #4]
 801692e:	3202      	adds	r2, #2
 8016930:	7812      	ldrb	r2, [r2, #0]
 8016932:	4313      	orrs	r3, r2
 8016934:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8016936:	68fb      	ldr	r3, [r7, #12]
 8016938:	021b      	lsls	r3, r3, #8
 801693a:	687a      	ldr	r2, [r7, #4]
 801693c:	3201      	adds	r2, #1
 801693e:	7812      	ldrb	r2, [r2, #0]
 8016940:	4313      	orrs	r3, r2
 8016942:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	021b      	lsls	r3, r3, #8
 8016948:	687a      	ldr	r2, [r7, #4]
 801694a:	7812      	ldrb	r2, [r2, #0]
 801694c:	4313      	orrs	r3, r2
 801694e:	60fb      	str	r3, [r7, #12]
	return rv;
 8016950:	68fb      	ldr	r3, [r7, #12]
}
 8016952:	4618      	mov	r0, r3
 8016954:	3714      	adds	r7, #20
 8016956:	46bd      	mov	sp, r7
 8016958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801695c:	4770      	bx	lr

0801695e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801695e:	b480      	push	{r7}
 8016960:	b083      	sub	sp, #12
 8016962:	af00      	add	r7, sp, #0
 8016964:	6078      	str	r0, [r7, #4]
 8016966:	460b      	mov	r3, r1
 8016968:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	1c5a      	adds	r2, r3, #1
 801696e:	607a      	str	r2, [r7, #4]
 8016970:	887a      	ldrh	r2, [r7, #2]
 8016972:	b2d2      	uxtb	r2, r2
 8016974:	701a      	strb	r2, [r3, #0]
 8016976:	887b      	ldrh	r3, [r7, #2]
 8016978:	0a1b      	lsrs	r3, r3, #8
 801697a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	1c5a      	adds	r2, r3, #1
 8016980:	607a      	str	r2, [r7, #4]
 8016982:	887a      	ldrh	r2, [r7, #2]
 8016984:	b2d2      	uxtb	r2, r2
 8016986:	701a      	strb	r2, [r3, #0]
}
 8016988:	bf00      	nop
 801698a:	370c      	adds	r7, #12
 801698c:	46bd      	mov	sp, r7
 801698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016992:	4770      	bx	lr

08016994 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8016994:	b480      	push	{r7}
 8016996:	b083      	sub	sp, #12
 8016998:	af00      	add	r7, sp, #0
 801699a:	6078      	str	r0, [r7, #4]
 801699c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	1c5a      	adds	r2, r3, #1
 80169a2:	607a      	str	r2, [r7, #4]
 80169a4:	683a      	ldr	r2, [r7, #0]
 80169a6:	b2d2      	uxtb	r2, r2
 80169a8:	701a      	strb	r2, [r3, #0]
 80169aa:	683b      	ldr	r3, [r7, #0]
 80169ac:	0a1b      	lsrs	r3, r3, #8
 80169ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	1c5a      	adds	r2, r3, #1
 80169b4:	607a      	str	r2, [r7, #4]
 80169b6:	683a      	ldr	r2, [r7, #0]
 80169b8:	b2d2      	uxtb	r2, r2
 80169ba:	701a      	strb	r2, [r3, #0]
 80169bc:	683b      	ldr	r3, [r7, #0]
 80169be:	0a1b      	lsrs	r3, r3, #8
 80169c0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	1c5a      	adds	r2, r3, #1
 80169c6:	607a      	str	r2, [r7, #4]
 80169c8:	683a      	ldr	r2, [r7, #0]
 80169ca:	b2d2      	uxtb	r2, r2
 80169cc:	701a      	strb	r2, [r3, #0]
 80169ce:	683b      	ldr	r3, [r7, #0]
 80169d0:	0a1b      	lsrs	r3, r3, #8
 80169d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	1c5a      	adds	r2, r3, #1
 80169d8:	607a      	str	r2, [r7, #4]
 80169da:	683a      	ldr	r2, [r7, #0]
 80169dc:	b2d2      	uxtb	r2, r2
 80169de:	701a      	strb	r2, [r3, #0]
}
 80169e0:	bf00      	nop
 80169e2:	370c      	adds	r7, #12
 80169e4:	46bd      	mov	sp, r7
 80169e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ea:	4770      	bx	lr

080169ec <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80169ec:	b480      	push	{r7}
 80169ee:	b087      	sub	sp, #28
 80169f0:	af00      	add	r7, sp, #0
 80169f2:	60f8      	str	r0, [r7, #12]
 80169f4:	60b9      	str	r1, [r7, #8]
 80169f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80169fc:	68bb      	ldr	r3, [r7, #8]
 80169fe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d00d      	beq.n	8016a22 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8016a06:	693a      	ldr	r2, [r7, #16]
 8016a08:	1c53      	adds	r3, r2, #1
 8016a0a:	613b      	str	r3, [r7, #16]
 8016a0c:	697b      	ldr	r3, [r7, #20]
 8016a0e:	1c59      	adds	r1, r3, #1
 8016a10:	6179      	str	r1, [r7, #20]
 8016a12:	7812      	ldrb	r2, [r2, #0]
 8016a14:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	3b01      	subs	r3, #1
 8016a1a:	607b      	str	r3, [r7, #4]
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d1f1      	bne.n	8016a06 <mem_cpy+0x1a>
	}
}
 8016a22:	bf00      	nop
 8016a24:	371c      	adds	r7, #28
 8016a26:	46bd      	mov	sp, r7
 8016a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a2c:	4770      	bx	lr

08016a2e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8016a2e:	b480      	push	{r7}
 8016a30:	b087      	sub	sp, #28
 8016a32:	af00      	add	r7, sp, #0
 8016a34:	60f8      	str	r0, [r7, #12]
 8016a36:	60b9      	str	r1, [r7, #8]
 8016a38:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8016a3e:	697b      	ldr	r3, [r7, #20]
 8016a40:	1c5a      	adds	r2, r3, #1
 8016a42:	617a      	str	r2, [r7, #20]
 8016a44:	68ba      	ldr	r2, [r7, #8]
 8016a46:	b2d2      	uxtb	r2, r2
 8016a48:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	3b01      	subs	r3, #1
 8016a4e:	607b      	str	r3, [r7, #4]
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d1f3      	bne.n	8016a3e <mem_set+0x10>
}
 8016a56:	bf00      	nop
 8016a58:	371c      	adds	r7, #28
 8016a5a:	46bd      	mov	sp, r7
 8016a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a60:	4770      	bx	lr

08016a62 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8016a62:	b480      	push	{r7}
 8016a64:	b089      	sub	sp, #36	; 0x24
 8016a66:	af00      	add	r7, sp, #0
 8016a68:	60f8      	str	r0, [r7, #12]
 8016a6a:	60b9      	str	r1, [r7, #8]
 8016a6c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	61fb      	str	r3, [r7, #28]
 8016a72:	68bb      	ldr	r3, [r7, #8]
 8016a74:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8016a76:	2300      	movs	r3, #0
 8016a78:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8016a7a:	69fb      	ldr	r3, [r7, #28]
 8016a7c:	1c5a      	adds	r2, r3, #1
 8016a7e:	61fa      	str	r2, [r7, #28]
 8016a80:	781b      	ldrb	r3, [r3, #0]
 8016a82:	4619      	mov	r1, r3
 8016a84:	69bb      	ldr	r3, [r7, #24]
 8016a86:	1c5a      	adds	r2, r3, #1
 8016a88:	61ba      	str	r2, [r7, #24]
 8016a8a:	781b      	ldrb	r3, [r3, #0]
 8016a8c:	1acb      	subs	r3, r1, r3
 8016a8e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	3b01      	subs	r3, #1
 8016a94:	607b      	str	r3, [r7, #4]
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d002      	beq.n	8016aa2 <mem_cmp+0x40>
 8016a9c:	697b      	ldr	r3, [r7, #20]
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d0eb      	beq.n	8016a7a <mem_cmp+0x18>

	return r;
 8016aa2:	697b      	ldr	r3, [r7, #20]
}
 8016aa4:	4618      	mov	r0, r3
 8016aa6:	3724      	adds	r7, #36	; 0x24
 8016aa8:	46bd      	mov	sp, r7
 8016aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aae:	4770      	bx	lr

08016ab0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8016ab0:	b480      	push	{r7}
 8016ab2:	b083      	sub	sp, #12
 8016ab4:	af00      	add	r7, sp, #0
 8016ab6:	6078      	str	r0, [r7, #4]
 8016ab8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8016aba:	e002      	b.n	8016ac2 <chk_chr+0x12>
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	3301      	adds	r3, #1
 8016ac0:	607b      	str	r3, [r7, #4]
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	781b      	ldrb	r3, [r3, #0]
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d005      	beq.n	8016ad6 <chk_chr+0x26>
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	781b      	ldrb	r3, [r3, #0]
 8016ace:	461a      	mov	r2, r3
 8016ad0:	683b      	ldr	r3, [r7, #0]
 8016ad2:	4293      	cmp	r3, r2
 8016ad4:	d1f2      	bne.n	8016abc <chk_chr+0xc>
	return *str;
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	781b      	ldrb	r3, [r3, #0]
}
 8016ada:	4618      	mov	r0, r3
 8016adc:	370c      	adds	r7, #12
 8016ade:	46bd      	mov	sp, r7
 8016ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ae4:	4770      	bx	lr

08016ae6 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8016ae6:	b580      	push	{r7, lr}
 8016ae8:	b082      	sub	sp, #8
 8016aea:	af00      	add	r7, sp, #0
 8016aec:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d009      	beq.n	8016b08 <lock_fs+0x22>
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	691b      	ldr	r3, [r3, #16]
 8016af8:	4618      	mov	r0, r3
 8016afa:	f002 f9c5 	bl	8018e88 <ff_req_grant>
 8016afe:	4603      	mov	r3, r0
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d001      	beq.n	8016b08 <lock_fs+0x22>
 8016b04:	2301      	movs	r3, #1
 8016b06:	e000      	b.n	8016b0a <lock_fs+0x24>
 8016b08:	2300      	movs	r3, #0
}
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	3708      	adds	r7, #8
 8016b0e:	46bd      	mov	sp, r7
 8016b10:	bd80      	pop	{r7, pc}

08016b12 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8016b12:	b580      	push	{r7, lr}
 8016b14:	b082      	sub	sp, #8
 8016b16:	af00      	add	r7, sp, #0
 8016b18:	6078      	str	r0, [r7, #4]
 8016b1a:	460b      	mov	r3, r1
 8016b1c:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d00d      	beq.n	8016b40 <unlock_fs+0x2e>
 8016b24:	78fb      	ldrb	r3, [r7, #3]
 8016b26:	2b0c      	cmp	r3, #12
 8016b28:	d00a      	beq.n	8016b40 <unlock_fs+0x2e>
 8016b2a:	78fb      	ldrb	r3, [r7, #3]
 8016b2c:	2b0b      	cmp	r3, #11
 8016b2e:	d007      	beq.n	8016b40 <unlock_fs+0x2e>
 8016b30:	78fb      	ldrb	r3, [r7, #3]
 8016b32:	2b0f      	cmp	r3, #15
 8016b34:	d004      	beq.n	8016b40 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	691b      	ldr	r3, [r3, #16]
 8016b3a:	4618      	mov	r0, r3
 8016b3c:	f002 f9b9 	bl	8018eb2 <ff_rel_grant>
	}
}
 8016b40:	bf00      	nop
 8016b42:	3708      	adds	r7, #8
 8016b44:	46bd      	mov	sp, r7
 8016b46:	bd80      	pop	{r7, pc}

08016b48 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8016b48:	b480      	push	{r7}
 8016b4a:	b085      	sub	sp, #20
 8016b4c:	af00      	add	r7, sp, #0
 8016b4e:	6078      	str	r0, [r7, #4]
 8016b50:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016b52:	2300      	movs	r3, #0
 8016b54:	60bb      	str	r3, [r7, #8]
 8016b56:	68bb      	ldr	r3, [r7, #8]
 8016b58:	60fb      	str	r3, [r7, #12]
 8016b5a:	e029      	b.n	8016bb0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8016b5c:	4a27      	ldr	r2, [pc, #156]	; (8016bfc <chk_lock+0xb4>)
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	011b      	lsls	r3, r3, #4
 8016b62:	4413      	add	r3, r2
 8016b64:	681b      	ldr	r3, [r3, #0]
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d01d      	beq.n	8016ba6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016b6a:	4a24      	ldr	r2, [pc, #144]	; (8016bfc <chk_lock+0xb4>)
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	011b      	lsls	r3, r3, #4
 8016b70:	4413      	add	r3, r2
 8016b72:	681a      	ldr	r2, [r3, #0]
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	429a      	cmp	r2, r3
 8016b7a:	d116      	bne.n	8016baa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8016b7c:	4a1f      	ldr	r2, [pc, #124]	; (8016bfc <chk_lock+0xb4>)
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	011b      	lsls	r3, r3, #4
 8016b82:	4413      	add	r3, r2
 8016b84:	3304      	adds	r3, #4
 8016b86:	681a      	ldr	r2, [r3, #0]
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016b8c:	429a      	cmp	r2, r3
 8016b8e:	d10c      	bne.n	8016baa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8016b90:	4a1a      	ldr	r2, [pc, #104]	; (8016bfc <chk_lock+0xb4>)
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	011b      	lsls	r3, r3, #4
 8016b96:	4413      	add	r3, r2
 8016b98:	3308      	adds	r3, #8
 8016b9a:	681a      	ldr	r2, [r3, #0]
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8016ba0:	429a      	cmp	r2, r3
 8016ba2:	d102      	bne.n	8016baa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8016ba4:	e007      	b.n	8016bb6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8016ba6:	2301      	movs	r3, #1
 8016ba8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	3301      	adds	r3, #1
 8016bae:	60fb      	str	r3, [r7, #12]
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	2b01      	cmp	r3, #1
 8016bb4:	d9d2      	bls.n	8016b5c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	2b02      	cmp	r3, #2
 8016bba:	d109      	bne.n	8016bd0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8016bbc:	68bb      	ldr	r3, [r7, #8]
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d102      	bne.n	8016bc8 <chk_lock+0x80>
 8016bc2:	683b      	ldr	r3, [r7, #0]
 8016bc4:	2b02      	cmp	r3, #2
 8016bc6:	d101      	bne.n	8016bcc <chk_lock+0x84>
 8016bc8:	2300      	movs	r3, #0
 8016bca:	e010      	b.n	8016bee <chk_lock+0xa6>
 8016bcc:	2312      	movs	r3, #18
 8016bce:	e00e      	b.n	8016bee <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8016bd0:	683b      	ldr	r3, [r7, #0]
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d108      	bne.n	8016be8 <chk_lock+0xa0>
 8016bd6:	4a09      	ldr	r2, [pc, #36]	; (8016bfc <chk_lock+0xb4>)
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	011b      	lsls	r3, r3, #4
 8016bdc:	4413      	add	r3, r2
 8016bde:	330c      	adds	r3, #12
 8016be0:	881b      	ldrh	r3, [r3, #0]
 8016be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016be6:	d101      	bne.n	8016bec <chk_lock+0xa4>
 8016be8:	2310      	movs	r3, #16
 8016bea:	e000      	b.n	8016bee <chk_lock+0xa6>
 8016bec:	2300      	movs	r3, #0
}
 8016bee:	4618      	mov	r0, r3
 8016bf0:	3714      	adds	r7, #20
 8016bf2:	46bd      	mov	sp, r7
 8016bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bf8:	4770      	bx	lr
 8016bfa:	bf00      	nop
 8016bfc:	2000047c 	.word	0x2000047c

08016c00 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8016c00:	b480      	push	{r7}
 8016c02:	b083      	sub	sp, #12
 8016c04:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016c06:	2300      	movs	r3, #0
 8016c08:	607b      	str	r3, [r7, #4]
 8016c0a:	e002      	b.n	8016c12 <enq_lock+0x12>
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	3301      	adds	r3, #1
 8016c10:	607b      	str	r3, [r7, #4]
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	2b01      	cmp	r3, #1
 8016c16:	d806      	bhi.n	8016c26 <enq_lock+0x26>
 8016c18:	4a09      	ldr	r2, [pc, #36]	; (8016c40 <enq_lock+0x40>)
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	011b      	lsls	r3, r3, #4
 8016c1e:	4413      	add	r3, r2
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d1f2      	bne.n	8016c0c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	2b02      	cmp	r3, #2
 8016c2a:	bf14      	ite	ne
 8016c2c:	2301      	movne	r3, #1
 8016c2e:	2300      	moveq	r3, #0
 8016c30:	b2db      	uxtb	r3, r3
}
 8016c32:	4618      	mov	r0, r3
 8016c34:	370c      	adds	r7, #12
 8016c36:	46bd      	mov	sp, r7
 8016c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c3c:	4770      	bx	lr
 8016c3e:	bf00      	nop
 8016c40:	2000047c 	.word	0x2000047c

08016c44 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8016c44:	b480      	push	{r7}
 8016c46:	b085      	sub	sp, #20
 8016c48:	af00      	add	r7, sp, #0
 8016c4a:	6078      	str	r0, [r7, #4]
 8016c4c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8016c4e:	2300      	movs	r3, #0
 8016c50:	60fb      	str	r3, [r7, #12]
 8016c52:	e01f      	b.n	8016c94 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8016c54:	4a41      	ldr	r2, [pc, #260]	; (8016d5c <inc_lock+0x118>)
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	011b      	lsls	r3, r3, #4
 8016c5a:	4413      	add	r3, r2
 8016c5c:	681a      	ldr	r2, [r3, #0]
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	429a      	cmp	r2, r3
 8016c64:	d113      	bne.n	8016c8e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8016c66:	4a3d      	ldr	r2, [pc, #244]	; (8016d5c <inc_lock+0x118>)
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	011b      	lsls	r3, r3, #4
 8016c6c:	4413      	add	r3, r2
 8016c6e:	3304      	adds	r3, #4
 8016c70:	681a      	ldr	r2, [r3, #0]
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8016c76:	429a      	cmp	r2, r3
 8016c78:	d109      	bne.n	8016c8e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8016c7a:	4a38      	ldr	r2, [pc, #224]	; (8016d5c <inc_lock+0x118>)
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	011b      	lsls	r3, r3, #4
 8016c80:	4413      	add	r3, r2
 8016c82:	3308      	adds	r3, #8
 8016c84:	681a      	ldr	r2, [r3, #0]
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8016c8a:	429a      	cmp	r2, r3
 8016c8c:	d006      	beq.n	8016c9c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	3301      	adds	r3, #1
 8016c92:	60fb      	str	r3, [r7, #12]
 8016c94:	68fb      	ldr	r3, [r7, #12]
 8016c96:	2b01      	cmp	r3, #1
 8016c98:	d9dc      	bls.n	8016c54 <inc_lock+0x10>
 8016c9a:	e000      	b.n	8016c9e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8016c9c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8016c9e:	68fb      	ldr	r3, [r7, #12]
 8016ca0:	2b02      	cmp	r3, #2
 8016ca2:	d132      	bne.n	8016d0a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016ca4:	2300      	movs	r3, #0
 8016ca6:	60fb      	str	r3, [r7, #12]
 8016ca8:	e002      	b.n	8016cb0 <inc_lock+0x6c>
 8016caa:	68fb      	ldr	r3, [r7, #12]
 8016cac:	3301      	adds	r3, #1
 8016cae:	60fb      	str	r3, [r7, #12]
 8016cb0:	68fb      	ldr	r3, [r7, #12]
 8016cb2:	2b01      	cmp	r3, #1
 8016cb4:	d806      	bhi.n	8016cc4 <inc_lock+0x80>
 8016cb6:	4a29      	ldr	r2, [pc, #164]	; (8016d5c <inc_lock+0x118>)
 8016cb8:	68fb      	ldr	r3, [r7, #12]
 8016cba:	011b      	lsls	r3, r3, #4
 8016cbc:	4413      	add	r3, r2
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	d1f2      	bne.n	8016caa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8016cc4:	68fb      	ldr	r3, [r7, #12]
 8016cc6:	2b02      	cmp	r3, #2
 8016cc8:	d101      	bne.n	8016cce <inc_lock+0x8a>
 8016cca:	2300      	movs	r3, #0
 8016ccc:	e040      	b.n	8016d50 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	681a      	ldr	r2, [r3, #0]
 8016cd2:	4922      	ldr	r1, [pc, #136]	; (8016d5c <inc_lock+0x118>)
 8016cd4:	68fb      	ldr	r3, [r7, #12]
 8016cd6:	011b      	lsls	r3, r3, #4
 8016cd8:	440b      	add	r3, r1
 8016cda:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	689a      	ldr	r2, [r3, #8]
 8016ce0:	491e      	ldr	r1, [pc, #120]	; (8016d5c <inc_lock+0x118>)
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	011b      	lsls	r3, r3, #4
 8016ce6:	440b      	add	r3, r1
 8016ce8:	3304      	adds	r3, #4
 8016cea:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	695a      	ldr	r2, [r3, #20]
 8016cf0:	491a      	ldr	r1, [pc, #104]	; (8016d5c <inc_lock+0x118>)
 8016cf2:	68fb      	ldr	r3, [r7, #12]
 8016cf4:	011b      	lsls	r3, r3, #4
 8016cf6:	440b      	add	r3, r1
 8016cf8:	3308      	adds	r3, #8
 8016cfa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8016cfc:	4a17      	ldr	r2, [pc, #92]	; (8016d5c <inc_lock+0x118>)
 8016cfe:	68fb      	ldr	r3, [r7, #12]
 8016d00:	011b      	lsls	r3, r3, #4
 8016d02:	4413      	add	r3, r2
 8016d04:	330c      	adds	r3, #12
 8016d06:	2200      	movs	r2, #0
 8016d08:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8016d0a:	683b      	ldr	r3, [r7, #0]
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	d009      	beq.n	8016d24 <inc_lock+0xe0>
 8016d10:	4a12      	ldr	r2, [pc, #72]	; (8016d5c <inc_lock+0x118>)
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	011b      	lsls	r3, r3, #4
 8016d16:	4413      	add	r3, r2
 8016d18:	330c      	adds	r3, #12
 8016d1a:	881b      	ldrh	r3, [r3, #0]
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d001      	beq.n	8016d24 <inc_lock+0xe0>
 8016d20:	2300      	movs	r3, #0
 8016d22:	e015      	b.n	8016d50 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8016d24:	683b      	ldr	r3, [r7, #0]
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d108      	bne.n	8016d3c <inc_lock+0xf8>
 8016d2a:	4a0c      	ldr	r2, [pc, #48]	; (8016d5c <inc_lock+0x118>)
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	011b      	lsls	r3, r3, #4
 8016d30:	4413      	add	r3, r2
 8016d32:	330c      	adds	r3, #12
 8016d34:	881b      	ldrh	r3, [r3, #0]
 8016d36:	3301      	adds	r3, #1
 8016d38:	b29a      	uxth	r2, r3
 8016d3a:	e001      	b.n	8016d40 <inc_lock+0xfc>
 8016d3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016d40:	4906      	ldr	r1, [pc, #24]	; (8016d5c <inc_lock+0x118>)
 8016d42:	68fb      	ldr	r3, [r7, #12]
 8016d44:	011b      	lsls	r3, r3, #4
 8016d46:	440b      	add	r3, r1
 8016d48:	330c      	adds	r3, #12
 8016d4a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8016d4c:	68fb      	ldr	r3, [r7, #12]
 8016d4e:	3301      	adds	r3, #1
}
 8016d50:	4618      	mov	r0, r3
 8016d52:	3714      	adds	r7, #20
 8016d54:	46bd      	mov	sp, r7
 8016d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d5a:	4770      	bx	lr
 8016d5c:	2000047c 	.word	0x2000047c

08016d60 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8016d60:	b480      	push	{r7}
 8016d62:	b085      	sub	sp, #20
 8016d64:	af00      	add	r7, sp, #0
 8016d66:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	3b01      	subs	r3, #1
 8016d6c:	607b      	str	r3, [r7, #4]
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	2b01      	cmp	r3, #1
 8016d72:	d825      	bhi.n	8016dc0 <dec_lock+0x60>
		n = Files[i].ctr;
 8016d74:	4a17      	ldr	r2, [pc, #92]	; (8016dd4 <dec_lock+0x74>)
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	011b      	lsls	r3, r3, #4
 8016d7a:	4413      	add	r3, r2
 8016d7c:	330c      	adds	r3, #12
 8016d7e:	881b      	ldrh	r3, [r3, #0]
 8016d80:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8016d82:	89fb      	ldrh	r3, [r7, #14]
 8016d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016d88:	d101      	bne.n	8016d8e <dec_lock+0x2e>
 8016d8a:	2300      	movs	r3, #0
 8016d8c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8016d8e:	89fb      	ldrh	r3, [r7, #14]
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d002      	beq.n	8016d9a <dec_lock+0x3a>
 8016d94:	89fb      	ldrh	r3, [r7, #14]
 8016d96:	3b01      	subs	r3, #1
 8016d98:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8016d9a:	4a0e      	ldr	r2, [pc, #56]	; (8016dd4 <dec_lock+0x74>)
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	011b      	lsls	r3, r3, #4
 8016da0:	4413      	add	r3, r2
 8016da2:	330c      	adds	r3, #12
 8016da4:	89fa      	ldrh	r2, [r7, #14]
 8016da6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8016da8:	89fb      	ldrh	r3, [r7, #14]
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d105      	bne.n	8016dba <dec_lock+0x5a>
 8016dae:	4a09      	ldr	r2, [pc, #36]	; (8016dd4 <dec_lock+0x74>)
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	011b      	lsls	r3, r3, #4
 8016db4:	4413      	add	r3, r2
 8016db6:	2200      	movs	r2, #0
 8016db8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8016dba:	2300      	movs	r3, #0
 8016dbc:	737b      	strb	r3, [r7, #13]
 8016dbe:	e001      	b.n	8016dc4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8016dc0:	2302      	movs	r3, #2
 8016dc2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8016dc4:	7b7b      	ldrb	r3, [r7, #13]
}
 8016dc6:	4618      	mov	r0, r3
 8016dc8:	3714      	adds	r7, #20
 8016dca:	46bd      	mov	sp, r7
 8016dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dd0:	4770      	bx	lr
 8016dd2:	bf00      	nop
 8016dd4:	2000047c 	.word	0x2000047c

08016dd8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8016dd8:	b480      	push	{r7}
 8016dda:	b085      	sub	sp, #20
 8016ddc:	af00      	add	r7, sp, #0
 8016dde:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8016de0:	2300      	movs	r3, #0
 8016de2:	60fb      	str	r3, [r7, #12]
 8016de4:	e010      	b.n	8016e08 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8016de6:	4a0d      	ldr	r2, [pc, #52]	; (8016e1c <clear_lock+0x44>)
 8016de8:	68fb      	ldr	r3, [r7, #12]
 8016dea:	011b      	lsls	r3, r3, #4
 8016dec:	4413      	add	r3, r2
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	687a      	ldr	r2, [r7, #4]
 8016df2:	429a      	cmp	r2, r3
 8016df4:	d105      	bne.n	8016e02 <clear_lock+0x2a>
 8016df6:	4a09      	ldr	r2, [pc, #36]	; (8016e1c <clear_lock+0x44>)
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	011b      	lsls	r3, r3, #4
 8016dfc:	4413      	add	r3, r2
 8016dfe:	2200      	movs	r2, #0
 8016e00:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8016e02:	68fb      	ldr	r3, [r7, #12]
 8016e04:	3301      	adds	r3, #1
 8016e06:	60fb      	str	r3, [r7, #12]
 8016e08:	68fb      	ldr	r3, [r7, #12]
 8016e0a:	2b01      	cmp	r3, #1
 8016e0c:	d9eb      	bls.n	8016de6 <clear_lock+0xe>
	}
}
 8016e0e:	bf00      	nop
 8016e10:	3714      	adds	r7, #20
 8016e12:	46bd      	mov	sp, r7
 8016e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e18:	4770      	bx	lr
 8016e1a:	bf00      	nop
 8016e1c:	2000047c 	.word	0x2000047c

08016e20 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8016e20:	b580      	push	{r7, lr}
 8016e22:	b086      	sub	sp, #24
 8016e24:	af00      	add	r7, sp, #0
 8016e26:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8016e28:	2300      	movs	r3, #0
 8016e2a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	78db      	ldrb	r3, [r3, #3]
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d034      	beq.n	8016e9e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016e38:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	7858      	ldrb	r0, [r3, #1]
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016e44:	2301      	movs	r3, #1
 8016e46:	697a      	ldr	r2, [r7, #20]
 8016e48:	f7ff fd10 	bl	801686c <disk_write>
 8016e4c:	4603      	mov	r3, r0
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d002      	beq.n	8016e58 <sync_window+0x38>
			res = FR_DISK_ERR;
 8016e52:	2301      	movs	r3, #1
 8016e54:	73fb      	strb	r3, [r7, #15]
 8016e56:	e022      	b.n	8016e9e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	2200      	movs	r2, #0
 8016e5c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016e62:	697a      	ldr	r2, [r7, #20]
 8016e64:	1ad2      	subs	r2, r2, r3
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	6a1b      	ldr	r3, [r3, #32]
 8016e6a:	429a      	cmp	r2, r3
 8016e6c:	d217      	bcs.n	8016e9e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	789b      	ldrb	r3, [r3, #2]
 8016e72:	613b      	str	r3, [r7, #16]
 8016e74:	e010      	b.n	8016e98 <sync_window+0x78>
					wsect += fs->fsize;
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	6a1b      	ldr	r3, [r3, #32]
 8016e7a:	697a      	ldr	r2, [r7, #20]
 8016e7c:	4413      	add	r3, r2
 8016e7e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	7858      	ldrb	r0, [r3, #1]
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016e8a:	2301      	movs	r3, #1
 8016e8c:	697a      	ldr	r2, [r7, #20]
 8016e8e:	f7ff fced 	bl	801686c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016e92:	693b      	ldr	r3, [r7, #16]
 8016e94:	3b01      	subs	r3, #1
 8016e96:	613b      	str	r3, [r7, #16]
 8016e98:	693b      	ldr	r3, [r7, #16]
 8016e9a:	2b01      	cmp	r3, #1
 8016e9c:	d8eb      	bhi.n	8016e76 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8016e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ea0:	4618      	mov	r0, r3
 8016ea2:	3718      	adds	r7, #24
 8016ea4:	46bd      	mov	sp, r7
 8016ea6:	bd80      	pop	{r7, pc}

08016ea8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8016ea8:	b580      	push	{r7, lr}
 8016eaa:	b084      	sub	sp, #16
 8016eac:	af00      	add	r7, sp, #0
 8016eae:	6078      	str	r0, [r7, #4]
 8016eb0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8016eb2:	2300      	movs	r3, #0
 8016eb4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016eba:	683a      	ldr	r2, [r7, #0]
 8016ebc:	429a      	cmp	r2, r3
 8016ebe:	d01b      	beq.n	8016ef8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8016ec0:	6878      	ldr	r0, [r7, #4]
 8016ec2:	f7ff ffad 	bl	8016e20 <sync_window>
 8016ec6:	4603      	mov	r3, r0
 8016ec8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8016eca:	7bfb      	ldrb	r3, [r7, #15]
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d113      	bne.n	8016ef8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	7858      	ldrb	r0, [r3, #1]
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016eda:	2301      	movs	r3, #1
 8016edc:	683a      	ldr	r2, [r7, #0]
 8016ede:	f7ff fca5 	bl	801682c <disk_read>
 8016ee2:	4603      	mov	r3, r0
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d004      	beq.n	8016ef2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8016ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8016eec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8016eee:	2301      	movs	r3, #1
 8016ef0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	683a      	ldr	r2, [r7, #0]
 8016ef6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8016ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8016efa:	4618      	mov	r0, r3
 8016efc:	3710      	adds	r7, #16
 8016efe:	46bd      	mov	sp, r7
 8016f00:	bd80      	pop	{r7, pc}
	...

08016f04 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8016f04:	b580      	push	{r7, lr}
 8016f06:	b084      	sub	sp, #16
 8016f08:	af00      	add	r7, sp, #0
 8016f0a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8016f0c:	6878      	ldr	r0, [r7, #4]
 8016f0e:	f7ff ff87 	bl	8016e20 <sync_window>
 8016f12:	4603      	mov	r3, r0
 8016f14:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8016f16:	7bfb      	ldrb	r3, [r7, #15]
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	d159      	bne.n	8016fd0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	781b      	ldrb	r3, [r3, #0]
 8016f20:	2b03      	cmp	r3, #3
 8016f22:	d149      	bne.n	8016fb8 <sync_fs+0xb4>
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	791b      	ldrb	r3, [r3, #4]
 8016f28:	2b01      	cmp	r3, #1
 8016f2a:	d145      	bne.n	8016fb8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	899b      	ldrh	r3, [r3, #12]
 8016f36:	461a      	mov	r2, r3
 8016f38:	2100      	movs	r1, #0
 8016f3a:	f7ff fd78 	bl	8016a2e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	3338      	adds	r3, #56	; 0x38
 8016f42:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016f46:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8016f4a:	4618      	mov	r0, r3
 8016f4c:	f7ff fd07 	bl	801695e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	3338      	adds	r3, #56	; 0x38
 8016f54:	4921      	ldr	r1, [pc, #132]	; (8016fdc <sync_fs+0xd8>)
 8016f56:	4618      	mov	r0, r3
 8016f58:	f7ff fd1c 	bl	8016994 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	3338      	adds	r3, #56	; 0x38
 8016f60:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8016f64:	491e      	ldr	r1, [pc, #120]	; (8016fe0 <sync_fs+0xdc>)
 8016f66:	4618      	mov	r0, r3
 8016f68:	f7ff fd14 	bl	8016994 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	3338      	adds	r3, #56	; 0x38
 8016f70:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	699b      	ldr	r3, [r3, #24]
 8016f78:	4619      	mov	r1, r3
 8016f7a:	4610      	mov	r0, r2
 8016f7c:	f7ff fd0a 	bl	8016994 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	3338      	adds	r3, #56	; 0x38
 8016f84:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	695b      	ldr	r3, [r3, #20]
 8016f8c:	4619      	mov	r1, r3
 8016f8e:	4610      	mov	r0, r2
 8016f90:	f7ff fd00 	bl	8016994 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f98:	1c5a      	adds	r2, r3, #1
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	7858      	ldrb	r0, [r3, #1]
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016fac:	2301      	movs	r3, #1
 8016fae:	f7ff fc5d 	bl	801686c <disk_write>
			fs->fsi_flag = 0;
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	2200      	movs	r2, #0
 8016fb6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	785b      	ldrb	r3, [r3, #1]
 8016fbc:	2200      	movs	r2, #0
 8016fbe:	2100      	movs	r1, #0
 8016fc0:	4618      	mov	r0, r3
 8016fc2:	f7ff fc73 	bl	80168ac <disk_ioctl>
 8016fc6:	4603      	mov	r3, r0
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d001      	beq.n	8016fd0 <sync_fs+0xcc>
 8016fcc:	2301      	movs	r3, #1
 8016fce:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8016fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8016fd2:	4618      	mov	r0, r3
 8016fd4:	3710      	adds	r7, #16
 8016fd6:	46bd      	mov	sp, r7
 8016fd8:	bd80      	pop	{r7, pc}
 8016fda:	bf00      	nop
 8016fdc:	41615252 	.word	0x41615252
 8016fe0:	61417272 	.word	0x61417272

08016fe4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8016fe4:	b480      	push	{r7}
 8016fe6:	b083      	sub	sp, #12
 8016fe8:	af00      	add	r7, sp, #0
 8016fea:	6078      	str	r0, [r7, #4]
 8016fec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8016fee:	683b      	ldr	r3, [r7, #0]
 8016ff0:	3b02      	subs	r3, #2
 8016ff2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	69db      	ldr	r3, [r3, #28]
 8016ff8:	3b02      	subs	r3, #2
 8016ffa:	683a      	ldr	r2, [r7, #0]
 8016ffc:	429a      	cmp	r2, r3
 8016ffe:	d301      	bcc.n	8017004 <clust2sect+0x20>
 8017000:	2300      	movs	r3, #0
 8017002:	e008      	b.n	8017016 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	895b      	ldrh	r3, [r3, #10]
 8017008:	461a      	mov	r2, r3
 801700a:	683b      	ldr	r3, [r7, #0]
 801700c:	fb03 f202 	mul.w	r2, r3, r2
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017014:	4413      	add	r3, r2
}
 8017016:	4618      	mov	r0, r3
 8017018:	370c      	adds	r7, #12
 801701a:	46bd      	mov	sp, r7
 801701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017020:	4770      	bx	lr

08017022 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8017022:	b580      	push	{r7, lr}
 8017024:	b086      	sub	sp, #24
 8017026:	af00      	add	r7, sp, #0
 8017028:	6078      	str	r0, [r7, #4]
 801702a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	681b      	ldr	r3, [r3, #0]
 8017030:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8017032:	683b      	ldr	r3, [r7, #0]
 8017034:	2b01      	cmp	r3, #1
 8017036:	d904      	bls.n	8017042 <get_fat+0x20>
 8017038:	693b      	ldr	r3, [r7, #16]
 801703a:	69db      	ldr	r3, [r3, #28]
 801703c:	683a      	ldr	r2, [r7, #0]
 801703e:	429a      	cmp	r2, r3
 8017040:	d302      	bcc.n	8017048 <get_fat+0x26>
		val = 1;	/* Internal error */
 8017042:	2301      	movs	r3, #1
 8017044:	617b      	str	r3, [r7, #20]
 8017046:	e0b7      	b.n	80171b8 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8017048:	f04f 33ff 	mov.w	r3, #4294967295
 801704c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801704e:	693b      	ldr	r3, [r7, #16]
 8017050:	781b      	ldrb	r3, [r3, #0]
 8017052:	2b02      	cmp	r3, #2
 8017054:	d05a      	beq.n	801710c <get_fat+0xea>
 8017056:	2b03      	cmp	r3, #3
 8017058:	d07d      	beq.n	8017156 <get_fat+0x134>
 801705a:	2b01      	cmp	r3, #1
 801705c:	f040 80a2 	bne.w	80171a4 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8017060:	683b      	ldr	r3, [r7, #0]
 8017062:	60fb      	str	r3, [r7, #12]
 8017064:	68fb      	ldr	r3, [r7, #12]
 8017066:	085b      	lsrs	r3, r3, #1
 8017068:	68fa      	ldr	r2, [r7, #12]
 801706a:	4413      	add	r3, r2
 801706c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801706e:	693b      	ldr	r3, [r7, #16]
 8017070:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017072:	693b      	ldr	r3, [r7, #16]
 8017074:	899b      	ldrh	r3, [r3, #12]
 8017076:	4619      	mov	r1, r3
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	fbb3 f3f1 	udiv	r3, r3, r1
 801707e:	4413      	add	r3, r2
 8017080:	4619      	mov	r1, r3
 8017082:	6938      	ldr	r0, [r7, #16]
 8017084:	f7ff ff10 	bl	8016ea8 <move_window>
 8017088:	4603      	mov	r3, r0
 801708a:	2b00      	cmp	r3, #0
 801708c:	f040 808d 	bne.w	80171aa <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	1c5a      	adds	r2, r3, #1
 8017094:	60fa      	str	r2, [r7, #12]
 8017096:	693a      	ldr	r2, [r7, #16]
 8017098:	8992      	ldrh	r2, [r2, #12]
 801709a:	fbb3 f1f2 	udiv	r1, r3, r2
 801709e:	fb02 f201 	mul.w	r2, r2, r1
 80170a2:	1a9b      	subs	r3, r3, r2
 80170a4:	693a      	ldr	r2, [r7, #16]
 80170a6:	4413      	add	r3, r2
 80170a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80170ac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80170ae:	693b      	ldr	r3, [r7, #16]
 80170b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80170b2:	693b      	ldr	r3, [r7, #16]
 80170b4:	899b      	ldrh	r3, [r3, #12]
 80170b6:	4619      	mov	r1, r3
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80170be:	4413      	add	r3, r2
 80170c0:	4619      	mov	r1, r3
 80170c2:	6938      	ldr	r0, [r7, #16]
 80170c4:	f7ff fef0 	bl	8016ea8 <move_window>
 80170c8:	4603      	mov	r3, r0
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d16f      	bne.n	80171ae <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80170ce:	693b      	ldr	r3, [r7, #16]
 80170d0:	899b      	ldrh	r3, [r3, #12]
 80170d2:	461a      	mov	r2, r3
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80170da:	fb02 f201 	mul.w	r2, r2, r1
 80170de:	1a9b      	subs	r3, r3, r2
 80170e0:	693a      	ldr	r2, [r7, #16]
 80170e2:	4413      	add	r3, r2
 80170e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80170e8:	021b      	lsls	r3, r3, #8
 80170ea:	461a      	mov	r2, r3
 80170ec:	68bb      	ldr	r3, [r7, #8]
 80170ee:	4313      	orrs	r3, r2
 80170f0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80170f2:	683b      	ldr	r3, [r7, #0]
 80170f4:	f003 0301 	and.w	r3, r3, #1
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d002      	beq.n	8017102 <get_fat+0xe0>
 80170fc:	68bb      	ldr	r3, [r7, #8]
 80170fe:	091b      	lsrs	r3, r3, #4
 8017100:	e002      	b.n	8017108 <get_fat+0xe6>
 8017102:	68bb      	ldr	r3, [r7, #8]
 8017104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017108:	617b      	str	r3, [r7, #20]
			break;
 801710a:	e055      	b.n	80171b8 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801710c:	693b      	ldr	r3, [r7, #16]
 801710e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017110:	693b      	ldr	r3, [r7, #16]
 8017112:	899b      	ldrh	r3, [r3, #12]
 8017114:	085b      	lsrs	r3, r3, #1
 8017116:	b29b      	uxth	r3, r3
 8017118:	4619      	mov	r1, r3
 801711a:	683b      	ldr	r3, [r7, #0]
 801711c:	fbb3 f3f1 	udiv	r3, r3, r1
 8017120:	4413      	add	r3, r2
 8017122:	4619      	mov	r1, r3
 8017124:	6938      	ldr	r0, [r7, #16]
 8017126:	f7ff febf 	bl	8016ea8 <move_window>
 801712a:	4603      	mov	r3, r0
 801712c:	2b00      	cmp	r3, #0
 801712e:	d140      	bne.n	80171b2 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8017130:	693b      	ldr	r3, [r7, #16]
 8017132:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017136:	683b      	ldr	r3, [r7, #0]
 8017138:	005b      	lsls	r3, r3, #1
 801713a:	693a      	ldr	r2, [r7, #16]
 801713c:	8992      	ldrh	r2, [r2, #12]
 801713e:	fbb3 f0f2 	udiv	r0, r3, r2
 8017142:	fb02 f200 	mul.w	r2, r2, r0
 8017146:	1a9b      	subs	r3, r3, r2
 8017148:	440b      	add	r3, r1
 801714a:	4618      	mov	r0, r3
 801714c:	f7ff fbcc 	bl	80168e8 <ld_word>
 8017150:	4603      	mov	r3, r0
 8017152:	617b      	str	r3, [r7, #20]
			break;
 8017154:	e030      	b.n	80171b8 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017156:	693b      	ldr	r3, [r7, #16]
 8017158:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801715a:	693b      	ldr	r3, [r7, #16]
 801715c:	899b      	ldrh	r3, [r3, #12]
 801715e:	089b      	lsrs	r3, r3, #2
 8017160:	b29b      	uxth	r3, r3
 8017162:	4619      	mov	r1, r3
 8017164:	683b      	ldr	r3, [r7, #0]
 8017166:	fbb3 f3f1 	udiv	r3, r3, r1
 801716a:	4413      	add	r3, r2
 801716c:	4619      	mov	r1, r3
 801716e:	6938      	ldr	r0, [r7, #16]
 8017170:	f7ff fe9a 	bl	8016ea8 <move_window>
 8017174:	4603      	mov	r3, r0
 8017176:	2b00      	cmp	r3, #0
 8017178:	d11d      	bne.n	80171b6 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801717a:	693b      	ldr	r3, [r7, #16]
 801717c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017180:	683b      	ldr	r3, [r7, #0]
 8017182:	009b      	lsls	r3, r3, #2
 8017184:	693a      	ldr	r2, [r7, #16]
 8017186:	8992      	ldrh	r2, [r2, #12]
 8017188:	fbb3 f0f2 	udiv	r0, r3, r2
 801718c:	fb02 f200 	mul.w	r2, r2, r0
 8017190:	1a9b      	subs	r3, r3, r2
 8017192:	440b      	add	r3, r1
 8017194:	4618      	mov	r0, r3
 8017196:	f7ff fbbf 	bl	8016918 <ld_dword>
 801719a:	4603      	mov	r3, r0
 801719c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80171a0:	617b      	str	r3, [r7, #20]
			break;
 80171a2:	e009      	b.n	80171b8 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80171a4:	2301      	movs	r3, #1
 80171a6:	617b      	str	r3, [r7, #20]
 80171a8:	e006      	b.n	80171b8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80171aa:	bf00      	nop
 80171ac:	e004      	b.n	80171b8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80171ae:	bf00      	nop
 80171b0:	e002      	b.n	80171b8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80171b2:	bf00      	nop
 80171b4:	e000      	b.n	80171b8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80171b6:	bf00      	nop
		}
	}

	return val;
 80171b8:	697b      	ldr	r3, [r7, #20]
}
 80171ba:	4618      	mov	r0, r3
 80171bc:	3718      	adds	r7, #24
 80171be:	46bd      	mov	sp, r7
 80171c0:	bd80      	pop	{r7, pc}

080171c2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80171c2:	b590      	push	{r4, r7, lr}
 80171c4:	b089      	sub	sp, #36	; 0x24
 80171c6:	af00      	add	r7, sp, #0
 80171c8:	60f8      	str	r0, [r7, #12]
 80171ca:	60b9      	str	r1, [r7, #8]
 80171cc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80171ce:	2302      	movs	r3, #2
 80171d0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80171d2:	68bb      	ldr	r3, [r7, #8]
 80171d4:	2b01      	cmp	r3, #1
 80171d6:	f240 8106 	bls.w	80173e6 <put_fat+0x224>
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	69db      	ldr	r3, [r3, #28]
 80171de:	68ba      	ldr	r2, [r7, #8]
 80171e0:	429a      	cmp	r2, r3
 80171e2:	f080 8100 	bcs.w	80173e6 <put_fat+0x224>
		switch (fs->fs_type) {
 80171e6:	68fb      	ldr	r3, [r7, #12]
 80171e8:	781b      	ldrb	r3, [r3, #0]
 80171ea:	2b02      	cmp	r3, #2
 80171ec:	f000 8088 	beq.w	8017300 <put_fat+0x13e>
 80171f0:	2b03      	cmp	r3, #3
 80171f2:	f000 80b0 	beq.w	8017356 <put_fat+0x194>
 80171f6:	2b01      	cmp	r3, #1
 80171f8:	f040 80f5 	bne.w	80173e6 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80171fc:	68bb      	ldr	r3, [r7, #8]
 80171fe:	61bb      	str	r3, [r7, #24]
 8017200:	69bb      	ldr	r3, [r7, #24]
 8017202:	085b      	lsrs	r3, r3, #1
 8017204:	69ba      	ldr	r2, [r7, #24]
 8017206:	4413      	add	r3, r2
 8017208:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801720a:	68fb      	ldr	r3, [r7, #12]
 801720c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801720e:	68fb      	ldr	r3, [r7, #12]
 8017210:	899b      	ldrh	r3, [r3, #12]
 8017212:	4619      	mov	r1, r3
 8017214:	69bb      	ldr	r3, [r7, #24]
 8017216:	fbb3 f3f1 	udiv	r3, r3, r1
 801721a:	4413      	add	r3, r2
 801721c:	4619      	mov	r1, r3
 801721e:	68f8      	ldr	r0, [r7, #12]
 8017220:	f7ff fe42 	bl	8016ea8 <move_window>
 8017224:	4603      	mov	r3, r0
 8017226:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017228:	7ffb      	ldrb	r3, [r7, #31]
 801722a:	2b00      	cmp	r3, #0
 801722c:	f040 80d4 	bne.w	80173d8 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017236:	69bb      	ldr	r3, [r7, #24]
 8017238:	1c5a      	adds	r2, r3, #1
 801723a:	61ba      	str	r2, [r7, #24]
 801723c:	68fa      	ldr	r2, [r7, #12]
 801723e:	8992      	ldrh	r2, [r2, #12]
 8017240:	fbb3 f0f2 	udiv	r0, r3, r2
 8017244:	fb02 f200 	mul.w	r2, r2, r0
 8017248:	1a9b      	subs	r3, r3, r2
 801724a:	440b      	add	r3, r1
 801724c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801724e:	68bb      	ldr	r3, [r7, #8]
 8017250:	f003 0301 	and.w	r3, r3, #1
 8017254:	2b00      	cmp	r3, #0
 8017256:	d00d      	beq.n	8017274 <put_fat+0xb2>
 8017258:	697b      	ldr	r3, [r7, #20]
 801725a:	781b      	ldrb	r3, [r3, #0]
 801725c:	b25b      	sxtb	r3, r3
 801725e:	f003 030f 	and.w	r3, r3, #15
 8017262:	b25a      	sxtb	r2, r3
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	b2db      	uxtb	r3, r3
 8017268:	011b      	lsls	r3, r3, #4
 801726a:	b25b      	sxtb	r3, r3
 801726c:	4313      	orrs	r3, r2
 801726e:	b25b      	sxtb	r3, r3
 8017270:	b2db      	uxtb	r3, r3
 8017272:	e001      	b.n	8017278 <put_fat+0xb6>
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	b2db      	uxtb	r3, r3
 8017278:	697a      	ldr	r2, [r7, #20]
 801727a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801727c:	68fb      	ldr	r3, [r7, #12]
 801727e:	2201      	movs	r2, #1
 8017280:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017282:	68fb      	ldr	r3, [r7, #12]
 8017284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017286:	68fb      	ldr	r3, [r7, #12]
 8017288:	899b      	ldrh	r3, [r3, #12]
 801728a:	4619      	mov	r1, r3
 801728c:	69bb      	ldr	r3, [r7, #24]
 801728e:	fbb3 f3f1 	udiv	r3, r3, r1
 8017292:	4413      	add	r3, r2
 8017294:	4619      	mov	r1, r3
 8017296:	68f8      	ldr	r0, [r7, #12]
 8017298:	f7ff fe06 	bl	8016ea8 <move_window>
 801729c:	4603      	mov	r3, r0
 801729e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80172a0:	7ffb      	ldrb	r3, [r7, #31]
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	f040 809a 	bne.w	80173dc <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 80172a8:	68fb      	ldr	r3, [r7, #12]
 80172aa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	899b      	ldrh	r3, [r3, #12]
 80172b2:	461a      	mov	r2, r3
 80172b4:	69bb      	ldr	r3, [r7, #24]
 80172b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80172ba:	fb02 f200 	mul.w	r2, r2, r0
 80172be:	1a9b      	subs	r3, r3, r2
 80172c0:	440b      	add	r3, r1
 80172c2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80172c4:	68bb      	ldr	r3, [r7, #8]
 80172c6:	f003 0301 	and.w	r3, r3, #1
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d003      	beq.n	80172d6 <put_fat+0x114>
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	091b      	lsrs	r3, r3, #4
 80172d2:	b2db      	uxtb	r3, r3
 80172d4:	e00e      	b.n	80172f4 <put_fat+0x132>
 80172d6:	697b      	ldr	r3, [r7, #20]
 80172d8:	781b      	ldrb	r3, [r3, #0]
 80172da:	b25b      	sxtb	r3, r3
 80172dc:	f023 030f 	bic.w	r3, r3, #15
 80172e0:	b25a      	sxtb	r2, r3
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	0a1b      	lsrs	r3, r3, #8
 80172e6:	b25b      	sxtb	r3, r3
 80172e8:	f003 030f 	and.w	r3, r3, #15
 80172ec:	b25b      	sxtb	r3, r3
 80172ee:	4313      	orrs	r3, r2
 80172f0:	b25b      	sxtb	r3, r3
 80172f2:	b2db      	uxtb	r3, r3
 80172f4:	697a      	ldr	r2, [r7, #20]
 80172f6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	2201      	movs	r2, #1
 80172fc:	70da      	strb	r2, [r3, #3]
			break;
 80172fe:	e072      	b.n	80173e6 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8017300:	68fb      	ldr	r3, [r7, #12]
 8017302:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017304:	68fb      	ldr	r3, [r7, #12]
 8017306:	899b      	ldrh	r3, [r3, #12]
 8017308:	085b      	lsrs	r3, r3, #1
 801730a:	b29b      	uxth	r3, r3
 801730c:	4619      	mov	r1, r3
 801730e:	68bb      	ldr	r3, [r7, #8]
 8017310:	fbb3 f3f1 	udiv	r3, r3, r1
 8017314:	4413      	add	r3, r2
 8017316:	4619      	mov	r1, r3
 8017318:	68f8      	ldr	r0, [r7, #12]
 801731a:	f7ff fdc5 	bl	8016ea8 <move_window>
 801731e:	4603      	mov	r3, r0
 8017320:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017322:	7ffb      	ldrb	r3, [r7, #31]
 8017324:	2b00      	cmp	r3, #0
 8017326:	d15b      	bne.n	80173e0 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8017328:	68fb      	ldr	r3, [r7, #12]
 801732a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801732e:	68bb      	ldr	r3, [r7, #8]
 8017330:	005b      	lsls	r3, r3, #1
 8017332:	68fa      	ldr	r2, [r7, #12]
 8017334:	8992      	ldrh	r2, [r2, #12]
 8017336:	fbb3 f0f2 	udiv	r0, r3, r2
 801733a:	fb02 f200 	mul.w	r2, r2, r0
 801733e:	1a9b      	subs	r3, r3, r2
 8017340:	440b      	add	r3, r1
 8017342:	687a      	ldr	r2, [r7, #4]
 8017344:	b292      	uxth	r2, r2
 8017346:	4611      	mov	r1, r2
 8017348:	4618      	mov	r0, r3
 801734a:	f7ff fb08 	bl	801695e <st_word>
			fs->wflag = 1;
 801734e:	68fb      	ldr	r3, [r7, #12]
 8017350:	2201      	movs	r2, #1
 8017352:	70da      	strb	r2, [r3, #3]
			break;
 8017354:	e047      	b.n	80173e6 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8017356:	68fb      	ldr	r3, [r7, #12]
 8017358:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801735a:	68fb      	ldr	r3, [r7, #12]
 801735c:	899b      	ldrh	r3, [r3, #12]
 801735e:	089b      	lsrs	r3, r3, #2
 8017360:	b29b      	uxth	r3, r3
 8017362:	4619      	mov	r1, r3
 8017364:	68bb      	ldr	r3, [r7, #8]
 8017366:	fbb3 f3f1 	udiv	r3, r3, r1
 801736a:	4413      	add	r3, r2
 801736c:	4619      	mov	r1, r3
 801736e:	68f8      	ldr	r0, [r7, #12]
 8017370:	f7ff fd9a 	bl	8016ea8 <move_window>
 8017374:	4603      	mov	r3, r0
 8017376:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017378:	7ffb      	ldrb	r3, [r7, #31]
 801737a:	2b00      	cmp	r3, #0
 801737c:	d132      	bne.n	80173e4 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8017384:	68fb      	ldr	r3, [r7, #12]
 8017386:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801738a:	68bb      	ldr	r3, [r7, #8]
 801738c:	009b      	lsls	r3, r3, #2
 801738e:	68fa      	ldr	r2, [r7, #12]
 8017390:	8992      	ldrh	r2, [r2, #12]
 8017392:	fbb3 f0f2 	udiv	r0, r3, r2
 8017396:	fb02 f200 	mul.w	r2, r2, r0
 801739a:	1a9b      	subs	r3, r3, r2
 801739c:	440b      	add	r3, r1
 801739e:	4618      	mov	r0, r3
 80173a0:	f7ff faba 	bl	8016918 <ld_dword>
 80173a4:	4603      	mov	r3, r0
 80173a6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80173aa:	4323      	orrs	r3, r4
 80173ac:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80173ae:	68fb      	ldr	r3, [r7, #12]
 80173b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80173b4:	68bb      	ldr	r3, [r7, #8]
 80173b6:	009b      	lsls	r3, r3, #2
 80173b8:	68fa      	ldr	r2, [r7, #12]
 80173ba:	8992      	ldrh	r2, [r2, #12]
 80173bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80173c0:	fb02 f200 	mul.w	r2, r2, r0
 80173c4:	1a9b      	subs	r3, r3, r2
 80173c6:	440b      	add	r3, r1
 80173c8:	6879      	ldr	r1, [r7, #4]
 80173ca:	4618      	mov	r0, r3
 80173cc:	f7ff fae2 	bl	8016994 <st_dword>
			fs->wflag = 1;
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	2201      	movs	r2, #1
 80173d4:	70da      	strb	r2, [r3, #3]
			break;
 80173d6:	e006      	b.n	80173e6 <put_fat+0x224>
			if (res != FR_OK) break;
 80173d8:	bf00      	nop
 80173da:	e004      	b.n	80173e6 <put_fat+0x224>
			if (res != FR_OK) break;
 80173dc:	bf00      	nop
 80173de:	e002      	b.n	80173e6 <put_fat+0x224>
			if (res != FR_OK) break;
 80173e0:	bf00      	nop
 80173e2:	e000      	b.n	80173e6 <put_fat+0x224>
			if (res != FR_OK) break;
 80173e4:	bf00      	nop
		}
	}
	return res;
 80173e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80173e8:	4618      	mov	r0, r3
 80173ea:	3724      	adds	r7, #36	; 0x24
 80173ec:	46bd      	mov	sp, r7
 80173ee:	bd90      	pop	{r4, r7, pc}

080173f0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80173f0:	b580      	push	{r7, lr}
 80173f2:	b088      	sub	sp, #32
 80173f4:	af00      	add	r7, sp, #0
 80173f6:	60f8      	str	r0, [r7, #12]
 80173f8:	60b9      	str	r1, [r7, #8]
 80173fa:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80173fc:	2300      	movs	r3, #0
 80173fe:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8017400:	68fb      	ldr	r3, [r7, #12]
 8017402:	681b      	ldr	r3, [r3, #0]
 8017404:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8017406:	68bb      	ldr	r3, [r7, #8]
 8017408:	2b01      	cmp	r3, #1
 801740a:	d904      	bls.n	8017416 <remove_chain+0x26>
 801740c:	69bb      	ldr	r3, [r7, #24]
 801740e:	69db      	ldr	r3, [r3, #28]
 8017410:	68ba      	ldr	r2, [r7, #8]
 8017412:	429a      	cmp	r2, r3
 8017414:	d301      	bcc.n	801741a <remove_chain+0x2a>
 8017416:	2302      	movs	r3, #2
 8017418:	e04b      	b.n	80174b2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	2b00      	cmp	r3, #0
 801741e:	d00c      	beq.n	801743a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8017420:	f04f 32ff 	mov.w	r2, #4294967295
 8017424:	6879      	ldr	r1, [r7, #4]
 8017426:	69b8      	ldr	r0, [r7, #24]
 8017428:	f7ff fecb 	bl	80171c2 <put_fat>
 801742c:	4603      	mov	r3, r0
 801742e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8017430:	7ffb      	ldrb	r3, [r7, #31]
 8017432:	2b00      	cmp	r3, #0
 8017434:	d001      	beq.n	801743a <remove_chain+0x4a>
 8017436:	7ffb      	ldrb	r3, [r7, #31]
 8017438:	e03b      	b.n	80174b2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801743a:	68b9      	ldr	r1, [r7, #8]
 801743c:	68f8      	ldr	r0, [r7, #12]
 801743e:	f7ff fdf0 	bl	8017022 <get_fat>
 8017442:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8017444:	697b      	ldr	r3, [r7, #20]
 8017446:	2b00      	cmp	r3, #0
 8017448:	d031      	beq.n	80174ae <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801744a:	697b      	ldr	r3, [r7, #20]
 801744c:	2b01      	cmp	r3, #1
 801744e:	d101      	bne.n	8017454 <remove_chain+0x64>
 8017450:	2302      	movs	r3, #2
 8017452:	e02e      	b.n	80174b2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8017454:	697b      	ldr	r3, [r7, #20]
 8017456:	f1b3 3fff 	cmp.w	r3, #4294967295
 801745a:	d101      	bne.n	8017460 <remove_chain+0x70>
 801745c:	2301      	movs	r3, #1
 801745e:	e028      	b.n	80174b2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8017460:	2200      	movs	r2, #0
 8017462:	68b9      	ldr	r1, [r7, #8]
 8017464:	69b8      	ldr	r0, [r7, #24]
 8017466:	f7ff feac 	bl	80171c2 <put_fat>
 801746a:	4603      	mov	r3, r0
 801746c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801746e:	7ffb      	ldrb	r3, [r7, #31]
 8017470:	2b00      	cmp	r3, #0
 8017472:	d001      	beq.n	8017478 <remove_chain+0x88>
 8017474:	7ffb      	ldrb	r3, [r7, #31]
 8017476:	e01c      	b.n	80174b2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8017478:	69bb      	ldr	r3, [r7, #24]
 801747a:	699a      	ldr	r2, [r3, #24]
 801747c:	69bb      	ldr	r3, [r7, #24]
 801747e:	69db      	ldr	r3, [r3, #28]
 8017480:	3b02      	subs	r3, #2
 8017482:	429a      	cmp	r2, r3
 8017484:	d20b      	bcs.n	801749e <remove_chain+0xae>
			fs->free_clst++;
 8017486:	69bb      	ldr	r3, [r7, #24]
 8017488:	699b      	ldr	r3, [r3, #24]
 801748a:	1c5a      	adds	r2, r3, #1
 801748c:	69bb      	ldr	r3, [r7, #24]
 801748e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8017490:	69bb      	ldr	r3, [r7, #24]
 8017492:	791b      	ldrb	r3, [r3, #4]
 8017494:	f043 0301 	orr.w	r3, r3, #1
 8017498:	b2da      	uxtb	r2, r3
 801749a:	69bb      	ldr	r3, [r7, #24]
 801749c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801749e:	697b      	ldr	r3, [r7, #20]
 80174a0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80174a2:	69bb      	ldr	r3, [r7, #24]
 80174a4:	69db      	ldr	r3, [r3, #28]
 80174a6:	68ba      	ldr	r2, [r7, #8]
 80174a8:	429a      	cmp	r2, r3
 80174aa:	d3c6      	bcc.n	801743a <remove_chain+0x4a>
 80174ac:	e000      	b.n	80174b0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80174ae:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80174b0:	2300      	movs	r3, #0
}
 80174b2:	4618      	mov	r0, r3
 80174b4:	3720      	adds	r7, #32
 80174b6:	46bd      	mov	sp, r7
 80174b8:	bd80      	pop	{r7, pc}

080174ba <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80174ba:	b580      	push	{r7, lr}
 80174bc:	b088      	sub	sp, #32
 80174be:	af00      	add	r7, sp, #0
 80174c0:	6078      	str	r0, [r7, #4]
 80174c2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	681b      	ldr	r3, [r3, #0]
 80174c8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80174ca:	683b      	ldr	r3, [r7, #0]
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d10d      	bne.n	80174ec <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80174d0:	693b      	ldr	r3, [r7, #16]
 80174d2:	695b      	ldr	r3, [r3, #20]
 80174d4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80174d6:	69bb      	ldr	r3, [r7, #24]
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d004      	beq.n	80174e6 <create_chain+0x2c>
 80174dc:	693b      	ldr	r3, [r7, #16]
 80174de:	69db      	ldr	r3, [r3, #28]
 80174e0:	69ba      	ldr	r2, [r7, #24]
 80174e2:	429a      	cmp	r2, r3
 80174e4:	d31b      	bcc.n	801751e <create_chain+0x64>
 80174e6:	2301      	movs	r3, #1
 80174e8:	61bb      	str	r3, [r7, #24]
 80174ea:	e018      	b.n	801751e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80174ec:	6839      	ldr	r1, [r7, #0]
 80174ee:	6878      	ldr	r0, [r7, #4]
 80174f0:	f7ff fd97 	bl	8017022 <get_fat>
 80174f4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80174f6:	68fb      	ldr	r3, [r7, #12]
 80174f8:	2b01      	cmp	r3, #1
 80174fa:	d801      	bhi.n	8017500 <create_chain+0x46>
 80174fc:	2301      	movs	r3, #1
 80174fe:	e070      	b.n	80175e2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8017500:	68fb      	ldr	r3, [r7, #12]
 8017502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017506:	d101      	bne.n	801750c <create_chain+0x52>
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	e06a      	b.n	80175e2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801750c:	693b      	ldr	r3, [r7, #16]
 801750e:	69db      	ldr	r3, [r3, #28]
 8017510:	68fa      	ldr	r2, [r7, #12]
 8017512:	429a      	cmp	r2, r3
 8017514:	d201      	bcs.n	801751a <create_chain+0x60>
 8017516:	68fb      	ldr	r3, [r7, #12]
 8017518:	e063      	b.n	80175e2 <create_chain+0x128>
		scl = clst;
 801751a:	683b      	ldr	r3, [r7, #0]
 801751c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801751e:	69bb      	ldr	r3, [r7, #24]
 8017520:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8017522:	69fb      	ldr	r3, [r7, #28]
 8017524:	3301      	adds	r3, #1
 8017526:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8017528:	693b      	ldr	r3, [r7, #16]
 801752a:	69db      	ldr	r3, [r3, #28]
 801752c:	69fa      	ldr	r2, [r7, #28]
 801752e:	429a      	cmp	r2, r3
 8017530:	d307      	bcc.n	8017542 <create_chain+0x88>
				ncl = 2;
 8017532:	2302      	movs	r3, #2
 8017534:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8017536:	69fa      	ldr	r2, [r7, #28]
 8017538:	69bb      	ldr	r3, [r7, #24]
 801753a:	429a      	cmp	r2, r3
 801753c:	d901      	bls.n	8017542 <create_chain+0x88>
 801753e:	2300      	movs	r3, #0
 8017540:	e04f      	b.n	80175e2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8017542:	69f9      	ldr	r1, [r7, #28]
 8017544:	6878      	ldr	r0, [r7, #4]
 8017546:	f7ff fd6c 	bl	8017022 <get_fat>
 801754a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801754c:	68fb      	ldr	r3, [r7, #12]
 801754e:	2b00      	cmp	r3, #0
 8017550:	d00e      	beq.n	8017570 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8017552:	68fb      	ldr	r3, [r7, #12]
 8017554:	2b01      	cmp	r3, #1
 8017556:	d003      	beq.n	8017560 <create_chain+0xa6>
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801755e:	d101      	bne.n	8017564 <create_chain+0xaa>
 8017560:	68fb      	ldr	r3, [r7, #12]
 8017562:	e03e      	b.n	80175e2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8017564:	69fa      	ldr	r2, [r7, #28]
 8017566:	69bb      	ldr	r3, [r7, #24]
 8017568:	429a      	cmp	r2, r3
 801756a:	d1da      	bne.n	8017522 <create_chain+0x68>
 801756c:	2300      	movs	r3, #0
 801756e:	e038      	b.n	80175e2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8017570:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8017572:	f04f 32ff 	mov.w	r2, #4294967295
 8017576:	69f9      	ldr	r1, [r7, #28]
 8017578:	6938      	ldr	r0, [r7, #16]
 801757a:	f7ff fe22 	bl	80171c2 <put_fat>
 801757e:	4603      	mov	r3, r0
 8017580:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8017582:	7dfb      	ldrb	r3, [r7, #23]
 8017584:	2b00      	cmp	r3, #0
 8017586:	d109      	bne.n	801759c <create_chain+0xe2>
 8017588:	683b      	ldr	r3, [r7, #0]
 801758a:	2b00      	cmp	r3, #0
 801758c:	d006      	beq.n	801759c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801758e:	69fa      	ldr	r2, [r7, #28]
 8017590:	6839      	ldr	r1, [r7, #0]
 8017592:	6938      	ldr	r0, [r7, #16]
 8017594:	f7ff fe15 	bl	80171c2 <put_fat>
 8017598:	4603      	mov	r3, r0
 801759a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801759c:	7dfb      	ldrb	r3, [r7, #23]
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d116      	bne.n	80175d0 <create_chain+0x116>
		fs->last_clst = ncl;
 80175a2:	693b      	ldr	r3, [r7, #16]
 80175a4:	69fa      	ldr	r2, [r7, #28]
 80175a6:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80175a8:	693b      	ldr	r3, [r7, #16]
 80175aa:	699a      	ldr	r2, [r3, #24]
 80175ac:	693b      	ldr	r3, [r7, #16]
 80175ae:	69db      	ldr	r3, [r3, #28]
 80175b0:	3b02      	subs	r3, #2
 80175b2:	429a      	cmp	r2, r3
 80175b4:	d804      	bhi.n	80175c0 <create_chain+0x106>
 80175b6:	693b      	ldr	r3, [r7, #16]
 80175b8:	699b      	ldr	r3, [r3, #24]
 80175ba:	1e5a      	subs	r2, r3, #1
 80175bc:	693b      	ldr	r3, [r7, #16]
 80175be:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80175c0:	693b      	ldr	r3, [r7, #16]
 80175c2:	791b      	ldrb	r3, [r3, #4]
 80175c4:	f043 0301 	orr.w	r3, r3, #1
 80175c8:	b2da      	uxtb	r2, r3
 80175ca:	693b      	ldr	r3, [r7, #16]
 80175cc:	711a      	strb	r2, [r3, #4]
 80175ce:	e007      	b.n	80175e0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80175d0:	7dfb      	ldrb	r3, [r7, #23]
 80175d2:	2b01      	cmp	r3, #1
 80175d4:	d102      	bne.n	80175dc <create_chain+0x122>
 80175d6:	f04f 33ff 	mov.w	r3, #4294967295
 80175da:	e000      	b.n	80175de <create_chain+0x124>
 80175dc:	2301      	movs	r3, #1
 80175de:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80175e0:	69fb      	ldr	r3, [r7, #28]
}
 80175e2:	4618      	mov	r0, r3
 80175e4:	3720      	adds	r7, #32
 80175e6:	46bd      	mov	sp, r7
 80175e8:	bd80      	pop	{r7, pc}

080175ea <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80175ea:	b480      	push	{r7}
 80175ec:	b087      	sub	sp, #28
 80175ee:	af00      	add	r7, sp, #0
 80175f0:	6078      	str	r0, [r7, #4]
 80175f2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	681b      	ldr	r3, [r3, #0]
 80175f8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175fe:	3304      	adds	r3, #4
 8017600:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8017602:	68fb      	ldr	r3, [r7, #12]
 8017604:	899b      	ldrh	r3, [r3, #12]
 8017606:	461a      	mov	r2, r3
 8017608:	683b      	ldr	r3, [r7, #0]
 801760a:	fbb3 f3f2 	udiv	r3, r3, r2
 801760e:	68fa      	ldr	r2, [r7, #12]
 8017610:	8952      	ldrh	r2, [r2, #10]
 8017612:	fbb3 f3f2 	udiv	r3, r3, r2
 8017616:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8017618:	693b      	ldr	r3, [r7, #16]
 801761a:	1d1a      	adds	r2, r3, #4
 801761c:	613a      	str	r2, [r7, #16]
 801761e:	681b      	ldr	r3, [r3, #0]
 8017620:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8017622:	68bb      	ldr	r3, [r7, #8]
 8017624:	2b00      	cmp	r3, #0
 8017626:	d101      	bne.n	801762c <clmt_clust+0x42>
 8017628:	2300      	movs	r3, #0
 801762a:	e010      	b.n	801764e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801762c:	697a      	ldr	r2, [r7, #20]
 801762e:	68bb      	ldr	r3, [r7, #8]
 8017630:	429a      	cmp	r2, r3
 8017632:	d307      	bcc.n	8017644 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8017634:	697a      	ldr	r2, [r7, #20]
 8017636:	68bb      	ldr	r3, [r7, #8]
 8017638:	1ad3      	subs	r3, r2, r3
 801763a:	617b      	str	r3, [r7, #20]
 801763c:	693b      	ldr	r3, [r7, #16]
 801763e:	3304      	adds	r3, #4
 8017640:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8017642:	e7e9      	b.n	8017618 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8017644:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8017646:	693b      	ldr	r3, [r7, #16]
 8017648:	681a      	ldr	r2, [r3, #0]
 801764a:	697b      	ldr	r3, [r7, #20]
 801764c:	4413      	add	r3, r2
}
 801764e:	4618      	mov	r0, r3
 8017650:	371c      	adds	r7, #28
 8017652:	46bd      	mov	sp, r7
 8017654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017658:	4770      	bx	lr

0801765a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801765a:	b580      	push	{r7, lr}
 801765c:	b086      	sub	sp, #24
 801765e:	af00      	add	r7, sp, #0
 8017660:	6078      	str	r0, [r7, #4]
 8017662:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	681b      	ldr	r3, [r3, #0]
 8017668:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801766a:	683b      	ldr	r3, [r7, #0]
 801766c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8017670:	d204      	bcs.n	801767c <dir_sdi+0x22>
 8017672:	683b      	ldr	r3, [r7, #0]
 8017674:	f003 031f 	and.w	r3, r3, #31
 8017678:	2b00      	cmp	r3, #0
 801767a:	d001      	beq.n	8017680 <dir_sdi+0x26>
		return FR_INT_ERR;
 801767c:	2302      	movs	r3, #2
 801767e:	e071      	b.n	8017764 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	683a      	ldr	r2, [r7, #0]
 8017684:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	689b      	ldr	r3, [r3, #8]
 801768a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801768c:	697b      	ldr	r3, [r7, #20]
 801768e:	2b00      	cmp	r3, #0
 8017690:	d106      	bne.n	80176a0 <dir_sdi+0x46>
 8017692:	693b      	ldr	r3, [r7, #16]
 8017694:	781b      	ldrb	r3, [r3, #0]
 8017696:	2b02      	cmp	r3, #2
 8017698:	d902      	bls.n	80176a0 <dir_sdi+0x46>
		clst = fs->dirbase;
 801769a:	693b      	ldr	r3, [r7, #16]
 801769c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801769e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80176a0:	697b      	ldr	r3, [r7, #20]
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d10c      	bne.n	80176c0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80176a6:	683b      	ldr	r3, [r7, #0]
 80176a8:	095b      	lsrs	r3, r3, #5
 80176aa:	693a      	ldr	r2, [r7, #16]
 80176ac:	8912      	ldrh	r2, [r2, #8]
 80176ae:	4293      	cmp	r3, r2
 80176b0:	d301      	bcc.n	80176b6 <dir_sdi+0x5c>
 80176b2:	2302      	movs	r3, #2
 80176b4:	e056      	b.n	8017764 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80176b6:	693b      	ldr	r3, [r7, #16]
 80176b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	61da      	str	r2, [r3, #28]
 80176be:	e02d      	b.n	801771c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80176c0:	693b      	ldr	r3, [r7, #16]
 80176c2:	895b      	ldrh	r3, [r3, #10]
 80176c4:	461a      	mov	r2, r3
 80176c6:	693b      	ldr	r3, [r7, #16]
 80176c8:	899b      	ldrh	r3, [r3, #12]
 80176ca:	fb03 f302 	mul.w	r3, r3, r2
 80176ce:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80176d0:	e019      	b.n	8017706 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	6979      	ldr	r1, [r7, #20]
 80176d6:	4618      	mov	r0, r3
 80176d8:	f7ff fca3 	bl	8017022 <get_fat>
 80176dc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80176de:	697b      	ldr	r3, [r7, #20]
 80176e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80176e4:	d101      	bne.n	80176ea <dir_sdi+0x90>
 80176e6:	2301      	movs	r3, #1
 80176e8:	e03c      	b.n	8017764 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80176ea:	697b      	ldr	r3, [r7, #20]
 80176ec:	2b01      	cmp	r3, #1
 80176ee:	d904      	bls.n	80176fa <dir_sdi+0xa0>
 80176f0:	693b      	ldr	r3, [r7, #16]
 80176f2:	69db      	ldr	r3, [r3, #28]
 80176f4:	697a      	ldr	r2, [r7, #20]
 80176f6:	429a      	cmp	r2, r3
 80176f8:	d301      	bcc.n	80176fe <dir_sdi+0xa4>
 80176fa:	2302      	movs	r3, #2
 80176fc:	e032      	b.n	8017764 <dir_sdi+0x10a>
			ofs -= csz;
 80176fe:	683a      	ldr	r2, [r7, #0]
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	1ad3      	subs	r3, r2, r3
 8017704:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8017706:	683a      	ldr	r2, [r7, #0]
 8017708:	68fb      	ldr	r3, [r7, #12]
 801770a:	429a      	cmp	r2, r3
 801770c:	d2e1      	bcs.n	80176d2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801770e:	6979      	ldr	r1, [r7, #20]
 8017710:	6938      	ldr	r0, [r7, #16]
 8017712:	f7ff fc67 	bl	8016fe4 <clust2sect>
 8017716:	4602      	mov	r2, r0
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	697a      	ldr	r2, [r7, #20]
 8017720:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	69db      	ldr	r3, [r3, #28]
 8017726:	2b00      	cmp	r3, #0
 8017728:	d101      	bne.n	801772e <dir_sdi+0xd4>
 801772a:	2302      	movs	r3, #2
 801772c:	e01a      	b.n	8017764 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	69da      	ldr	r2, [r3, #28]
 8017732:	693b      	ldr	r3, [r7, #16]
 8017734:	899b      	ldrh	r3, [r3, #12]
 8017736:	4619      	mov	r1, r3
 8017738:	683b      	ldr	r3, [r7, #0]
 801773a:	fbb3 f3f1 	udiv	r3, r3, r1
 801773e:	441a      	add	r2, r3
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8017744:	693b      	ldr	r3, [r7, #16]
 8017746:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801774a:	693b      	ldr	r3, [r7, #16]
 801774c:	899b      	ldrh	r3, [r3, #12]
 801774e:	461a      	mov	r2, r3
 8017750:	683b      	ldr	r3, [r7, #0]
 8017752:	fbb3 f0f2 	udiv	r0, r3, r2
 8017756:	fb02 f200 	mul.w	r2, r2, r0
 801775a:	1a9b      	subs	r3, r3, r2
 801775c:	18ca      	adds	r2, r1, r3
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8017762:	2300      	movs	r3, #0
}
 8017764:	4618      	mov	r0, r3
 8017766:	3718      	adds	r7, #24
 8017768:	46bd      	mov	sp, r7
 801776a:	bd80      	pop	{r7, pc}

0801776c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801776c:	b580      	push	{r7, lr}
 801776e:	b086      	sub	sp, #24
 8017770:	af00      	add	r7, sp, #0
 8017772:	6078      	str	r0, [r7, #4]
 8017774:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	681b      	ldr	r3, [r3, #0]
 801777a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	695b      	ldr	r3, [r3, #20]
 8017780:	3320      	adds	r3, #32
 8017782:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	69db      	ldr	r3, [r3, #28]
 8017788:	2b00      	cmp	r3, #0
 801778a:	d003      	beq.n	8017794 <dir_next+0x28>
 801778c:	68bb      	ldr	r3, [r7, #8]
 801778e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8017792:	d301      	bcc.n	8017798 <dir_next+0x2c>
 8017794:	2304      	movs	r3, #4
 8017796:	e0bb      	b.n	8017910 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8017798:	68fb      	ldr	r3, [r7, #12]
 801779a:	899b      	ldrh	r3, [r3, #12]
 801779c:	461a      	mov	r2, r3
 801779e:	68bb      	ldr	r3, [r7, #8]
 80177a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80177a4:	fb02 f201 	mul.w	r2, r2, r1
 80177a8:	1a9b      	subs	r3, r3, r2
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	f040 809d 	bne.w	80178ea <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	69db      	ldr	r3, [r3, #28]
 80177b4:	1c5a      	adds	r2, r3, #1
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	699b      	ldr	r3, [r3, #24]
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d10b      	bne.n	80177da <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80177c2:	68bb      	ldr	r3, [r7, #8]
 80177c4:	095b      	lsrs	r3, r3, #5
 80177c6:	68fa      	ldr	r2, [r7, #12]
 80177c8:	8912      	ldrh	r2, [r2, #8]
 80177ca:	4293      	cmp	r3, r2
 80177cc:	f0c0 808d 	bcc.w	80178ea <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	2200      	movs	r2, #0
 80177d4:	61da      	str	r2, [r3, #28]
 80177d6:	2304      	movs	r3, #4
 80177d8:	e09a      	b.n	8017910 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80177da:	68fb      	ldr	r3, [r7, #12]
 80177dc:	899b      	ldrh	r3, [r3, #12]
 80177de:	461a      	mov	r2, r3
 80177e0:	68bb      	ldr	r3, [r7, #8]
 80177e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80177e6:	68fa      	ldr	r2, [r7, #12]
 80177e8:	8952      	ldrh	r2, [r2, #10]
 80177ea:	3a01      	subs	r2, #1
 80177ec:	4013      	ands	r3, r2
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d17b      	bne.n	80178ea <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80177f2:	687a      	ldr	r2, [r7, #4]
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	699b      	ldr	r3, [r3, #24]
 80177f8:	4619      	mov	r1, r3
 80177fa:	4610      	mov	r0, r2
 80177fc:	f7ff fc11 	bl	8017022 <get_fat>
 8017800:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8017802:	697b      	ldr	r3, [r7, #20]
 8017804:	2b01      	cmp	r3, #1
 8017806:	d801      	bhi.n	801780c <dir_next+0xa0>
 8017808:	2302      	movs	r3, #2
 801780a:	e081      	b.n	8017910 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801780c:	697b      	ldr	r3, [r7, #20]
 801780e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017812:	d101      	bne.n	8017818 <dir_next+0xac>
 8017814:	2301      	movs	r3, #1
 8017816:	e07b      	b.n	8017910 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8017818:	68fb      	ldr	r3, [r7, #12]
 801781a:	69db      	ldr	r3, [r3, #28]
 801781c:	697a      	ldr	r2, [r7, #20]
 801781e:	429a      	cmp	r2, r3
 8017820:	d359      	bcc.n	80178d6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8017822:	683b      	ldr	r3, [r7, #0]
 8017824:	2b00      	cmp	r3, #0
 8017826:	d104      	bne.n	8017832 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	2200      	movs	r2, #0
 801782c:	61da      	str	r2, [r3, #28]
 801782e:	2304      	movs	r3, #4
 8017830:	e06e      	b.n	8017910 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8017832:	687a      	ldr	r2, [r7, #4]
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	699b      	ldr	r3, [r3, #24]
 8017838:	4619      	mov	r1, r3
 801783a:	4610      	mov	r0, r2
 801783c:	f7ff fe3d 	bl	80174ba <create_chain>
 8017840:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8017842:	697b      	ldr	r3, [r7, #20]
 8017844:	2b00      	cmp	r3, #0
 8017846:	d101      	bne.n	801784c <dir_next+0xe0>
 8017848:	2307      	movs	r3, #7
 801784a:	e061      	b.n	8017910 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801784c:	697b      	ldr	r3, [r7, #20]
 801784e:	2b01      	cmp	r3, #1
 8017850:	d101      	bne.n	8017856 <dir_next+0xea>
 8017852:	2302      	movs	r3, #2
 8017854:	e05c      	b.n	8017910 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017856:	697b      	ldr	r3, [r7, #20]
 8017858:	f1b3 3fff 	cmp.w	r3, #4294967295
 801785c:	d101      	bne.n	8017862 <dir_next+0xf6>
 801785e:	2301      	movs	r3, #1
 8017860:	e056      	b.n	8017910 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8017862:	68f8      	ldr	r0, [r7, #12]
 8017864:	f7ff fadc 	bl	8016e20 <sync_window>
 8017868:	4603      	mov	r3, r0
 801786a:	2b00      	cmp	r3, #0
 801786c:	d001      	beq.n	8017872 <dir_next+0x106>
 801786e:	2301      	movs	r3, #1
 8017870:	e04e      	b.n	8017910 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8017872:	68fb      	ldr	r3, [r7, #12]
 8017874:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8017878:	68fb      	ldr	r3, [r7, #12]
 801787a:	899b      	ldrh	r3, [r3, #12]
 801787c:	461a      	mov	r2, r3
 801787e:	2100      	movs	r1, #0
 8017880:	f7ff f8d5 	bl	8016a2e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8017884:	2300      	movs	r3, #0
 8017886:	613b      	str	r3, [r7, #16]
 8017888:	6979      	ldr	r1, [r7, #20]
 801788a:	68f8      	ldr	r0, [r7, #12]
 801788c:	f7ff fbaa 	bl	8016fe4 <clust2sect>
 8017890:	4602      	mov	r2, r0
 8017892:	68fb      	ldr	r3, [r7, #12]
 8017894:	635a      	str	r2, [r3, #52]	; 0x34
 8017896:	e012      	b.n	80178be <dir_next+0x152>
						fs->wflag = 1;
 8017898:	68fb      	ldr	r3, [r7, #12]
 801789a:	2201      	movs	r2, #1
 801789c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801789e:	68f8      	ldr	r0, [r7, #12]
 80178a0:	f7ff fabe 	bl	8016e20 <sync_window>
 80178a4:	4603      	mov	r3, r0
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d001      	beq.n	80178ae <dir_next+0x142>
 80178aa:	2301      	movs	r3, #1
 80178ac:	e030      	b.n	8017910 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80178ae:	693b      	ldr	r3, [r7, #16]
 80178b0:	3301      	adds	r3, #1
 80178b2:	613b      	str	r3, [r7, #16]
 80178b4:	68fb      	ldr	r3, [r7, #12]
 80178b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80178b8:	1c5a      	adds	r2, r3, #1
 80178ba:	68fb      	ldr	r3, [r7, #12]
 80178bc:	635a      	str	r2, [r3, #52]	; 0x34
 80178be:	68fb      	ldr	r3, [r7, #12]
 80178c0:	895b      	ldrh	r3, [r3, #10]
 80178c2:	461a      	mov	r2, r3
 80178c4:	693b      	ldr	r3, [r7, #16]
 80178c6:	4293      	cmp	r3, r2
 80178c8:	d3e6      	bcc.n	8017898 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80178ca:	68fb      	ldr	r3, [r7, #12]
 80178cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80178ce:	693b      	ldr	r3, [r7, #16]
 80178d0:	1ad2      	subs	r2, r2, r3
 80178d2:	68fb      	ldr	r3, [r7, #12]
 80178d4:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	697a      	ldr	r2, [r7, #20]
 80178da:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80178dc:	6979      	ldr	r1, [r7, #20]
 80178de:	68f8      	ldr	r0, [r7, #12]
 80178e0:	f7ff fb80 	bl	8016fe4 <clust2sect>
 80178e4:	4602      	mov	r2, r0
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	68ba      	ldr	r2, [r7, #8]
 80178ee:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80178f0:	68fb      	ldr	r3, [r7, #12]
 80178f2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80178f6:	68fb      	ldr	r3, [r7, #12]
 80178f8:	899b      	ldrh	r3, [r3, #12]
 80178fa:	461a      	mov	r2, r3
 80178fc:	68bb      	ldr	r3, [r7, #8]
 80178fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8017902:	fb02 f200 	mul.w	r2, r2, r0
 8017906:	1a9b      	subs	r3, r3, r2
 8017908:	18ca      	adds	r2, r1, r3
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801790e:	2300      	movs	r3, #0
}
 8017910:	4618      	mov	r0, r3
 8017912:	3718      	adds	r7, #24
 8017914:	46bd      	mov	sp, r7
 8017916:	bd80      	pop	{r7, pc}

08017918 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8017918:	b580      	push	{r7, lr}
 801791a:	b086      	sub	sp, #24
 801791c:	af00      	add	r7, sp, #0
 801791e:	6078      	str	r0, [r7, #4]
 8017920:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8017928:	2100      	movs	r1, #0
 801792a:	6878      	ldr	r0, [r7, #4]
 801792c:	f7ff fe95 	bl	801765a <dir_sdi>
 8017930:	4603      	mov	r3, r0
 8017932:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017934:	7dfb      	ldrb	r3, [r7, #23]
 8017936:	2b00      	cmp	r3, #0
 8017938:	d12b      	bne.n	8017992 <dir_alloc+0x7a>
		n = 0;
 801793a:	2300      	movs	r3, #0
 801793c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	69db      	ldr	r3, [r3, #28]
 8017942:	4619      	mov	r1, r3
 8017944:	68f8      	ldr	r0, [r7, #12]
 8017946:	f7ff faaf 	bl	8016ea8 <move_window>
 801794a:	4603      	mov	r3, r0
 801794c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801794e:	7dfb      	ldrb	r3, [r7, #23]
 8017950:	2b00      	cmp	r3, #0
 8017952:	d11d      	bne.n	8017990 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	6a1b      	ldr	r3, [r3, #32]
 8017958:	781b      	ldrb	r3, [r3, #0]
 801795a:	2be5      	cmp	r3, #229	; 0xe5
 801795c:	d004      	beq.n	8017968 <dir_alloc+0x50>
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	6a1b      	ldr	r3, [r3, #32]
 8017962:	781b      	ldrb	r3, [r3, #0]
 8017964:	2b00      	cmp	r3, #0
 8017966:	d107      	bne.n	8017978 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8017968:	693b      	ldr	r3, [r7, #16]
 801796a:	3301      	adds	r3, #1
 801796c:	613b      	str	r3, [r7, #16]
 801796e:	693a      	ldr	r2, [r7, #16]
 8017970:	683b      	ldr	r3, [r7, #0]
 8017972:	429a      	cmp	r2, r3
 8017974:	d102      	bne.n	801797c <dir_alloc+0x64>
 8017976:	e00c      	b.n	8017992 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8017978:	2300      	movs	r3, #0
 801797a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801797c:	2101      	movs	r1, #1
 801797e:	6878      	ldr	r0, [r7, #4]
 8017980:	f7ff fef4 	bl	801776c <dir_next>
 8017984:	4603      	mov	r3, r0
 8017986:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8017988:	7dfb      	ldrb	r3, [r7, #23]
 801798a:	2b00      	cmp	r3, #0
 801798c:	d0d7      	beq.n	801793e <dir_alloc+0x26>
 801798e:	e000      	b.n	8017992 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8017990:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8017992:	7dfb      	ldrb	r3, [r7, #23]
 8017994:	2b04      	cmp	r3, #4
 8017996:	d101      	bne.n	801799c <dir_alloc+0x84>
 8017998:	2307      	movs	r3, #7
 801799a:	75fb      	strb	r3, [r7, #23]
	return res;
 801799c:	7dfb      	ldrb	r3, [r7, #23]
}
 801799e:	4618      	mov	r0, r3
 80179a0:	3718      	adds	r7, #24
 80179a2:	46bd      	mov	sp, r7
 80179a4:	bd80      	pop	{r7, pc}

080179a6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80179a6:	b580      	push	{r7, lr}
 80179a8:	b084      	sub	sp, #16
 80179aa:	af00      	add	r7, sp, #0
 80179ac:	6078      	str	r0, [r7, #4]
 80179ae:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80179b0:	683b      	ldr	r3, [r7, #0]
 80179b2:	331a      	adds	r3, #26
 80179b4:	4618      	mov	r0, r3
 80179b6:	f7fe ff97 	bl	80168e8 <ld_word>
 80179ba:	4603      	mov	r3, r0
 80179bc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	781b      	ldrb	r3, [r3, #0]
 80179c2:	2b03      	cmp	r3, #3
 80179c4:	d109      	bne.n	80179da <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80179c6:	683b      	ldr	r3, [r7, #0]
 80179c8:	3314      	adds	r3, #20
 80179ca:	4618      	mov	r0, r3
 80179cc:	f7fe ff8c 	bl	80168e8 <ld_word>
 80179d0:	4603      	mov	r3, r0
 80179d2:	041b      	lsls	r3, r3, #16
 80179d4:	68fa      	ldr	r2, [r7, #12]
 80179d6:	4313      	orrs	r3, r2
 80179d8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80179da:	68fb      	ldr	r3, [r7, #12]
}
 80179dc:	4618      	mov	r0, r3
 80179de:	3710      	adds	r7, #16
 80179e0:	46bd      	mov	sp, r7
 80179e2:	bd80      	pop	{r7, pc}

080179e4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80179e4:	b580      	push	{r7, lr}
 80179e6:	b084      	sub	sp, #16
 80179e8:	af00      	add	r7, sp, #0
 80179ea:	60f8      	str	r0, [r7, #12]
 80179ec:	60b9      	str	r1, [r7, #8]
 80179ee:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80179f0:	68bb      	ldr	r3, [r7, #8]
 80179f2:	331a      	adds	r3, #26
 80179f4:	687a      	ldr	r2, [r7, #4]
 80179f6:	b292      	uxth	r2, r2
 80179f8:	4611      	mov	r1, r2
 80179fa:	4618      	mov	r0, r3
 80179fc:	f7fe ffaf 	bl	801695e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8017a00:	68fb      	ldr	r3, [r7, #12]
 8017a02:	781b      	ldrb	r3, [r3, #0]
 8017a04:	2b03      	cmp	r3, #3
 8017a06:	d109      	bne.n	8017a1c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8017a08:	68bb      	ldr	r3, [r7, #8]
 8017a0a:	f103 0214 	add.w	r2, r3, #20
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	0c1b      	lsrs	r3, r3, #16
 8017a12:	b29b      	uxth	r3, r3
 8017a14:	4619      	mov	r1, r3
 8017a16:	4610      	mov	r0, r2
 8017a18:	f7fe ffa1 	bl	801695e <st_word>
	}
}
 8017a1c:	bf00      	nop
 8017a1e:	3710      	adds	r7, #16
 8017a20:	46bd      	mov	sp, r7
 8017a22:	bd80      	pop	{r7, pc}

08017a24 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8017a24:	b580      	push	{r7, lr}
 8017a26:	b086      	sub	sp, #24
 8017a28:	af00      	add	r7, sp, #0
 8017a2a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8017a32:	2100      	movs	r1, #0
 8017a34:	6878      	ldr	r0, [r7, #4]
 8017a36:	f7ff fe10 	bl	801765a <dir_sdi>
 8017a3a:	4603      	mov	r3, r0
 8017a3c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8017a3e:	7dfb      	ldrb	r3, [r7, #23]
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d001      	beq.n	8017a48 <dir_find+0x24>
 8017a44:	7dfb      	ldrb	r3, [r7, #23]
 8017a46:	e03e      	b.n	8017ac6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	69db      	ldr	r3, [r3, #28]
 8017a4c:	4619      	mov	r1, r3
 8017a4e:	6938      	ldr	r0, [r7, #16]
 8017a50:	f7ff fa2a 	bl	8016ea8 <move_window>
 8017a54:	4603      	mov	r3, r0
 8017a56:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8017a58:	7dfb      	ldrb	r3, [r7, #23]
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d12f      	bne.n	8017abe <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	6a1b      	ldr	r3, [r3, #32]
 8017a62:	781b      	ldrb	r3, [r3, #0]
 8017a64:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8017a66:	7bfb      	ldrb	r3, [r7, #15]
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	d102      	bne.n	8017a72 <dir_find+0x4e>
 8017a6c:	2304      	movs	r3, #4
 8017a6e:	75fb      	strb	r3, [r7, #23]
 8017a70:	e028      	b.n	8017ac4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	6a1b      	ldr	r3, [r3, #32]
 8017a76:	330b      	adds	r3, #11
 8017a78:	781b      	ldrb	r3, [r3, #0]
 8017a7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017a7e:	b2da      	uxtb	r2, r3
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	6a1b      	ldr	r3, [r3, #32]
 8017a88:	330b      	adds	r3, #11
 8017a8a:	781b      	ldrb	r3, [r3, #0]
 8017a8c:	f003 0308 	and.w	r3, r3, #8
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d10a      	bne.n	8017aaa <dir_find+0x86>
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	6a18      	ldr	r0, [r3, #32]
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	3324      	adds	r3, #36	; 0x24
 8017a9c:	220b      	movs	r2, #11
 8017a9e:	4619      	mov	r1, r3
 8017aa0:	f7fe ffdf 	bl	8016a62 <mem_cmp>
 8017aa4:	4603      	mov	r3, r0
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	d00b      	beq.n	8017ac2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8017aaa:	2100      	movs	r1, #0
 8017aac:	6878      	ldr	r0, [r7, #4]
 8017aae:	f7ff fe5d 	bl	801776c <dir_next>
 8017ab2:	4603      	mov	r3, r0
 8017ab4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8017ab6:	7dfb      	ldrb	r3, [r7, #23]
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d0c5      	beq.n	8017a48 <dir_find+0x24>
 8017abc:	e002      	b.n	8017ac4 <dir_find+0xa0>
		if (res != FR_OK) break;
 8017abe:	bf00      	nop
 8017ac0:	e000      	b.n	8017ac4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8017ac2:	bf00      	nop

	return res;
 8017ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8017ac6:	4618      	mov	r0, r3
 8017ac8:	3718      	adds	r7, #24
 8017aca:	46bd      	mov	sp, r7
 8017acc:	bd80      	pop	{r7, pc}

08017ace <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8017ace:	b580      	push	{r7, lr}
 8017ad0:	b084      	sub	sp, #16
 8017ad2:	af00      	add	r7, sp, #0
 8017ad4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	681b      	ldr	r3, [r3, #0]
 8017ada:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8017adc:	2101      	movs	r1, #1
 8017ade:	6878      	ldr	r0, [r7, #4]
 8017ae0:	f7ff ff1a 	bl	8017918 <dir_alloc>
 8017ae4:	4603      	mov	r3, r0
 8017ae6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8017ae8:	7bfb      	ldrb	r3, [r7, #15]
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d11c      	bne.n	8017b28 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	69db      	ldr	r3, [r3, #28]
 8017af2:	4619      	mov	r1, r3
 8017af4:	68b8      	ldr	r0, [r7, #8]
 8017af6:	f7ff f9d7 	bl	8016ea8 <move_window>
 8017afa:	4603      	mov	r3, r0
 8017afc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8017afe:	7bfb      	ldrb	r3, [r7, #15]
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	d111      	bne.n	8017b28 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	6a1b      	ldr	r3, [r3, #32]
 8017b08:	2220      	movs	r2, #32
 8017b0a:	2100      	movs	r1, #0
 8017b0c:	4618      	mov	r0, r3
 8017b0e:	f7fe ff8e 	bl	8016a2e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	6a18      	ldr	r0, [r3, #32]
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	3324      	adds	r3, #36	; 0x24
 8017b1a:	220b      	movs	r2, #11
 8017b1c:	4619      	mov	r1, r3
 8017b1e:	f7fe ff65 	bl	80169ec <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8017b22:	68bb      	ldr	r3, [r7, #8]
 8017b24:	2201      	movs	r2, #1
 8017b26:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8017b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b2a:	4618      	mov	r0, r3
 8017b2c:	3710      	adds	r7, #16
 8017b2e:	46bd      	mov	sp, r7
 8017b30:	bd80      	pop	{r7, pc}
	...

08017b34 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8017b34:	b580      	push	{r7, lr}
 8017b36:	b088      	sub	sp, #32
 8017b38:	af00      	add	r7, sp, #0
 8017b3a:	6078      	str	r0, [r7, #4]
 8017b3c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8017b3e:	683b      	ldr	r3, [r7, #0]
 8017b40:	681b      	ldr	r3, [r3, #0]
 8017b42:	60fb      	str	r3, [r7, #12]
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	3324      	adds	r3, #36	; 0x24
 8017b48:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8017b4a:	220b      	movs	r2, #11
 8017b4c:	2120      	movs	r1, #32
 8017b4e:	68b8      	ldr	r0, [r7, #8]
 8017b50:	f7fe ff6d 	bl	8016a2e <mem_set>
	si = i = 0; ni = 8;
 8017b54:	2300      	movs	r3, #0
 8017b56:	613b      	str	r3, [r7, #16]
 8017b58:	693b      	ldr	r3, [r7, #16]
 8017b5a:	617b      	str	r3, [r7, #20]
 8017b5c:	2308      	movs	r3, #8
 8017b5e:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8017b60:	697b      	ldr	r3, [r7, #20]
 8017b62:	1c5a      	adds	r2, r3, #1
 8017b64:	617a      	str	r2, [r7, #20]
 8017b66:	68fa      	ldr	r2, [r7, #12]
 8017b68:	4413      	add	r3, r2
 8017b6a:	781b      	ldrb	r3, [r3, #0]
 8017b6c:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8017b6e:	7ffb      	ldrb	r3, [r7, #31]
 8017b70:	2b20      	cmp	r3, #32
 8017b72:	d94e      	bls.n	8017c12 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8017b74:	7ffb      	ldrb	r3, [r7, #31]
 8017b76:	2b2f      	cmp	r3, #47	; 0x2f
 8017b78:	d006      	beq.n	8017b88 <create_name+0x54>
 8017b7a:	7ffb      	ldrb	r3, [r7, #31]
 8017b7c:	2b5c      	cmp	r3, #92	; 0x5c
 8017b7e:	d110      	bne.n	8017ba2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8017b80:	e002      	b.n	8017b88 <create_name+0x54>
 8017b82:	697b      	ldr	r3, [r7, #20]
 8017b84:	3301      	adds	r3, #1
 8017b86:	617b      	str	r3, [r7, #20]
 8017b88:	68fa      	ldr	r2, [r7, #12]
 8017b8a:	697b      	ldr	r3, [r7, #20]
 8017b8c:	4413      	add	r3, r2
 8017b8e:	781b      	ldrb	r3, [r3, #0]
 8017b90:	2b2f      	cmp	r3, #47	; 0x2f
 8017b92:	d0f6      	beq.n	8017b82 <create_name+0x4e>
 8017b94:	68fa      	ldr	r2, [r7, #12]
 8017b96:	697b      	ldr	r3, [r7, #20]
 8017b98:	4413      	add	r3, r2
 8017b9a:	781b      	ldrb	r3, [r3, #0]
 8017b9c:	2b5c      	cmp	r3, #92	; 0x5c
 8017b9e:	d0f0      	beq.n	8017b82 <create_name+0x4e>
			break;
 8017ba0:	e038      	b.n	8017c14 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8017ba2:	7ffb      	ldrb	r3, [r7, #31]
 8017ba4:	2b2e      	cmp	r3, #46	; 0x2e
 8017ba6:	d003      	beq.n	8017bb0 <create_name+0x7c>
 8017ba8:	693a      	ldr	r2, [r7, #16]
 8017baa:	69bb      	ldr	r3, [r7, #24]
 8017bac:	429a      	cmp	r2, r3
 8017bae:	d30c      	bcc.n	8017bca <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8017bb0:	69bb      	ldr	r3, [r7, #24]
 8017bb2:	2b0b      	cmp	r3, #11
 8017bb4:	d002      	beq.n	8017bbc <create_name+0x88>
 8017bb6:	7ffb      	ldrb	r3, [r7, #31]
 8017bb8:	2b2e      	cmp	r3, #46	; 0x2e
 8017bba:	d001      	beq.n	8017bc0 <create_name+0x8c>
 8017bbc:	2306      	movs	r3, #6
 8017bbe:	e044      	b.n	8017c4a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8017bc0:	2308      	movs	r3, #8
 8017bc2:	613b      	str	r3, [r7, #16]
 8017bc4:	230b      	movs	r3, #11
 8017bc6:	61bb      	str	r3, [r7, #24]
			continue;
 8017bc8:	e022      	b.n	8017c10 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8017bca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	da04      	bge.n	8017bdc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8017bd2:	7ffb      	ldrb	r3, [r7, #31]
 8017bd4:	3b80      	subs	r3, #128	; 0x80
 8017bd6:	4a1f      	ldr	r2, [pc, #124]	; (8017c54 <create_name+0x120>)
 8017bd8:	5cd3      	ldrb	r3, [r2, r3]
 8017bda:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8017bdc:	7ffb      	ldrb	r3, [r7, #31]
 8017bde:	4619      	mov	r1, r3
 8017be0:	481d      	ldr	r0, [pc, #116]	; (8017c58 <create_name+0x124>)
 8017be2:	f7fe ff65 	bl	8016ab0 <chk_chr>
 8017be6:	4603      	mov	r3, r0
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d001      	beq.n	8017bf0 <create_name+0xbc>
 8017bec:	2306      	movs	r3, #6
 8017bee:	e02c      	b.n	8017c4a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8017bf0:	7ffb      	ldrb	r3, [r7, #31]
 8017bf2:	2b60      	cmp	r3, #96	; 0x60
 8017bf4:	d905      	bls.n	8017c02 <create_name+0xce>
 8017bf6:	7ffb      	ldrb	r3, [r7, #31]
 8017bf8:	2b7a      	cmp	r3, #122	; 0x7a
 8017bfa:	d802      	bhi.n	8017c02 <create_name+0xce>
 8017bfc:	7ffb      	ldrb	r3, [r7, #31]
 8017bfe:	3b20      	subs	r3, #32
 8017c00:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8017c02:	693b      	ldr	r3, [r7, #16]
 8017c04:	1c5a      	adds	r2, r3, #1
 8017c06:	613a      	str	r2, [r7, #16]
 8017c08:	68ba      	ldr	r2, [r7, #8]
 8017c0a:	4413      	add	r3, r2
 8017c0c:	7ffa      	ldrb	r2, [r7, #31]
 8017c0e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8017c10:	e7a6      	b.n	8017b60 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8017c12:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8017c14:	68fa      	ldr	r2, [r7, #12]
 8017c16:	697b      	ldr	r3, [r7, #20]
 8017c18:	441a      	add	r2, r3
 8017c1a:	683b      	ldr	r3, [r7, #0]
 8017c1c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8017c1e:	693b      	ldr	r3, [r7, #16]
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d101      	bne.n	8017c28 <create_name+0xf4>
 8017c24:	2306      	movs	r3, #6
 8017c26:	e010      	b.n	8017c4a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8017c28:	68bb      	ldr	r3, [r7, #8]
 8017c2a:	781b      	ldrb	r3, [r3, #0]
 8017c2c:	2be5      	cmp	r3, #229	; 0xe5
 8017c2e:	d102      	bne.n	8017c36 <create_name+0x102>
 8017c30:	68bb      	ldr	r3, [r7, #8]
 8017c32:	2205      	movs	r2, #5
 8017c34:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8017c36:	7ffb      	ldrb	r3, [r7, #31]
 8017c38:	2b20      	cmp	r3, #32
 8017c3a:	d801      	bhi.n	8017c40 <create_name+0x10c>
 8017c3c:	2204      	movs	r2, #4
 8017c3e:	e000      	b.n	8017c42 <create_name+0x10e>
 8017c40:	2200      	movs	r2, #0
 8017c42:	68bb      	ldr	r3, [r7, #8]
 8017c44:	330b      	adds	r3, #11
 8017c46:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8017c48:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8017c4a:	4618      	mov	r0, r3
 8017c4c:	3720      	adds	r7, #32
 8017c4e:	46bd      	mov	sp, r7
 8017c50:	bd80      	pop	{r7, pc}
 8017c52:	bf00      	nop
 8017c54:	0801fca8 	.word	0x0801fca8
 8017c58:	0801fad4 	.word	0x0801fad4

08017c5c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8017c5c:	b580      	push	{r7, lr}
 8017c5e:	b086      	sub	sp, #24
 8017c60:	af00      	add	r7, sp, #0
 8017c62:	6078      	str	r0, [r7, #4]
 8017c64:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8017c6a:	693b      	ldr	r3, [r7, #16]
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8017c70:	e002      	b.n	8017c78 <follow_path+0x1c>
 8017c72:	683b      	ldr	r3, [r7, #0]
 8017c74:	3301      	adds	r3, #1
 8017c76:	603b      	str	r3, [r7, #0]
 8017c78:	683b      	ldr	r3, [r7, #0]
 8017c7a:	781b      	ldrb	r3, [r3, #0]
 8017c7c:	2b2f      	cmp	r3, #47	; 0x2f
 8017c7e:	d0f8      	beq.n	8017c72 <follow_path+0x16>
 8017c80:	683b      	ldr	r3, [r7, #0]
 8017c82:	781b      	ldrb	r3, [r3, #0]
 8017c84:	2b5c      	cmp	r3, #92	; 0x5c
 8017c86:	d0f4      	beq.n	8017c72 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8017c88:	693b      	ldr	r3, [r7, #16]
 8017c8a:	2200      	movs	r2, #0
 8017c8c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8017c8e:	683b      	ldr	r3, [r7, #0]
 8017c90:	781b      	ldrb	r3, [r3, #0]
 8017c92:	2b1f      	cmp	r3, #31
 8017c94:	d80a      	bhi.n	8017cac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	2280      	movs	r2, #128	; 0x80
 8017c9a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8017c9e:	2100      	movs	r1, #0
 8017ca0:	6878      	ldr	r0, [r7, #4]
 8017ca2:	f7ff fcda 	bl	801765a <dir_sdi>
 8017ca6:	4603      	mov	r3, r0
 8017ca8:	75fb      	strb	r3, [r7, #23]
 8017caa:	e048      	b.n	8017d3e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8017cac:	463b      	mov	r3, r7
 8017cae:	4619      	mov	r1, r3
 8017cb0:	6878      	ldr	r0, [r7, #4]
 8017cb2:	f7ff ff3f 	bl	8017b34 <create_name>
 8017cb6:	4603      	mov	r3, r0
 8017cb8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8017cba:	7dfb      	ldrb	r3, [r7, #23]
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d139      	bne.n	8017d34 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8017cc0:	6878      	ldr	r0, [r7, #4]
 8017cc2:	f7ff feaf 	bl	8017a24 <dir_find>
 8017cc6:	4603      	mov	r3, r0
 8017cc8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017cd0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8017cd2:	7dfb      	ldrb	r3, [r7, #23]
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	d00a      	beq.n	8017cee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8017cd8:	7dfb      	ldrb	r3, [r7, #23]
 8017cda:	2b04      	cmp	r3, #4
 8017cdc:	d12c      	bne.n	8017d38 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8017cde:	7afb      	ldrb	r3, [r7, #11]
 8017ce0:	f003 0304 	and.w	r3, r3, #4
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d127      	bne.n	8017d38 <follow_path+0xdc>
 8017ce8:	2305      	movs	r3, #5
 8017cea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8017cec:	e024      	b.n	8017d38 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8017cee:	7afb      	ldrb	r3, [r7, #11]
 8017cf0:	f003 0304 	and.w	r3, r3, #4
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d121      	bne.n	8017d3c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8017cf8:	693b      	ldr	r3, [r7, #16]
 8017cfa:	799b      	ldrb	r3, [r3, #6]
 8017cfc:	f003 0310 	and.w	r3, r3, #16
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d102      	bne.n	8017d0a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8017d04:	2305      	movs	r3, #5
 8017d06:	75fb      	strb	r3, [r7, #23]
 8017d08:	e019      	b.n	8017d3e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8017d0a:	68fb      	ldr	r3, [r7, #12]
 8017d0c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	695b      	ldr	r3, [r3, #20]
 8017d14:	68fa      	ldr	r2, [r7, #12]
 8017d16:	8992      	ldrh	r2, [r2, #12]
 8017d18:	fbb3 f0f2 	udiv	r0, r3, r2
 8017d1c:	fb02 f200 	mul.w	r2, r2, r0
 8017d20:	1a9b      	subs	r3, r3, r2
 8017d22:	440b      	add	r3, r1
 8017d24:	4619      	mov	r1, r3
 8017d26:	68f8      	ldr	r0, [r7, #12]
 8017d28:	f7ff fe3d 	bl	80179a6 <ld_clust>
 8017d2c:	4602      	mov	r2, r0
 8017d2e:	693b      	ldr	r3, [r7, #16]
 8017d30:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8017d32:	e7bb      	b.n	8017cac <follow_path+0x50>
			if (res != FR_OK) break;
 8017d34:	bf00      	nop
 8017d36:	e002      	b.n	8017d3e <follow_path+0xe2>
				break;
 8017d38:	bf00      	nop
 8017d3a:	e000      	b.n	8017d3e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8017d3c:	bf00      	nop
			}
		}
	}

	return res;
 8017d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8017d40:	4618      	mov	r0, r3
 8017d42:	3718      	adds	r7, #24
 8017d44:	46bd      	mov	sp, r7
 8017d46:	bd80      	pop	{r7, pc}

08017d48 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8017d48:	b480      	push	{r7}
 8017d4a:	b087      	sub	sp, #28
 8017d4c:	af00      	add	r7, sp, #0
 8017d4e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8017d50:	f04f 33ff 	mov.w	r3, #4294967295
 8017d54:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	681b      	ldr	r3, [r3, #0]
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	d031      	beq.n	8017dc2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	681b      	ldr	r3, [r3, #0]
 8017d62:	617b      	str	r3, [r7, #20]
 8017d64:	e002      	b.n	8017d6c <get_ldnumber+0x24>
 8017d66:	697b      	ldr	r3, [r7, #20]
 8017d68:	3301      	adds	r3, #1
 8017d6a:	617b      	str	r3, [r7, #20]
 8017d6c:	697b      	ldr	r3, [r7, #20]
 8017d6e:	781b      	ldrb	r3, [r3, #0]
 8017d70:	2b20      	cmp	r3, #32
 8017d72:	d903      	bls.n	8017d7c <get_ldnumber+0x34>
 8017d74:	697b      	ldr	r3, [r7, #20]
 8017d76:	781b      	ldrb	r3, [r3, #0]
 8017d78:	2b3a      	cmp	r3, #58	; 0x3a
 8017d7a:	d1f4      	bne.n	8017d66 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8017d7c:	697b      	ldr	r3, [r7, #20]
 8017d7e:	781b      	ldrb	r3, [r3, #0]
 8017d80:	2b3a      	cmp	r3, #58	; 0x3a
 8017d82:	d11c      	bne.n	8017dbe <get_ldnumber+0x76>
			tp = *path;
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	681b      	ldr	r3, [r3, #0]
 8017d88:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8017d8a:	68fb      	ldr	r3, [r7, #12]
 8017d8c:	1c5a      	adds	r2, r3, #1
 8017d8e:	60fa      	str	r2, [r7, #12]
 8017d90:	781b      	ldrb	r3, [r3, #0]
 8017d92:	3b30      	subs	r3, #48	; 0x30
 8017d94:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8017d96:	68bb      	ldr	r3, [r7, #8]
 8017d98:	2b09      	cmp	r3, #9
 8017d9a:	d80e      	bhi.n	8017dba <get_ldnumber+0x72>
 8017d9c:	68fa      	ldr	r2, [r7, #12]
 8017d9e:	697b      	ldr	r3, [r7, #20]
 8017da0:	429a      	cmp	r2, r3
 8017da2:	d10a      	bne.n	8017dba <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8017da4:	68bb      	ldr	r3, [r7, #8]
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	d107      	bne.n	8017dba <get_ldnumber+0x72>
					vol = (int)i;
 8017daa:	68bb      	ldr	r3, [r7, #8]
 8017dac:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8017dae:	697b      	ldr	r3, [r7, #20]
 8017db0:	3301      	adds	r3, #1
 8017db2:	617b      	str	r3, [r7, #20]
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	697a      	ldr	r2, [r7, #20]
 8017db8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8017dba:	693b      	ldr	r3, [r7, #16]
 8017dbc:	e002      	b.n	8017dc4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8017dbe:	2300      	movs	r3, #0
 8017dc0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8017dc2:	693b      	ldr	r3, [r7, #16]
}
 8017dc4:	4618      	mov	r0, r3
 8017dc6:	371c      	adds	r7, #28
 8017dc8:	46bd      	mov	sp, r7
 8017dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dce:	4770      	bx	lr

08017dd0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8017dd0:	b580      	push	{r7, lr}
 8017dd2:	b082      	sub	sp, #8
 8017dd4:	af00      	add	r7, sp, #0
 8017dd6:	6078      	str	r0, [r7, #4]
 8017dd8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	2200      	movs	r2, #0
 8017dde:	70da      	strb	r2, [r3, #3]
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	f04f 32ff 	mov.w	r2, #4294967295
 8017de6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8017de8:	6839      	ldr	r1, [r7, #0]
 8017dea:	6878      	ldr	r0, [r7, #4]
 8017dec:	f7ff f85c 	bl	8016ea8 <move_window>
 8017df0:	4603      	mov	r3, r0
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d001      	beq.n	8017dfa <check_fs+0x2a>
 8017df6:	2304      	movs	r3, #4
 8017df8:	e038      	b.n	8017e6c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	3338      	adds	r3, #56	; 0x38
 8017dfe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017e02:	4618      	mov	r0, r3
 8017e04:	f7fe fd70 	bl	80168e8 <ld_word>
 8017e08:	4603      	mov	r3, r0
 8017e0a:	461a      	mov	r2, r3
 8017e0c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8017e10:	429a      	cmp	r2, r3
 8017e12:	d001      	beq.n	8017e18 <check_fs+0x48>
 8017e14:	2303      	movs	r3, #3
 8017e16:	e029      	b.n	8017e6c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017e1e:	2be9      	cmp	r3, #233	; 0xe9
 8017e20:	d009      	beq.n	8017e36 <check_fs+0x66>
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017e28:	2beb      	cmp	r3, #235	; 0xeb
 8017e2a:	d11e      	bne.n	8017e6a <check_fs+0x9a>
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8017e32:	2b90      	cmp	r3, #144	; 0x90
 8017e34:	d119      	bne.n	8017e6a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	3338      	adds	r3, #56	; 0x38
 8017e3a:	3336      	adds	r3, #54	; 0x36
 8017e3c:	4618      	mov	r0, r3
 8017e3e:	f7fe fd6b 	bl	8016918 <ld_dword>
 8017e42:	4603      	mov	r3, r0
 8017e44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017e48:	4a0a      	ldr	r2, [pc, #40]	; (8017e74 <check_fs+0xa4>)
 8017e4a:	4293      	cmp	r3, r2
 8017e4c:	d101      	bne.n	8017e52 <check_fs+0x82>
 8017e4e:	2300      	movs	r3, #0
 8017e50:	e00c      	b.n	8017e6c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	3338      	adds	r3, #56	; 0x38
 8017e56:	3352      	adds	r3, #82	; 0x52
 8017e58:	4618      	mov	r0, r3
 8017e5a:	f7fe fd5d 	bl	8016918 <ld_dword>
 8017e5e:	4602      	mov	r2, r0
 8017e60:	4b05      	ldr	r3, [pc, #20]	; (8017e78 <check_fs+0xa8>)
 8017e62:	429a      	cmp	r2, r3
 8017e64:	d101      	bne.n	8017e6a <check_fs+0x9a>
 8017e66:	2300      	movs	r3, #0
 8017e68:	e000      	b.n	8017e6c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8017e6a:	2302      	movs	r3, #2
}
 8017e6c:	4618      	mov	r0, r3
 8017e6e:	3708      	adds	r7, #8
 8017e70:	46bd      	mov	sp, r7
 8017e72:	bd80      	pop	{r7, pc}
 8017e74:	00544146 	.word	0x00544146
 8017e78:	33544146 	.word	0x33544146

08017e7c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8017e7c:	b580      	push	{r7, lr}
 8017e7e:	b096      	sub	sp, #88	; 0x58
 8017e80:	af00      	add	r7, sp, #0
 8017e82:	60f8      	str	r0, [r7, #12]
 8017e84:	60b9      	str	r1, [r7, #8]
 8017e86:	4613      	mov	r3, r2
 8017e88:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8017e8a:	68bb      	ldr	r3, [r7, #8]
 8017e8c:	2200      	movs	r2, #0
 8017e8e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8017e90:	68f8      	ldr	r0, [r7, #12]
 8017e92:	f7ff ff59 	bl	8017d48 <get_ldnumber>
 8017e96:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8017e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	da01      	bge.n	8017ea2 <find_volume+0x26>
 8017e9e:	230b      	movs	r3, #11
 8017ea0:	e26c      	b.n	801837c <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8017ea2:	4aa4      	ldr	r2, [pc, #656]	; (8018134 <find_volume+0x2b8>)
 8017ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017eaa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8017eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d101      	bne.n	8017eb6 <find_volume+0x3a>
 8017eb2:	230c      	movs	r3, #12
 8017eb4:	e262      	b.n	801837c <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 8017eb6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017eb8:	f7fe fe15 	bl	8016ae6 <lock_fs>
 8017ebc:	4603      	mov	r3, r0
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	d101      	bne.n	8017ec6 <find_volume+0x4a>
 8017ec2:	230f      	movs	r3, #15
 8017ec4:	e25a      	b.n	801837c <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 8017ec6:	68bb      	ldr	r3, [r7, #8]
 8017ec8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017eca:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8017ecc:	79fb      	ldrb	r3, [r7, #7]
 8017ece:	f023 0301 	bic.w	r3, r3, #1
 8017ed2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8017ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ed6:	781b      	ldrb	r3, [r3, #0]
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d01a      	beq.n	8017f12 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8017edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ede:	785b      	ldrb	r3, [r3, #1]
 8017ee0:	4618      	mov	r0, r3
 8017ee2:	f7fe fc63 	bl	80167ac <disk_status>
 8017ee6:	4603      	mov	r3, r0
 8017ee8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8017eec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017ef0:	f003 0301 	and.w	r3, r3, #1
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d10c      	bne.n	8017f12 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8017ef8:	79fb      	ldrb	r3, [r7, #7]
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d007      	beq.n	8017f0e <find_volume+0x92>
 8017efe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017f02:	f003 0304 	and.w	r3, r3, #4
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d001      	beq.n	8017f0e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8017f0a:	230a      	movs	r3, #10
 8017f0c:	e236      	b.n	801837c <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 8017f0e:	2300      	movs	r3, #0
 8017f10:	e234      	b.n	801837c <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8017f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f14:	2200      	movs	r2, #0
 8017f16:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8017f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017f1a:	b2da      	uxtb	r2, r3
 8017f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f1e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8017f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f22:	785b      	ldrb	r3, [r3, #1]
 8017f24:	4618      	mov	r0, r3
 8017f26:	f7fe fc5b 	bl	80167e0 <disk_initialize>
 8017f2a:	4603      	mov	r3, r0
 8017f2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8017f30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017f34:	f003 0301 	and.w	r3, r3, #1
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d001      	beq.n	8017f40 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8017f3c:	2303      	movs	r3, #3
 8017f3e:	e21d      	b.n	801837c <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8017f40:	79fb      	ldrb	r3, [r7, #7]
 8017f42:	2b00      	cmp	r3, #0
 8017f44:	d007      	beq.n	8017f56 <find_volume+0xda>
 8017f46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017f4a:	f003 0304 	and.w	r3, r3, #4
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	d001      	beq.n	8017f56 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8017f52:	230a      	movs	r3, #10
 8017f54:	e212      	b.n	801837c <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8017f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f58:	7858      	ldrb	r0, [r3, #1]
 8017f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f5c:	330c      	adds	r3, #12
 8017f5e:	461a      	mov	r2, r3
 8017f60:	2102      	movs	r1, #2
 8017f62:	f7fe fca3 	bl	80168ac <disk_ioctl>
 8017f66:	4603      	mov	r3, r0
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	d001      	beq.n	8017f70 <find_volume+0xf4>
 8017f6c:	2301      	movs	r3, #1
 8017f6e:	e205      	b.n	801837c <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8017f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f72:	899b      	ldrh	r3, [r3, #12]
 8017f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017f78:	d80d      	bhi.n	8017f96 <find_volume+0x11a>
 8017f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f7c:	899b      	ldrh	r3, [r3, #12]
 8017f7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017f82:	d308      	bcc.n	8017f96 <find_volume+0x11a>
 8017f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f86:	899b      	ldrh	r3, [r3, #12]
 8017f88:	461a      	mov	r2, r3
 8017f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f8c:	899b      	ldrh	r3, [r3, #12]
 8017f8e:	3b01      	subs	r3, #1
 8017f90:	4013      	ands	r3, r2
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d001      	beq.n	8017f9a <find_volume+0x11e>
 8017f96:	2301      	movs	r3, #1
 8017f98:	e1f0      	b.n	801837c <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8017f9a:	2300      	movs	r3, #0
 8017f9c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8017f9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017fa0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017fa2:	f7ff ff15 	bl	8017dd0 <check_fs>
 8017fa6:	4603      	mov	r3, r0
 8017fa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8017fac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017fb0:	2b02      	cmp	r3, #2
 8017fb2:	d14b      	bne.n	801804c <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8017fb4:	2300      	movs	r3, #0
 8017fb6:	643b      	str	r3, [r7, #64]	; 0x40
 8017fb8:	e01f      	b.n	8017ffa <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8017fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017fbc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8017fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017fc2:	011b      	lsls	r3, r3, #4
 8017fc4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8017fc8:	4413      	add	r3, r2
 8017fca:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8017fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fce:	3304      	adds	r3, #4
 8017fd0:	781b      	ldrb	r3, [r3, #0]
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d006      	beq.n	8017fe4 <find_volume+0x168>
 8017fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fd8:	3308      	adds	r3, #8
 8017fda:	4618      	mov	r0, r3
 8017fdc:	f7fe fc9c 	bl	8016918 <ld_dword>
 8017fe0:	4602      	mov	r2, r0
 8017fe2:	e000      	b.n	8017fe6 <find_volume+0x16a>
 8017fe4:	2200      	movs	r2, #0
 8017fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017fe8:	009b      	lsls	r3, r3, #2
 8017fea:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8017fee:	440b      	add	r3, r1
 8017ff0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8017ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ff6:	3301      	adds	r3, #1
 8017ff8:	643b      	str	r3, [r7, #64]	; 0x40
 8017ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ffc:	2b03      	cmp	r3, #3
 8017ffe:	d9dc      	bls.n	8017fba <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8018000:	2300      	movs	r3, #0
 8018002:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8018004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018006:	2b00      	cmp	r3, #0
 8018008:	d002      	beq.n	8018010 <find_volume+0x194>
 801800a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801800c:	3b01      	subs	r3, #1
 801800e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8018010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018012:	009b      	lsls	r3, r3, #2
 8018014:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8018018:	4413      	add	r3, r2
 801801a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801801e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8018020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018022:	2b00      	cmp	r3, #0
 8018024:	d005      	beq.n	8018032 <find_volume+0x1b6>
 8018026:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018028:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801802a:	f7ff fed1 	bl	8017dd0 <check_fs>
 801802e:	4603      	mov	r3, r0
 8018030:	e000      	b.n	8018034 <find_volume+0x1b8>
 8018032:	2303      	movs	r3, #3
 8018034:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8018038:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801803c:	2b01      	cmp	r3, #1
 801803e:	d905      	bls.n	801804c <find_volume+0x1d0>
 8018040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018042:	3301      	adds	r3, #1
 8018044:	643b      	str	r3, [r7, #64]	; 0x40
 8018046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018048:	2b03      	cmp	r3, #3
 801804a:	d9e1      	bls.n	8018010 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801804c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018050:	2b04      	cmp	r3, #4
 8018052:	d101      	bne.n	8018058 <find_volume+0x1dc>
 8018054:	2301      	movs	r3, #1
 8018056:	e191      	b.n	801837c <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8018058:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801805c:	2b01      	cmp	r3, #1
 801805e:	d901      	bls.n	8018064 <find_volume+0x1e8>
 8018060:	230d      	movs	r3, #13
 8018062:	e18b      	b.n	801837c <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8018064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018066:	3338      	adds	r3, #56	; 0x38
 8018068:	330b      	adds	r3, #11
 801806a:	4618      	mov	r0, r3
 801806c:	f7fe fc3c 	bl	80168e8 <ld_word>
 8018070:	4603      	mov	r3, r0
 8018072:	461a      	mov	r2, r3
 8018074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018076:	899b      	ldrh	r3, [r3, #12]
 8018078:	429a      	cmp	r2, r3
 801807a:	d001      	beq.n	8018080 <find_volume+0x204>
 801807c:	230d      	movs	r3, #13
 801807e:	e17d      	b.n	801837c <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8018080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018082:	3338      	adds	r3, #56	; 0x38
 8018084:	3316      	adds	r3, #22
 8018086:	4618      	mov	r0, r3
 8018088:	f7fe fc2e 	bl	80168e8 <ld_word>
 801808c:	4603      	mov	r3, r0
 801808e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8018090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018092:	2b00      	cmp	r3, #0
 8018094:	d106      	bne.n	80180a4 <find_volume+0x228>
 8018096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018098:	3338      	adds	r3, #56	; 0x38
 801809a:	3324      	adds	r3, #36	; 0x24
 801809c:	4618      	mov	r0, r3
 801809e:	f7fe fc3b 	bl	8016918 <ld_dword>
 80180a2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80180a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80180a8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80180aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180ac:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80180b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180b2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80180b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180b6:	789b      	ldrb	r3, [r3, #2]
 80180b8:	2b01      	cmp	r3, #1
 80180ba:	d005      	beq.n	80180c8 <find_volume+0x24c>
 80180bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180be:	789b      	ldrb	r3, [r3, #2]
 80180c0:	2b02      	cmp	r3, #2
 80180c2:	d001      	beq.n	80180c8 <find_volume+0x24c>
 80180c4:	230d      	movs	r3, #13
 80180c6:	e159      	b.n	801837c <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80180c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180ca:	789b      	ldrb	r3, [r3, #2]
 80180cc:	461a      	mov	r2, r3
 80180ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80180d0:	fb02 f303 	mul.w	r3, r2, r3
 80180d4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80180d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80180dc:	b29a      	uxth	r2, r3
 80180de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180e0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80180e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180e4:	895b      	ldrh	r3, [r3, #10]
 80180e6:	2b00      	cmp	r3, #0
 80180e8:	d008      	beq.n	80180fc <find_volume+0x280>
 80180ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180ec:	895b      	ldrh	r3, [r3, #10]
 80180ee:	461a      	mov	r2, r3
 80180f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180f2:	895b      	ldrh	r3, [r3, #10]
 80180f4:	3b01      	subs	r3, #1
 80180f6:	4013      	ands	r3, r2
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d001      	beq.n	8018100 <find_volume+0x284>
 80180fc:	230d      	movs	r3, #13
 80180fe:	e13d      	b.n	801837c <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8018100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018102:	3338      	adds	r3, #56	; 0x38
 8018104:	3311      	adds	r3, #17
 8018106:	4618      	mov	r0, r3
 8018108:	f7fe fbee 	bl	80168e8 <ld_word>
 801810c:	4603      	mov	r3, r0
 801810e:	461a      	mov	r2, r3
 8018110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018112:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8018114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018116:	891b      	ldrh	r3, [r3, #8]
 8018118:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801811a:	8992      	ldrh	r2, [r2, #12]
 801811c:	0952      	lsrs	r2, r2, #5
 801811e:	b292      	uxth	r2, r2
 8018120:	fbb3 f1f2 	udiv	r1, r3, r2
 8018124:	fb02 f201 	mul.w	r2, r2, r1
 8018128:	1a9b      	subs	r3, r3, r2
 801812a:	b29b      	uxth	r3, r3
 801812c:	2b00      	cmp	r3, #0
 801812e:	d003      	beq.n	8018138 <find_volume+0x2bc>
 8018130:	230d      	movs	r3, #13
 8018132:	e123      	b.n	801837c <find_volume+0x500>
 8018134:	20000474 	.word	0x20000474

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8018138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801813a:	3338      	adds	r3, #56	; 0x38
 801813c:	3313      	adds	r3, #19
 801813e:	4618      	mov	r0, r3
 8018140:	f7fe fbd2 	bl	80168e8 <ld_word>
 8018144:	4603      	mov	r3, r0
 8018146:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8018148:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801814a:	2b00      	cmp	r3, #0
 801814c:	d106      	bne.n	801815c <find_volume+0x2e0>
 801814e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018150:	3338      	adds	r3, #56	; 0x38
 8018152:	3320      	adds	r3, #32
 8018154:	4618      	mov	r0, r3
 8018156:	f7fe fbdf 	bl	8016918 <ld_dword>
 801815a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801815c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801815e:	3338      	adds	r3, #56	; 0x38
 8018160:	330e      	adds	r3, #14
 8018162:	4618      	mov	r0, r3
 8018164:	f7fe fbc0 	bl	80168e8 <ld_word>
 8018168:	4603      	mov	r3, r0
 801816a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801816c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801816e:	2b00      	cmp	r3, #0
 8018170:	d101      	bne.n	8018176 <find_volume+0x2fa>
 8018172:	230d      	movs	r3, #13
 8018174:	e102      	b.n	801837c <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8018176:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8018178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801817a:	4413      	add	r3, r2
 801817c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801817e:	8911      	ldrh	r1, [r2, #8]
 8018180:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018182:	8992      	ldrh	r2, [r2, #12]
 8018184:	0952      	lsrs	r2, r2, #5
 8018186:	b292      	uxth	r2, r2
 8018188:	fbb1 f2f2 	udiv	r2, r1, r2
 801818c:	b292      	uxth	r2, r2
 801818e:	4413      	add	r3, r2
 8018190:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8018192:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018196:	429a      	cmp	r2, r3
 8018198:	d201      	bcs.n	801819e <find_volume+0x322>
 801819a:	230d      	movs	r3, #13
 801819c:	e0ee      	b.n	801837c <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801819e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80181a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181a2:	1ad3      	subs	r3, r2, r3
 80181a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80181a6:	8952      	ldrh	r2, [r2, #10]
 80181a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80181ac:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80181ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d101      	bne.n	80181b8 <find_volume+0x33c>
 80181b4:	230d      	movs	r3, #13
 80181b6:	e0e1      	b.n	801837c <find_volume+0x500>
		fmt = FS_FAT32;
 80181b8:	2303      	movs	r3, #3
 80181ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80181be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181c0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80181c4:	4293      	cmp	r3, r2
 80181c6:	d802      	bhi.n	80181ce <find_volume+0x352>
 80181c8:	2302      	movs	r3, #2
 80181ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80181ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181d0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80181d4:	4293      	cmp	r3, r2
 80181d6:	d802      	bhi.n	80181de <find_volume+0x362>
 80181d8:	2301      	movs	r3, #1
 80181da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80181de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181e0:	1c9a      	adds	r2, r3, #2
 80181e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181e4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80181e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80181ea:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80181ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80181ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80181f0:	441a      	add	r2, r3
 80181f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181f4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80181f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80181f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181fa:	441a      	add	r2, r3
 80181fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181fe:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8018200:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018204:	2b03      	cmp	r3, #3
 8018206:	d11e      	bne.n	8018246 <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8018208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801820a:	3338      	adds	r3, #56	; 0x38
 801820c:	332a      	adds	r3, #42	; 0x2a
 801820e:	4618      	mov	r0, r3
 8018210:	f7fe fb6a 	bl	80168e8 <ld_word>
 8018214:	4603      	mov	r3, r0
 8018216:	2b00      	cmp	r3, #0
 8018218:	d001      	beq.n	801821e <find_volume+0x3a2>
 801821a:	230d      	movs	r3, #13
 801821c:	e0ae      	b.n	801837c <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801821e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018220:	891b      	ldrh	r3, [r3, #8]
 8018222:	2b00      	cmp	r3, #0
 8018224:	d001      	beq.n	801822a <find_volume+0x3ae>
 8018226:	230d      	movs	r3, #13
 8018228:	e0a8      	b.n	801837c <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801822a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801822c:	3338      	adds	r3, #56	; 0x38
 801822e:	332c      	adds	r3, #44	; 0x2c
 8018230:	4618      	mov	r0, r3
 8018232:	f7fe fb71 	bl	8016918 <ld_dword>
 8018236:	4602      	mov	r2, r0
 8018238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801823a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801823c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801823e:	69db      	ldr	r3, [r3, #28]
 8018240:	009b      	lsls	r3, r3, #2
 8018242:	647b      	str	r3, [r7, #68]	; 0x44
 8018244:	e01f      	b.n	8018286 <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8018246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018248:	891b      	ldrh	r3, [r3, #8]
 801824a:	2b00      	cmp	r3, #0
 801824c:	d101      	bne.n	8018252 <find_volume+0x3d6>
 801824e:	230d      	movs	r3, #13
 8018250:	e094      	b.n	801837c <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8018252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018254:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018258:	441a      	add	r2, r3
 801825a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801825c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801825e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018262:	2b02      	cmp	r3, #2
 8018264:	d103      	bne.n	801826e <find_volume+0x3f2>
 8018266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018268:	69db      	ldr	r3, [r3, #28]
 801826a:	005b      	lsls	r3, r3, #1
 801826c:	e00a      	b.n	8018284 <find_volume+0x408>
 801826e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018270:	69da      	ldr	r2, [r3, #28]
 8018272:	4613      	mov	r3, r2
 8018274:	005b      	lsls	r3, r3, #1
 8018276:	4413      	add	r3, r2
 8018278:	085a      	lsrs	r2, r3, #1
 801827a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801827c:	69db      	ldr	r3, [r3, #28]
 801827e:	f003 0301 	and.w	r3, r3, #1
 8018282:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8018284:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8018286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018288:	6a1a      	ldr	r2, [r3, #32]
 801828a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801828c:	899b      	ldrh	r3, [r3, #12]
 801828e:	4619      	mov	r1, r3
 8018290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018292:	440b      	add	r3, r1
 8018294:	3b01      	subs	r3, #1
 8018296:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018298:	8989      	ldrh	r1, [r1, #12]
 801829a:	fbb3 f3f1 	udiv	r3, r3, r1
 801829e:	429a      	cmp	r2, r3
 80182a0:	d201      	bcs.n	80182a6 <find_volume+0x42a>
 80182a2:	230d      	movs	r3, #13
 80182a4:	e06a      	b.n	801837c <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80182a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182a8:	f04f 32ff 	mov.w	r2, #4294967295
 80182ac:	619a      	str	r2, [r3, #24]
 80182ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182b0:	699a      	ldr	r2, [r3, #24]
 80182b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182b4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80182b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182b8:	2280      	movs	r2, #128	; 0x80
 80182ba:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80182bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80182c0:	2b03      	cmp	r3, #3
 80182c2:	d149      	bne.n	8018358 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80182c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182c6:	3338      	adds	r3, #56	; 0x38
 80182c8:	3330      	adds	r3, #48	; 0x30
 80182ca:	4618      	mov	r0, r3
 80182cc:	f7fe fb0c 	bl	80168e8 <ld_word>
 80182d0:	4603      	mov	r3, r0
 80182d2:	2b01      	cmp	r3, #1
 80182d4:	d140      	bne.n	8018358 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 80182d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80182d8:	3301      	adds	r3, #1
 80182da:	4619      	mov	r1, r3
 80182dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80182de:	f7fe fde3 	bl	8016ea8 <move_window>
 80182e2:	4603      	mov	r3, r0
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	d137      	bne.n	8018358 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 80182e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182ea:	2200      	movs	r2, #0
 80182ec:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80182ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182f0:	3338      	adds	r3, #56	; 0x38
 80182f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80182f6:	4618      	mov	r0, r3
 80182f8:	f7fe faf6 	bl	80168e8 <ld_word>
 80182fc:	4603      	mov	r3, r0
 80182fe:	461a      	mov	r2, r3
 8018300:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8018304:	429a      	cmp	r2, r3
 8018306:	d127      	bne.n	8018358 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8018308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801830a:	3338      	adds	r3, #56	; 0x38
 801830c:	4618      	mov	r0, r3
 801830e:	f7fe fb03 	bl	8016918 <ld_dword>
 8018312:	4602      	mov	r2, r0
 8018314:	4b1b      	ldr	r3, [pc, #108]	; (8018384 <find_volume+0x508>)
 8018316:	429a      	cmp	r2, r3
 8018318:	d11e      	bne.n	8018358 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801831a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801831c:	3338      	adds	r3, #56	; 0x38
 801831e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8018322:	4618      	mov	r0, r3
 8018324:	f7fe faf8 	bl	8016918 <ld_dword>
 8018328:	4602      	mov	r2, r0
 801832a:	4b17      	ldr	r3, [pc, #92]	; (8018388 <find_volume+0x50c>)
 801832c:	429a      	cmp	r2, r3
 801832e:	d113      	bne.n	8018358 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8018330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018332:	3338      	adds	r3, #56	; 0x38
 8018334:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8018338:	4618      	mov	r0, r3
 801833a:	f7fe faed 	bl	8016918 <ld_dword>
 801833e:	4602      	mov	r2, r0
 8018340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018342:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8018344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018346:	3338      	adds	r3, #56	; 0x38
 8018348:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801834c:	4618      	mov	r0, r3
 801834e:	f7fe fae3 	bl	8016918 <ld_dword>
 8018352:	4602      	mov	r2, r0
 8018354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018356:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8018358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801835a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801835e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8018360:	4b0a      	ldr	r3, [pc, #40]	; (801838c <find_volume+0x510>)
 8018362:	881b      	ldrh	r3, [r3, #0]
 8018364:	3301      	adds	r3, #1
 8018366:	b29a      	uxth	r2, r3
 8018368:	4b08      	ldr	r3, [pc, #32]	; (801838c <find_volume+0x510>)
 801836a:	801a      	strh	r2, [r3, #0]
 801836c:	4b07      	ldr	r3, [pc, #28]	; (801838c <find_volume+0x510>)
 801836e:	881a      	ldrh	r2, [r3, #0]
 8018370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018372:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8018374:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018376:	f7fe fd2f 	bl	8016dd8 <clear_lock>
#endif
	return FR_OK;
 801837a:	2300      	movs	r3, #0
}
 801837c:	4618      	mov	r0, r3
 801837e:	3758      	adds	r7, #88	; 0x58
 8018380:	46bd      	mov	sp, r7
 8018382:	bd80      	pop	{r7, pc}
 8018384:	41615252 	.word	0x41615252
 8018388:	61417272 	.word	0x61417272
 801838c:	20000478 	.word	0x20000478

08018390 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8018390:	b580      	push	{r7, lr}
 8018392:	b084      	sub	sp, #16
 8018394:	af00      	add	r7, sp, #0
 8018396:	6078      	str	r0, [r7, #4]
 8018398:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801839a:	2309      	movs	r3, #9
 801839c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d02e      	beq.n	8018402 <validate+0x72>
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d02a      	beq.n	8018402 <validate+0x72>
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	781b      	ldrb	r3, [r3, #0]
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d025      	beq.n	8018402 <validate+0x72>
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	889a      	ldrh	r2, [r3, #4]
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	681b      	ldr	r3, [r3, #0]
 80183be:	88db      	ldrh	r3, [r3, #6]
 80183c0:	429a      	cmp	r2, r3
 80183c2:	d11e      	bne.n	8018402 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	681b      	ldr	r3, [r3, #0]
 80183c8:	4618      	mov	r0, r3
 80183ca:	f7fe fb8c 	bl	8016ae6 <lock_fs>
 80183ce:	4603      	mov	r3, r0
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d014      	beq.n	80183fe <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	681b      	ldr	r3, [r3, #0]
 80183d8:	785b      	ldrb	r3, [r3, #1]
 80183da:	4618      	mov	r0, r3
 80183dc:	f7fe f9e6 	bl	80167ac <disk_status>
 80183e0:	4603      	mov	r3, r0
 80183e2:	f003 0301 	and.w	r3, r3, #1
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d102      	bne.n	80183f0 <validate+0x60>
				res = FR_OK;
 80183ea:	2300      	movs	r3, #0
 80183ec:	73fb      	strb	r3, [r7, #15]
 80183ee:	e008      	b.n	8018402 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	681b      	ldr	r3, [r3, #0]
 80183f4:	2100      	movs	r1, #0
 80183f6:	4618      	mov	r0, r3
 80183f8:	f7fe fb8b 	bl	8016b12 <unlock_fs>
 80183fc:	e001      	b.n	8018402 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80183fe:	230f      	movs	r3, #15
 8018400:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8018402:	7bfb      	ldrb	r3, [r7, #15]
 8018404:	2b00      	cmp	r3, #0
 8018406:	d102      	bne.n	801840e <validate+0x7e>
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	e000      	b.n	8018410 <validate+0x80>
 801840e:	2300      	movs	r3, #0
 8018410:	683a      	ldr	r2, [r7, #0]
 8018412:	6013      	str	r3, [r2, #0]
	return res;
 8018414:	7bfb      	ldrb	r3, [r7, #15]
}
 8018416:	4618      	mov	r0, r3
 8018418:	3710      	adds	r7, #16
 801841a:	46bd      	mov	sp, r7
 801841c:	bd80      	pop	{r7, pc}
	...

08018420 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8018420:	b580      	push	{r7, lr}
 8018422:	b088      	sub	sp, #32
 8018424:	af00      	add	r7, sp, #0
 8018426:	60f8      	str	r0, [r7, #12]
 8018428:	60b9      	str	r1, [r7, #8]
 801842a:	4613      	mov	r3, r2
 801842c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801842e:	68bb      	ldr	r3, [r7, #8]
 8018430:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8018432:	f107 0310 	add.w	r3, r7, #16
 8018436:	4618      	mov	r0, r3
 8018438:	f7ff fc86 	bl	8017d48 <get_ldnumber>
 801843c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801843e:	69fb      	ldr	r3, [r7, #28]
 8018440:	2b00      	cmp	r3, #0
 8018442:	da01      	bge.n	8018448 <f_mount+0x28>
 8018444:	230b      	movs	r3, #11
 8018446:	e048      	b.n	80184da <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8018448:	4a26      	ldr	r2, [pc, #152]	; (80184e4 <f_mount+0xc4>)
 801844a:	69fb      	ldr	r3, [r7, #28]
 801844c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018450:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8018452:	69bb      	ldr	r3, [r7, #24]
 8018454:	2b00      	cmp	r3, #0
 8018456:	d00f      	beq.n	8018478 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8018458:	69b8      	ldr	r0, [r7, #24]
 801845a:	f7fe fcbd 	bl	8016dd8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 801845e:	69bb      	ldr	r3, [r7, #24]
 8018460:	691b      	ldr	r3, [r3, #16]
 8018462:	4618      	mov	r0, r3
 8018464:	f000 fd04 	bl	8018e70 <ff_del_syncobj>
 8018468:	4603      	mov	r3, r0
 801846a:	2b00      	cmp	r3, #0
 801846c:	d101      	bne.n	8018472 <f_mount+0x52>
 801846e:	2302      	movs	r3, #2
 8018470:	e033      	b.n	80184da <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8018472:	69bb      	ldr	r3, [r7, #24]
 8018474:	2200      	movs	r2, #0
 8018476:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8018478:	68fb      	ldr	r3, [r7, #12]
 801847a:	2b00      	cmp	r3, #0
 801847c:	d00f      	beq.n	801849e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 801847e:	68fb      	ldr	r3, [r7, #12]
 8018480:	2200      	movs	r2, #0
 8018482:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8018484:	69fb      	ldr	r3, [r7, #28]
 8018486:	b2da      	uxtb	r2, r3
 8018488:	68fb      	ldr	r3, [r7, #12]
 801848a:	3310      	adds	r3, #16
 801848c:	4619      	mov	r1, r3
 801848e:	4610      	mov	r0, r2
 8018490:	f000 fcd3 	bl	8018e3a <ff_cre_syncobj>
 8018494:	4603      	mov	r3, r0
 8018496:	2b00      	cmp	r3, #0
 8018498:	d101      	bne.n	801849e <f_mount+0x7e>
 801849a:	2302      	movs	r3, #2
 801849c:	e01d      	b.n	80184da <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801849e:	68fa      	ldr	r2, [r7, #12]
 80184a0:	4910      	ldr	r1, [pc, #64]	; (80184e4 <f_mount+0xc4>)
 80184a2:	69fb      	ldr	r3, [r7, #28]
 80184a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80184a8:	68fb      	ldr	r3, [r7, #12]
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d002      	beq.n	80184b4 <f_mount+0x94>
 80184ae:	79fb      	ldrb	r3, [r7, #7]
 80184b0:	2b01      	cmp	r3, #1
 80184b2:	d001      	beq.n	80184b8 <f_mount+0x98>
 80184b4:	2300      	movs	r3, #0
 80184b6:	e010      	b.n	80184da <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80184b8:	f107 010c 	add.w	r1, r7, #12
 80184bc:	f107 0308 	add.w	r3, r7, #8
 80184c0:	2200      	movs	r2, #0
 80184c2:	4618      	mov	r0, r3
 80184c4:	f7ff fcda 	bl	8017e7c <find_volume>
 80184c8:	4603      	mov	r3, r0
 80184ca:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80184cc:	68fb      	ldr	r3, [r7, #12]
 80184ce:	7dfa      	ldrb	r2, [r7, #23]
 80184d0:	4611      	mov	r1, r2
 80184d2:	4618      	mov	r0, r3
 80184d4:	f7fe fb1d 	bl	8016b12 <unlock_fs>
 80184d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80184da:	4618      	mov	r0, r3
 80184dc:	3720      	adds	r7, #32
 80184de:	46bd      	mov	sp, r7
 80184e0:	bd80      	pop	{r7, pc}
 80184e2:	bf00      	nop
 80184e4:	20000474 	.word	0x20000474

080184e8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80184e8:	b580      	push	{r7, lr}
 80184ea:	b098      	sub	sp, #96	; 0x60
 80184ec:	af00      	add	r7, sp, #0
 80184ee:	60f8      	str	r0, [r7, #12]
 80184f0:	60b9      	str	r1, [r7, #8]
 80184f2:	4613      	mov	r3, r2
 80184f4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80184f6:	68fb      	ldr	r3, [r7, #12]
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	d101      	bne.n	8018500 <f_open+0x18>
 80184fc:	2309      	movs	r3, #9
 80184fe:	e1c2      	b.n	8018886 <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8018500:	79fb      	ldrb	r3, [r7, #7]
 8018502:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018506:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8018508:	79fa      	ldrb	r2, [r7, #7]
 801850a:	f107 0110 	add.w	r1, r7, #16
 801850e:	f107 0308 	add.w	r3, r7, #8
 8018512:	4618      	mov	r0, r3
 8018514:	f7ff fcb2 	bl	8017e7c <find_volume>
 8018518:	4603      	mov	r3, r0
 801851a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801851e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018522:	2b00      	cmp	r3, #0
 8018524:	f040 819f 	bne.w	8018866 <f_open+0x37e>
		dj.obj.fs = fs;
 8018528:	693b      	ldr	r3, [r7, #16]
 801852a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801852c:	68ba      	ldr	r2, [r7, #8]
 801852e:	f107 0314 	add.w	r3, r7, #20
 8018532:	4611      	mov	r1, r2
 8018534:	4618      	mov	r0, r3
 8018536:	f7ff fb91 	bl	8017c5c <follow_path>
 801853a:	4603      	mov	r3, r0
 801853c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8018540:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018544:	2b00      	cmp	r3, #0
 8018546:	d11a      	bne.n	801857e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8018548:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801854c:	b25b      	sxtb	r3, r3
 801854e:	2b00      	cmp	r3, #0
 8018550:	da03      	bge.n	801855a <f_open+0x72>
				res = FR_INVALID_NAME;
 8018552:	2306      	movs	r3, #6
 8018554:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8018558:	e011      	b.n	801857e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801855a:	79fb      	ldrb	r3, [r7, #7]
 801855c:	f023 0301 	bic.w	r3, r3, #1
 8018560:	2b00      	cmp	r3, #0
 8018562:	bf14      	ite	ne
 8018564:	2301      	movne	r3, #1
 8018566:	2300      	moveq	r3, #0
 8018568:	b2db      	uxtb	r3, r3
 801856a:	461a      	mov	r2, r3
 801856c:	f107 0314 	add.w	r3, r7, #20
 8018570:	4611      	mov	r1, r2
 8018572:	4618      	mov	r0, r3
 8018574:	f7fe fae8 	bl	8016b48 <chk_lock>
 8018578:	4603      	mov	r3, r0
 801857a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801857e:	79fb      	ldrb	r3, [r7, #7]
 8018580:	f003 031c 	and.w	r3, r3, #28
 8018584:	2b00      	cmp	r3, #0
 8018586:	d07f      	beq.n	8018688 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8018588:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801858c:	2b00      	cmp	r3, #0
 801858e:	d017      	beq.n	80185c0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8018590:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018594:	2b04      	cmp	r3, #4
 8018596:	d10e      	bne.n	80185b6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8018598:	f7fe fb32 	bl	8016c00 <enq_lock>
 801859c:	4603      	mov	r3, r0
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d006      	beq.n	80185b0 <f_open+0xc8>
 80185a2:	f107 0314 	add.w	r3, r7, #20
 80185a6:	4618      	mov	r0, r3
 80185a8:	f7ff fa91 	bl	8017ace <dir_register>
 80185ac:	4603      	mov	r3, r0
 80185ae:	e000      	b.n	80185b2 <f_open+0xca>
 80185b0:	2312      	movs	r3, #18
 80185b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80185b6:	79fb      	ldrb	r3, [r7, #7]
 80185b8:	f043 0308 	orr.w	r3, r3, #8
 80185bc:	71fb      	strb	r3, [r7, #7]
 80185be:	e010      	b.n	80185e2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80185c0:	7ebb      	ldrb	r3, [r7, #26]
 80185c2:	f003 0311 	and.w	r3, r3, #17
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d003      	beq.n	80185d2 <f_open+0xea>
					res = FR_DENIED;
 80185ca:	2307      	movs	r3, #7
 80185cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80185d0:	e007      	b.n	80185e2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80185d2:	79fb      	ldrb	r3, [r7, #7]
 80185d4:	f003 0304 	and.w	r3, r3, #4
 80185d8:	2b00      	cmp	r3, #0
 80185da:	d002      	beq.n	80185e2 <f_open+0xfa>
 80185dc:	2308      	movs	r3, #8
 80185de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80185e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80185e6:	2b00      	cmp	r3, #0
 80185e8:	d168      	bne.n	80186bc <f_open+0x1d4>
 80185ea:	79fb      	ldrb	r3, [r7, #7]
 80185ec:	f003 0308 	and.w	r3, r3, #8
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	d063      	beq.n	80186bc <f_open+0x1d4>
				dw = GET_FATTIME();
 80185f4:	f7fa fcc6 	bl	8012f84 <get_fattime>
 80185f8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80185fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185fc:	330e      	adds	r3, #14
 80185fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018600:	4618      	mov	r0, r3
 8018602:	f7fe f9c7 	bl	8016994 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8018606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018608:	3316      	adds	r3, #22
 801860a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801860c:	4618      	mov	r0, r3
 801860e:	f7fe f9c1 	bl	8016994 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8018612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018614:	330b      	adds	r3, #11
 8018616:	2220      	movs	r2, #32
 8018618:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801861a:	693b      	ldr	r3, [r7, #16]
 801861c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801861e:	4611      	mov	r1, r2
 8018620:	4618      	mov	r0, r3
 8018622:	f7ff f9c0 	bl	80179a6 <ld_clust>
 8018626:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8018628:	693b      	ldr	r3, [r7, #16]
 801862a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801862c:	2200      	movs	r2, #0
 801862e:	4618      	mov	r0, r3
 8018630:	f7ff f9d8 	bl	80179e4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8018634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018636:	331c      	adds	r3, #28
 8018638:	2100      	movs	r1, #0
 801863a:	4618      	mov	r0, r3
 801863c:	f7fe f9aa 	bl	8016994 <st_dword>
					fs->wflag = 1;
 8018640:	693b      	ldr	r3, [r7, #16]
 8018642:	2201      	movs	r2, #1
 8018644:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8018646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018648:	2b00      	cmp	r3, #0
 801864a:	d037      	beq.n	80186bc <f_open+0x1d4>
						dw = fs->winsect;
 801864c:	693b      	ldr	r3, [r7, #16]
 801864e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018650:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8018652:	f107 0314 	add.w	r3, r7, #20
 8018656:	2200      	movs	r2, #0
 8018658:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801865a:	4618      	mov	r0, r3
 801865c:	f7fe fec8 	bl	80173f0 <remove_chain>
 8018660:	4603      	mov	r3, r0
 8018662:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8018666:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801866a:	2b00      	cmp	r3, #0
 801866c:	d126      	bne.n	80186bc <f_open+0x1d4>
							res = move_window(fs, dw);
 801866e:	693b      	ldr	r3, [r7, #16]
 8018670:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018672:	4618      	mov	r0, r3
 8018674:	f7fe fc18 	bl	8016ea8 <move_window>
 8018678:	4603      	mov	r3, r0
 801867a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801867e:	693b      	ldr	r3, [r7, #16]
 8018680:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018682:	3a01      	subs	r2, #1
 8018684:	615a      	str	r2, [r3, #20]
 8018686:	e019      	b.n	80186bc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8018688:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801868c:	2b00      	cmp	r3, #0
 801868e:	d115      	bne.n	80186bc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8018690:	7ebb      	ldrb	r3, [r7, #26]
 8018692:	f003 0310 	and.w	r3, r3, #16
 8018696:	2b00      	cmp	r3, #0
 8018698:	d003      	beq.n	80186a2 <f_open+0x1ba>
					res = FR_NO_FILE;
 801869a:	2304      	movs	r3, #4
 801869c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80186a0:	e00c      	b.n	80186bc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80186a2:	79fb      	ldrb	r3, [r7, #7]
 80186a4:	f003 0302 	and.w	r3, r3, #2
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	d007      	beq.n	80186bc <f_open+0x1d4>
 80186ac:	7ebb      	ldrb	r3, [r7, #26]
 80186ae:	f003 0301 	and.w	r3, r3, #1
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	d002      	beq.n	80186bc <f_open+0x1d4>
						res = FR_DENIED;
 80186b6:	2307      	movs	r3, #7
 80186b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80186bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d128      	bne.n	8018716 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80186c4:	79fb      	ldrb	r3, [r7, #7]
 80186c6:	f003 0308 	and.w	r3, r3, #8
 80186ca:	2b00      	cmp	r3, #0
 80186cc:	d003      	beq.n	80186d6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80186ce:	79fb      	ldrb	r3, [r7, #7]
 80186d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80186d4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80186d6:	693b      	ldr	r3, [r7, #16]
 80186d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80186da:	68fb      	ldr	r3, [r7, #12]
 80186dc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80186de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80186e0:	68fb      	ldr	r3, [r7, #12]
 80186e2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80186e4:	79fb      	ldrb	r3, [r7, #7]
 80186e6:	f023 0301 	bic.w	r3, r3, #1
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	bf14      	ite	ne
 80186ee:	2301      	movne	r3, #1
 80186f0:	2300      	moveq	r3, #0
 80186f2:	b2db      	uxtb	r3, r3
 80186f4:	461a      	mov	r2, r3
 80186f6:	f107 0314 	add.w	r3, r7, #20
 80186fa:	4611      	mov	r1, r2
 80186fc:	4618      	mov	r0, r3
 80186fe:	f7fe faa1 	bl	8016c44 <inc_lock>
 8018702:	4602      	mov	r2, r0
 8018704:	68fb      	ldr	r3, [r7, #12]
 8018706:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8018708:	68fb      	ldr	r3, [r7, #12]
 801870a:	691b      	ldr	r3, [r3, #16]
 801870c:	2b00      	cmp	r3, #0
 801870e:	d102      	bne.n	8018716 <f_open+0x22e>
 8018710:	2302      	movs	r3, #2
 8018712:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8018716:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801871a:	2b00      	cmp	r3, #0
 801871c:	f040 80a3 	bne.w	8018866 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8018720:	693b      	ldr	r3, [r7, #16]
 8018722:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018724:	4611      	mov	r1, r2
 8018726:	4618      	mov	r0, r3
 8018728:	f7ff f93d 	bl	80179a6 <ld_clust>
 801872c:	4602      	mov	r2, r0
 801872e:	68fb      	ldr	r3, [r7, #12]
 8018730:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8018732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018734:	331c      	adds	r3, #28
 8018736:	4618      	mov	r0, r3
 8018738:	f7fe f8ee 	bl	8016918 <ld_dword>
 801873c:	4602      	mov	r2, r0
 801873e:	68fb      	ldr	r3, [r7, #12]
 8018740:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8018742:	68fb      	ldr	r3, [r7, #12]
 8018744:	2200      	movs	r2, #0
 8018746:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8018748:	693a      	ldr	r2, [r7, #16]
 801874a:	68fb      	ldr	r3, [r7, #12]
 801874c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801874e:	693b      	ldr	r3, [r7, #16]
 8018750:	88da      	ldrh	r2, [r3, #6]
 8018752:	68fb      	ldr	r3, [r7, #12]
 8018754:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8018756:	68fb      	ldr	r3, [r7, #12]
 8018758:	79fa      	ldrb	r2, [r7, #7]
 801875a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801875c:	68fb      	ldr	r3, [r7, #12]
 801875e:	2200      	movs	r2, #0
 8018760:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8018762:	68fb      	ldr	r3, [r7, #12]
 8018764:	2200      	movs	r2, #0
 8018766:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8018768:	68fb      	ldr	r3, [r7, #12]
 801876a:	2200      	movs	r2, #0
 801876c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801876e:	68fb      	ldr	r3, [r7, #12]
 8018770:	3330      	adds	r3, #48	; 0x30
 8018772:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8018776:	2100      	movs	r1, #0
 8018778:	4618      	mov	r0, r3
 801877a:	f7fe f958 	bl	8016a2e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801877e:	79fb      	ldrb	r3, [r7, #7]
 8018780:	f003 0320 	and.w	r3, r3, #32
 8018784:	2b00      	cmp	r3, #0
 8018786:	d06e      	beq.n	8018866 <f_open+0x37e>
 8018788:	68fb      	ldr	r3, [r7, #12]
 801878a:	68db      	ldr	r3, [r3, #12]
 801878c:	2b00      	cmp	r3, #0
 801878e:	d06a      	beq.n	8018866 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8018790:	68fb      	ldr	r3, [r7, #12]
 8018792:	68da      	ldr	r2, [r3, #12]
 8018794:	68fb      	ldr	r3, [r7, #12]
 8018796:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8018798:	693b      	ldr	r3, [r7, #16]
 801879a:	895b      	ldrh	r3, [r3, #10]
 801879c:	461a      	mov	r2, r3
 801879e:	693b      	ldr	r3, [r7, #16]
 80187a0:	899b      	ldrh	r3, [r3, #12]
 80187a2:	fb03 f302 	mul.w	r3, r3, r2
 80187a6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80187a8:	68fb      	ldr	r3, [r7, #12]
 80187aa:	689b      	ldr	r3, [r3, #8]
 80187ac:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80187ae:	68fb      	ldr	r3, [r7, #12]
 80187b0:	68db      	ldr	r3, [r3, #12]
 80187b2:	657b      	str	r3, [r7, #84]	; 0x54
 80187b4:	e016      	b.n	80187e4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80187b6:	68fb      	ldr	r3, [r7, #12]
 80187b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80187ba:	4618      	mov	r0, r3
 80187bc:	f7fe fc31 	bl	8017022 <get_fat>
 80187c0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80187c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80187c4:	2b01      	cmp	r3, #1
 80187c6:	d802      	bhi.n	80187ce <f_open+0x2e6>
 80187c8:	2302      	movs	r3, #2
 80187ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80187ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80187d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80187d4:	d102      	bne.n	80187dc <f_open+0x2f4>
 80187d6:	2301      	movs	r3, #1
 80187d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80187dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80187de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80187e0:	1ad3      	subs	r3, r2, r3
 80187e2:	657b      	str	r3, [r7, #84]	; 0x54
 80187e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d103      	bne.n	80187f4 <f_open+0x30c>
 80187ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80187ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80187f0:	429a      	cmp	r2, r3
 80187f2:	d8e0      	bhi.n	80187b6 <f_open+0x2ce>
				}
				fp->clust = clst;
 80187f4:	68fb      	ldr	r3, [r7, #12]
 80187f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80187f8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80187fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80187fe:	2b00      	cmp	r3, #0
 8018800:	d131      	bne.n	8018866 <f_open+0x37e>
 8018802:	693b      	ldr	r3, [r7, #16]
 8018804:	899b      	ldrh	r3, [r3, #12]
 8018806:	461a      	mov	r2, r3
 8018808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801880a:	fbb3 f1f2 	udiv	r1, r3, r2
 801880e:	fb02 f201 	mul.w	r2, r2, r1
 8018812:	1a9b      	subs	r3, r3, r2
 8018814:	2b00      	cmp	r3, #0
 8018816:	d026      	beq.n	8018866 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8018818:	693b      	ldr	r3, [r7, #16]
 801881a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801881c:	4618      	mov	r0, r3
 801881e:	f7fe fbe1 	bl	8016fe4 <clust2sect>
 8018822:	6478      	str	r0, [r7, #68]	; 0x44
 8018824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018826:	2b00      	cmp	r3, #0
 8018828:	d103      	bne.n	8018832 <f_open+0x34a>
						res = FR_INT_ERR;
 801882a:	2302      	movs	r3, #2
 801882c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8018830:	e019      	b.n	8018866 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8018832:	693b      	ldr	r3, [r7, #16]
 8018834:	899b      	ldrh	r3, [r3, #12]
 8018836:	461a      	mov	r2, r3
 8018838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801883a:	fbb3 f2f2 	udiv	r2, r3, r2
 801883e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018840:	441a      	add	r2, r3
 8018842:	68fb      	ldr	r3, [r7, #12]
 8018844:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8018846:	693b      	ldr	r3, [r7, #16]
 8018848:	7858      	ldrb	r0, [r3, #1]
 801884a:	68fb      	ldr	r3, [r7, #12]
 801884c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018850:	68fb      	ldr	r3, [r7, #12]
 8018852:	6a1a      	ldr	r2, [r3, #32]
 8018854:	2301      	movs	r3, #1
 8018856:	f7fd ffe9 	bl	801682c <disk_read>
 801885a:	4603      	mov	r3, r0
 801885c:	2b00      	cmp	r3, #0
 801885e:	d002      	beq.n	8018866 <f_open+0x37e>
 8018860:	2301      	movs	r3, #1
 8018862:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8018866:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801886a:	2b00      	cmp	r3, #0
 801886c:	d002      	beq.n	8018874 <f_open+0x38c>
 801886e:	68fb      	ldr	r3, [r7, #12]
 8018870:	2200      	movs	r2, #0
 8018872:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8018874:	693b      	ldr	r3, [r7, #16]
 8018876:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801887a:	4611      	mov	r1, r2
 801887c:	4618      	mov	r0, r3
 801887e:	f7fe f948 	bl	8016b12 <unlock_fs>
 8018882:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8018886:	4618      	mov	r0, r3
 8018888:	3760      	adds	r7, #96	; 0x60
 801888a:	46bd      	mov	sp, r7
 801888c:	bd80      	pop	{r7, pc}

0801888e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801888e:	b580      	push	{r7, lr}
 8018890:	b08c      	sub	sp, #48	; 0x30
 8018892:	af00      	add	r7, sp, #0
 8018894:	60f8      	str	r0, [r7, #12]
 8018896:	60b9      	str	r1, [r7, #8]
 8018898:	607a      	str	r2, [r7, #4]
 801889a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801889c:	68bb      	ldr	r3, [r7, #8]
 801889e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80188a0:	683b      	ldr	r3, [r7, #0]
 80188a2:	2200      	movs	r2, #0
 80188a4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80188a6:	68fb      	ldr	r3, [r7, #12]
 80188a8:	f107 0210 	add.w	r2, r7, #16
 80188ac:	4611      	mov	r1, r2
 80188ae:	4618      	mov	r0, r3
 80188b0:	f7ff fd6e 	bl	8018390 <validate>
 80188b4:	4603      	mov	r3, r0
 80188b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80188ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80188be:	2b00      	cmp	r3, #0
 80188c0:	d107      	bne.n	80188d2 <f_write+0x44>
 80188c2:	68fb      	ldr	r3, [r7, #12]
 80188c4:	7d5b      	ldrb	r3, [r3, #21]
 80188c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80188ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	d009      	beq.n	80188e6 <f_write+0x58>
 80188d2:	693b      	ldr	r3, [r7, #16]
 80188d4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80188d8:	4611      	mov	r1, r2
 80188da:	4618      	mov	r0, r3
 80188dc:	f7fe f919 	bl	8016b12 <unlock_fs>
 80188e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80188e4:	e192      	b.n	8018c0c <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80188e6:	68fb      	ldr	r3, [r7, #12]
 80188e8:	7d1b      	ldrb	r3, [r3, #20]
 80188ea:	f003 0302 	and.w	r3, r3, #2
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	d106      	bne.n	8018900 <f_write+0x72>
 80188f2:	693b      	ldr	r3, [r7, #16]
 80188f4:	2107      	movs	r1, #7
 80188f6:	4618      	mov	r0, r3
 80188f8:	f7fe f90b 	bl	8016b12 <unlock_fs>
 80188fc:	2307      	movs	r3, #7
 80188fe:	e185      	b.n	8018c0c <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8018900:	68fb      	ldr	r3, [r7, #12]
 8018902:	699a      	ldr	r2, [r3, #24]
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	441a      	add	r2, r3
 8018908:	68fb      	ldr	r3, [r7, #12]
 801890a:	699b      	ldr	r3, [r3, #24]
 801890c:	429a      	cmp	r2, r3
 801890e:	f080 816a 	bcs.w	8018be6 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8018912:	68fb      	ldr	r3, [r7, #12]
 8018914:	699b      	ldr	r3, [r3, #24]
 8018916:	43db      	mvns	r3, r3
 8018918:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801891a:	e164      	b.n	8018be6 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801891c:	68fb      	ldr	r3, [r7, #12]
 801891e:	699b      	ldr	r3, [r3, #24]
 8018920:	693a      	ldr	r2, [r7, #16]
 8018922:	8992      	ldrh	r2, [r2, #12]
 8018924:	fbb3 f1f2 	udiv	r1, r3, r2
 8018928:	fb02 f201 	mul.w	r2, r2, r1
 801892c:	1a9b      	subs	r3, r3, r2
 801892e:	2b00      	cmp	r3, #0
 8018930:	f040 810f 	bne.w	8018b52 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8018934:	68fb      	ldr	r3, [r7, #12]
 8018936:	699b      	ldr	r3, [r3, #24]
 8018938:	693a      	ldr	r2, [r7, #16]
 801893a:	8992      	ldrh	r2, [r2, #12]
 801893c:	fbb3 f3f2 	udiv	r3, r3, r2
 8018940:	693a      	ldr	r2, [r7, #16]
 8018942:	8952      	ldrh	r2, [r2, #10]
 8018944:	3a01      	subs	r2, #1
 8018946:	4013      	ands	r3, r2
 8018948:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801894a:	69bb      	ldr	r3, [r7, #24]
 801894c:	2b00      	cmp	r3, #0
 801894e:	d14d      	bne.n	80189ec <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8018950:	68fb      	ldr	r3, [r7, #12]
 8018952:	699b      	ldr	r3, [r3, #24]
 8018954:	2b00      	cmp	r3, #0
 8018956:	d10c      	bne.n	8018972 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8018958:	68fb      	ldr	r3, [r7, #12]
 801895a:	689b      	ldr	r3, [r3, #8]
 801895c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801895e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018960:	2b00      	cmp	r3, #0
 8018962:	d11a      	bne.n	801899a <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8018964:	68fb      	ldr	r3, [r7, #12]
 8018966:	2100      	movs	r1, #0
 8018968:	4618      	mov	r0, r3
 801896a:	f7fe fda6 	bl	80174ba <create_chain>
 801896e:	62b8      	str	r0, [r7, #40]	; 0x28
 8018970:	e013      	b.n	801899a <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8018972:	68fb      	ldr	r3, [r7, #12]
 8018974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018976:	2b00      	cmp	r3, #0
 8018978:	d007      	beq.n	801898a <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801897a:	68fb      	ldr	r3, [r7, #12]
 801897c:	699b      	ldr	r3, [r3, #24]
 801897e:	4619      	mov	r1, r3
 8018980:	68f8      	ldr	r0, [r7, #12]
 8018982:	f7fe fe32 	bl	80175ea <clmt_clust>
 8018986:	62b8      	str	r0, [r7, #40]	; 0x28
 8018988:	e007      	b.n	801899a <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801898a:	68fa      	ldr	r2, [r7, #12]
 801898c:	68fb      	ldr	r3, [r7, #12]
 801898e:	69db      	ldr	r3, [r3, #28]
 8018990:	4619      	mov	r1, r3
 8018992:	4610      	mov	r0, r2
 8018994:	f7fe fd91 	bl	80174ba <create_chain>
 8018998:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801899a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801899c:	2b00      	cmp	r3, #0
 801899e:	f000 8127 	beq.w	8018bf0 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80189a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189a4:	2b01      	cmp	r3, #1
 80189a6:	d109      	bne.n	80189bc <f_write+0x12e>
 80189a8:	68fb      	ldr	r3, [r7, #12]
 80189aa:	2202      	movs	r2, #2
 80189ac:	755a      	strb	r2, [r3, #21]
 80189ae:	693b      	ldr	r3, [r7, #16]
 80189b0:	2102      	movs	r1, #2
 80189b2:	4618      	mov	r0, r3
 80189b4:	f7fe f8ad 	bl	8016b12 <unlock_fs>
 80189b8:	2302      	movs	r3, #2
 80189ba:	e127      	b.n	8018c0c <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80189bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80189c2:	d109      	bne.n	80189d8 <f_write+0x14a>
 80189c4:	68fb      	ldr	r3, [r7, #12]
 80189c6:	2201      	movs	r2, #1
 80189c8:	755a      	strb	r2, [r3, #21]
 80189ca:	693b      	ldr	r3, [r7, #16]
 80189cc:	2101      	movs	r1, #1
 80189ce:	4618      	mov	r0, r3
 80189d0:	f7fe f89f 	bl	8016b12 <unlock_fs>
 80189d4:	2301      	movs	r3, #1
 80189d6:	e119      	b.n	8018c0c <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 80189d8:	68fb      	ldr	r3, [r7, #12]
 80189da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80189dc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80189de:	68fb      	ldr	r3, [r7, #12]
 80189e0:	689b      	ldr	r3, [r3, #8]
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	d102      	bne.n	80189ec <f_write+0x15e>
 80189e6:	68fb      	ldr	r3, [r7, #12]
 80189e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80189ea:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80189ec:	68fb      	ldr	r3, [r7, #12]
 80189ee:	7d1b      	ldrb	r3, [r3, #20]
 80189f0:	b25b      	sxtb	r3, r3
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	da1d      	bge.n	8018a32 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80189f6:	693b      	ldr	r3, [r7, #16]
 80189f8:	7858      	ldrb	r0, [r3, #1]
 80189fa:	68fb      	ldr	r3, [r7, #12]
 80189fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018a00:	68fb      	ldr	r3, [r7, #12]
 8018a02:	6a1a      	ldr	r2, [r3, #32]
 8018a04:	2301      	movs	r3, #1
 8018a06:	f7fd ff31 	bl	801686c <disk_write>
 8018a0a:	4603      	mov	r3, r0
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	d009      	beq.n	8018a24 <f_write+0x196>
 8018a10:	68fb      	ldr	r3, [r7, #12]
 8018a12:	2201      	movs	r2, #1
 8018a14:	755a      	strb	r2, [r3, #21]
 8018a16:	693b      	ldr	r3, [r7, #16]
 8018a18:	2101      	movs	r1, #1
 8018a1a:	4618      	mov	r0, r3
 8018a1c:	f7fe f879 	bl	8016b12 <unlock_fs>
 8018a20:	2301      	movs	r3, #1
 8018a22:	e0f3      	b.n	8018c0c <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8018a24:	68fb      	ldr	r3, [r7, #12]
 8018a26:	7d1b      	ldrb	r3, [r3, #20]
 8018a28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018a2c:	b2da      	uxtb	r2, r3
 8018a2e:	68fb      	ldr	r3, [r7, #12]
 8018a30:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8018a32:	693a      	ldr	r2, [r7, #16]
 8018a34:	68fb      	ldr	r3, [r7, #12]
 8018a36:	69db      	ldr	r3, [r3, #28]
 8018a38:	4619      	mov	r1, r3
 8018a3a:	4610      	mov	r0, r2
 8018a3c:	f7fe fad2 	bl	8016fe4 <clust2sect>
 8018a40:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8018a42:	697b      	ldr	r3, [r7, #20]
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d109      	bne.n	8018a5c <f_write+0x1ce>
 8018a48:	68fb      	ldr	r3, [r7, #12]
 8018a4a:	2202      	movs	r2, #2
 8018a4c:	755a      	strb	r2, [r3, #21]
 8018a4e:	693b      	ldr	r3, [r7, #16]
 8018a50:	2102      	movs	r1, #2
 8018a52:	4618      	mov	r0, r3
 8018a54:	f7fe f85d 	bl	8016b12 <unlock_fs>
 8018a58:	2302      	movs	r3, #2
 8018a5a:	e0d7      	b.n	8018c0c <f_write+0x37e>
			sect += csect;
 8018a5c:	697a      	ldr	r2, [r7, #20]
 8018a5e:	69bb      	ldr	r3, [r7, #24]
 8018a60:	4413      	add	r3, r2
 8018a62:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8018a64:	693b      	ldr	r3, [r7, #16]
 8018a66:	899b      	ldrh	r3, [r3, #12]
 8018a68:	461a      	mov	r2, r3
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8018a70:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8018a72:	6a3b      	ldr	r3, [r7, #32]
 8018a74:	2b00      	cmp	r3, #0
 8018a76:	d048      	beq.n	8018b0a <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8018a78:	69ba      	ldr	r2, [r7, #24]
 8018a7a:	6a3b      	ldr	r3, [r7, #32]
 8018a7c:	4413      	add	r3, r2
 8018a7e:	693a      	ldr	r2, [r7, #16]
 8018a80:	8952      	ldrh	r2, [r2, #10]
 8018a82:	4293      	cmp	r3, r2
 8018a84:	d905      	bls.n	8018a92 <f_write+0x204>
					cc = fs->csize - csect;
 8018a86:	693b      	ldr	r3, [r7, #16]
 8018a88:	895b      	ldrh	r3, [r3, #10]
 8018a8a:	461a      	mov	r2, r3
 8018a8c:	69bb      	ldr	r3, [r7, #24]
 8018a8e:	1ad3      	subs	r3, r2, r3
 8018a90:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018a92:	693b      	ldr	r3, [r7, #16]
 8018a94:	7858      	ldrb	r0, [r3, #1]
 8018a96:	6a3b      	ldr	r3, [r7, #32]
 8018a98:	697a      	ldr	r2, [r7, #20]
 8018a9a:	69f9      	ldr	r1, [r7, #28]
 8018a9c:	f7fd fee6 	bl	801686c <disk_write>
 8018aa0:	4603      	mov	r3, r0
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d009      	beq.n	8018aba <f_write+0x22c>
 8018aa6:	68fb      	ldr	r3, [r7, #12]
 8018aa8:	2201      	movs	r2, #1
 8018aaa:	755a      	strb	r2, [r3, #21]
 8018aac:	693b      	ldr	r3, [r7, #16]
 8018aae:	2101      	movs	r1, #1
 8018ab0:	4618      	mov	r0, r3
 8018ab2:	f7fe f82e 	bl	8016b12 <unlock_fs>
 8018ab6:	2301      	movs	r3, #1
 8018ab8:	e0a8      	b.n	8018c0c <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8018aba:	68fb      	ldr	r3, [r7, #12]
 8018abc:	6a1a      	ldr	r2, [r3, #32]
 8018abe:	697b      	ldr	r3, [r7, #20]
 8018ac0:	1ad3      	subs	r3, r2, r3
 8018ac2:	6a3a      	ldr	r2, [r7, #32]
 8018ac4:	429a      	cmp	r2, r3
 8018ac6:	d918      	bls.n	8018afa <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8018ac8:	68fb      	ldr	r3, [r7, #12]
 8018aca:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8018ace:	68fb      	ldr	r3, [r7, #12]
 8018ad0:	6a1a      	ldr	r2, [r3, #32]
 8018ad2:	697b      	ldr	r3, [r7, #20]
 8018ad4:	1ad3      	subs	r3, r2, r3
 8018ad6:	693a      	ldr	r2, [r7, #16]
 8018ad8:	8992      	ldrh	r2, [r2, #12]
 8018ada:	fb02 f303 	mul.w	r3, r2, r3
 8018ade:	69fa      	ldr	r2, [r7, #28]
 8018ae0:	18d1      	adds	r1, r2, r3
 8018ae2:	693b      	ldr	r3, [r7, #16]
 8018ae4:	899b      	ldrh	r3, [r3, #12]
 8018ae6:	461a      	mov	r2, r3
 8018ae8:	f7fd ff80 	bl	80169ec <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8018aec:	68fb      	ldr	r3, [r7, #12]
 8018aee:	7d1b      	ldrb	r3, [r3, #20]
 8018af0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018af4:	b2da      	uxtb	r2, r3
 8018af6:	68fb      	ldr	r3, [r7, #12]
 8018af8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8018afa:	693b      	ldr	r3, [r7, #16]
 8018afc:	899b      	ldrh	r3, [r3, #12]
 8018afe:	461a      	mov	r2, r3
 8018b00:	6a3b      	ldr	r3, [r7, #32]
 8018b02:	fb02 f303 	mul.w	r3, r2, r3
 8018b06:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8018b08:	e050      	b.n	8018bac <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8018b0a:	68fb      	ldr	r3, [r7, #12]
 8018b0c:	6a1b      	ldr	r3, [r3, #32]
 8018b0e:	697a      	ldr	r2, [r7, #20]
 8018b10:	429a      	cmp	r2, r3
 8018b12:	d01b      	beq.n	8018b4c <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8018b14:	68fb      	ldr	r3, [r7, #12]
 8018b16:	699a      	ldr	r2, [r3, #24]
 8018b18:	68fb      	ldr	r3, [r7, #12]
 8018b1a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8018b1c:	429a      	cmp	r2, r3
 8018b1e:	d215      	bcs.n	8018b4c <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8018b20:	693b      	ldr	r3, [r7, #16]
 8018b22:	7858      	ldrb	r0, [r3, #1]
 8018b24:	68fb      	ldr	r3, [r7, #12]
 8018b26:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018b2a:	2301      	movs	r3, #1
 8018b2c:	697a      	ldr	r2, [r7, #20]
 8018b2e:	f7fd fe7d 	bl	801682c <disk_read>
 8018b32:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8018b34:	2b00      	cmp	r3, #0
 8018b36:	d009      	beq.n	8018b4c <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 8018b38:	68fb      	ldr	r3, [r7, #12]
 8018b3a:	2201      	movs	r2, #1
 8018b3c:	755a      	strb	r2, [r3, #21]
 8018b3e:	693b      	ldr	r3, [r7, #16]
 8018b40:	2101      	movs	r1, #1
 8018b42:	4618      	mov	r0, r3
 8018b44:	f7fd ffe5 	bl	8016b12 <unlock_fs>
 8018b48:	2301      	movs	r3, #1
 8018b4a:	e05f      	b.n	8018c0c <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 8018b4c:	68fb      	ldr	r3, [r7, #12]
 8018b4e:	697a      	ldr	r2, [r7, #20]
 8018b50:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8018b52:	693b      	ldr	r3, [r7, #16]
 8018b54:	899b      	ldrh	r3, [r3, #12]
 8018b56:	4618      	mov	r0, r3
 8018b58:	68fb      	ldr	r3, [r7, #12]
 8018b5a:	699b      	ldr	r3, [r3, #24]
 8018b5c:	693a      	ldr	r2, [r7, #16]
 8018b5e:	8992      	ldrh	r2, [r2, #12]
 8018b60:	fbb3 f1f2 	udiv	r1, r3, r2
 8018b64:	fb02 f201 	mul.w	r2, r2, r1
 8018b68:	1a9b      	subs	r3, r3, r2
 8018b6a:	1ac3      	subs	r3, r0, r3
 8018b6c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8018b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	429a      	cmp	r2, r3
 8018b74:	d901      	bls.n	8018b7a <f_write+0x2ec>
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8018b7a:	68fb      	ldr	r3, [r7, #12]
 8018b7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018b80:	68fb      	ldr	r3, [r7, #12]
 8018b82:	699b      	ldr	r3, [r3, #24]
 8018b84:	693a      	ldr	r2, [r7, #16]
 8018b86:	8992      	ldrh	r2, [r2, #12]
 8018b88:	fbb3 f0f2 	udiv	r0, r3, r2
 8018b8c:	fb02 f200 	mul.w	r2, r2, r0
 8018b90:	1a9b      	subs	r3, r3, r2
 8018b92:	440b      	add	r3, r1
 8018b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018b96:	69f9      	ldr	r1, [r7, #28]
 8018b98:	4618      	mov	r0, r3
 8018b9a:	f7fd ff27 	bl	80169ec <mem_cpy>
		fp->flag |= FA_DIRTY;
 8018b9e:	68fb      	ldr	r3, [r7, #12]
 8018ba0:	7d1b      	ldrb	r3, [r3, #20]
 8018ba2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018ba6:	b2da      	uxtb	r2, r3
 8018ba8:	68fb      	ldr	r3, [r7, #12]
 8018baa:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8018bac:	69fa      	ldr	r2, [r7, #28]
 8018bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bb0:	4413      	add	r3, r2
 8018bb2:	61fb      	str	r3, [r7, #28]
 8018bb4:	68fb      	ldr	r3, [r7, #12]
 8018bb6:	699a      	ldr	r2, [r3, #24]
 8018bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bba:	441a      	add	r2, r3
 8018bbc:	68fb      	ldr	r3, [r7, #12]
 8018bbe:	619a      	str	r2, [r3, #24]
 8018bc0:	68fb      	ldr	r3, [r7, #12]
 8018bc2:	68da      	ldr	r2, [r3, #12]
 8018bc4:	68fb      	ldr	r3, [r7, #12]
 8018bc6:	699b      	ldr	r3, [r3, #24]
 8018bc8:	429a      	cmp	r2, r3
 8018bca:	bf38      	it	cc
 8018bcc:	461a      	movcc	r2, r3
 8018bce:	68fb      	ldr	r3, [r7, #12]
 8018bd0:	60da      	str	r2, [r3, #12]
 8018bd2:	683b      	ldr	r3, [r7, #0]
 8018bd4:	681a      	ldr	r2, [r3, #0]
 8018bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bd8:	441a      	add	r2, r3
 8018bda:	683b      	ldr	r3, [r7, #0]
 8018bdc:	601a      	str	r2, [r3, #0]
 8018bde:	687a      	ldr	r2, [r7, #4]
 8018be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018be2:	1ad3      	subs	r3, r2, r3
 8018be4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	f47f ae97 	bne.w	801891c <f_write+0x8e>
 8018bee:	e000      	b.n	8018bf2 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8018bf0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8018bf2:	68fb      	ldr	r3, [r7, #12]
 8018bf4:	7d1b      	ldrb	r3, [r3, #20]
 8018bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018bfa:	b2da      	uxtb	r2, r3
 8018bfc:	68fb      	ldr	r3, [r7, #12]
 8018bfe:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8018c00:	693b      	ldr	r3, [r7, #16]
 8018c02:	2100      	movs	r1, #0
 8018c04:	4618      	mov	r0, r3
 8018c06:	f7fd ff84 	bl	8016b12 <unlock_fs>
 8018c0a:	2300      	movs	r3, #0
}
 8018c0c:	4618      	mov	r0, r3
 8018c0e:	3730      	adds	r7, #48	; 0x30
 8018c10:	46bd      	mov	sp, r7
 8018c12:	bd80      	pop	{r7, pc}

08018c14 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8018c14:	b580      	push	{r7, lr}
 8018c16:	b086      	sub	sp, #24
 8018c18:	af00      	add	r7, sp, #0
 8018c1a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	f107 0208 	add.w	r2, r7, #8
 8018c22:	4611      	mov	r1, r2
 8018c24:	4618      	mov	r0, r3
 8018c26:	f7ff fbb3 	bl	8018390 <validate>
 8018c2a:	4603      	mov	r3, r0
 8018c2c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8018c2e:	7dfb      	ldrb	r3, [r7, #23]
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	d16d      	bne.n	8018d10 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	7d1b      	ldrb	r3, [r3, #20]
 8018c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	d067      	beq.n	8018d10 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8018c40:	687b      	ldr	r3, [r7, #4]
 8018c42:	7d1b      	ldrb	r3, [r3, #20]
 8018c44:	b25b      	sxtb	r3, r3
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	da1a      	bge.n	8018c80 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8018c4a:	68bb      	ldr	r3, [r7, #8]
 8018c4c:	7858      	ldrb	r0, [r3, #1]
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	6a1a      	ldr	r2, [r3, #32]
 8018c58:	2301      	movs	r3, #1
 8018c5a:	f7fd fe07 	bl	801686c <disk_write>
 8018c5e:	4603      	mov	r3, r0
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	d006      	beq.n	8018c72 <f_sync+0x5e>
 8018c64:	68bb      	ldr	r3, [r7, #8]
 8018c66:	2101      	movs	r1, #1
 8018c68:	4618      	mov	r0, r3
 8018c6a:	f7fd ff52 	bl	8016b12 <unlock_fs>
 8018c6e:	2301      	movs	r3, #1
 8018c70:	e055      	b.n	8018d1e <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	7d1b      	ldrb	r3, [r3, #20]
 8018c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018c7a:	b2da      	uxtb	r2, r3
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8018c80:	f7fa f980 	bl	8012f84 <get_fattime>
 8018c84:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8018c86:	68ba      	ldr	r2, [r7, #8]
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c8c:	4619      	mov	r1, r3
 8018c8e:	4610      	mov	r0, r2
 8018c90:	f7fe f90a 	bl	8016ea8 <move_window>
 8018c94:	4603      	mov	r3, r0
 8018c96:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8018c98:	7dfb      	ldrb	r3, [r7, #23]
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d138      	bne.n	8018d10 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8018c9e:	687b      	ldr	r3, [r7, #4]
 8018ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018ca2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8018ca4:	68fb      	ldr	r3, [r7, #12]
 8018ca6:	330b      	adds	r3, #11
 8018ca8:	781a      	ldrb	r2, [r3, #0]
 8018caa:	68fb      	ldr	r3, [r7, #12]
 8018cac:	330b      	adds	r3, #11
 8018cae:	f042 0220 	orr.w	r2, r2, #32
 8018cb2:	b2d2      	uxtb	r2, r2
 8018cb4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	6818      	ldr	r0, [r3, #0]
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	689b      	ldr	r3, [r3, #8]
 8018cbe:	461a      	mov	r2, r3
 8018cc0:	68f9      	ldr	r1, [r7, #12]
 8018cc2:	f7fe fe8f 	bl	80179e4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8018cc6:	68fb      	ldr	r3, [r7, #12]
 8018cc8:	f103 021c 	add.w	r2, r3, #28
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	68db      	ldr	r3, [r3, #12]
 8018cd0:	4619      	mov	r1, r3
 8018cd2:	4610      	mov	r0, r2
 8018cd4:	f7fd fe5e 	bl	8016994 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8018cd8:	68fb      	ldr	r3, [r7, #12]
 8018cda:	3316      	adds	r3, #22
 8018cdc:	6939      	ldr	r1, [r7, #16]
 8018cde:	4618      	mov	r0, r3
 8018ce0:	f7fd fe58 	bl	8016994 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8018ce4:	68fb      	ldr	r3, [r7, #12]
 8018ce6:	3312      	adds	r3, #18
 8018ce8:	2100      	movs	r1, #0
 8018cea:	4618      	mov	r0, r3
 8018cec:	f7fd fe37 	bl	801695e <st_word>
					fs->wflag = 1;
 8018cf0:	68bb      	ldr	r3, [r7, #8]
 8018cf2:	2201      	movs	r2, #1
 8018cf4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8018cf6:	68bb      	ldr	r3, [r7, #8]
 8018cf8:	4618      	mov	r0, r3
 8018cfa:	f7fe f903 	bl	8016f04 <sync_fs>
 8018cfe:	4603      	mov	r3, r0
 8018d00:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	7d1b      	ldrb	r3, [r3, #20]
 8018d06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018d0a:	b2da      	uxtb	r2, r3
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8018d10:	68bb      	ldr	r3, [r7, #8]
 8018d12:	7dfa      	ldrb	r2, [r7, #23]
 8018d14:	4611      	mov	r1, r2
 8018d16:	4618      	mov	r0, r3
 8018d18:	f7fd fefb 	bl	8016b12 <unlock_fs>
 8018d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8018d1e:	4618      	mov	r0, r3
 8018d20:	3718      	adds	r7, #24
 8018d22:	46bd      	mov	sp, r7
 8018d24:	bd80      	pop	{r7, pc}

08018d26 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8018d26:	b580      	push	{r7, lr}
 8018d28:	b084      	sub	sp, #16
 8018d2a:	af00      	add	r7, sp, #0
 8018d2c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8018d2e:	6878      	ldr	r0, [r7, #4]
 8018d30:	f7ff ff70 	bl	8018c14 <f_sync>
 8018d34:	4603      	mov	r3, r0
 8018d36:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8018d38:	7bfb      	ldrb	r3, [r7, #15]
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	d11d      	bne.n	8018d7a <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	f107 0208 	add.w	r2, r7, #8
 8018d44:	4611      	mov	r1, r2
 8018d46:	4618      	mov	r0, r3
 8018d48:	f7ff fb22 	bl	8018390 <validate>
 8018d4c:	4603      	mov	r3, r0
 8018d4e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8018d50:	7bfb      	ldrb	r3, [r7, #15]
 8018d52:	2b00      	cmp	r3, #0
 8018d54:	d111      	bne.n	8018d7a <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	691b      	ldr	r3, [r3, #16]
 8018d5a:	4618      	mov	r0, r3
 8018d5c:	f7fe f800 	bl	8016d60 <dec_lock>
 8018d60:	4603      	mov	r3, r0
 8018d62:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8018d64:	7bfb      	ldrb	r3, [r7, #15]
 8018d66:	2b00      	cmp	r3, #0
 8018d68:	d102      	bne.n	8018d70 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	2200      	movs	r2, #0
 8018d6e:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8018d70:	68bb      	ldr	r3, [r7, #8]
 8018d72:	2100      	movs	r1, #0
 8018d74:	4618      	mov	r0, r3
 8018d76:	f7fd fecc 	bl	8016b12 <unlock_fs>
#endif
		}
	}
	return res;
 8018d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8018d7c:	4618      	mov	r0, r3
 8018d7e:	3710      	adds	r7, #16
 8018d80:	46bd      	mov	sp, r7
 8018d82:	bd80      	pop	{r7, pc}

08018d84 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8018d84:	b480      	push	{r7}
 8018d86:	b087      	sub	sp, #28
 8018d88:	af00      	add	r7, sp, #0
 8018d8a:	60f8      	str	r0, [r7, #12]
 8018d8c:	60b9      	str	r1, [r7, #8]
 8018d8e:	4613      	mov	r3, r2
 8018d90:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8018d92:	2301      	movs	r3, #1
 8018d94:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8018d96:	2300      	movs	r3, #0
 8018d98:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8018d9a:	4b1f      	ldr	r3, [pc, #124]	; (8018e18 <FATFS_LinkDriverEx+0x94>)
 8018d9c:	7a5b      	ldrb	r3, [r3, #9]
 8018d9e:	b2db      	uxtb	r3, r3
 8018da0:	2b00      	cmp	r3, #0
 8018da2:	d131      	bne.n	8018e08 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8018da4:	4b1c      	ldr	r3, [pc, #112]	; (8018e18 <FATFS_LinkDriverEx+0x94>)
 8018da6:	7a5b      	ldrb	r3, [r3, #9]
 8018da8:	b2db      	uxtb	r3, r3
 8018daa:	461a      	mov	r2, r3
 8018dac:	4b1a      	ldr	r3, [pc, #104]	; (8018e18 <FATFS_LinkDriverEx+0x94>)
 8018dae:	2100      	movs	r1, #0
 8018db0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8018db2:	4b19      	ldr	r3, [pc, #100]	; (8018e18 <FATFS_LinkDriverEx+0x94>)
 8018db4:	7a5b      	ldrb	r3, [r3, #9]
 8018db6:	b2db      	uxtb	r3, r3
 8018db8:	4a17      	ldr	r2, [pc, #92]	; (8018e18 <FATFS_LinkDriverEx+0x94>)
 8018dba:	009b      	lsls	r3, r3, #2
 8018dbc:	4413      	add	r3, r2
 8018dbe:	68fa      	ldr	r2, [r7, #12]
 8018dc0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8018dc2:	4b15      	ldr	r3, [pc, #84]	; (8018e18 <FATFS_LinkDriverEx+0x94>)
 8018dc4:	7a5b      	ldrb	r3, [r3, #9]
 8018dc6:	b2db      	uxtb	r3, r3
 8018dc8:	461a      	mov	r2, r3
 8018dca:	4b13      	ldr	r3, [pc, #76]	; (8018e18 <FATFS_LinkDriverEx+0x94>)
 8018dcc:	4413      	add	r3, r2
 8018dce:	79fa      	ldrb	r2, [r7, #7]
 8018dd0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8018dd2:	4b11      	ldr	r3, [pc, #68]	; (8018e18 <FATFS_LinkDriverEx+0x94>)
 8018dd4:	7a5b      	ldrb	r3, [r3, #9]
 8018dd6:	b2db      	uxtb	r3, r3
 8018dd8:	1c5a      	adds	r2, r3, #1
 8018dda:	b2d1      	uxtb	r1, r2
 8018ddc:	4a0e      	ldr	r2, [pc, #56]	; (8018e18 <FATFS_LinkDriverEx+0x94>)
 8018dde:	7251      	strb	r1, [r2, #9]
 8018de0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8018de2:	7dbb      	ldrb	r3, [r7, #22]
 8018de4:	3330      	adds	r3, #48	; 0x30
 8018de6:	b2da      	uxtb	r2, r3
 8018de8:	68bb      	ldr	r3, [r7, #8]
 8018dea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8018dec:	68bb      	ldr	r3, [r7, #8]
 8018dee:	3301      	adds	r3, #1
 8018df0:	223a      	movs	r2, #58	; 0x3a
 8018df2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8018df4:	68bb      	ldr	r3, [r7, #8]
 8018df6:	3302      	adds	r3, #2
 8018df8:	222f      	movs	r2, #47	; 0x2f
 8018dfa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8018dfc:	68bb      	ldr	r3, [r7, #8]
 8018dfe:	3303      	adds	r3, #3
 8018e00:	2200      	movs	r2, #0
 8018e02:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8018e04:	2300      	movs	r3, #0
 8018e06:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8018e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8018e0a:	4618      	mov	r0, r3
 8018e0c:	371c      	adds	r7, #28
 8018e0e:	46bd      	mov	sp, r7
 8018e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e14:	4770      	bx	lr
 8018e16:	bf00      	nop
 8018e18:	2000049c 	.word	0x2000049c

08018e1c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8018e1c:	b580      	push	{r7, lr}
 8018e1e:	b082      	sub	sp, #8
 8018e20:	af00      	add	r7, sp, #0
 8018e22:	6078      	str	r0, [r7, #4]
 8018e24:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8018e26:	2200      	movs	r2, #0
 8018e28:	6839      	ldr	r1, [r7, #0]
 8018e2a:	6878      	ldr	r0, [r7, #4]
 8018e2c:	f7ff ffaa 	bl	8018d84 <FATFS_LinkDriverEx>
 8018e30:	4603      	mov	r3, r0
}
 8018e32:	4618      	mov	r0, r3
 8018e34:	3708      	adds	r7, #8
 8018e36:	46bd      	mov	sp, r7
 8018e38:	bd80      	pop	{r7, pc}

08018e3a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8018e3a:	b580      	push	{r7, lr}
 8018e3c:	b084      	sub	sp, #16
 8018e3e:	af00      	add	r7, sp, #0
 8018e40:	4603      	mov	r3, r0
 8018e42:	6039      	str	r1, [r7, #0]
 8018e44:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8018e46:	2200      	movs	r2, #0
 8018e48:	2101      	movs	r1, #1
 8018e4a:	2001      	movs	r0, #1
 8018e4c:	f000 f982 	bl	8019154 <osSemaphoreNew>
 8018e50:	4602      	mov	r2, r0
 8018e52:	683b      	ldr	r3, [r7, #0]
 8018e54:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8018e56:	683b      	ldr	r3, [r7, #0]
 8018e58:	681b      	ldr	r3, [r3, #0]
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	bf14      	ite	ne
 8018e5e:	2301      	movne	r3, #1
 8018e60:	2300      	moveq	r3, #0
 8018e62:	b2db      	uxtb	r3, r3
 8018e64:	60fb      	str	r3, [r7, #12]

    return ret;
 8018e66:	68fb      	ldr	r3, [r7, #12]
}
 8018e68:	4618      	mov	r0, r3
 8018e6a:	3710      	adds	r7, #16
 8018e6c:	46bd      	mov	sp, r7
 8018e6e:	bd80      	pop	{r7, pc}

08018e70 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8018e70:	b580      	push	{r7, lr}
 8018e72:	b082      	sub	sp, #8
 8018e74:	af00      	add	r7, sp, #0
 8018e76:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8018e78:	6878      	ldr	r0, [r7, #4]
 8018e7a:	f000 fac7 	bl	801940c <osSemaphoreDelete>
#endif
    return 1;
 8018e7e:	2301      	movs	r3, #1
}
 8018e80:	4618      	mov	r0, r3
 8018e82:	3708      	adds	r7, #8
 8018e84:	46bd      	mov	sp, r7
 8018e86:	bd80      	pop	{r7, pc}

08018e88 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8018e88:	b580      	push	{r7, lr}
 8018e8a:	b084      	sub	sp, #16
 8018e8c:	af00      	add	r7, sp, #0
 8018e8e:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8018e90:	2300      	movs	r3, #0
 8018e92:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8018e94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018e98:	6878      	ldr	r0, [r7, #4]
 8018e9a:	f000 f9f9 	bl	8019290 <osSemaphoreAcquire>
 8018e9e:	4603      	mov	r3, r0
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	d101      	bne.n	8018ea8 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8018ea4:	2301      	movs	r3, #1
 8018ea6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8018ea8:	68fb      	ldr	r3, [r7, #12]
}
 8018eaa:	4618      	mov	r0, r3
 8018eac:	3710      	adds	r7, #16
 8018eae:	46bd      	mov	sp, r7
 8018eb0:	bd80      	pop	{r7, pc}

08018eb2 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8018eb2:	b580      	push	{r7, lr}
 8018eb4:	b082      	sub	sp, #8
 8018eb6:	af00      	add	r7, sp, #0
 8018eb8:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8018eba:	6878      	ldr	r0, [r7, #4]
 8018ebc:	f000 fa4e 	bl	801935c <osSemaphoreRelease>
#endif
}
 8018ec0:	bf00      	nop
 8018ec2:	3708      	adds	r7, #8
 8018ec4:	46bd      	mov	sp, r7
 8018ec6:	bd80      	pop	{r7, pc}

08018ec8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8018ec8:	b480      	push	{r7}
 8018eca:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8018ecc:	bf00      	nop
 8018ece:	46bd      	mov	sp, r7
 8018ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ed4:	4770      	bx	lr
	...

08018ed8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8018ed8:	b480      	push	{r7}
 8018eda:	b085      	sub	sp, #20
 8018edc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018ede:	f3ef 8305 	mrs	r3, IPSR
 8018ee2:	60bb      	str	r3, [r7, #8]
  return(result);
 8018ee4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d10f      	bne.n	8018f0a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018eea:	f3ef 8310 	mrs	r3, PRIMASK
 8018eee:	607b      	str	r3, [r7, #4]
  return(result);
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	d105      	bne.n	8018f02 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8018ef6:	f3ef 8311 	mrs	r3, BASEPRI
 8018efa:	603b      	str	r3, [r7, #0]
  return(result);
 8018efc:	683b      	ldr	r3, [r7, #0]
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	d007      	beq.n	8018f12 <osKernelInitialize+0x3a>
 8018f02:	4b0e      	ldr	r3, [pc, #56]	; (8018f3c <osKernelInitialize+0x64>)
 8018f04:	681b      	ldr	r3, [r3, #0]
 8018f06:	2b02      	cmp	r3, #2
 8018f08:	d103      	bne.n	8018f12 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8018f0a:	f06f 0305 	mvn.w	r3, #5
 8018f0e:	60fb      	str	r3, [r7, #12]
 8018f10:	e00c      	b.n	8018f2c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8018f12:	4b0a      	ldr	r3, [pc, #40]	; (8018f3c <osKernelInitialize+0x64>)
 8018f14:	681b      	ldr	r3, [r3, #0]
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	d105      	bne.n	8018f26 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8018f1a:	4b08      	ldr	r3, [pc, #32]	; (8018f3c <osKernelInitialize+0x64>)
 8018f1c:	2201      	movs	r2, #1
 8018f1e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8018f20:	2300      	movs	r3, #0
 8018f22:	60fb      	str	r3, [r7, #12]
 8018f24:	e002      	b.n	8018f2c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8018f26:	f04f 33ff 	mov.w	r3, #4294967295
 8018f2a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8018f2c:	68fb      	ldr	r3, [r7, #12]
}
 8018f2e:	4618      	mov	r0, r3
 8018f30:	3714      	adds	r7, #20
 8018f32:	46bd      	mov	sp, r7
 8018f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f38:	4770      	bx	lr
 8018f3a:	bf00      	nop
 8018f3c:	200004a8 	.word	0x200004a8

08018f40 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8018f40:	b580      	push	{r7, lr}
 8018f42:	b084      	sub	sp, #16
 8018f44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018f46:	f3ef 8305 	mrs	r3, IPSR
 8018f4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8018f4c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	d10f      	bne.n	8018f72 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018f52:	f3ef 8310 	mrs	r3, PRIMASK
 8018f56:	607b      	str	r3, [r7, #4]
  return(result);
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d105      	bne.n	8018f6a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8018f5e:	f3ef 8311 	mrs	r3, BASEPRI
 8018f62:	603b      	str	r3, [r7, #0]
  return(result);
 8018f64:	683b      	ldr	r3, [r7, #0]
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	d007      	beq.n	8018f7a <osKernelStart+0x3a>
 8018f6a:	4b0f      	ldr	r3, [pc, #60]	; (8018fa8 <osKernelStart+0x68>)
 8018f6c:	681b      	ldr	r3, [r3, #0]
 8018f6e:	2b02      	cmp	r3, #2
 8018f70:	d103      	bne.n	8018f7a <osKernelStart+0x3a>
    stat = osErrorISR;
 8018f72:	f06f 0305 	mvn.w	r3, #5
 8018f76:	60fb      	str	r3, [r7, #12]
 8018f78:	e010      	b.n	8018f9c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8018f7a:	4b0b      	ldr	r3, [pc, #44]	; (8018fa8 <osKernelStart+0x68>)
 8018f7c:	681b      	ldr	r3, [r3, #0]
 8018f7e:	2b01      	cmp	r3, #1
 8018f80:	d109      	bne.n	8018f96 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8018f82:	f7ff ffa1 	bl	8018ec8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8018f86:	4b08      	ldr	r3, [pc, #32]	; (8018fa8 <osKernelStart+0x68>)
 8018f88:	2202      	movs	r2, #2
 8018f8a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8018f8c:	f001 fd1c 	bl	801a9c8 <vTaskStartScheduler>
      stat = osOK;
 8018f90:	2300      	movs	r3, #0
 8018f92:	60fb      	str	r3, [r7, #12]
 8018f94:	e002      	b.n	8018f9c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8018f96:	f04f 33ff 	mov.w	r3, #4294967295
 8018f9a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8018f9c:	68fb      	ldr	r3, [r7, #12]
}
 8018f9e:	4618      	mov	r0, r3
 8018fa0:	3710      	adds	r7, #16
 8018fa2:	46bd      	mov	sp, r7
 8018fa4:	bd80      	pop	{r7, pc}
 8018fa6:	bf00      	nop
 8018fa8:	200004a8 	.word	0x200004a8

08018fac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8018fac:	b580      	push	{r7, lr}
 8018fae:	b090      	sub	sp, #64	; 0x40
 8018fb0:	af04      	add	r7, sp, #16
 8018fb2:	60f8      	str	r0, [r7, #12]
 8018fb4:	60b9      	str	r1, [r7, #8]
 8018fb6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8018fb8:	2300      	movs	r3, #0
 8018fba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018fbc:	f3ef 8305 	mrs	r3, IPSR
 8018fc0:	61fb      	str	r3, [r7, #28]
  return(result);
 8018fc2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	f040 808f 	bne.w	80190e8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018fca:	f3ef 8310 	mrs	r3, PRIMASK
 8018fce:	61bb      	str	r3, [r7, #24]
  return(result);
 8018fd0:	69bb      	ldr	r3, [r7, #24]
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	d105      	bne.n	8018fe2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8018fd6:	f3ef 8311 	mrs	r3, BASEPRI
 8018fda:	617b      	str	r3, [r7, #20]
  return(result);
 8018fdc:	697b      	ldr	r3, [r7, #20]
 8018fde:	2b00      	cmp	r3, #0
 8018fe0:	d003      	beq.n	8018fea <osThreadNew+0x3e>
 8018fe2:	4b44      	ldr	r3, [pc, #272]	; (80190f4 <osThreadNew+0x148>)
 8018fe4:	681b      	ldr	r3, [r3, #0]
 8018fe6:	2b02      	cmp	r3, #2
 8018fe8:	d07e      	beq.n	80190e8 <osThreadNew+0x13c>
 8018fea:	68fb      	ldr	r3, [r7, #12]
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	d07b      	beq.n	80190e8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8018ff0:	2380      	movs	r3, #128	; 0x80
 8018ff2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8018ff4:	2318      	movs	r3, #24
 8018ff6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8018ff8:	2300      	movs	r3, #0
 8018ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8018ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8019000:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	2b00      	cmp	r3, #0
 8019006:	d045      	beq.n	8019094 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	681b      	ldr	r3, [r3, #0]
 801900c:	2b00      	cmp	r3, #0
 801900e:	d002      	beq.n	8019016 <osThreadNew+0x6a>
        name = attr->name;
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	681b      	ldr	r3, [r3, #0]
 8019014:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	699b      	ldr	r3, [r3, #24]
 801901a:	2b00      	cmp	r3, #0
 801901c:	d002      	beq.n	8019024 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	699b      	ldr	r3, [r3, #24]
 8019022:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8019024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019026:	2b00      	cmp	r3, #0
 8019028:	d008      	beq.n	801903c <osThreadNew+0x90>
 801902a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801902c:	2b38      	cmp	r3, #56	; 0x38
 801902e:	d805      	bhi.n	801903c <osThreadNew+0x90>
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	685b      	ldr	r3, [r3, #4]
 8019034:	f003 0301 	and.w	r3, r3, #1
 8019038:	2b00      	cmp	r3, #0
 801903a:	d001      	beq.n	8019040 <osThreadNew+0x94>
        return (NULL);
 801903c:	2300      	movs	r3, #0
 801903e:	e054      	b.n	80190ea <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	695b      	ldr	r3, [r3, #20]
 8019044:	2b00      	cmp	r3, #0
 8019046:	d003      	beq.n	8019050 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	695b      	ldr	r3, [r3, #20]
 801904c:	089b      	lsrs	r3, r3, #2
 801904e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	689b      	ldr	r3, [r3, #8]
 8019054:	2b00      	cmp	r3, #0
 8019056:	d00e      	beq.n	8019076 <osThreadNew+0xca>
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	68db      	ldr	r3, [r3, #12]
 801905c:	2b5b      	cmp	r3, #91	; 0x5b
 801905e:	d90a      	bls.n	8019076 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8019064:	2b00      	cmp	r3, #0
 8019066:	d006      	beq.n	8019076 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	695b      	ldr	r3, [r3, #20]
 801906c:	2b00      	cmp	r3, #0
 801906e:	d002      	beq.n	8019076 <osThreadNew+0xca>
        mem = 1;
 8019070:	2301      	movs	r3, #1
 8019072:	623b      	str	r3, [r7, #32]
 8019074:	e010      	b.n	8019098 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	689b      	ldr	r3, [r3, #8]
 801907a:	2b00      	cmp	r3, #0
 801907c:	d10c      	bne.n	8019098 <osThreadNew+0xec>
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	68db      	ldr	r3, [r3, #12]
 8019082:	2b00      	cmp	r3, #0
 8019084:	d108      	bne.n	8019098 <osThreadNew+0xec>
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	691b      	ldr	r3, [r3, #16]
 801908a:	2b00      	cmp	r3, #0
 801908c:	d104      	bne.n	8019098 <osThreadNew+0xec>
          mem = 0;
 801908e:	2300      	movs	r3, #0
 8019090:	623b      	str	r3, [r7, #32]
 8019092:	e001      	b.n	8019098 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8019094:	2300      	movs	r3, #0
 8019096:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8019098:	6a3b      	ldr	r3, [r7, #32]
 801909a:	2b01      	cmp	r3, #1
 801909c:	d110      	bne.n	80190c0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801909e:	687b      	ldr	r3, [r7, #4]
 80190a0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80190a2:	687a      	ldr	r2, [r7, #4]
 80190a4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80190a6:	9202      	str	r2, [sp, #8]
 80190a8:	9301      	str	r3, [sp, #4]
 80190aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190ac:	9300      	str	r3, [sp, #0]
 80190ae:	68bb      	ldr	r3, [r7, #8]
 80190b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80190b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80190b4:	68f8      	ldr	r0, [r7, #12]
 80190b6:	f001 fab5 	bl	801a624 <xTaskCreateStatic>
 80190ba:	4603      	mov	r3, r0
 80190bc:	613b      	str	r3, [r7, #16]
 80190be:	e013      	b.n	80190e8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80190c0:	6a3b      	ldr	r3, [r7, #32]
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	d110      	bne.n	80190e8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80190c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190c8:	b29a      	uxth	r2, r3
 80190ca:	f107 0310 	add.w	r3, r7, #16
 80190ce:	9301      	str	r3, [sp, #4]
 80190d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190d2:	9300      	str	r3, [sp, #0]
 80190d4:	68bb      	ldr	r3, [r7, #8]
 80190d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80190d8:	68f8      	ldr	r0, [r7, #12]
 80190da:	f001 fafd 	bl	801a6d8 <xTaskCreate>
 80190de:	4603      	mov	r3, r0
 80190e0:	2b01      	cmp	r3, #1
 80190e2:	d001      	beq.n	80190e8 <osThreadNew+0x13c>
          hTask = NULL;
 80190e4:	2300      	movs	r3, #0
 80190e6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80190e8:	693b      	ldr	r3, [r7, #16]
}
 80190ea:	4618      	mov	r0, r3
 80190ec:	3730      	adds	r7, #48	; 0x30
 80190ee:	46bd      	mov	sp, r7
 80190f0:	bd80      	pop	{r7, pc}
 80190f2:	bf00      	nop
 80190f4:	200004a8 	.word	0x200004a8

080190f8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80190f8:	b580      	push	{r7, lr}
 80190fa:	b086      	sub	sp, #24
 80190fc:	af00      	add	r7, sp, #0
 80190fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019100:	f3ef 8305 	mrs	r3, IPSR
 8019104:	613b      	str	r3, [r7, #16]
  return(result);
 8019106:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8019108:	2b00      	cmp	r3, #0
 801910a:	d10f      	bne.n	801912c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801910c:	f3ef 8310 	mrs	r3, PRIMASK
 8019110:	60fb      	str	r3, [r7, #12]
  return(result);
 8019112:	68fb      	ldr	r3, [r7, #12]
 8019114:	2b00      	cmp	r3, #0
 8019116:	d105      	bne.n	8019124 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8019118:	f3ef 8311 	mrs	r3, BASEPRI
 801911c:	60bb      	str	r3, [r7, #8]
  return(result);
 801911e:	68bb      	ldr	r3, [r7, #8]
 8019120:	2b00      	cmp	r3, #0
 8019122:	d007      	beq.n	8019134 <osDelay+0x3c>
 8019124:	4b0a      	ldr	r3, [pc, #40]	; (8019150 <osDelay+0x58>)
 8019126:	681b      	ldr	r3, [r3, #0]
 8019128:	2b02      	cmp	r3, #2
 801912a:	d103      	bne.n	8019134 <osDelay+0x3c>
    stat = osErrorISR;
 801912c:	f06f 0305 	mvn.w	r3, #5
 8019130:	617b      	str	r3, [r7, #20]
 8019132:	e007      	b.n	8019144 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8019134:	2300      	movs	r3, #0
 8019136:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	2b00      	cmp	r3, #0
 801913c:	d002      	beq.n	8019144 <osDelay+0x4c>
      vTaskDelay(ticks);
 801913e:	6878      	ldr	r0, [r7, #4]
 8019140:	f001 fc0e 	bl	801a960 <vTaskDelay>
    }
  }

  return (stat);
 8019144:	697b      	ldr	r3, [r7, #20]
}
 8019146:	4618      	mov	r0, r3
 8019148:	3718      	adds	r7, #24
 801914a:	46bd      	mov	sp, r7
 801914c:	bd80      	pop	{r7, pc}
 801914e:	bf00      	nop
 8019150:	200004a8 	.word	0x200004a8

08019154 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8019154:	b580      	push	{r7, lr}
 8019156:	b08c      	sub	sp, #48	; 0x30
 8019158:	af02      	add	r7, sp, #8
 801915a:	60f8      	str	r0, [r7, #12]
 801915c:	60b9      	str	r1, [r7, #8]
 801915e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8019160:	2300      	movs	r3, #0
 8019162:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019164:	f3ef 8305 	mrs	r3, IPSR
 8019168:	61bb      	str	r3, [r7, #24]
  return(result);
 801916a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801916c:	2b00      	cmp	r3, #0
 801916e:	f040 8087 	bne.w	8019280 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019172:	f3ef 8310 	mrs	r3, PRIMASK
 8019176:	617b      	str	r3, [r7, #20]
  return(result);
 8019178:	697b      	ldr	r3, [r7, #20]
 801917a:	2b00      	cmp	r3, #0
 801917c:	d105      	bne.n	801918a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801917e:	f3ef 8311 	mrs	r3, BASEPRI
 8019182:	613b      	str	r3, [r7, #16]
  return(result);
 8019184:	693b      	ldr	r3, [r7, #16]
 8019186:	2b00      	cmp	r3, #0
 8019188:	d003      	beq.n	8019192 <osSemaphoreNew+0x3e>
 801918a:	4b40      	ldr	r3, [pc, #256]	; (801928c <osSemaphoreNew+0x138>)
 801918c:	681b      	ldr	r3, [r3, #0]
 801918e:	2b02      	cmp	r3, #2
 8019190:	d076      	beq.n	8019280 <osSemaphoreNew+0x12c>
 8019192:	68fb      	ldr	r3, [r7, #12]
 8019194:	2b00      	cmp	r3, #0
 8019196:	d073      	beq.n	8019280 <osSemaphoreNew+0x12c>
 8019198:	68ba      	ldr	r2, [r7, #8]
 801919a:	68fb      	ldr	r3, [r7, #12]
 801919c:	429a      	cmp	r2, r3
 801919e:	d86f      	bhi.n	8019280 <osSemaphoreNew+0x12c>
    mem = -1;
 80191a0:	f04f 33ff 	mov.w	r3, #4294967295
 80191a4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80191a6:	687b      	ldr	r3, [r7, #4]
 80191a8:	2b00      	cmp	r3, #0
 80191aa:	d015      	beq.n	80191d8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	689b      	ldr	r3, [r3, #8]
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	d006      	beq.n	80191c2 <osSemaphoreNew+0x6e>
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	68db      	ldr	r3, [r3, #12]
 80191b8:	2b4f      	cmp	r3, #79	; 0x4f
 80191ba:	d902      	bls.n	80191c2 <osSemaphoreNew+0x6e>
        mem = 1;
 80191bc:	2301      	movs	r3, #1
 80191be:	623b      	str	r3, [r7, #32]
 80191c0:	e00c      	b.n	80191dc <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	689b      	ldr	r3, [r3, #8]
 80191c6:	2b00      	cmp	r3, #0
 80191c8:	d108      	bne.n	80191dc <osSemaphoreNew+0x88>
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	68db      	ldr	r3, [r3, #12]
 80191ce:	2b00      	cmp	r3, #0
 80191d0:	d104      	bne.n	80191dc <osSemaphoreNew+0x88>
          mem = 0;
 80191d2:	2300      	movs	r3, #0
 80191d4:	623b      	str	r3, [r7, #32]
 80191d6:	e001      	b.n	80191dc <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80191d8:	2300      	movs	r3, #0
 80191da:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80191dc:	6a3b      	ldr	r3, [r7, #32]
 80191de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80191e2:	d04d      	beq.n	8019280 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 80191e4:	68fb      	ldr	r3, [r7, #12]
 80191e6:	2b01      	cmp	r3, #1
 80191e8:	d129      	bne.n	801923e <osSemaphoreNew+0xea>
        if (mem == 1) {
 80191ea:	6a3b      	ldr	r3, [r7, #32]
 80191ec:	2b01      	cmp	r3, #1
 80191ee:	d10b      	bne.n	8019208 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	689a      	ldr	r2, [r3, #8]
 80191f4:	2303      	movs	r3, #3
 80191f6:	9300      	str	r3, [sp, #0]
 80191f8:	4613      	mov	r3, r2
 80191fa:	2200      	movs	r2, #0
 80191fc:	2100      	movs	r1, #0
 80191fe:	2001      	movs	r0, #1
 8019200:	f000 fa8a 	bl	8019718 <xQueueGenericCreateStatic>
 8019204:	6278      	str	r0, [r7, #36]	; 0x24
 8019206:	e005      	b.n	8019214 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8019208:	2203      	movs	r2, #3
 801920a:	2100      	movs	r1, #0
 801920c:	2001      	movs	r0, #1
 801920e:	f000 faf6 	bl	80197fe <xQueueGenericCreate>
 8019212:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8019214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019216:	2b00      	cmp	r3, #0
 8019218:	d022      	beq.n	8019260 <osSemaphoreNew+0x10c>
 801921a:	68bb      	ldr	r3, [r7, #8]
 801921c:	2b00      	cmp	r3, #0
 801921e:	d01f      	beq.n	8019260 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8019220:	2300      	movs	r3, #0
 8019222:	2200      	movs	r2, #0
 8019224:	2100      	movs	r1, #0
 8019226:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019228:	f000 fbb2 	bl	8019990 <xQueueGenericSend>
 801922c:	4603      	mov	r3, r0
 801922e:	2b01      	cmp	r3, #1
 8019230:	d016      	beq.n	8019260 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8019232:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019234:	f001 f825 	bl	801a282 <vQueueDelete>
            hSemaphore = NULL;
 8019238:	2300      	movs	r3, #0
 801923a:	627b      	str	r3, [r7, #36]	; 0x24
 801923c:	e010      	b.n	8019260 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 801923e:	6a3b      	ldr	r3, [r7, #32]
 8019240:	2b01      	cmp	r3, #1
 8019242:	d108      	bne.n	8019256 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8019244:	687b      	ldr	r3, [r7, #4]
 8019246:	689b      	ldr	r3, [r3, #8]
 8019248:	461a      	mov	r2, r3
 801924a:	68b9      	ldr	r1, [r7, #8]
 801924c:	68f8      	ldr	r0, [r7, #12]
 801924e:	f000 fb38 	bl	80198c2 <xQueueCreateCountingSemaphoreStatic>
 8019252:	6278      	str	r0, [r7, #36]	; 0x24
 8019254:	e004      	b.n	8019260 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8019256:	68b9      	ldr	r1, [r7, #8]
 8019258:	68f8      	ldr	r0, [r7, #12]
 801925a:	f000 fb67 	bl	801992c <xQueueCreateCountingSemaphore>
 801925e:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8019260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019262:	2b00      	cmp	r3, #0
 8019264:	d00c      	beq.n	8019280 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	2b00      	cmp	r3, #0
 801926a:	d003      	beq.n	8019274 <osSemaphoreNew+0x120>
          name = attr->name;
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	681b      	ldr	r3, [r3, #0]
 8019270:	61fb      	str	r3, [r7, #28]
 8019272:	e001      	b.n	8019278 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8019274:	2300      	movs	r3, #0
 8019276:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8019278:	69f9      	ldr	r1, [r7, #28]
 801927a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801927c:	f001 f94c 	bl	801a518 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8019280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019282:	4618      	mov	r0, r3
 8019284:	3728      	adds	r7, #40	; 0x28
 8019286:	46bd      	mov	sp, r7
 8019288:	bd80      	pop	{r7, pc}
 801928a:	bf00      	nop
 801928c:	200004a8 	.word	0x200004a8

08019290 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8019290:	b580      	push	{r7, lr}
 8019292:	b088      	sub	sp, #32
 8019294:	af00      	add	r7, sp, #0
 8019296:	6078      	str	r0, [r7, #4]
 8019298:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801929e:	2300      	movs	r3, #0
 80192a0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80192a2:	69bb      	ldr	r3, [r7, #24]
 80192a4:	2b00      	cmp	r3, #0
 80192a6:	d103      	bne.n	80192b0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80192a8:	f06f 0303 	mvn.w	r3, #3
 80192ac:	61fb      	str	r3, [r7, #28]
 80192ae:	e04b      	b.n	8019348 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80192b0:	f3ef 8305 	mrs	r3, IPSR
 80192b4:	617b      	str	r3, [r7, #20]
  return(result);
 80192b6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	d10f      	bne.n	80192dc <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80192bc:	f3ef 8310 	mrs	r3, PRIMASK
 80192c0:	613b      	str	r3, [r7, #16]
  return(result);
 80192c2:	693b      	ldr	r3, [r7, #16]
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	d105      	bne.n	80192d4 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80192c8:	f3ef 8311 	mrs	r3, BASEPRI
 80192cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80192ce:	68fb      	ldr	r3, [r7, #12]
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	d026      	beq.n	8019322 <osSemaphoreAcquire+0x92>
 80192d4:	4b1f      	ldr	r3, [pc, #124]	; (8019354 <osSemaphoreAcquire+0xc4>)
 80192d6:	681b      	ldr	r3, [r3, #0]
 80192d8:	2b02      	cmp	r3, #2
 80192da:	d122      	bne.n	8019322 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80192dc:	683b      	ldr	r3, [r7, #0]
 80192de:	2b00      	cmp	r3, #0
 80192e0:	d003      	beq.n	80192ea <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80192e2:	f06f 0303 	mvn.w	r3, #3
 80192e6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80192e8:	e02d      	b.n	8019346 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80192ea:	2300      	movs	r3, #0
 80192ec:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80192ee:	f107 0308 	add.w	r3, r7, #8
 80192f2:	461a      	mov	r2, r3
 80192f4:	2100      	movs	r1, #0
 80192f6:	69b8      	ldr	r0, [r7, #24]
 80192f8:	f000 ff46 	bl	801a188 <xQueueReceiveFromISR>
 80192fc:	4603      	mov	r3, r0
 80192fe:	2b01      	cmp	r3, #1
 8019300:	d003      	beq.n	801930a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8019302:	f06f 0302 	mvn.w	r3, #2
 8019306:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8019308:	e01d      	b.n	8019346 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 801930a:	68bb      	ldr	r3, [r7, #8]
 801930c:	2b00      	cmp	r3, #0
 801930e:	d01a      	beq.n	8019346 <osSemaphoreAcquire+0xb6>
 8019310:	4b11      	ldr	r3, [pc, #68]	; (8019358 <osSemaphoreAcquire+0xc8>)
 8019312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019316:	601a      	str	r2, [r3, #0]
 8019318:	f3bf 8f4f 	dsb	sy
 801931c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8019320:	e011      	b.n	8019346 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8019322:	6839      	ldr	r1, [r7, #0]
 8019324:	69b8      	ldr	r0, [r7, #24]
 8019326:	f000 fe27 	bl	8019f78 <xQueueSemaphoreTake>
 801932a:	4603      	mov	r3, r0
 801932c:	2b01      	cmp	r3, #1
 801932e:	d00b      	beq.n	8019348 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8019330:	683b      	ldr	r3, [r7, #0]
 8019332:	2b00      	cmp	r3, #0
 8019334:	d003      	beq.n	801933e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8019336:	f06f 0301 	mvn.w	r3, #1
 801933a:	61fb      	str	r3, [r7, #28]
 801933c:	e004      	b.n	8019348 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 801933e:	f06f 0302 	mvn.w	r3, #2
 8019342:	61fb      	str	r3, [r7, #28]
 8019344:	e000      	b.n	8019348 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8019346:	bf00      	nop
      }
    }
  }

  return (stat);
 8019348:	69fb      	ldr	r3, [r7, #28]
}
 801934a:	4618      	mov	r0, r3
 801934c:	3720      	adds	r7, #32
 801934e:	46bd      	mov	sp, r7
 8019350:	bd80      	pop	{r7, pc}
 8019352:	bf00      	nop
 8019354:	200004a8 	.word	0x200004a8
 8019358:	e000ed04 	.word	0xe000ed04

0801935c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 801935c:	b580      	push	{r7, lr}
 801935e:	b088      	sub	sp, #32
 8019360:	af00      	add	r7, sp, #0
 8019362:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8019368:	2300      	movs	r3, #0
 801936a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 801936c:	69bb      	ldr	r3, [r7, #24]
 801936e:	2b00      	cmp	r3, #0
 8019370:	d103      	bne.n	801937a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8019372:	f06f 0303 	mvn.w	r3, #3
 8019376:	61fb      	str	r3, [r7, #28]
 8019378:	e03e      	b.n	80193f8 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801937a:	f3ef 8305 	mrs	r3, IPSR
 801937e:	617b      	str	r3, [r7, #20]
  return(result);
 8019380:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8019382:	2b00      	cmp	r3, #0
 8019384:	d10f      	bne.n	80193a6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019386:	f3ef 8310 	mrs	r3, PRIMASK
 801938a:	613b      	str	r3, [r7, #16]
  return(result);
 801938c:	693b      	ldr	r3, [r7, #16]
 801938e:	2b00      	cmp	r3, #0
 8019390:	d105      	bne.n	801939e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8019392:	f3ef 8311 	mrs	r3, BASEPRI
 8019396:	60fb      	str	r3, [r7, #12]
  return(result);
 8019398:	68fb      	ldr	r3, [r7, #12]
 801939a:	2b00      	cmp	r3, #0
 801939c:	d01e      	beq.n	80193dc <osSemaphoreRelease+0x80>
 801939e:	4b19      	ldr	r3, [pc, #100]	; (8019404 <osSemaphoreRelease+0xa8>)
 80193a0:	681b      	ldr	r3, [r3, #0]
 80193a2:	2b02      	cmp	r3, #2
 80193a4:	d11a      	bne.n	80193dc <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80193a6:	2300      	movs	r3, #0
 80193a8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80193aa:	f107 0308 	add.w	r3, r7, #8
 80193ae:	4619      	mov	r1, r3
 80193b0:	69b8      	ldr	r0, [r7, #24]
 80193b2:	f000 fc7b 	bl	8019cac <xQueueGiveFromISR>
 80193b6:	4603      	mov	r3, r0
 80193b8:	2b01      	cmp	r3, #1
 80193ba:	d003      	beq.n	80193c4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80193bc:	f06f 0302 	mvn.w	r3, #2
 80193c0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80193c2:	e018      	b.n	80193f6 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80193c4:	68bb      	ldr	r3, [r7, #8]
 80193c6:	2b00      	cmp	r3, #0
 80193c8:	d015      	beq.n	80193f6 <osSemaphoreRelease+0x9a>
 80193ca:	4b0f      	ldr	r3, [pc, #60]	; (8019408 <osSemaphoreRelease+0xac>)
 80193cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80193d0:	601a      	str	r2, [r3, #0]
 80193d2:	f3bf 8f4f 	dsb	sy
 80193d6:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80193da:	e00c      	b.n	80193f6 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80193dc:	2300      	movs	r3, #0
 80193de:	2200      	movs	r2, #0
 80193e0:	2100      	movs	r1, #0
 80193e2:	69b8      	ldr	r0, [r7, #24]
 80193e4:	f000 fad4 	bl	8019990 <xQueueGenericSend>
 80193e8:	4603      	mov	r3, r0
 80193ea:	2b01      	cmp	r3, #1
 80193ec:	d004      	beq.n	80193f8 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80193ee:	f06f 0302 	mvn.w	r3, #2
 80193f2:	61fb      	str	r3, [r7, #28]
 80193f4:	e000      	b.n	80193f8 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80193f6:	bf00      	nop
    }
  }

  return (stat);
 80193f8:	69fb      	ldr	r3, [r7, #28]
}
 80193fa:	4618      	mov	r0, r3
 80193fc:	3720      	adds	r7, #32
 80193fe:	46bd      	mov	sp, r7
 8019400:	bd80      	pop	{r7, pc}
 8019402:	bf00      	nop
 8019404:	200004a8 	.word	0x200004a8
 8019408:	e000ed04 	.word	0xe000ed04

0801940c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 801940c:	b580      	push	{r7, lr}
 801940e:	b088      	sub	sp, #32
 8019410:	af00      	add	r7, sp, #0
 8019412:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019418:	f3ef 8305 	mrs	r3, IPSR
 801941c:	617b      	str	r3, [r7, #20]
  return(result);
 801941e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8019420:	2b00      	cmp	r3, #0
 8019422:	d10f      	bne.n	8019444 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019424:	f3ef 8310 	mrs	r3, PRIMASK
 8019428:	613b      	str	r3, [r7, #16]
  return(result);
 801942a:	693b      	ldr	r3, [r7, #16]
 801942c:	2b00      	cmp	r3, #0
 801942e:	d105      	bne.n	801943c <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8019430:	f3ef 8311 	mrs	r3, BASEPRI
 8019434:	60fb      	str	r3, [r7, #12]
  return(result);
 8019436:	68fb      	ldr	r3, [r7, #12]
 8019438:	2b00      	cmp	r3, #0
 801943a:	d007      	beq.n	801944c <osSemaphoreDelete+0x40>
 801943c:	4b0d      	ldr	r3, [pc, #52]	; (8019474 <osSemaphoreDelete+0x68>)
 801943e:	681b      	ldr	r3, [r3, #0]
 8019440:	2b02      	cmp	r3, #2
 8019442:	d103      	bne.n	801944c <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8019444:	f06f 0305 	mvn.w	r3, #5
 8019448:	61fb      	str	r3, [r7, #28]
 801944a:	e00e      	b.n	801946a <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 801944c:	69bb      	ldr	r3, [r7, #24]
 801944e:	2b00      	cmp	r3, #0
 8019450:	d103      	bne.n	801945a <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8019452:	f06f 0303 	mvn.w	r3, #3
 8019456:	61fb      	str	r3, [r7, #28]
 8019458:	e007      	b.n	801946a <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 801945a:	69b8      	ldr	r0, [r7, #24]
 801945c:	f001 f884 	bl	801a568 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8019460:	2300      	movs	r3, #0
 8019462:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8019464:	69b8      	ldr	r0, [r7, #24]
 8019466:	f000 ff0c 	bl	801a282 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 801946a:	69fb      	ldr	r3, [r7, #28]
}
 801946c:	4618      	mov	r0, r3
 801946e:	3720      	adds	r7, #32
 8019470:	46bd      	mov	sp, r7
 8019472:	bd80      	pop	{r7, pc}
 8019474:	200004a8 	.word	0x200004a8

08019478 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8019478:	b480      	push	{r7}
 801947a:	b085      	sub	sp, #20
 801947c:	af00      	add	r7, sp, #0
 801947e:	60f8      	str	r0, [r7, #12]
 8019480:	60b9      	str	r1, [r7, #8]
 8019482:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8019484:	68fb      	ldr	r3, [r7, #12]
 8019486:	4a07      	ldr	r2, [pc, #28]	; (80194a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8019488:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801948a:	68bb      	ldr	r3, [r7, #8]
 801948c:	4a06      	ldr	r2, [pc, #24]	; (80194a8 <vApplicationGetIdleTaskMemory+0x30>)
 801948e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	2280      	movs	r2, #128	; 0x80
 8019494:	601a      	str	r2, [r3, #0]
}
 8019496:	bf00      	nop
 8019498:	3714      	adds	r7, #20
 801949a:	46bd      	mov	sp, r7
 801949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194a0:	4770      	bx	lr
 80194a2:	bf00      	nop
 80194a4:	200004ac 	.word	0x200004ac
 80194a8:	20000508 	.word	0x20000508

080194ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80194ac:	b480      	push	{r7}
 80194ae:	b085      	sub	sp, #20
 80194b0:	af00      	add	r7, sp, #0
 80194b2:	60f8      	str	r0, [r7, #12]
 80194b4:	60b9      	str	r1, [r7, #8]
 80194b6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80194b8:	68fb      	ldr	r3, [r7, #12]
 80194ba:	4a07      	ldr	r2, [pc, #28]	; (80194d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80194bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80194be:	68bb      	ldr	r3, [r7, #8]
 80194c0:	4a06      	ldr	r2, [pc, #24]	; (80194dc <vApplicationGetTimerTaskMemory+0x30>)
 80194c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80194ca:	601a      	str	r2, [r3, #0]
}
 80194cc:	bf00      	nop
 80194ce:	3714      	adds	r7, #20
 80194d0:	46bd      	mov	sp, r7
 80194d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194d6:	4770      	bx	lr
 80194d8:	20000708 	.word	0x20000708
 80194dc:	20000764 	.word	0x20000764

080194e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80194e0:	b480      	push	{r7}
 80194e2:	b083      	sub	sp, #12
 80194e4:	af00      	add	r7, sp, #0
 80194e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80194e8:	687b      	ldr	r3, [r7, #4]
 80194ea:	f103 0208 	add.w	r2, r3, #8
 80194ee:	687b      	ldr	r3, [r7, #4]
 80194f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	f04f 32ff 	mov.w	r2, #4294967295
 80194f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	f103 0208 	add.w	r2, r3, #8
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019504:	687b      	ldr	r3, [r7, #4]
 8019506:	f103 0208 	add.w	r2, r3, #8
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	2200      	movs	r2, #0
 8019512:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8019514:	bf00      	nop
 8019516:	370c      	adds	r7, #12
 8019518:	46bd      	mov	sp, r7
 801951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801951e:	4770      	bx	lr

08019520 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8019520:	b480      	push	{r7}
 8019522:	b083      	sub	sp, #12
 8019524:	af00      	add	r7, sp, #0
 8019526:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	2200      	movs	r2, #0
 801952c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801952e:	bf00      	nop
 8019530:	370c      	adds	r7, #12
 8019532:	46bd      	mov	sp, r7
 8019534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019538:	4770      	bx	lr

0801953a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801953a:	b480      	push	{r7}
 801953c:	b085      	sub	sp, #20
 801953e:	af00      	add	r7, sp, #0
 8019540:	6078      	str	r0, [r7, #4]
 8019542:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	685b      	ldr	r3, [r3, #4]
 8019548:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801954a:	683b      	ldr	r3, [r7, #0]
 801954c:	68fa      	ldr	r2, [r7, #12]
 801954e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8019550:	68fb      	ldr	r3, [r7, #12]
 8019552:	689a      	ldr	r2, [r3, #8]
 8019554:	683b      	ldr	r3, [r7, #0]
 8019556:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8019558:	68fb      	ldr	r3, [r7, #12]
 801955a:	689b      	ldr	r3, [r3, #8]
 801955c:	683a      	ldr	r2, [r7, #0]
 801955e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8019560:	68fb      	ldr	r3, [r7, #12]
 8019562:	683a      	ldr	r2, [r7, #0]
 8019564:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8019566:	683b      	ldr	r3, [r7, #0]
 8019568:	687a      	ldr	r2, [r7, #4]
 801956a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	681b      	ldr	r3, [r3, #0]
 8019570:	1c5a      	adds	r2, r3, #1
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	601a      	str	r2, [r3, #0]
}
 8019576:	bf00      	nop
 8019578:	3714      	adds	r7, #20
 801957a:	46bd      	mov	sp, r7
 801957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019580:	4770      	bx	lr

08019582 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8019582:	b480      	push	{r7}
 8019584:	b085      	sub	sp, #20
 8019586:	af00      	add	r7, sp, #0
 8019588:	6078      	str	r0, [r7, #4]
 801958a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801958c:	683b      	ldr	r3, [r7, #0]
 801958e:	681b      	ldr	r3, [r3, #0]
 8019590:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8019592:	68bb      	ldr	r3, [r7, #8]
 8019594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019598:	d103      	bne.n	80195a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801959a:	687b      	ldr	r3, [r7, #4]
 801959c:	691b      	ldr	r3, [r3, #16]
 801959e:	60fb      	str	r3, [r7, #12]
 80195a0:	e00c      	b.n	80195bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	3308      	adds	r3, #8
 80195a6:	60fb      	str	r3, [r7, #12]
 80195a8:	e002      	b.n	80195b0 <vListInsert+0x2e>
 80195aa:	68fb      	ldr	r3, [r7, #12]
 80195ac:	685b      	ldr	r3, [r3, #4]
 80195ae:	60fb      	str	r3, [r7, #12]
 80195b0:	68fb      	ldr	r3, [r7, #12]
 80195b2:	685b      	ldr	r3, [r3, #4]
 80195b4:	681b      	ldr	r3, [r3, #0]
 80195b6:	68ba      	ldr	r2, [r7, #8]
 80195b8:	429a      	cmp	r2, r3
 80195ba:	d2f6      	bcs.n	80195aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80195bc:	68fb      	ldr	r3, [r7, #12]
 80195be:	685a      	ldr	r2, [r3, #4]
 80195c0:	683b      	ldr	r3, [r7, #0]
 80195c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80195c4:	683b      	ldr	r3, [r7, #0]
 80195c6:	685b      	ldr	r3, [r3, #4]
 80195c8:	683a      	ldr	r2, [r7, #0]
 80195ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80195cc:	683b      	ldr	r3, [r7, #0]
 80195ce:	68fa      	ldr	r2, [r7, #12]
 80195d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80195d2:	68fb      	ldr	r3, [r7, #12]
 80195d4:	683a      	ldr	r2, [r7, #0]
 80195d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80195d8:	683b      	ldr	r3, [r7, #0]
 80195da:	687a      	ldr	r2, [r7, #4]
 80195dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	681b      	ldr	r3, [r3, #0]
 80195e2:	1c5a      	adds	r2, r3, #1
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	601a      	str	r2, [r3, #0]
}
 80195e8:	bf00      	nop
 80195ea:	3714      	adds	r7, #20
 80195ec:	46bd      	mov	sp, r7
 80195ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195f2:	4770      	bx	lr

080195f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80195f4:	b480      	push	{r7}
 80195f6:	b085      	sub	sp, #20
 80195f8:	af00      	add	r7, sp, #0
 80195fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	691b      	ldr	r3, [r3, #16]
 8019600:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8019602:	687b      	ldr	r3, [r7, #4]
 8019604:	685b      	ldr	r3, [r3, #4]
 8019606:	687a      	ldr	r2, [r7, #4]
 8019608:	6892      	ldr	r2, [r2, #8]
 801960a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	689b      	ldr	r3, [r3, #8]
 8019610:	687a      	ldr	r2, [r7, #4]
 8019612:	6852      	ldr	r2, [r2, #4]
 8019614:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8019616:	68fb      	ldr	r3, [r7, #12]
 8019618:	685b      	ldr	r3, [r3, #4]
 801961a:	687a      	ldr	r2, [r7, #4]
 801961c:	429a      	cmp	r2, r3
 801961e:	d103      	bne.n	8019628 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	689a      	ldr	r2, [r3, #8]
 8019624:	68fb      	ldr	r3, [r7, #12]
 8019626:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	2200      	movs	r2, #0
 801962c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801962e:	68fb      	ldr	r3, [r7, #12]
 8019630:	681b      	ldr	r3, [r3, #0]
 8019632:	1e5a      	subs	r2, r3, #1
 8019634:	68fb      	ldr	r3, [r7, #12]
 8019636:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8019638:	68fb      	ldr	r3, [r7, #12]
 801963a:	681b      	ldr	r3, [r3, #0]
}
 801963c:	4618      	mov	r0, r3
 801963e:	3714      	adds	r7, #20
 8019640:	46bd      	mov	sp, r7
 8019642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019646:	4770      	bx	lr

08019648 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8019648:	b580      	push	{r7, lr}
 801964a:	b084      	sub	sp, #16
 801964c:	af00      	add	r7, sp, #0
 801964e:	6078      	str	r0, [r7, #4]
 8019650:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8019656:	68fb      	ldr	r3, [r7, #12]
 8019658:	2b00      	cmp	r3, #0
 801965a:	d109      	bne.n	8019670 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801965c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019660:	f383 8811 	msr	BASEPRI, r3
 8019664:	f3bf 8f6f 	isb	sy
 8019668:	f3bf 8f4f 	dsb	sy
 801966c:	60bb      	str	r3, [r7, #8]
 801966e:	e7fe      	b.n	801966e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8019670:	f002 fc24 	bl	801bebc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019674:	68fb      	ldr	r3, [r7, #12]
 8019676:	681a      	ldr	r2, [r3, #0]
 8019678:	68fb      	ldr	r3, [r7, #12]
 801967a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801967c:	68f9      	ldr	r1, [r7, #12]
 801967e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8019680:	fb01 f303 	mul.w	r3, r1, r3
 8019684:	441a      	add	r2, r3
 8019686:	68fb      	ldr	r3, [r7, #12]
 8019688:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801968a:	68fb      	ldr	r3, [r7, #12]
 801968c:	2200      	movs	r2, #0
 801968e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8019690:	68fb      	ldr	r3, [r7, #12]
 8019692:	681a      	ldr	r2, [r3, #0]
 8019694:	68fb      	ldr	r3, [r7, #12]
 8019696:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019698:	68fb      	ldr	r3, [r7, #12]
 801969a:	681a      	ldr	r2, [r3, #0]
 801969c:	68fb      	ldr	r3, [r7, #12]
 801969e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80196a0:	3b01      	subs	r3, #1
 80196a2:	68f9      	ldr	r1, [r7, #12]
 80196a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80196a6:	fb01 f303 	mul.w	r3, r1, r3
 80196aa:	441a      	add	r2, r3
 80196ac:	68fb      	ldr	r3, [r7, #12]
 80196ae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80196b0:	68fb      	ldr	r3, [r7, #12]
 80196b2:	22ff      	movs	r2, #255	; 0xff
 80196b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80196b8:	68fb      	ldr	r3, [r7, #12]
 80196ba:	22ff      	movs	r2, #255	; 0xff
 80196bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80196c0:	683b      	ldr	r3, [r7, #0]
 80196c2:	2b00      	cmp	r3, #0
 80196c4:	d114      	bne.n	80196f0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80196c6:	68fb      	ldr	r3, [r7, #12]
 80196c8:	691b      	ldr	r3, [r3, #16]
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	d01a      	beq.n	8019704 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80196ce:	68fb      	ldr	r3, [r7, #12]
 80196d0:	3310      	adds	r3, #16
 80196d2:	4618      	mov	r0, r3
 80196d4:	f001 fbf8 	bl	801aec8 <xTaskRemoveFromEventList>
 80196d8:	4603      	mov	r3, r0
 80196da:	2b00      	cmp	r3, #0
 80196dc:	d012      	beq.n	8019704 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80196de:	4b0d      	ldr	r3, [pc, #52]	; (8019714 <xQueueGenericReset+0xcc>)
 80196e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80196e4:	601a      	str	r2, [r3, #0]
 80196e6:	f3bf 8f4f 	dsb	sy
 80196ea:	f3bf 8f6f 	isb	sy
 80196ee:	e009      	b.n	8019704 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80196f0:	68fb      	ldr	r3, [r7, #12]
 80196f2:	3310      	adds	r3, #16
 80196f4:	4618      	mov	r0, r3
 80196f6:	f7ff fef3 	bl	80194e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80196fa:	68fb      	ldr	r3, [r7, #12]
 80196fc:	3324      	adds	r3, #36	; 0x24
 80196fe:	4618      	mov	r0, r3
 8019700:	f7ff feee 	bl	80194e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8019704:	f002 fc08 	bl	801bf18 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8019708:	2301      	movs	r3, #1
}
 801970a:	4618      	mov	r0, r3
 801970c:	3710      	adds	r7, #16
 801970e:	46bd      	mov	sp, r7
 8019710:	bd80      	pop	{r7, pc}
 8019712:	bf00      	nop
 8019714:	e000ed04 	.word	0xe000ed04

08019718 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8019718:	b580      	push	{r7, lr}
 801971a:	b08e      	sub	sp, #56	; 0x38
 801971c:	af02      	add	r7, sp, #8
 801971e:	60f8      	str	r0, [r7, #12]
 8019720:	60b9      	str	r1, [r7, #8]
 8019722:	607a      	str	r2, [r7, #4]
 8019724:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8019726:	68fb      	ldr	r3, [r7, #12]
 8019728:	2b00      	cmp	r3, #0
 801972a:	d109      	bne.n	8019740 <xQueueGenericCreateStatic+0x28>
 801972c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019730:	f383 8811 	msr	BASEPRI, r3
 8019734:	f3bf 8f6f 	isb	sy
 8019738:	f3bf 8f4f 	dsb	sy
 801973c:	62bb      	str	r3, [r7, #40]	; 0x28
 801973e:	e7fe      	b.n	801973e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8019740:	683b      	ldr	r3, [r7, #0]
 8019742:	2b00      	cmp	r3, #0
 8019744:	d109      	bne.n	801975a <xQueueGenericCreateStatic+0x42>
 8019746:	f04f 0350 	mov.w	r3, #80	; 0x50
 801974a:	f383 8811 	msr	BASEPRI, r3
 801974e:	f3bf 8f6f 	isb	sy
 8019752:	f3bf 8f4f 	dsb	sy
 8019756:	627b      	str	r3, [r7, #36]	; 0x24
 8019758:	e7fe      	b.n	8019758 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	2b00      	cmp	r3, #0
 801975e:	d002      	beq.n	8019766 <xQueueGenericCreateStatic+0x4e>
 8019760:	68bb      	ldr	r3, [r7, #8]
 8019762:	2b00      	cmp	r3, #0
 8019764:	d001      	beq.n	801976a <xQueueGenericCreateStatic+0x52>
 8019766:	2301      	movs	r3, #1
 8019768:	e000      	b.n	801976c <xQueueGenericCreateStatic+0x54>
 801976a:	2300      	movs	r3, #0
 801976c:	2b00      	cmp	r3, #0
 801976e:	d109      	bne.n	8019784 <xQueueGenericCreateStatic+0x6c>
 8019770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019774:	f383 8811 	msr	BASEPRI, r3
 8019778:	f3bf 8f6f 	isb	sy
 801977c:	f3bf 8f4f 	dsb	sy
 8019780:	623b      	str	r3, [r7, #32]
 8019782:	e7fe      	b.n	8019782 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	2b00      	cmp	r3, #0
 8019788:	d102      	bne.n	8019790 <xQueueGenericCreateStatic+0x78>
 801978a:	68bb      	ldr	r3, [r7, #8]
 801978c:	2b00      	cmp	r3, #0
 801978e:	d101      	bne.n	8019794 <xQueueGenericCreateStatic+0x7c>
 8019790:	2301      	movs	r3, #1
 8019792:	e000      	b.n	8019796 <xQueueGenericCreateStatic+0x7e>
 8019794:	2300      	movs	r3, #0
 8019796:	2b00      	cmp	r3, #0
 8019798:	d109      	bne.n	80197ae <xQueueGenericCreateStatic+0x96>
 801979a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801979e:	f383 8811 	msr	BASEPRI, r3
 80197a2:	f3bf 8f6f 	isb	sy
 80197a6:	f3bf 8f4f 	dsb	sy
 80197aa:	61fb      	str	r3, [r7, #28]
 80197ac:	e7fe      	b.n	80197ac <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80197ae:	2350      	movs	r3, #80	; 0x50
 80197b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80197b2:	697b      	ldr	r3, [r7, #20]
 80197b4:	2b50      	cmp	r3, #80	; 0x50
 80197b6:	d009      	beq.n	80197cc <xQueueGenericCreateStatic+0xb4>
 80197b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197bc:	f383 8811 	msr	BASEPRI, r3
 80197c0:	f3bf 8f6f 	isb	sy
 80197c4:	f3bf 8f4f 	dsb	sy
 80197c8:	61bb      	str	r3, [r7, #24]
 80197ca:	e7fe      	b.n	80197ca <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80197cc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80197ce:	683b      	ldr	r3, [r7, #0]
 80197d0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80197d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	d00d      	beq.n	80197f4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80197d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197da:	2201      	movs	r2, #1
 80197dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80197e0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80197e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197e6:	9300      	str	r3, [sp, #0]
 80197e8:	4613      	mov	r3, r2
 80197ea:	687a      	ldr	r2, [r7, #4]
 80197ec:	68b9      	ldr	r1, [r7, #8]
 80197ee:	68f8      	ldr	r0, [r7, #12]
 80197f0:	f000 f844 	bl	801987c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80197f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80197f6:	4618      	mov	r0, r3
 80197f8:	3730      	adds	r7, #48	; 0x30
 80197fa:	46bd      	mov	sp, r7
 80197fc:	bd80      	pop	{r7, pc}

080197fe <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80197fe:	b580      	push	{r7, lr}
 8019800:	b08a      	sub	sp, #40	; 0x28
 8019802:	af02      	add	r7, sp, #8
 8019804:	60f8      	str	r0, [r7, #12]
 8019806:	60b9      	str	r1, [r7, #8]
 8019808:	4613      	mov	r3, r2
 801980a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801980c:	68fb      	ldr	r3, [r7, #12]
 801980e:	2b00      	cmp	r3, #0
 8019810:	d109      	bne.n	8019826 <xQueueGenericCreate+0x28>
 8019812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019816:	f383 8811 	msr	BASEPRI, r3
 801981a:	f3bf 8f6f 	isb	sy
 801981e:	f3bf 8f4f 	dsb	sy
 8019822:	613b      	str	r3, [r7, #16]
 8019824:	e7fe      	b.n	8019824 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8019826:	68bb      	ldr	r3, [r7, #8]
 8019828:	2b00      	cmp	r3, #0
 801982a:	d102      	bne.n	8019832 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801982c:	2300      	movs	r3, #0
 801982e:	61fb      	str	r3, [r7, #28]
 8019830:	e004      	b.n	801983c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019832:	68fb      	ldr	r3, [r7, #12]
 8019834:	68ba      	ldr	r2, [r7, #8]
 8019836:	fb02 f303 	mul.w	r3, r2, r3
 801983a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801983c:	69fb      	ldr	r3, [r7, #28]
 801983e:	3350      	adds	r3, #80	; 0x50
 8019840:	4618      	mov	r0, r3
 8019842:	f002 fc55 	bl	801c0f0 <pvPortMalloc>
 8019846:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8019848:	69bb      	ldr	r3, [r7, #24]
 801984a:	2b00      	cmp	r3, #0
 801984c:	d011      	beq.n	8019872 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801984e:	69bb      	ldr	r3, [r7, #24]
 8019850:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019852:	697b      	ldr	r3, [r7, #20]
 8019854:	3350      	adds	r3, #80	; 0x50
 8019856:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8019858:	69bb      	ldr	r3, [r7, #24]
 801985a:	2200      	movs	r2, #0
 801985c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8019860:	79fa      	ldrb	r2, [r7, #7]
 8019862:	69bb      	ldr	r3, [r7, #24]
 8019864:	9300      	str	r3, [sp, #0]
 8019866:	4613      	mov	r3, r2
 8019868:	697a      	ldr	r2, [r7, #20]
 801986a:	68b9      	ldr	r1, [r7, #8]
 801986c:	68f8      	ldr	r0, [r7, #12]
 801986e:	f000 f805 	bl	801987c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8019872:	69bb      	ldr	r3, [r7, #24]
	}
 8019874:	4618      	mov	r0, r3
 8019876:	3720      	adds	r7, #32
 8019878:	46bd      	mov	sp, r7
 801987a:	bd80      	pop	{r7, pc}

0801987c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801987c:	b580      	push	{r7, lr}
 801987e:	b084      	sub	sp, #16
 8019880:	af00      	add	r7, sp, #0
 8019882:	60f8      	str	r0, [r7, #12]
 8019884:	60b9      	str	r1, [r7, #8]
 8019886:	607a      	str	r2, [r7, #4]
 8019888:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801988a:	68bb      	ldr	r3, [r7, #8]
 801988c:	2b00      	cmp	r3, #0
 801988e:	d103      	bne.n	8019898 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8019890:	69bb      	ldr	r3, [r7, #24]
 8019892:	69ba      	ldr	r2, [r7, #24]
 8019894:	601a      	str	r2, [r3, #0]
 8019896:	e002      	b.n	801989e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8019898:	69bb      	ldr	r3, [r7, #24]
 801989a:	687a      	ldr	r2, [r7, #4]
 801989c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801989e:	69bb      	ldr	r3, [r7, #24]
 80198a0:	68fa      	ldr	r2, [r7, #12]
 80198a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80198a4:	69bb      	ldr	r3, [r7, #24]
 80198a6:	68ba      	ldr	r2, [r7, #8]
 80198a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80198aa:	2101      	movs	r1, #1
 80198ac:	69b8      	ldr	r0, [r7, #24]
 80198ae:	f7ff fecb 	bl	8019648 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80198b2:	69bb      	ldr	r3, [r7, #24]
 80198b4:	78fa      	ldrb	r2, [r7, #3]
 80198b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80198ba:	bf00      	nop
 80198bc:	3710      	adds	r7, #16
 80198be:	46bd      	mov	sp, r7
 80198c0:	bd80      	pop	{r7, pc}

080198c2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80198c2:	b580      	push	{r7, lr}
 80198c4:	b08a      	sub	sp, #40	; 0x28
 80198c6:	af02      	add	r7, sp, #8
 80198c8:	60f8      	str	r0, [r7, #12]
 80198ca:	60b9      	str	r1, [r7, #8]
 80198cc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80198ce:	68fb      	ldr	r3, [r7, #12]
 80198d0:	2b00      	cmp	r3, #0
 80198d2:	d109      	bne.n	80198e8 <xQueueCreateCountingSemaphoreStatic+0x26>
 80198d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198d8:	f383 8811 	msr	BASEPRI, r3
 80198dc:	f3bf 8f6f 	isb	sy
 80198e0:	f3bf 8f4f 	dsb	sy
 80198e4:	61bb      	str	r3, [r7, #24]
 80198e6:	e7fe      	b.n	80198e6 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80198e8:	68ba      	ldr	r2, [r7, #8]
 80198ea:	68fb      	ldr	r3, [r7, #12]
 80198ec:	429a      	cmp	r2, r3
 80198ee:	d909      	bls.n	8019904 <xQueueCreateCountingSemaphoreStatic+0x42>
 80198f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198f4:	f383 8811 	msr	BASEPRI, r3
 80198f8:	f3bf 8f6f 	isb	sy
 80198fc:	f3bf 8f4f 	dsb	sy
 8019900:	617b      	str	r3, [r7, #20]
 8019902:	e7fe      	b.n	8019902 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8019904:	2302      	movs	r3, #2
 8019906:	9300      	str	r3, [sp, #0]
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	2200      	movs	r2, #0
 801990c:	2100      	movs	r1, #0
 801990e:	68f8      	ldr	r0, [r7, #12]
 8019910:	f7ff ff02 	bl	8019718 <xQueueGenericCreateStatic>
 8019914:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8019916:	69fb      	ldr	r3, [r7, #28]
 8019918:	2b00      	cmp	r3, #0
 801991a:	d002      	beq.n	8019922 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801991c:	69fb      	ldr	r3, [r7, #28]
 801991e:	68ba      	ldr	r2, [r7, #8]
 8019920:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8019922:	69fb      	ldr	r3, [r7, #28]
	}
 8019924:	4618      	mov	r0, r3
 8019926:	3720      	adds	r7, #32
 8019928:	46bd      	mov	sp, r7
 801992a:	bd80      	pop	{r7, pc}

0801992c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 801992c:	b580      	push	{r7, lr}
 801992e:	b086      	sub	sp, #24
 8019930:	af00      	add	r7, sp, #0
 8019932:	6078      	str	r0, [r7, #4]
 8019934:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	2b00      	cmp	r3, #0
 801993a:	d109      	bne.n	8019950 <xQueueCreateCountingSemaphore+0x24>
 801993c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019940:	f383 8811 	msr	BASEPRI, r3
 8019944:	f3bf 8f6f 	isb	sy
 8019948:	f3bf 8f4f 	dsb	sy
 801994c:	613b      	str	r3, [r7, #16]
 801994e:	e7fe      	b.n	801994e <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8019950:	683a      	ldr	r2, [r7, #0]
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	429a      	cmp	r2, r3
 8019956:	d909      	bls.n	801996c <xQueueCreateCountingSemaphore+0x40>
 8019958:	f04f 0350 	mov.w	r3, #80	; 0x50
 801995c:	f383 8811 	msr	BASEPRI, r3
 8019960:	f3bf 8f6f 	isb	sy
 8019964:	f3bf 8f4f 	dsb	sy
 8019968:	60fb      	str	r3, [r7, #12]
 801996a:	e7fe      	b.n	801996a <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801996c:	2202      	movs	r2, #2
 801996e:	2100      	movs	r1, #0
 8019970:	6878      	ldr	r0, [r7, #4]
 8019972:	f7ff ff44 	bl	80197fe <xQueueGenericCreate>
 8019976:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8019978:	697b      	ldr	r3, [r7, #20]
 801997a:	2b00      	cmp	r3, #0
 801997c:	d002      	beq.n	8019984 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801997e:	697b      	ldr	r3, [r7, #20]
 8019980:	683a      	ldr	r2, [r7, #0]
 8019982:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8019984:	697b      	ldr	r3, [r7, #20]
	}
 8019986:	4618      	mov	r0, r3
 8019988:	3718      	adds	r7, #24
 801998a:	46bd      	mov	sp, r7
 801998c:	bd80      	pop	{r7, pc}
	...

08019990 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8019990:	b580      	push	{r7, lr}
 8019992:	b08e      	sub	sp, #56	; 0x38
 8019994:	af00      	add	r7, sp, #0
 8019996:	60f8      	str	r0, [r7, #12]
 8019998:	60b9      	str	r1, [r7, #8]
 801999a:	607a      	str	r2, [r7, #4]
 801999c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801999e:	2300      	movs	r3, #0
 80199a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80199a2:	68fb      	ldr	r3, [r7, #12]
 80199a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80199a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199a8:	2b00      	cmp	r3, #0
 80199aa:	d109      	bne.n	80199c0 <xQueueGenericSend+0x30>
 80199ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199b0:	f383 8811 	msr	BASEPRI, r3
 80199b4:	f3bf 8f6f 	isb	sy
 80199b8:	f3bf 8f4f 	dsb	sy
 80199bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80199be:	e7fe      	b.n	80199be <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80199c0:	68bb      	ldr	r3, [r7, #8]
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	d103      	bne.n	80199ce <xQueueGenericSend+0x3e>
 80199c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	d101      	bne.n	80199d2 <xQueueGenericSend+0x42>
 80199ce:	2301      	movs	r3, #1
 80199d0:	e000      	b.n	80199d4 <xQueueGenericSend+0x44>
 80199d2:	2300      	movs	r3, #0
 80199d4:	2b00      	cmp	r3, #0
 80199d6:	d109      	bne.n	80199ec <xQueueGenericSend+0x5c>
 80199d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199dc:	f383 8811 	msr	BASEPRI, r3
 80199e0:	f3bf 8f6f 	isb	sy
 80199e4:	f3bf 8f4f 	dsb	sy
 80199e8:	627b      	str	r3, [r7, #36]	; 0x24
 80199ea:	e7fe      	b.n	80199ea <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80199ec:	683b      	ldr	r3, [r7, #0]
 80199ee:	2b02      	cmp	r3, #2
 80199f0:	d103      	bne.n	80199fa <xQueueGenericSend+0x6a>
 80199f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80199f6:	2b01      	cmp	r3, #1
 80199f8:	d101      	bne.n	80199fe <xQueueGenericSend+0x6e>
 80199fa:	2301      	movs	r3, #1
 80199fc:	e000      	b.n	8019a00 <xQueueGenericSend+0x70>
 80199fe:	2300      	movs	r3, #0
 8019a00:	2b00      	cmp	r3, #0
 8019a02:	d109      	bne.n	8019a18 <xQueueGenericSend+0x88>
 8019a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a08:	f383 8811 	msr	BASEPRI, r3
 8019a0c:	f3bf 8f6f 	isb	sy
 8019a10:	f3bf 8f4f 	dsb	sy
 8019a14:	623b      	str	r3, [r7, #32]
 8019a16:	e7fe      	b.n	8019a16 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019a18:	f001 fc0c 	bl	801b234 <xTaskGetSchedulerState>
 8019a1c:	4603      	mov	r3, r0
 8019a1e:	2b00      	cmp	r3, #0
 8019a20:	d102      	bne.n	8019a28 <xQueueGenericSend+0x98>
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	2b00      	cmp	r3, #0
 8019a26:	d101      	bne.n	8019a2c <xQueueGenericSend+0x9c>
 8019a28:	2301      	movs	r3, #1
 8019a2a:	e000      	b.n	8019a2e <xQueueGenericSend+0x9e>
 8019a2c:	2300      	movs	r3, #0
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d109      	bne.n	8019a46 <xQueueGenericSend+0xb6>
 8019a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a36:	f383 8811 	msr	BASEPRI, r3
 8019a3a:	f3bf 8f6f 	isb	sy
 8019a3e:	f3bf 8f4f 	dsb	sy
 8019a42:	61fb      	str	r3, [r7, #28]
 8019a44:	e7fe      	b.n	8019a44 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019a46:	f002 fa39 	bl	801bebc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8019a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019a52:	429a      	cmp	r2, r3
 8019a54:	d302      	bcc.n	8019a5c <xQueueGenericSend+0xcc>
 8019a56:	683b      	ldr	r3, [r7, #0]
 8019a58:	2b02      	cmp	r3, #2
 8019a5a:	d129      	bne.n	8019ab0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8019a5c:	683a      	ldr	r2, [r7, #0]
 8019a5e:	68b9      	ldr	r1, [r7, #8]
 8019a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019a62:	f000 fc48 	bl	801a2f6 <prvCopyDataToQueue>
 8019a66:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	d010      	beq.n	8019a92 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a72:	3324      	adds	r3, #36	; 0x24
 8019a74:	4618      	mov	r0, r3
 8019a76:	f001 fa27 	bl	801aec8 <xTaskRemoveFromEventList>
 8019a7a:	4603      	mov	r3, r0
 8019a7c:	2b00      	cmp	r3, #0
 8019a7e:	d013      	beq.n	8019aa8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8019a80:	4b3f      	ldr	r3, [pc, #252]	; (8019b80 <xQueueGenericSend+0x1f0>)
 8019a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019a86:	601a      	str	r2, [r3, #0]
 8019a88:	f3bf 8f4f 	dsb	sy
 8019a8c:	f3bf 8f6f 	isb	sy
 8019a90:	e00a      	b.n	8019aa8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8019a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a94:	2b00      	cmp	r3, #0
 8019a96:	d007      	beq.n	8019aa8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8019a98:	4b39      	ldr	r3, [pc, #228]	; (8019b80 <xQueueGenericSend+0x1f0>)
 8019a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019a9e:	601a      	str	r2, [r3, #0]
 8019aa0:	f3bf 8f4f 	dsb	sy
 8019aa4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8019aa8:	f002 fa36 	bl	801bf18 <vPortExitCritical>
				return pdPASS;
 8019aac:	2301      	movs	r3, #1
 8019aae:	e063      	b.n	8019b78 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	2b00      	cmp	r3, #0
 8019ab4:	d103      	bne.n	8019abe <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8019ab6:	f002 fa2f 	bl	801bf18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8019aba:	2300      	movs	r3, #0
 8019abc:	e05c      	b.n	8019b78 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8019abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019ac0:	2b00      	cmp	r3, #0
 8019ac2:	d106      	bne.n	8019ad2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019ac4:	f107 0314 	add.w	r3, r7, #20
 8019ac8:	4618      	mov	r0, r3
 8019aca:	f001 fa5f 	bl	801af8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019ace:	2301      	movs	r3, #1
 8019ad0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8019ad2:	f002 fa21 	bl	801bf18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8019ad6:	f000 ffdb 	bl	801aa90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019ada:	f002 f9ef 	bl	801bebc <vPortEnterCritical>
 8019ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ae0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019ae4:	b25b      	sxtb	r3, r3
 8019ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019aea:	d103      	bne.n	8019af4 <xQueueGenericSend+0x164>
 8019aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019aee:	2200      	movs	r2, #0
 8019af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019af6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019afa:	b25b      	sxtb	r3, r3
 8019afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019b00:	d103      	bne.n	8019b0a <xQueueGenericSend+0x17a>
 8019b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b04:	2200      	movs	r2, #0
 8019b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019b0a:	f002 fa05 	bl	801bf18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019b0e:	1d3a      	adds	r2, r7, #4
 8019b10:	f107 0314 	add.w	r3, r7, #20
 8019b14:	4611      	mov	r1, r2
 8019b16:	4618      	mov	r0, r3
 8019b18:	f001 fa4e 	bl	801afb8 <xTaskCheckForTimeOut>
 8019b1c:	4603      	mov	r3, r0
 8019b1e:	2b00      	cmp	r3, #0
 8019b20:	d124      	bne.n	8019b6c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8019b22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019b24:	f000 fcdf 	bl	801a4e6 <prvIsQueueFull>
 8019b28:	4603      	mov	r3, r0
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	d018      	beq.n	8019b60 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8019b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b30:	3310      	adds	r3, #16
 8019b32:	687a      	ldr	r2, [r7, #4]
 8019b34:	4611      	mov	r1, r2
 8019b36:	4618      	mov	r0, r3
 8019b38:	f001 f978 	bl	801ae2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8019b3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019b3e:	f000 fc6a 	bl	801a416 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8019b42:	f000 ffb3 	bl	801aaac <xTaskResumeAll>
 8019b46:	4603      	mov	r3, r0
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	f47f af7c 	bne.w	8019a46 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8019b4e:	4b0c      	ldr	r3, [pc, #48]	; (8019b80 <xQueueGenericSend+0x1f0>)
 8019b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019b54:	601a      	str	r2, [r3, #0]
 8019b56:	f3bf 8f4f 	dsb	sy
 8019b5a:	f3bf 8f6f 	isb	sy
 8019b5e:	e772      	b.n	8019a46 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8019b60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019b62:	f000 fc58 	bl	801a416 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019b66:	f000 ffa1 	bl	801aaac <xTaskResumeAll>
 8019b6a:	e76c      	b.n	8019a46 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8019b6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019b6e:	f000 fc52 	bl	801a416 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019b72:	f000 ff9b 	bl	801aaac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8019b76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8019b78:	4618      	mov	r0, r3
 8019b7a:	3738      	adds	r7, #56	; 0x38
 8019b7c:	46bd      	mov	sp, r7
 8019b7e:	bd80      	pop	{r7, pc}
 8019b80:	e000ed04 	.word	0xe000ed04

08019b84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8019b84:	b580      	push	{r7, lr}
 8019b86:	b08e      	sub	sp, #56	; 0x38
 8019b88:	af00      	add	r7, sp, #0
 8019b8a:	60f8      	str	r0, [r7, #12]
 8019b8c:	60b9      	str	r1, [r7, #8]
 8019b8e:	607a      	str	r2, [r7, #4]
 8019b90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8019b92:	68fb      	ldr	r3, [r7, #12]
 8019b94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8019b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	d109      	bne.n	8019bb0 <xQueueGenericSendFromISR+0x2c>
 8019b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ba0:	f383 8811 	msr	BASEPRI, r3
 8019ba4:	f3bf 8f6f 	isb	sy
 8019ba8:	f3bf 8f4f 	dsb	sy
 8019bac:	627b      	str	r3, [r7, #36]	; 0x24
 8019bae:	e7fe      	b.n	8019bae <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019bb0:	68bb      	ldr	r3, [r7, #8]
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d103      	bne.n	8019bbe <xQueueGenericSendFromISR+0x3a>
 8019bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019bba:	2b00      	cmp	r3, #0
 8019bbc:	d101      	bne.n	8019bc2 <xQueueGenericSendFromISR+0x3e>
 8019bbe:	2301      	movs	r3, #1
 8019bc0:	e000      	b.n	8019bc4 <xQueueGenericSendFromISR+0x40>
 8019bc2:	2300      	movs	r3, #0
 8019bc4:	2b00      	cmp	r3, #0
 8019bc6:	d109      	bne.n	8019bdc <xQueueGenericSendFromISR+0x58>
 8019bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019bcc:	f383 8811 	msr	BASEPRI, r3
 8019bd0:	f3bf 8f6f 	isb	sy
 8019bd4:	f3bf 8f4f 	dsb	sy
 8019bd8:	623b      	str	r3, [r7, #32]
 8019bda:	e7fe      	b.n	8019bda <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8019bdc:	683b      	ldr	r3, [r7, #0]
 8019bde:	2b02      	cmp	r3, #2
 8019be0:	d103      	bne.n	8019bea <xQueueGenericSendFromISR+0x66>
 8019be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019be6:	2b01      	cmp	r3, #1
 8019be8:	d101      	bne.n	8019bee <xQueueGenericSendFromISR+0x6a>
 8019bea:	2301      	movs	r3, #1
 8019bec:	e000      	b.n	8019bf0 <xQueueGenericSendFromISR+0x6c>
 8019bee:	2300      	movs	r3, #0
 8019bf0:	2b00      	cmp	r3, #0
 8019bf2:	d109      	bne.n	8019c08 <xQueueGenericSendFromISR+0x84>
 8019bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019bf8:	f383 8811 	msr	BASEPRI, r3
 8019bfc:	f3bf 8f6f 	isb	sy
 8019c00:	f3bf 8f4f 	dsb	sy
 8019c04:	61fb      	str	r3, [r7, #28]
 8019c06:	e7fe      	b.n	8019c06 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019c08:	f002 fa34 	bl	801c074 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8019c0c:	f3ef 8211 	mrs	r2, BASEPRI
 8019c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c14:	f383 8811 	msr	BASEPRI, r3
 8019c18:	f3bf 8f6f 	isb	sy
 8019c1c:	f3bf 8f4f 	dsb	sy
 8019c20:	61ba      	str	r2, [r7, #24]
 8019c22:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8019c24:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019c26:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8019c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019c30:	429a      	cmp	r2, r3
 8019c32:	d302      	bcc.n	8019c3a <xQueueGenericSendFromISR+0xb6>
 8019c34:	683b      	ldr	r3, [r7, #0]
 8019c36:	2b02      	cmp	r3, #2
 8019c38:	d12c      	bne.n	8019c94 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8019c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019c40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8019c44:	683a      	ldr	r2, [r7, #0]
 8019c46:	68b9      	ldr	r1, [r7, #8]
 8019c48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019c4a:	f000 fb54 	bl	801a2f6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8019c4e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8019c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c56:	d112      	bne.n	8019c7e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c5c:	2b00      	cmp	r3, #0
 8019c5e:	d016      	beq.n	8019c8e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c62:	3324      	adds	r3, #36	; 0x24
 8019c64:	4618      	mov	r0, r3
 8019c66:	f001 f92f 	bl	801aec8 <xTaskRemoveFromEventList>
 8019c6a:	4603      	mov	r3, r0
 8019c6c:	2b00      	cmp	r3, #0
 8019c6e:	d00e      	beq.n	8019c8e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	d00b      	beq.n	8019c8e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	2201      	movs	r2, #1
 8019c7a:	601a      	str	r2, [r3, #0]
 8019c7c:	e007      	b.n	8019c8e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8019c7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8019c82:	3301      	adds	r3, #1
 8019c84:	b2db      	uxtb	r3, r3
 8019c86:	b25a      	sxtb	r2, r3
 8019c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8019c8e:	2301      	movs	r3, #1
 8019c90:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8019c92:	e001      	b.n	8019c98 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8019c94:	2300      	movs	r3, #0
 8019c96:	637b      	str	r3, [r7, #52]	; 0x34
 8019c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c9a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8019c9c:	693b      	ldr	r3, [r7, #16]
 8019c9e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8019ca4:	4618      	mov	r0, r3
 8019ca6:	3738      	adds	r7, #56	; 0x38
 8019ca8:	46bd      	mov	sp, r7
 8019caa:	bd80      	pop	{r7, pc}

08019cac <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8019cac:	b580      	push	{r7, lr}
 8019cae:	b08e      	sub	sp, #56	; 0x38
 8019cb0:	af00      	add	r7, sp, #0
 8019cb2:	6078      	str	r0, [r7, #4]
 8019cb4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8019cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019cbc:	2b00      	cmp	r3, #0
 8019cbe:	d109      	bne.n	8019cd4 <xQueueGiveFromISR+0x28>
	__asm volatile
 8019cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019cc4:	f383 8811 	msr	BASEPRI, r3
 8019cc8:	f3bf 8f6f 	isb	sy
 8019ccc:	f3bf 8f4f 	dsb	sy
 8019cd0:	623b      	str	r3, [r7, #32]
 8019cd2:	e7fe      	b.n	8019cd2 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8019cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	d009      	beq.n	8019cf0 <xQueueGiveFromISR+0x44>
 8019cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ce0:	f383 8811 	msr	BASEPRI, r3
 8019ce4:	f3bf 8f6f 	isb	sy
 8019ce8:	f3bf 8f4f 	dsb	sy
 8019cec:	61fb      	str	r3, [r7, #28]
 8019cee:	e7fe      	b.n	8019cee <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8019cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019cf2:	681b      	ldr	r3, [r3, #0]
 8019cf4:	2b00      	cmp	r3, #0
 8019cf6:	d103      	bne.n	8019d00 <xQueueGiveFromISR+0x54>
 8019cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019cfa:	689b      	ldr	r3, [r3, #8]
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	d101      	bne.n	8019d04 <xQueueGiveFromISR+0x58>
 8019d00:	2301      	movs	r3, #1
 8019d02:	e000      	b.n	8019d06 <xQueueGiveFromISR+0x5a>
 8019d04:	2300      	movs	r3, #0
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d109      	bne.n	8019d1e <xQueueGiveFromISR+0x72>
 8019d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d0e:	f383 8811 	msr	BASEPRI, r3
 8019d12:	f3bf 8f6f 	isb	sy
 8019d16:	f3bf 8f4f 	dsb	sy
 8019d1a:	61bb      	str	r3, [r7, #24]
 8019d1c:	e7fe      	b.n	8019d1c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019d1e:	f002 f9a9 	bl	801c074 <vPortValidateInterruptPriority>
	__asm volatile
 8019d22:	f3ef 8211 	mrs	r2, BASEPRI
 8019d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d2a:	f383 8811 	msr	BASEPRI, r3
 8019d2e:	f3bf 8f6f 	isb	sy
 8019d32:	f3bf 8f4f 	dsb	sy
 8019d36:	617a      	str	r2, [r7, #20]
 8019d38:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8019d3a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d42:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8019d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019d48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019d4a:	429a      	cmp	r2, r3
 8019d4c:	d22b      	bcs.n	8019da6 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8019d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019d54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8019d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d5a:	1c5a      	adds	r2, r3, #1
 8019d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d5e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8019d60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019d68:	d112      	bne.n	8019d90 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d6e:	2b00      	cmp	r3, #0
 8019d70:	d016      	beq.n	8019da0 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d74:	3324      	adds	r3, #36	; 0x24
 8019d76:	4618      	mov	r0, r3
 8019d78:	f001 f8a6 	bl	801aec8 <xTaskRemoveFromEventList>
 8019d7c:	4603      	mov	r3, r0
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	d00e      	beq.n	8019da0 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8019d82:	683b      	ldr	r3, [r7, #0]
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	d00b      	beq.n	8019da0 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8019d88:	683b      	ldr	r3, [r7, #0]
 8019d8a:	2201      	movs	r2, #1
 8019d8c:	601a      	str	r2, [r3, #0]
 8019d8e:	e007      	b.n	8019da0 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8019d90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d94:	3301      	adds	r3, #1
 8019d96:	b2db      	uxtb	r3, r3
 8019d98:	b25a      	sxtb	r2, r3
 8019d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8019da0:	2301      	movs	r3, #1
 8019da2:	637b      	str	r3, [r7, #52]	; 0x34
 8019da4:	e001      	b.n	8019daa <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8019da6:	2300      	movs	r3, #0
 8019da8:	637b      	str	r3, [r7, #52]	; 0x34
 8019daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dac:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8019dae:	68fb      	ldr	r3, [r7, #12]
 8019db0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8019db6:	4618      	mov	r0, r3
 8019db8:	3738      	adds	r7, #56	; 0x38
 8019dba:	46bd      	mov	sp, r7
 8019dbc:	bd80      	pop	{r7, pc}
	...

08019dc0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8019dc0:	b580      	push	{r7, lr}
 8019dc2:	b08c      	sub	sp, #48	; 0x30
 8019dc4:	af00      	add	r7, sp, #0
 8019dc6:	60f8      	str	r0, [r7, #12]
 8019dc8:	60b9      	str	r1, [r7, #8]
 8019dca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8019dcc:	2300      	movs	r3, #0
 8019dce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019dd0:	68fb      	ldr	r3, [r7, #12]
 8019dd2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8019dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	d109      	bne.n	8019dee <xQueueReceive+0x2e>
	__asm volatile
 8019dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019dde:	f383 8811 	msr	BASEPRI, r3
 8019de2:	f3bf 8f6f 	isb	sy
 8019de6:	f3bf 8f4f 	dsb	sy
 8019dea:	623b      	str	r3, [r7, #32]
 8019dec:	e7fe      	b.n	8019dec <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019dee:	68bb      	ldr	r3, [r7, #8]
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	d103      	bne.n	8019dfc <xQueueReceive+0x3c>
 8019df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	d101      	bne.n	8019e00 <xQueueReceive+0x40>
 8019dfc:	2301      	movs	r3, #1
 8019dfe:	e000      	b.n	8019e02 <xQueueReceive+0x42>
 8019e00:	2300      	movs	r3, #0
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	d109      	bne.n	8019e1a <xQueueReceive+0x5a>
 8019e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e0a:	f383 8811 	msr	BASEPRI, r3
 8019e0e:	f3bf 8f6f 	isb	sy
 8019e12:	f3bf 8f4f 	dsb	sy
 8019e16:	61fb      	str	r3, [r7, #28]
 8019e18:	e7fe      	b.n	8019e18 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019e1a:	f001 fa0b 	bl	801b234 <xTaskGetSchedulerState>
 8019e1e:	4603      	mov	r3, r0
 8019e20:	2b00      	cmp	r3, #0
 8019e22:	d102      	bne.n	8019e2a <xQueueReceive+0x6a>
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	2b00      	cmp	r3, #0
 8019e28:	d101      	bne.n	8019e2e <xQueueReceive+0x6e>
 8019e2a:	2301      	movs	r3, #1
 8019e2c:	e000      	b.n	8019e30 <xQueueReceive+0x70>
 8019e2e:	2300      	movs	r3, #0
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	d109      	bne.n	8019e48 <xQueueReceive+0x88>
 8019e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e38:	f383 8811 	msr	BASEPRI, r3
 8019e3c:	f3bf 8f6f 	isb	sy
 8019e40:	f3bf 8f4f 	dsb	sy
 8019e44:	61bb      	str	r3, [r7, #24]
 8019e46:	e7fe      	b.n	8019e46 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019e48:	f002 f838 	bl	801bebc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e50:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d01f      	beq.n	8019e98 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8019e58:	68b9      	ldr	r1, [r7, #8]
 8019e5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019e5c:	f000 fab5 	bl	801a3ca <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8019e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e62:	1e5a      	subs	r2, r3, #1
 8019e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e66:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e6a:	691b      	ldr	r3, [r3, #16]
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	d00f      	beq.n	8019e90 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e72:	3310      	adds	r3, #16
 8019e74:	4618      	mov	r0, r3
 8019e76:	f001 f827 	bl	801aec8 <xTaskRemoveFromEventList>
 8019e7a:	4603      	mov	r3, r0
 8019e7c:	2b00      	cmp	r3, #0
 8019e7e:	d007      	beq.n	8019e90 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8019e80:	4b3c      	ldr	r3, [pc, #240]	; (8019f74 <xQueueReceive+0x1b4>)
 8019e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019e86:	601a      	str	r2, [r3, #0]
 8019e88:	f3bf 8f4f 	dsb	sy
 8019e8c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8019e90:	f002 f842 	bl	801bf18 <vPortExitCritical>
				return pdPASS;
 8019e94:	2301      	movs	r3, #1
 8019e96:	e069      	b.n	8019f6c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8019e98:	687b      	ldr	r3, [r7, #4]
 8019e9a:	2b00      	cmp	r3, #0
 8019e9c:	d103      	bne.n	8019ea6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8019e9e:	f002 f83b 	bl	801bf18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8019ea2:	2300      	movs	r3, #0
 8019ea4:	e062      	b.n	8019f6c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8019ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	d106      	bne.n	8019eba <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019eac:	f107 0310 	add.w	r3, r7, #16
 8019eb0:	4618      	mov	r0, r3
 8019eb2:	f001 f86b 	bl	801af8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019eb6:	2301      	movs	r3, #1
 8019eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8019eba:	f002 f82d 	bl	801bf18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8019ebe:	f000 fde7 	bl	801aa90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019ec2:	f001 fffb 	bl	801bebc <vPortEnterCritical>
 8019ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ec8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019ecc:	b25b      	sxtb	r3, r3
 8019ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ed2:	d103      	bne.n	8019edc <xQueueReceive+0x11c>
 8019ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ed6:	2200      	movs	r2, #0
 8019ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ede:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019ee2:	b25b      	sxtb	r3, r3
 8019ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ee8:	d103      	bne.n	8019ef2 <xQueueReceive+0x132>
 8019eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019eec:	2200      	movs	r2, #0
 8019eee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019ef2:	f002 f811 	bl	801bf18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019ef6:	1d3a      	adds	r2, r7, #4
 8019ef8:	f107 0310 	add.w	r3, r7, #16
 8019efc:	4611      	mov	r1, r2
 8019efe:	4618      	mov	r0, r3
 8019f00:	f001 f85a 	bl	801afb8 <xTaskCheckForTimeOut>
 8019f04:	4603      	mov	r3, r0
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	d123      	bne.n	8019f52 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019f0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019f0c:	f000 fad5 	bl	801a4ba <prvIsQueueEmpty>
 8019f10:	4603      	mov	r3, r0
 8019f12:	2b00      	cmp	r3, #0
 8019f14:	d017      	beq.n	8019f46 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8019f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f18:	3324      	adds	r3, #36	; 0x24
 8019f1a:	687a      	ldr	r2, [r7, #4]
 8019f1c:	4611      	mov	r1, r2
 8019f1e:	4618      	mov	r0, r3
 8019f20:	f000 ff84 	bl	801ae2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8019f24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019f26:	f000 fa76 	bl	801a416 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8019f2a:	f000 fdbf 	bl	801aaac <xTaskResumeAll>
 8019f2e:	4603      	mov	r3, r0
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	d189      	bne.n	8019e48 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8019f34:	4b0f      	ldr	r3, [pc, #60]	; (8019f74 <xQueueReceive+0x1b4>)
 8019f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019f3a:	601a      	str	r2, [r3, #0]
 8019f3c:	f3bf 8f4f 	dsb	sy
 8019f40:	f3bf 8f6f 	isb	sy
 8019f44:	e780      	b.n	8019e48 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8019f46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019f48:	f000 fa65 	bl	801a416 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019f4c:	f000 fdae 	bl	801aaac <xTaskResumeAll>
 8019f50:	e77a      	b.n	8019e48 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8019f52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019f54:	f000 fa5f 	bl	801a416 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019f58:	f000 fda8 	bl	801aaac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019f5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019f5e:	f000 faac 	bl	801a4ba <prvIsQueueEmpty>
 8019f62:	4603      	mov	r3, r0
 8019f64:	2b00      	cmp	r3, #0
 8019f66:	f43f af6f 	beq.w	8019e48 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8019f6a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8019f6c:	4618      	mov	r0, r3
 8019f6e:	3730      	adds	r7, #48	; 0x30
 8019f70:	46bd      	mov	sp, r7
 8019f72:	bd80      	pop	{r7, pc}
 8019f74:	e000ed04 	.word	0xe000ed04

08019f78 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8019f78:	b580      	push	{r7, lr}
 8019f7a:	b08e      	sub	sp, #56	; 0x38
 8019f7c:	af00      	add	r7, sp, #0
 8019f7e:	6078      	str	r0, [r7, #4]
 8019f80:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8019f82:	2300      	movs	r3, #0
 8019f84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8019f8a:	2300      	movs	r3, #0
 8019f8c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8019f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	d109      	bne.n	8019fa8 <xQueueSemaphoreTake+0x30>
 8019f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f98:	f383 8811 	msr	BASEPRI, r3
 8019f9c:	f3bf 8f6f 	isb	sy
 8019fa0:	f3bf 8f4f 	dsb	sy
 8019fa4:	623b      	str	r3, [r7, #32]
 8019fa6:	e7fe      	b.n	8019fa6 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8019fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019fac:	2b00      	cmp	r3, #0
 8019fae:	d009      	beq.n	8019fc4 <xQueueSemaphoreTake+0x4c>
 8019fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019fb4:	f383 8811 	msr	BASEPRI, r3
 8019fb8:	f3bf 8f6f 	isb	sy
 8019fbc:	f3bf 8f4f 	dsb	sy
 8019fc0:	61fb      	str	r3, [r7, #28]
 8019fc2:	e7fe      	b.n	8019fc2 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019fc4:	f001 f936 	bl	801b234 <xTaskGetSchedulerState>
 8019fc8:	4603      	mov	r3, r0
 8019fca:	2b00      	cmp	r3, #0
 8019fcc:	d102      	bne.n	8019fd4 <xQueueSemaphoreTake+0x5c>
 8019fce:	683b      	ldr	r3, [r7, #0]
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	d101      	bne.n	8019fd8 <xQueueSemaphoreTake+0x60>
 8019fd4:	2301      	movs	r3, #1
 8019fd6:	e000      	b.n	8019fda <xQueueSemaphoreTake+0x62>
 8019fd8:	2300      	movs	r3, #0
 8019fda:	2b00      	cmp	r3, #0
 8019fdc:	d109      	bne.n	8019ff2 <xQueueSemaphoreTake+0x7a>
 8019fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019fe2:	f383 8811 	msr	BASEPRI, r3
 8019fe6:	f3bf 8f6f 	isb	sy
 8019fea:	f3bf 8f4f 	dsb	sy
 8019fee:	61bb      	str	r3, [r7, #24]
 8019ff0:	e7fe      	b.n	8019ff0 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019ff2:	f001 ff63 	bl	801bebc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8019ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019ffa:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8019ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ffe:	2b00      	cmp	r3, #0
 801a000:	d024      	beq.n	801a04c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801a002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a004:	1e5a      	subs	r2, r3, #1
 801a006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a008:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a00c:	681b      	ldr	r3, [r3, #0]
 801a00e:	2b00      	cmp	r3, #0
 801a010:	d104      	bne.n	801a01c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801a012:	f001 fa81 	bl	801b518 <pvTaskIncrementMutexHeldCount>
 801a016:	4602      	mov	r2, r0
 801a018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a01a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a01e:	691b      	ldr	r3, [r3, #16]
 801a020:	2b00      	cmp	r3, #0
 801a022:	d00f      	beq.n	801a044 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a026:	3310      	adds	r3, #16
 801a028:	4618      	mov	r0, r3
 801a02a:	f000 ff4d 	bl	801aec8 <xTaskRemoveFromEventList>
 801a02e:	4603      	mov	r3, r0
 801a030:	2b00      	cmp	r3, #0
 801a032:	d007      	beq.n	801a044 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801a034:	4b53      	ldr	r3, [pc, #332]	; (801a184 <xQueueSemaphoreTake+0x20c>)
 801a036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a03a:	601a      	str	r2, [r3, #0]
 801a03c:	f3bf 8f4f 	dsb	sy
 801a040:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801a044:	f001 ff68 	bl	801bf18 <vPortExitCritical>
				return pdPASS;
 801a048:	2301      	movs	r3, #1
 801a04a:	e096      	b.n	801a17a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a04c:	683b      	ldr	r3, [r7, #0]
 801a04e:	2b00      	cmp	r3, #0
 801a050:	d110      	bne.n	801a074 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801a052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a054:	2b00      	cmp	r3, #0
 801a056:	d009      	beq.n	801a06c <xQueueSemaphoreTake+0xf4>
 801a058:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a05c:	f383 8811 	msr	BASEPRI, r3
 801a060:	f3bf 8f6f 	isb	sy
 801a064:	f3bf 8f4f 	dsb	sy
 801a068:	617b      	str	r3, [r7, #20]
 801a06a:	e7fe      	b.n	801a06a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801a06c:	f001 ff54 	bl	801bf18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801a070:	2300      	movs	r3, #0
 801a072:	e082      	b.n	801a17a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a076:	2b00      	cmp	r3, #0
 801a078:	d106      	bne.n	801a088 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a07a:	f107 030c 	add.w	r3, r7, #12
 801a07e:	4618      	mov	r0, r3
 801a080:	f000 ff84 	bl	801af8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a084:	2301      	movs	r3, #1
 801a086:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a088:	f001 ff46 	bl	801bf18 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a08c:	f000 fd00 	bl	801aa90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a090:	f001 ff14 	bl	801bebc <vPortEnterCritical>
 801a094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a096:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a09a:	b25b      	sxtb	r3, r3
 801a09c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a0a0:	d103      	bne.n	801a0aa <xQueueSemaphoreTake+0x132>
 801a0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0a4:	2200      	movs	r2, #0
 801a0a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a0b0:	b25b      	sxtb	r3, r3
 801a0b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a0b6:	d103      	bne.n	801a0c0 <xQueueSemaphoreTake+0x148>
 801a0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0ba:	2200      	movs	r2, #0
 801a0bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a0c0:	f001 ff2a 	bl	801bf18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a0c4:	463a      	mov	r2, r7
 801a0c6:	f107 030c 	add.w	r3, r7, #12
 801a0ca:	4611      	mov	r1, r2
 801a0cc:	4618      	mov	r0, r3
 801a0ce:	f000 ff73 	bl	801afb8 <xTaskCheckForTimeOut>
 801a0d2:	4603      	mov	r3, r0
 801a0d4:	2b00      	cmp	r3, #0
 801a0d6:	d132      	bne.n	801a13e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a0d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a0da:	f000 f9ee 	bl	801a4ba <prvIsQueueEmpty>
 801a0de:	4603      	mov	r3, r0
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	d026      	beq.n	801a132 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0e6:	681b      	ldr	r3, [r3, #0]
 801a0e8:	2b00      	cmp	r3, #0
 801a0ea:	d109      	bne.n	801a100 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 801a0ec:	f001 fee6 	bl	801bebc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801a0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0f2:	689b      	ldr	r3, [r3, #8]
 801a0f4:	4618      	mov	r0, r3
 801a0f6:	f001 f8bb 	bl	801b270 <xTaskPriorityInherit>
 801a0fa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801a0fc:	f001 ff0c 	bl	801bf18 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801a100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a102:	3324      	adds	r3, #36	; 0x24
 801a104:	683a      	ldr	r2, [r7, #0]
 801a106:	4611      	mov	r1, r2
 801a108:	4618      	mov	r0, r3
 801a10a:	f000 fe8f 	bl	801ae2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801a10e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a110:	f000 f981 	bl	801a416 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801a114:	f000 fcca 	bl	801aaac <xTaskResumeAll>
 801a118:	4603      	mov	r3, r0
 801a11a:	2b00      	cmp	r3, #0
 801a11c:	f47f af69 	bne.w	8019ff2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 801a120:	4b18      	ldr	r3, [pc, #96]	; (801a184 <xQueueSemaphoreTake+0x20c>)
 801a122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a126:	601a      	str	r2, [r3, #0]
 801a128:	f3bf 8f4f 	dsb	sy
 801a12c:	f3bf 8f6f 	isb	sy
 801a130:	e75f      	b.n	8019ff2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801a132:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a134:	f000 f96f 	bl	801a416 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a138:	f000 fcb8 	bl	801aaac <xTaskResumeAll>
 801a13c:	e759      	b.n	8019ff2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801a13e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a140:	f000 f969 	bl	801a416 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a144:	f000 fcb2 	bl	801aaac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a148:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a14a:	f000 f9b6 	bl	801a4ba <prvIsQueueEmpty>
 801a14e:	4603      	mov	r3, r0
 801a150:	2b00      	cmp	r3, #0
 801a152:	f43f af4e 	beq.w	8019ff2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801a156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a158:	2b00      	cmp	r3, #0
 801a15a:	d00d      	beq.n	801a178 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 801a15c:	f001 feae 	bl	801bebc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801a160:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a162:	f000 f8b0 	bl	801a2c6 <prvGetDisinheritPriorityAfterTimeout>
 801a166:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801a168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a16a:	689b      	ldr	r3, [r3, #8]
 801a16c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a16e:	4618      	mov	r0, r3
 801a170:	f001 f952 	bl	801b418 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801a174:	f001 fed0 	bl	801bf18 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801a178:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801a17a:	4618      	mov	r0, r3
 801a17c:	3738      	adds	r7, #56	; 0x38
 801a17e:	46bd      	mov	sp, r7
 801a180:	bd80      	pop	{r7, pc}
 801a182:	bf00      	nop
 801a184:	e000ed04 	.word	0xe000ed04

0801a188 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801a188:	b580      	push	{r7, lr}
 801a18a:	b08e      	sub	sp, #56	; 0x38
 801a18c:	af00      	add	r7, sp, #0
 801a18e:	60f8      	str	r0, [r7, #12]
 801a190:	60b9      	str	r1, [r7, #8]
 801a192:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801a194:	68fb      	ldr	r3, [r7, #12]
 801a196:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801a198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	d109      	bne.n	801a1b2 <xQueueReceiveFromISR+0x2a>
 801a19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a1a2:	f383 8811 	msr	BASEPRI, r3
 801a1a6:	f3bf 8f6f 	isb	sy
 801a1aa:	f3bf 8f4f 	dsb	sy
 801a1ae:	623b      	str	r3, [r7, #32]
 801a1b0:	e7fe      	b.n	801a1b0 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a1b2:	68bb      	ldr	r3, [r7, #8]
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	d103      	bne.n	801a1c0 <xQueueReceiveFromISR+0x38>
 801a1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a1bc:	2b00      	cmp	r3, #0
 801a1be:	d101      	bne.n	801a1c4 <xQueueReceiveFromISR+0x3c>
 801a1c0:	2301      	movs	r3, #1
 801a1c2:	e000      	b.n	801a1c6 <xQueueReceiveFromISR+0x3e>
 801a1c4:	2300      	movs	r3, #0
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	d109      	bne.n	801a1de <xQueueReceiveFromISR+0x56>
 801a1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a1ce:	f383 8811 	msr	BASEPRI, r3
 801a1d2:	f3bf 8f6f 	isb	sy
 801a1d6:	f3bf 8f4f 	dsb	sy
 801a1da:	61fb      	str	r3, [r7, #28]
 801a1dc:	e7fe      	b.n	801a1dc <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a1de:	f001 ff49 	bl	801c074 <vPortValidateInterruptPriority>
	__asm volatile
 801a1e2:	f3ef 8211 	mrs	r2, BASEPRI
 801a1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a1ea:	f383 8811 	msr	BASEPRI, r3
 801a1ee:	f3bf 8f6f 	isb	sy
 801a1f2:	f3bf 8f4f 	dsb	sy
 801a1f6:	61ba      	str	r2, [r7, #24]
 801a1f8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801a1fa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801a1fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a202:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a206:	2b00      	cmp	r3, #0
 801a208:	d02f      	beq.n	801a26a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801a20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a20c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801a214:	68b9      	ldr	r1, [r7, #8]
 801a216:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a218:	f000 f8d7 	bl	801a3ca <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801a21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a21e:	1e5a      	subs	r2, r3, #1
 801a220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a222:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801a224:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801a228:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a22c:	d112      	bne.n	801a254 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a230:	691b      	ldr	r3, [r3, #16]
 801a232:	2b00      	cmp	r3, #0
 801a234:	d016      	beq.n	801a264 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a238:	3310      	adds	r3, #16
 801a23a:	4618      	mov	r0, r3
 801a23c:	f000 fe44 	bl	801aec8 <xTaskRemoveFromEventList>
 801a240:	4603      	mov	r3, r0
 801a242:	2b00      	cmp	r3, #0
 801a244:	d00e      	beq.n	801a264 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	2b00      	cmp	r3, #0
 801a24a:	d00b      	beq.n	801a264 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	2201      	movs	r2, #1
 801a250:	601a      	str	r2, [r3, #0]
 801a252:	e007      	b.n	801a264 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801a254:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a258:	3301      	adds	r3, #1
 801a25a:	b2db      	uxtb	r3, r3
 801a25c:	b25a      	sxtb	r2, r3
 801a25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801a264:	2301      	movs	r3, #1
 801a266:	637b      	str	r3, [r7, #52]	; 0x34
 801a268:	e001      	b.n	801a26e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 801a26a:	2300      	movs	r3, #0
 801a26c:	637b      	str	r3, [r7, #52]	; 0x34
 801a26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a270:	613b      	str	r3, [r7, #16]
	__asm volatile
 801a272:	693b      	ldr	r3, [r7, #16]
 801a274:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801a278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801a27a:	4618      	mov	r0, r3
 801a27c:	3738      	adds	r7, #56	; 0x38
 801a27e:	46bd      	mov	sp, r7
 801a280:	bd80      	pop	{r7, pc}

0801a282 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801a282:	b580      	push	{r7, lr}
 801a284:	b084      	sub	sp, #16
 801a286:	af00      	add	r7, sp, #0
 801a288:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801a28e:	68fb      	ldr	r3, [r7, #12]
 801a290:	2b00      	cmp	r3, #0
 801a292:	d109      	bne.n	801a2a8 <vQueueDelete+0x26>
	__asm volatile
 801a294:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a298:	f383 8811 	msr	BASEPRI, r3
 801a29c:	f3bf 8f6f 	isb	sy
 801a2a0:	f3bf 8f4f 	dsb	sy
 801a2a4:	60bb      	str	r3, [r7, #8]
 801a2a6:	e7fe      	b.n	801a2a6 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801a2a8:	68f8      	ldr	r0, [r7, #12]
 801a2aa:	f000 f95d 	bl	801a568 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801a2ae:	68fb      	ldr	r3, [r7, #12]
 801a2b0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801a2b4:	2b00      	cmp	r3, #0
 801a2b6:	d102      	bne.n	801a2be <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 801a2b8:	68f8      	ldr	r0, [r7, #12]
 801a2ba:	f001 ffdb 	bl	801c274 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801a2be:	bf00      	nop
 801a2c0:	3710      	adds	r7, #16
 801a2c2:	46bd      	mov	sp, r7
 801a2c4:	bd80      	pop	{r7, pc}

0801a2c6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801a2c6:	b480      	push	{r7}
 801a2c8:	b085      	sub	sp, #20
 801a2ca:	af00      	add	r7, sp, #0
 801a2cc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2d2:	2b00      	cmp	r3, #0
 801a2d4:	d006      	beq.n	801a2e4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a2da:	681b      	ldr	r3, [r3, #0]
 801a2dc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801a2e0:	60fb      	str	r3, [r7, #12]
 801a2e2:	e001      	b.n	801a2e8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801a2e4:	2300      	movs	r3, #0
 801a2e6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801a2e8:	68fb      	ldr	r3, [r7, #12]
	}
 801a2ea:	4618      	mov	r0, r3
 801a2ec:	3714      	adds	r7, #20
 801a2ee:	46bd      	mov	sp, r7
 801a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2f4:	4770      	bx	lr

0801a2f6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801a2f6:	b580      	push	{r7, lr}
 801a2f8:	b086      	sub	sp, #24
 801a2fa:	af00      	add	r7, sp, #0
 801a2fc:	60f8      	str	r0, [r7, #12]
 801a2fe:	60b9      	str	r1, [r7, #8]
 801a300:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801a302:	2300      	movs	r3, #0
 801a304:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a306:	68fb      	ldr	r3, [r7, #12]
 801a308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a30a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801a30c:	68fb      	ldr	r3, [r7, #12]
 801a30e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a310:	2b00      	cmp	r3, #0
 801a312:	d10d      	bne.n	801a330 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a314:	68fb      	ldr	r3, [r7, #12]
 801a316:	681b      	ldr	r3, [r3, #0]
 801a318:	2b00      	cmp	r3, #0
 801a31a:	d14d      	bne.n	801a3b8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801a31c:	68fb      	ldr	r3, [r7, #12]
 801a31e:	689b      	ldr	r3, [r3, #8]
 801a320:	4618      	mov	r0, r3
 801a322:	f001 f80d 	bl	801b340 <xTaskPriorityDisinherit>
 801a326:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801a328:	68fb      	ldr	r3, [r7, #12]
 801a32a:	2200      	movs	r2, #0
 801a32c:	609a      	str	r2, [r3, #8]
 801a32e:	e043      	b.n	801a3b8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801a330:	687b      	ldr	r3, [r7, #4]
 801a332:	2b00      	cmp	r3, #0
 801a334:	d119      	bne.n	801a36a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801a336:	68fb      	ldr	r3, [r7, #12]
 801a338:	6858      	ldr	r0, [r3, #4]
 801a33a:	68fb      	ldr	r3, [r7, #12]
 801a33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a33e:	461a      	mov	r2, r3
 801a340:	68b9      	ldr	r1, [r7, #8]
 801a342:	f002 fc05 	bl	801cb50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801a346:	68fb      	ldr	r3, [r7, #12]
 801a348:	685a      	ldr	r2, [r3, #4]
 801a34a:	68fb      	ldr	r3, [r7, #12]
 801a34c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a34e:	441a      	add	r2, r3
 801a350:	68fb      	ldr	r3, [r7, #12]
 801a352:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801a354:	68fb      	ldr	r3, [r7, #12]
 801a356:	685a      	ldr	r2, [r3, #4]
 801a358:	68fb      	ldr	r3, [r7, #12]
 801a35a:	689b      	ldr	r3, [r3, #8]
 801a35c:	429a      	cmp	r2, r3
 801a35e:	d32b      	bcc.n	801a3b8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801a360:	68fb      	ldr	r3, [r7, #12]
 801a362:	681a      	ldr	r2, [r3, #0]
 801a364:	68fb      	ldr	r3, [r7, #12]
 801a366:	605a      	str	r2, [r3, #4]
 801a368:	e026      	b.n	801a3b8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801a36a:	68fb      	ldr	r3, [r7, #12]
 801a36c:	68d8      	ldr	r0, [r3, #12]
 801a36e:	68fb      	ldr	r3, [r7, #12]
 801a370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a372:	461a      	mov	r2, r3
 801a374:	68b9      	ldr	r1, [r7, #8]
 801a376:	f002 fbeb 	bl	801cb50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801a37a:	68fb      	ldr	r3, [r7, #12]
 801a37c:	68da      	ldr	r2, [r3, #12]
 801a37e:	68fb      	ldr	r3, [r7, #12]
 801a380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a382:	425b      	negs	r3, r3
 801a384:	441a      	add	r2, r3
 801a386:	68fb      	ldr	r3, [r7, #12]
 801a388:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801a38a:	68fb      	ldr	r3, [r7, #12]
 801a38c:	68da      	ldr	r2, [r3, #12]
 801a38e:	68fb      	ldr	r3, [r7, #12]
 801a390:	681b      	ldr	r3, [r3, #0]
 801a392:	429a      	cmp	r2, r3
 801a394:	d207      	bcs.n	801a3a6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801a396:	68fb      	ldr	r3, [r7, #12]
 801a398:	689a      	ldr	r2, [r3, #8]
 801a39a:	68fb      	ldr	r3, [r7, #12]
 801a39c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a39e:	425b      	negs	r3, r3
 801a3a0:	441a      	add	r2, r3
 801a3a2:	68fb      	ldr	r3, [r7, #12]
 801a3a4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	2b02      	cmp	r3, #2
 801a3aa:	d105      	bne.n	801a3b8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a3ac:	693b      	ldr	r3, [r7, #16]
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	d002      	beq.n	801a3b8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801a3b2:	693b      	ldr	r3, [r7, #16]
 801a3b4:	3b01      	subs	r3, #1
 801a3b6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801a3b8:	693b      	ldr	r3, [r7, #16]
 801a3ba:	1c5a      	adds	r2, r3, #1
 801a3bc:	68fb      	ldr	r3, [r7, #12]
 801a3be:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801a3c0:	697b      	ldr	r3, [r7, #20]
}
 801a3c2:	4618      	mov	r0, r3
 801a3c4:	3718      	adds	r7, #24
 801a3c6:	46bd      	mov	sp, r7
 801a3c8:	bd80      	pop	{r7, pc}

0801a3ca <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801a3ca:	b580      	push	{r7, lr}
 801a3cc:	b082      	sub	sp, #8
 801a3ce:	af00      	add	r7, sp, #0
 801a3d0:	6078      	str	r0, [r7, #4]
 801a3d2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	d018      	beq.n	801a40e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	68da      	ldr	r2, [r3, #12]
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a3e4:	441a      	add	r2, r3
 801a3e6:	687b      	ldr	r3, [r7, #4]
 801a3e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801a3ea:	687b      	ldr	r3, [r7, #4]
 801a3ec:	68da      	ldr	r2, [r3, #12]
 801a3ee:	687b      	ldr	r3, [r7, #4]
 801a3f0:	689b      	ldr	r3, [r3, #8]
 801a3f2:	429a      	cmp	r2, r3
 801a3f4:	d303      	bcc.n	801a3fe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801a3f6:	687b      	ldr	r3, [r7, #4]
 801a3f8:	681a      	ldr	r2, [r3, #0]
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801a3fe:	687b      	ldr	r3, [r7, #4]
 801a400:	68d9      	ldr	r1, [r3, #12]
 801a402:	687b      	ldr	r3, [r7, #4]
 801a404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a406:	461a      	mov	r2, r3
 801a408:	6838      	ldr	r0, [r7, #0]
 801a40a:	f002 fba1 	bl	801cb50 <memcpy>
	}
}
 801a40e:	bf00      	nop
 801a410:	3708      	adds	r7, #8
 801a412:	46bd      	mov	sp, r7
 801a414:	bd80      	pop	{r7, pc}

0801a416 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801a416:	b580      	push	{r7, lr}
 801a418:	b084      	sub	sp, #16
 801a41a:	af00      	add	r7, sp, #0
 801a41c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801a41e:	f001 fd4d 	bl	801bebc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801a422:	687b      	ldr	r3, [r7, #4]
 801a424:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a428:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801a42a:	e011      	b.n	801a450 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a42c:	687b      	ldr	r3, [r7, #4]
 801a42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a430:	2b00      	cmp	r3, #0
 801a432:	d012      	beq.n	801a45a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	3324      	adds	r3, #36	; 0x24
 801a438:	4618      	mov	r0, r3
 801a43a:	f000 fd45 	bl	801aec8 <xTaskRemoveFromEventList>
 801a43e:	4603      	mov	r3, r0
 801a440:	2b00      	cmp	r3, #0
 801a442:	d001      	beq.n	801a448 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801a444:	f000 fe18 	bl	801b078 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801a448:	7bfb      	ldrb	r3, [r7, #15]
 801a44a:	3b01      	subs	r3, #1
 801a44c:	b2db      	uxtb	r3, r3
 801a44e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801a450:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a454:	2b00      	cmp	r3, #0
 801a456:	dce9      	bgt.n	801a42c <prvUnlockQueue+0x16>
 801a458:	e000      	b.n	801a45c <prvUnlockQueue+0x46>
					break;
 801a45a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	22ff      	movs	r2, #255	; 0xff
 801a460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801a464:	f001 fd58 	bl	801bf18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801a468:	f001 fd28 	bl	801bebc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a472:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801a474:	e011      	b.n	801a49a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a476:	687b      	ldr	r3, [r7, #4]
 801a478:	691b      	ldr	r3, [r3, #16]
 801a47a:	2b00      	cmp	r3, #0
 801a47c:	d012      	beq.n	801a4a4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a47e:	687b      	ldr	r3, [r7, #4]
 801a480:	3310      	adds	r3, #16
 801a482:	4618      	mov	r0, r3
 801a484:	f000 fd20 	bl	801aec8 <xTaskRemoveFromEventList>
 801a488:	4603      	mov	r3, r0
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	d001      	beq.n	801a492 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801a48e:	f000 fdf3 	bl	801b078 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801a492:	7bbb      	ldrb	r3, [r7, #14]
 801a494:	3b01      	subs	r3, #1
 801a496:	b2db      	uxtb	r3, r3
 801a498:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801a49a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a49e:	2b00      	cmp	r3, #0
 801a4a0:	dce9      	bgt.n	801a476 <prvUnlockQueue+0x60>
 801a4a2:	e000      	b.n	801a4a6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801a4a4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	22ff      	movs	r2, #255	; 0xff
 801a4aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801a4ae:	f001 fd33 	bl	801bf18 <vPortExitCritical>
}
 801a4b2:	bf00      	nop
 801a4b4:	3710      	adds	r7, #16
 801a4b6:	46bd      	mov	sp, r7
 801a4b8:	bd80      	pop	{r7, pc}

0801a4ba <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801a4ba:	b580      	push	{r7, lr}
 801a4bc:	b084      	sub	sp, #16
 801a4be:	af00      	add	r7, sp, #0
 801a4c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801a4c2:	f001 fcfb 	bl	801bebc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801a4c6:	687b      	ldr	r3, [r7, #4]
 801a4c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a4ca:	2b00      	cmp	r3, #0
 801a4cc:	d102      	bne.n	801a4d4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801a4ce:	2301      	movs	r3, #1
 801a4d0:	60fb      	str	r3, [r7, #12]
 801a4d2:	e001      	b.n	801a4d8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801a4d4:	2300      	movs	r3, #0
 801a4d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801a4d8:	f001 fd1e 	bl	801bf18 <vPortExitCritical>

	return xReturn;
 801a4dc:	68fb      	ldr	r3, [r7, #12]
}
 801a4de:	4618      	mov	r0, r3
 801a4e0:	3710      	adds	r7, #16
 801a4e2:	46bd      	mov	sp, r7
 801a4e4:	bd80      	pop	{r7, pc}

0801a4e6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801a4e6:	b580      	push	{r7, lr}
 801a4e8:	b084      	sub	sp, #16
 801a4ea:	af00      	add	r7, sp, #0
 801a4ec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801a4ee:	f001 fce5 	bl	801bebc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801a4f2:	687b      	ldr	r3, [r7, #4]
 801a4f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a4f6:	687b      	ldr	r3, [r7, #4]
 801a4f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a4fa:	429a      	cmp	r2, r3
 801a4fc:	d102      	bne.n	801a504 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801a4fe:	2301      	movs	r3, #1
 801a500:	60fb      	str	r3, [r7, #12]
 801a502:	e001      	b.n	801a508 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801a504:	2300      	movs	r3, #0
 801a506:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801a508:	f001 fd06 	bl	801bf18 <vPortExitCritical>

	return xReturn;
 801a50c:	68fb      	ldr	r3, [r7, #12]
}
 801a50e:	4618      	mov	r0, r3
 801a510:	3710      	adds	r7, #16
 801a512:	46bd      	mov	sp, r7
 801a514:	bd80      	pop	{r7, pc}
	...

0801a518 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801a518:	b480      	push	{r7}
 801a51a:	b085      	sub	sp, #20
 801a51c:	af00      	add	r7, sp, #0
 801a51e:	6078      	str	r0, [r7, #4]
 801a520:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801a522:	2300      	movs	r3, #0
 801a524:	60fb      	str	r3, [r7, #12]
 801a526:	e014      	b.n	801a552 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801a528:	4a0e      	ldr	r2, [pc, #56]	; (801a564 <vQueueAddToRegistry+0x4c>)
 801a52a:	68fb      	ldr	r3, [r7, #12]
 801a52c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801a530:	2b00      	cmp	r3, #0
 801a532:	d10b      	bne.n	801a54c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801a534:	490b      	ldr	r1, [pc, #44]	; (801a564 <vQueueAddToRegistry+0x4c>)
 801a536:	68fb      	ldr	r3, [r7, #12]
 801a538:	683a      	ldr	r2, [r7, #0]
 801a53a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801a53e:	4a09      	ldr	r2, [pc, #36]	; (801a564 <vQueueAddToRegistry+0x4c>)
 801a540:	68fb      	ldr	r3, [r7, #12]
 801a542:	00db      	lsls	r3, r3, #3
 801a544:	4413      	add	r3, r2
 801a546:	687a      	ldr	r2, [r7, #4]
 801a548:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801a54a:	e005      	b.n	801a558 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801a54c:	68fb      	ldr	r3, [r7, #12]
 801a54e:	3301      	adds	r3, #1
 801a550:	60fb      	str	r3, [r7, #12]
 801a552:	68fb      	ldr	r3, [r7, #12]
 801a554:	2b07      	cmp	r3, #7
 801a556:	d9e7      	bls.n	801a528 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801a558:	bf00      	nop
 801a55a:	3714      	adds	r7, #20
 801a55c:	46bd      	mov	sp, r7
 801a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a562:	4770      	bx	lr
 801a564:	20008674 	.word	0x20008674

0801a568 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801a568:	b480      	push	{r7}
 801a56a:	b085      	sub	sp, #20
 801a56c:	af00      	add	r7, sp, #0
 801a56e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801a570:	2300      	movs	r3, #0
 801a572:	60fb      	str	r3, [r7, #12]
 801a574:	e016      	b.n	801a5a4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801a576:	4a10      	ldr	r2, [pc, #64]	; (801a5b8 <vQueueUnregisterQueue+0x50>)
 801a578:	68fb      	ldr	r3, [r7, #12]
 801a57a:	00db      	lsls	r3, r3, #3
 801a57c:	4413      	add	r3, r2
 801a57e:	685b      	ldr	r3, [r3, #4]
 801a580:	687a      	ldr	r2, [r7, #4]
 801a582:	429a      	cmp	r2, r3
 801a584:	d10b      	bne.n	801a59e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801a586:	4a0c      	ldr	r2, [pc, #48]	; (801a5b8 <vQueueUnregisterQueue+0x50>)
 801a588:	68fb      	ldr	r3, [r7, #12]
 801a58a:	2100      	movs	r1, #0
 801a58c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801a590:	4a09      	ldr	r2, [pc, #36]	; (801a5b8 <vQueueUnregisterQueue+0x50>)
 801a592:	68fb      	ldr	r3, [r7, #12]
 801a594:	00db      	lsls	r3, r3, #3
 801a596:	4413      	add	r3, r2
 801a598:	2200      	movs	r2, #0
 801a59a:	605a      	str	r2, [r3, #4]
				break;
 801a59c:	e005      	b.n	801a5aa <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801a59e:	68fb      	ldr	r3, [r7, #12]
 801a5a0:	3301      	adds	r3, #1
 801a5a2:	60fb      	str	r3, [r7, #12]
 801a5a4:	68fb      	ldr	r3, [r7, #12]
 801a5a6:	2b07      	cmp	r3, #7
 801a5a8:	d9e5      	bls.n	801a576 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801a5aa:	bf00      	nop
 801a5ac:	3714      	adds	r7, #20
 801a5ae:	46bd      	mov	sp, r7
 801a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5b4:	4770      	bx	lr
 801a5b6:	bf00      	nop
 801a5b8:	20008674 	.word	0x20008674

0801a5bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801a5bc:	b580      	push	{r7, lr}
 801a5be:	b086      	sub	sp, #24
 801a5c0:	af00      	add	r7, sp, #0
 801a5c2:	60f8      	str	r0, [r7, #12]
 801a5c4:	60b9      	str	r1, [r7, #8]
 801a5c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801a5c8:	68fb      	ldr	r3, [r7, #12]
 801a5ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801a5cc:	f001 fc76 	bl	801bebc <vPortEnterCritical>
 801a5d0:	697b      	ldr	r3, [r7, #20]
 801a5d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a5d6:	b25b      	sxtb	r3, r3
 801a5d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a5dc:	d103      	bne.n	801a5e6 <vQueueWaitForMessageRestricted+0x2a>
 801a5de:	697b      	ldr	r3, [r7, #20]
 801a5e0:	2200      	movs	r2, #0
 801a5e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a5e6:	697b      	ldr	r3, [r7, #20]
 801a5e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a5ec:	b25b      	sxtb	r3, r3
 801a5ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a5f2:	d103      	bne.n	801a5fc <vQueueWaitForMessageRestricted+0x40>
 801a5f4:	697b      	ldr	r3, [r7, #20]
 801a5f6:	2200      	movs	r2, #0
 801a5f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a5fc:	f001 fc8c 	bl	801bf18 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801a600:	697b      	ldr	r3, [r7, #20]
 801a602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a604:	2b00      	cmp	r3, #0
 801a606:	d106      	bne.n	801a616 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801a608:	697b      	ldr	r3, [r7, #20]
 801a60a:	3324      	adds	r3, #36	; 0x24
 801a60c:	687a      	ldr	r2, [r7, #4]
 801a60e:	68b9      	ldr	r1, [r7, #8]
 801a610:	4618      	mov	r0, r3
 801a612:	f000 fc2f 	bl	801ae74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801a616:	6978      	ldr	r0, [r7, #20]
 801a618:	f7ff fefd 	bl	801a416 <prvUnlockQueue>
	}
 801a61c:	bf00      	nop
 801a61e:	3718      	adds	r7, #24
 801a620:	46bd      	mov	sp, r7
 801a622:	bd80      	pop	{r7, pc}

0801a624 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801a624:	b580      	push	{r7, lr}
 801a626:	b08e      	sub	sp, #56	; 0x38
 801a628:	af04      	add	r7, sp, #16
 801a62a:	60f8      	str	r0, [r7, #12]
 801a62c:	60b9      	str	r1, [r7, #8]
 801a62e:	607a      	str	r2, [r7, #4]
 801a630:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801a632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a634:	2b00      	cmp	r3, #0
 801a636:	d109      	bne.n	801a64c <xTaskCreateStatic+0x28>
 801a638:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a63c:	f383 8811 	msr	BASEPRI, r3
 801a640:	f3bf 8f6f 	isb	sy
 801a644:	f3bf 8f4f 	dsb	sy
 801a648:	623b      	str	r3, [r7, #32]
 801a64a:	e7fe      	b.n	801a64a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 801a64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a64e:	2b00      	cmp	r3, #0
 801a650:	d109      	bne.n	801a666 <xTaskCreateStatic+0x42>
 801a652:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a656:	f383 8811 	msr	BASEPRI, r3
 801a65a:	f3bf 8f6f 	isb	sy
 801a65e:	f3bf 8f4f 	dsb	sy
 801a662:	61fb      	str	r3, [r7, #28]
 801a664:	e7fe      	b.n	801a664 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801a666:	235c      	movs	r3, #92	; 0x5c
 801a668:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801a66a:	693b      	ldr	r3, [r7, #16]
 801a66c:	2b5c      	cmp	r3, #92	; 0x5c
 801a66e:	d009      	beq.n	801a684 <xTaskCreateStatic+0x60>
 801a670:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a674:	f383 8811 	msr	BASEPRI, r3
 801a678:	f3bf 8f6f 	isb	sy
 801a67c:	f3bf 8f4f 	dsb	sy
 801a680:	61bb      	str	r3, [r7, #24]
 801a682:	e7fe      	b.n	801a682 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801a684:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801a686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a688:	2b00      	cmp	r3, #0
 801a68a:	d01e      	beq.n	801a6ca <xTaskCreateStatic+0xa6>
 801a68c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a68e:	2b00      	cmp	r3, #0
 801a690:	d01b      	beq.n	801a6ca <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801a692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a694:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801a696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a698:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a69a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801a69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a69e:	2202      	movs	r2, #2
 801a6a0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801a6a4:	2300      	movs	r3, #0
 801a6a6:	9303      	str	r3, [sp, #12]
 801a6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6aa:	9302      	str	r3, [sp, #8]
 801a6ac:	f107 0314 	add.w	r3, r7, #20
 801a6b0:	9301      	str	r3, [sp, #4]
 801a6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6b4:	9300      	str	r3, [sp, #0]
 801a6b6:	683b      	ldr	r3, [r7, #0]
 801a6b8:	687a      	ldr	r2, [r7, #4]
 801a6ba:	68b9      	ldr	r1, [r7, #8]
 801a6bc:	68f8      	ldr	r0, [r7, #12]
 801a6be:	f000 f850 	bl	801a762 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801a6c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a6c4:	f000 f8dc 	bl	801a880 <prvAddNewTaskToReadyList>
 801a6c8:	e001      	b.n	801a6ce <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 801a6ca:	2300      	movs	r3, #0
 801a6cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801a6ce:	697b      	ldr	r3, [r7, #20]
	}
 801a6d0:	4618      	mov	r0, r3
 801a6d2:	3728      	adds	r7, #40	; 0x28
 801a6d4:	46bd      	mov	sp, r7
 801a6d6:	bd80      	pop	{r7, pc}

0801a6d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801a6d8:	b580      	push	{r7, lr}
 801a6da:	b08c      	sub	sp, #48	; 0x30
 801a6dc:	af04      	add	r7, sp, #16
 801a6de:	60f8      	str	r0, [r7, #12]
 801a6e0:	60b9      	str	r1, [r7, #8]
 801a6e2:	603b      	str	r3, [r7, #0]
 801a6e4:	4613      	mov	r3, r2
 801a6e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801a6e8:	88fb      	ldrh	r3, [r7, #6]
 801a6ea:	009b      	lsls	r3, r3, #2
 801a6ec:	4618      	mov	r0, r3
 801a6ee:	f001 fcff 	bl	801c0f0 <pvPortMalloc>
 801a6f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801a6f4:	697b      	ldr	r3, [r7, #20]
 801a6f6:	2b00      	cmp	r3, #0
 801a6f8:	d00e      	beq.n	801a718 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801a6fa:	205c      	movs	r0, #92	; 0x5c
 801a6fc:	f001 fcf8 	bl	801c0f0 <pvPortMalloc>
 801a700:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801a702:	69fb      	ldr	r3, [r7, #28]
 801a704:	2b00      	cmp	r3, #0
 801a706:	d003      	beq.n	801a710 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801a708:	69fb      	ldr	r3, [r7, #28]
 801a70a:	697a      	ldr	r2, [r7, #20]
 801a70c:	631a      	str	r2, [r3, #48]	; 0x30
 801a70e:	e005      	b.n	801a71c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801a710:	6978      	ldr	r0, [r7, #20]
 801a712:	f001 fdaf 	bl	801c274 <vPortFree>
 801a716:	e001      	b.n	801a71c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801a718:	2300      	movs	r3, #0
 801a71a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801a71c:	69fb      	ldr	r3, [r7, #28]
 801a71e:	2b00      	cmp	r3, #0
 801a720:	d017      	beq.n	801a752 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801a722:	69fb      	ldr	r3, [r7, #28]
 801a724:	2200      	movs	r2, #0
 801a726:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801a72a:	88fa      	ldrh	r2, [r7, #6]
 801a72c:	2300      	movs	r3, #0
 801a72e:	9303      	str	r3, [sp, #12]
 801a730:	69fb      	ldr	r3, [r7, #28]
 801a732:	9302      	str	r3, [sp, #8]
 801a734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a736:	9301      	str	r3, [sp, #4]
 801a738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a73a:	9300      	str	r3, [sp, #0]
 801a73c:	683b      	ldr	r3, [r7, #0]
 801a73e:	68b9      	ldr	r1, [r7, #8]
 801a740:	68f8      	ldr	r0, [r7, #12]
 801a742:	f000 f80e 	bl	801a762 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801a746:	69f8      	ldr	r0, [r7, #28]
 801a748:	f000 f89a 	bl	801a880 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801a74c:	2301      	movs	r3, #1
 801a74e:	61bb      	str	r3, [r7, #24]
 801a750:	e002      	b.n	801a758 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801a752:	f04f 33ff 	mov.w	r3, #4294967295
 801a756:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801a758:	69bb      	ldr	r3, [r7, #24]
	}
 801a75a:	4618      	mov	r0, r3
 801a75c:	3720      	adds	r7, #32
 801a75e:	46bd      	mov	sp, r7
 801a760:	bd80      	pop	{r7, pc}

0801a762 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801a762:	b580      	push	{r7, lr}
 801a764:	b088      	sub	sp, #32
 801a766:	af00      	add	r7, sp, #0
 801a768:	60f8      	str	r0, [r7, #12]
 801a76a:	60b9      	str	r1, [r7, #8]
 801a76c:	607a      	str	r2, [r7, #4]
 801a76e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801a770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a772:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	009b      	lsls	r3, r3, #2
 801a778:	461a      	mov	r2, r3
 801a77a:	21a5      	movs	r1, #165	; 0xa5
 801a77c:	f002 f9f3 	bl	801cb66 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801a780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801a78a:	3b01      	subs	r3, #1
 801a78c:	009b      	lsls	r3, r3, #2
 801a78e:	4413      	add	r3, r2
 801a790:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801a792:	69bb      	ldr	r3, [r7, #24]
 801a794:	f023 0307 	bic.w	r3, r3, #7
 801a798:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801a79a:	69bb      	ldr	r3, [r7, #24]
 801a79c:	f003 0307 	and.w	r3, r3, #7
 801a7a0:	2b00      	cmp	r3, #0
 801a7a2:	d009      	beq.n	801a7b8 <prvInitialiseNewTask+0x56>
 801a7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a7a8:	f383 8811 	msr	BASEPRI, r3
 801a7ac:	f3bf 8f6f 	isb	sy
 801a7b0:	f3bf 8f4f 	dsb	sy
 801a7b4:	617b      	str	r3, [r7, #20]
 801a7b6:	e7fe      	b.n	801a7b6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801a7b8:	68bb      	ldr	r3, [r7, #8]
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	d01f      	beq.n	801a7fe <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801a7be:	2300      	movs	r3, #0
 801a7c0:	61fb      	str	r3, [r7, #28]
 801a7c2:	e012      	b.n	801a7ea <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801a7c4:	68ba      	ldr	r2, [r7, #8]
 801a7c6:	69fb      	ldr	r3, [r7, #28]
 801a7c8:	4413      	add	r3, r2
 801a7ca:	7819      	ldrb	r1, [r3, #0]
 801a7cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a7ce:	69fb      	ldr	r3, [r7, #28]
 801a7d0:	4413      	add	r3, r2
 801a7d2:	3334      	adds	r3, #52	; 0x34
 801a7d4:	460a      	mov	r2, r1
 801a7d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801a7d8:	68ba      	ldr	r2, [r7, #8]
 801a7da:	69fb      	ldr	r3, [r7, #28]
 801a7dc:	4413      	add	r3, r2
 801a7de:	781b      	ldrb	r3, [r3, #0]
 801a7e0:	2b00      	cmp	r3, #0
 801a7e2:	d006      	beq.n	801a7f2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801a7e4:	69fb      	ldr	r3, [r7, #28]
 801a7e6:	3301      	adds	r3, #1
 801a7e8:	61fb      	str	r3, [r7, #28]
 801a7ea:	69fb      	ldr	r3, [r7, #28]
 801a7ec:	2b0f      	cmp	r3, #15
 801a7ee:	d9e9      	bls.n	801a7c4 <prvInitialiseNewTask+0x62>
 801a7f0:	e000      	b.n	801a7f4 <prvInitialiseNewTask+0x92>
			{
				break;
 801a7f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801a7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a7f6:	2200      	movs	r2, #0
 801a7f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801a7fc:	e003      	b.n	801a806 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801a7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a800:	2200      	movs	r2, #0
 801a802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801a806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a808:	2b37      	cmp	r3, #55	; 0x37
 801a80a:	d901      	bls.n	801a810 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801a80c:	2337      	movs	r3, #55	; 0x37
 801a80e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801a810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a814:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801a816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a81a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801a81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a81e:	2200      	movs	r2, #0
 801a820:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801a822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a824:	3304      	adds	r3, #4
 801a826:	4618      	mov	r0, r3
 801a828:	f7fe fe7a 	bl	8019520 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801a82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a82e:	3318      	adds	r3, #24
 801a830:	4618      	mov	r0, r3
 801a832:	f7fe fe75 	bl	8019520 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801a836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a83a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a83e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801a842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a844:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801a846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a84a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801a84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a84e:	2200      	movs	r2, #0
 801a850:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801a852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a854:	2200      	movs	r2, #0
 801a856:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801a85a:	683a      	ldr	r2, [r7, #0]
 801a85c:	68f9      	ldr	r1, [r7, #12]
 801a85e:	69b8      	ldr	r0, [r7, #24]
 801a860:	f001 fa08 	bl	801bc74 <pxPortInitialiseStack>
 801a864:	4602      	mov	r2, r0
 801a866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a868:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801a86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a86c:	2b00      	cmp	r3, #0
 801a86e:	d002      	beq.n	801a876 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801a870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a876:	bf00      	nop
 801a878:	3720      	adds	r7, #32
 801a87a:	46bd      	mov	sp, r7
 801a87c:	bd80      	pop	{r7, pc}
	...

0801a880 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801a880:	b580      	push	{r7, lr}
 801a882:	b082      	sub	sp, #8
 801a884:	af00      	add	r7, sp, #0
 801a886:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801a888:	f001 fb18 	bl	801bebc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801a88c:	4b2d      	ldr	r3, [pc, #180]	; (801a944 <prvAddNewTaskToReadyList+0xc4>)
 801a88e:	681b      	ldr	r3, [r3, #0]
 801a890:	3301      	adds	r3, #1
 801a892:	4a2c      	ldr	r2, [pc, #176]	; (801a944 <prvAddNewTaskToReadyList+0xc4>)
 801a894:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801a896:	4b2c      	ldr	r3, [pc, #176]	; (801a948 <prvAddNewTaskToReadyList+0xc8>)
 801a898:	681b      	ldr	r3, [r3, #0]
 801a89a:	2b00      	cmp	r3, #0
 801a89c:	d109      	bne.n	801a8b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801a89e:	4a2a      	ldr	r2, [pc, #168]	; (801a948 <prvAddNewTaskToReadyList+0xc8>)
 801a8a0:	687b      	ldr	r3, [r7, #4]
 801a8a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801a8a4:	4b27      	ldr	r3, [pc, #156]	; (801a944 <prvAddNewTaskToReadyList+0xc4>)
 801a8a6:	681b      	ldr	r3, [r3, #0]
 801a8a8:	2b01      	cmp	r3, #1
 801a8aa:	d110      	bne.n	801a8ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801a8ac:	f000 fc08 	bl	801b0c0 <prvInitialiseTaskLists>
 801a8b0:	e00d      	b.n	801a8ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801a8b2:	4b26      	ldr	r3, [pc, #152]	; (801a94c <prvAddNewTaskToReadyList+0xcc>)
 801a8b4:	681b      	ldr	r3, [r3, #0]
 801a8b6:	2b00      	cmp	r3, #0
 801a8b8:	d109      	bne.n	801a8ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801a8ba:	4b23      	ldr	r3, [pc, #140]	; (801a948 <prvAddNewTaskToReadyList+0xc8>)
 801a8bc:	681b      	ldr	r3, [r3, #0]
 801a8be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a8c0:	687b      	ldr	r3, [r7, #4]
 801a8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a8c4:	429a      	cmp	r2, r3
 801a8c6:	d802      	bhi.n	801a8ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801a8c8:	4a1f      	ldr	r2, [pc, #124]	; (801a948 <prvAddNewTaskToReadyList+0xc8>)
 801a8ca:	687b      	ldr	r3, [r7, #4]
 801a8cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801a8ce:	4b20      	ldr	r3, [pc, #128]	; (801a950 <prvAddNewTaskToReadyList+0xd0>)
 801a8d0:	681b      	ldr	r3, [r3, #0]
 801a8d2:	3301      	adds	r3, #1
 801a8d4:	4a1e      	ldr	r2, [pc, #120]	; (801a950 <prvAddNewTaskToReadyList+0xd0>)
 801a8d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801a8d8:	4b1d      	ldr	r3, [pc, #116]	; (801a950 <prvAddNewTaskToReadyList+0xd0>)
 801a8da:	681a      	ldr	r2, [r3, #0]
 801a8dc:	687b      	ldr	r3, [r7, #4]
 801a8de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a8e4:	4b1b      	ldr	r3, [pc, #108]	; (801a954 <prvAddNewTaskToReadyList+0xd4>)
 801a8e6:	681b      	ldr	r3, [r3, #0]
 801a8e8:	429a      	cmp	r2, r3
 801a8ea:	d903      	bls.n	801a8f4 <prvAddNewTaskToReadyList+0x74>
 801a8ec:	687b      	ldr	r3, [r7, #4]
 801a8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a8f0:	4a18      	ldr	r2, [pc, #96]	; (801a954 <prvAddNewTaskToReadyList+0xd4>)
 801a8f2:	6013      	str	r3, [r2, #0]
 801a8f4:	687b      	ldr	r3, [r7, #4]
 801a8f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a8f8:	4613      	mov	r3, r2
 801a8fa:	009b      	lsls	r3, r3, #2
 801a8fc:	4413      	add	r3, r2
 801a8fe:	009b      	lsls	r3, r3, #2
 801a900:	4a15      	ldr	r2, [pc, #84]	; (801a958 <prvAddNewTaskToReadyList+0xd8>)
 801a902:	441a      	add	r2, r3
 801a904:	687b      	ldr	r3, [r7, #4]
 801a906:	3304      	adds	r3, #4
 801a908:	4619      	mov	r1, r3
 801a90a:	4610      	mov	r0, r2
 801a90c:	f7fe fe15 	bl	801953a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801a910:	f001 fb02 	bl	801bf18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801a914:	4b0d      	ldr	r3, [pc, #52]	; (801a94c <prvAddNewTaskToReadyList+0xcc>)
 801a916:	681b      	ldr	r3, [r3, #0]
 801a918:	2b00      	cmp	r3, #0
 801a91a:	d00e      	beq.n	801a93a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801a91c:	4b0a      	ldr	r3, [pc, #40]	; (801a948 <prvAddNewTaskToReadyList+0xc8>)
 801a91e:	681b      	ldr	r3, [r3, #0]
 801a920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a922:	687b      	ldr	r3, [r7, #4]
 801a924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a926:	429a      	cmp	r2, r3
 801a928:	d207      	bcs.n	801a93a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801a92a:	4b0c      	ldr	r3, [pc, #48]	; (801a95c <prvAddNewTaskToReadyList+0xdc>)
 801a92c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a930:	601a      	str	r2, [r3, #0]
 801a932:	f3bf 8f4f 	dsb	sy
 801a936:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a93a:	bf00      	nop
 801a93c:	3708      	adds	r7, #8
 801a93e:	46bd      	mov	sp, r7
 801a940:	bd80      	pop	{r7, pc}
 801a942:	bf00      	nop
 801a944:	20001038 	.word	0x20001038
 801a948:	20000b64 	.word	0x20000b64
 801a94c:	20001044 	.word	0x20001044
 801a950:	20001054 	.word	0x20001054
 801a954:	20001040 	.word	0x20001040
 801a958:	20000b68 	.word	0x20000b68
 801a95c:	e000ed04 	.word	0xe000ed04

0801a960 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801a960:	b580      	push	{r7, lr}
 801a962:	b084      	sub	sp, #16
 801a964:	af00      	add	r7, sp, #0
 801a966:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801a968:	2300      	movs	r3, #0
 801a96a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	2b00      	cmp	r3, #0
 801a970:	d016      	beq.n	801a9a0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801a972:	4b13      	ldr	r3, [pc, #76]	; (801a9c0 <vTaskDelay+0x60>)
 801a974:	681b      	ldr	r3, [r3, #0]
 801a976:	2b00      	cmp	r3, #0
 801a978:	d009      	beq.n	801a98e <vTaskDelay+0x2e>
 801a97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a97e:	f383 8811 	msr	BASEPRI, r3
 801a982:	f3bf 8f6f 	isb	sy
 801a986:	f3bf 8f4f 	dsb	sy
 801a98a:	60bb      	str	r3, [r7, #8]
 801a98c:	e7fe      	b.n	801a98c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 801a98e:	f000 f87f 	bl	801aa90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801a992:	2100      	movs	r1, #0
 801a994:	6878      	ldr	r0, [r7, #4]
 801a996:	f000 fdd3 	bl	801b540 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801a99a:	f000 f887 	bl	801aaac <xTaskResumeAll>
 801a99e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801a9a0:	68fb      	ldr	r3, [r7, #12]
 801a9a2:	2b00      	cmp	r3, #0
 801a9a4:	d107      	bne.n	801a9b6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 801a9a6:	4b07      	ldr	r3, [pc, #28]	; (801a9c4 <vTaskDelay+0x64>)
 801a9a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a9ac:	601a      	str	r2, [r3, #0]
 801a9ae:	f3bf 8f4f 	dsb	sy
 801a9b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801a9b6:	bf00      	nop
 801a9b8:	3710      	adds	r7, #16
 801a9ba:	46bd      	mov	sp, r7
 801a9bc:	bd80      	pop	{r7, pc}
 801a9be:	bf00      	nop
 801a9c0:	20001060 	.word	0x20001060
 801a9c4:	e000ed04 	.word	0xe000ed04

0801a9c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801a9c8:	b580      	push	{r7, lr}
 801a9ca:	b08a      	sub	sp, #40	; 0x28
 801a9cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801a9ce:	2300      	movs	r3, #0
 801a9d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801a9d2:	2300      	movs	r3, #0
 801a9d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801a9d6:	463a      	mov	r2, r7
 801a9d8:	1d39      	adds	r1, r7, #4
 801a9da:	f107 0308 	add.w	r3, r7, #8
 801a9de:	4618      	mov	r0, r3
 801a9e0:	f7fe fd4a 	bl	8019478 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801a9e4:	6839      	ldr	r1, [r7, #0]
 801a9e6:	687b      	ldr	r3, [r7, #4]
 801a9e8:	68ba      	ldr	r2, [r7, #8]
 801a9ea:	9202      	str	r2, [sp, #8]
 801a9ec:	9301      	str	r3, [sp, #4]
 801a9ee:	2300      	movs	r3, #0
 801a9f0:	9300      	str	r3, [sp, #0]
 801a9f2:	2300      	movs	r3, #0
 801a9f4:	460a      	mov	r2, r1
 801a9f6:	4920      	ldr	r1, [pc, #128]	; (801aa78 <vTaskStartScheduler+0xb0>)
 801a9f8:	4820      	ldr	r0, [pc, #128]	; (801aa7c <vTaskStartScheduler+0xb4>)
 801a9fa:	f7ff fe13 	bl	801a624 <xTaskCreateStatic>
 801a9fe:	4602      	mov	r2, r0
 801aa00:	4b1f      	ldr	r3, [pc, #124]	; (801aa80 <vTaskStartScheduler+0xb8>)
 801aa02:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801aa04:	4b1e      	ldr	r3, [pc, #120]	; (801aa80 <vTaskStartScheduler+0xb8>)
 801aa06:	681b      	ldr	r3, [r3, #0]
 801aa08:	2b00      	cmp	r3, #0
 801aa0a:	d002      	beq.n	801aa12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801aa0c:	2301      	movs	r3, #1
 801aa0e:	617b      	str	r3, [r7, #20]
 801aa10:	e001      	b.n	801aa16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801aa12:	2300      	movs	r3, #0
 801aa14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801aa16:	697b      	ldr	r3, [r7, #20]
 801aa18:	2b01      	cmp	r3, #1
 801aa1a:	d102      	bne.n	801aa22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801aa1c:	f000 fde4 	bl	801b5e8 <xTimerCreateTimerTask>
 801aa20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801aa22:	697b      	ldr	r3, [r7, #20]
 801aa24:	2b01      	cmp	r3, #1
 801aa26:	d115      	bne.n	801aa54 <vTaskStartScheduler+0x8c>
 801aa28:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aa2c:	f383 8811 	msr	BASEPRI, r3
 801aa30:	f3bf 8f6f 	isb	sy
 801aa34:	f3bf 8f4f 	dsb	sy
 801aa38:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801aa3a:	4b12      	ldr	r3, [pc, #72]	; (801aa84 <vTaskStartScheduler+0xbc>)
 801aa3c:	f04f 32ff 	mov.w	r2, #4294967295
 801aa40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801aa42:	4b11      	ldr	r3, [pc, #68]	; (801aa88 <vTaskStartScheduler+0xc0>)
 801aa44:	2201      	movs	r2, #1
 801aa46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801aa48:	4b10      	ldr	r3, [pc, #64]	; (801aa8c <vTaskStartScheduler+0xc4>)
 801aa4a:	2200      	movs	r2, #0
 801aa4c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801aa4e:	f001 f997 	bl	801bd80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801aa52:	e00d      	b.n	801aa70 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801aa54:	697b      	ldr	r3, [r7, #20]
 801aa56:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aa5a:	d109      	bne.n	801aa70 <vTaskStartScheduler+0xa8>
 801aa5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aa60:	f383 8811 	msr	BASEPRI, r3
 801aa64:	f3bf 8f6f 	isb	sy
 801aa68:	f3bf 8f4f 	dsb	sy
 801aa6c:	60fb      	str	r3, [r7, #12]
 801aa6e:	e7fe      	b.n	801aa6e <vTaskStartScheduler+0xa6>
}
 801aa70:	bf00      	nop
 801aa72:	3718      	adds	r7, #24
 801aa74:	46bd      	mov	sp, r7
 801aa76:	bd80      	pop	{r7, pc}
 801aa78:	0801fb18 	.word	0x0801fb18
 801aa7c:	0801b091 	.word	0x0801b091
 801aa80:	2000105c 	.word	0x2000105c
 801aa84:	20001058 	.word	0x20001058
 801aa88:	20001044 	.word	0x20001044
 801aa8c:	2000103c 	.word	0x2000103c

0801aa90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801aa90:	b480      	push	{r7}
 801aa92:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801aa94:	4b04      	ldr	r3, [pc, #16]	; (801aaa8 <vTaskSuspendAll+0x18>)
 801aa96:	681b      	ldr	r3, [r3, #0]
 801aa98:	3301      	adds	r3, #1
 801aa9a:	4a03      	ldr	r2, [pc, #12]	; (801aaa8 <vTaskSuspendAll+0x18>)
 801aa9c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801aa9e:	bf00      	nop
 801aaa0:	46bd      	mov	sp, r7
 801aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaa6:	4770      	bx	lr
 801aaa8:	20001060 	.word	0x20001060

0801aaac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801aaac:	b580      	push	{r7, lr}
 801aaae:	b084      	sub	sp, #16
 801aab0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801aab2:	2300      	movs	r3, #0
 801aab4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801aab6:	2300      	movs	r3, #0
 801aab8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801aaba:	4b41      	ldr	r3, [pc, #260]	; (801abc0 <xTaskResumeAll+0x114>)
 801aabc:	681b      	ldr	r3, [r3, #0]
 801aabe:	2b00      	cmp	r3, #0
 801aac0:	d109      	bne.n	801aad6 <xTaskResumeAll+0x2a>
 801aac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aac6:	f383 8811 	msr	BASEPRI, r3
 801aaca:	f3bf 8f6f 	isb	sy
 801aace:	f3bf 8f4f 	dsb	sy
 801aad2:	603b      	str	r3, [r7, #0]
 801aad4:	e7fe      	b.n	801aad4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801aad6:	f001 f9f1 	bl	801bebc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801aada:	4b39      	ldr	r3, [pc, #228]	; (801abc0 <xTaskResumeAll+0x114>)
 801aadc:	681b      	ldr	r3, [r3, #0]
 801aade:	3b01      	subs	r3, #1
 801aae0:	4a37      	ldr	r2, [pc, #220]	; (801abc0 <xTaskResumeAll+0x114>)
 801aae2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801aae4:	4b36      	ldr	r3, [pc, #216]	; (801abc0 <xTaskResumeAll+0x114>)
 801aae6:	681b      	ldr	r3, [r3, #0]
 801aae8:	2b00      	cmp	r3, #0
 801aaea:	d162      	bne.n	801abb2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801aaec:	4b35      	ldr	r3, [pc, #212]	; (801abc4 <xTaskResumeAll+0x118>)
 801aaee:	681b      	ldr	r3, [r3, #0]
 801aaf0:	2b00      	cmp	r3, #0
 801aaf2:	d05e      	beq.n	801abb2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801aaf4:	e02f      	b.n	801ab56 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801aaf6:	4b34      	ldr	r3, [pc, #208]	; (801abc8 <xTaskResumeAll+0x11c>)
 801aaf8:	68db      	ldr	r3, [r3, #12]
 801aafa:	68db      	ldr	r3, [r3, #12]
 801aafc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801aafe:	68fb      	ldr	r3, [r7, #12]
 801ab00:	3318      	adds	r3, #24
 801ab02:	4618      	mov	r0, r3
 801ab04:	f7fe fd76 	bl	80195f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801ab08:	68fb      	ldr	r3, [r7, #12]
 801ab0a:	3304      	adds	r3, #4
 801ab0c:	4618      	mov	r0, r3
 801ab0e:	f7fe fd71 	bl	80195f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801ab12:	68fb      	ldr	r3, [r7, #12]
 801ab14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ab16:	4b2d      	ldr	r3, [pc, #180]	; (801abcc <xTaskResumeAll+0x120>)
 801ab18:	681b      	ldr	r3, [r3, #0]
 801ab1a:	429a      	cmp	r2, r3
 801ab1c:	d903      	bls.n	801ab26 <xTaskResumeAll+0x7a>
 801ab1e:	68fb      	ldr	r3, [r7, #12]
 801ab20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab22:	4a2a      	ldr	r2, [pc, #168]	; (801abcc <xTaskResumeAll+0x120>)
 801ab24:	6013      	str	r3, [r2, #0]
 801ab26:	68fb      	ldr	r3, [r7, #12]
 801ab28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ab2a:	4613      	mov	r3, r2
 801ab2c:	009b      	lsls	r3, r3, #2
 801ab2e:	4413      	add	r3, r2
 801ab30:	009b      	lsls	r3, r3, #2
 801ab32:	4a27      	ldr	r2, [pc, #156]	; (801abd0 <xTaskResumeAll+0x124>)
 801ab34:	441a      	add	r2, r3
 801ab36:	68fb      	ldr	r3, [r7, #12]
 801ab38:	3304      	adds	r3, #4
 801ab3a:	4619      	mov	r1, r3
 801ab3c:	4610      	mov	r0, r2
 801ab3e:	f7fe fcfc 	bl	801953a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801ab42:	68fb      	ldr	r3, [r7, #12]
 801ab44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ab46:	4b23      	ldr	r3, [pc, #140]	; (801abd4 <xTaskResumeAll+0x128>)
 801ab48:	681b      	ldr	r3, [r3, #0]
 801ab4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab4c:	429a      	cmp	r2, r3
 801ab4e:	d302      	bcc.n	801ab56 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 801ab50:	4b21      	ldr	r3, [pc, #132]	; (801abd8 <xTaskResumeAll+0x12c>)
 801ab52:	2201      	movs	r2, #1
 801ab54:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801ab56:	4b1c      	ldr	r3, [pc, #112]	; (801abc8 <xTaskResumeAll+0x11c>)
 801ab58:	681b      	ldr	r3, [r3, #0]
 801ab5a:	2b00      	cmp	r3, #0
 801ab5c:	d1cb      	bne.n	801aaf6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801ab5e:	68fb      	ldr	r3, [r7, #12]
 801ab60:	2b00      	cmp	r3, #0
 801ab62:	d001      	beq.n	801ab68 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801ab64:	f000 fb46 	bl	801b1f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801ab68:	4b1c      	ldr	r3, [pc, #112]	; (801abdc <xTaskResumeAll+0x130>)
 801ab6a:	681b      	ldr	r3, [r3, #0]
 801ab6c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801ab6e:	687b      	ldr	r3, [r7, #4]
 801ab70:	2b00      	cmp	r3, #0
 801ab72:	d010      	beq.n	801ab96 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801ab74:	f000 f846 	bl	801ac04 <xTaskIncrementTick>
 801ab78:	4603      	mov	r3, r0
 801ab7a:	2b00      	cmp	r3, #0
 801ab7c:	d002      	beq.n	801ab84 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801ab7e:	4b16      	ldr	r3, [pc, #88]	; (801abd8 <xTaskResumeAll+0x12c>)
 801ab80:	2201      	movs	r2, #1
 801ab82:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	3b01      	subs	r3, #1
 801ab88:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	2b00      	cmp	r3, #0
 801ab8e:	d1f1      	bne.n	801ab74 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 801ab90:	4b12      	ldr	r3, [pc, #72]	; (801abdc <xTaskResumeAll+0x130>)
 801ab92:	2200      	movs	r2, #0
 801ab94:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801ab96:	4b10      	ldr	r3, [pc, #64]	; (801abd8 <xTaskResumeAll+0x12c>)
 801ab98:	681b      	ldr	r3, [r3, #0]
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	d009      	beq.n	801abb2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801ab9e:	2301      	movs	r3, #1
 801aba0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801aba2:	4b0f      	ldr	r3, [pc, #60]	; (801abe0 <xTaskResumeAll+0x134>)
 801aba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801aba8:	601a      	str	r2, [r3, #0]
 801abaa:	f3bf 8f4f 	dsb	sy
 801abae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801abb2:	f001 f9b1 	bl	801bf18 <vPortExitCritical>

	return xAlreadyYielded;
 801abb6:	68bb      	ldr	r3, [r7, #8]
}
 801abb8:	4618      	mov	r0, r3
 801abba:	3710      	adds	r7, #16
 801abbc:	46bd      	mov	sp, r7
 801abbe:	bd80      	pop	{r7, pc}
 801abc0:	20001060 	.word	0x20001060
 801abc4:	20001038 	.word	0x20001038
 801abc8:	20000ff8 	.word	0x20000ff8
 801abcc:	20001040 	.word	0x20001040
 801abd0:	20000b68 	.word	0x20000b68
 801abd4:	20000b64 	.word	0x20000b64
 801abd8:	2000104c 	.word	0x2000104c
 801abdc:	20001048 	.word	0x20001048
 801abe0:	e000ed04 	.word	0xe000ed04

0801abe4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801abe4:	b480      	push	{r7}
 801abe6:	b083      	sub	sp, #12
 801abe8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801abea:	4b05      	ldr	r3, [pc, #20]	; (801ac00 <xTaskGetTickCount+0x1c>)
 801abec:	681b      	ldr	r3, [r3, #0]
 801abee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801abf0:	687b      	ldr	r3, [r7, #4]
}
 801abf2:	4618      	mov	r0, r3
 801abf4:	370c      	adds	r7, #12
 801abf6:	46bd      	mov	sp, r7
 801abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abfc:	4770      	bx	lr
 801abfe:	bf00      	nop
 801ac00:	2000103c 	.word	0x2000103c

0801ac04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801ac04:	b580      	push	{r7, lr}
 801ac06:	b086      	sub	sp, #24
 801ac08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801ac0a:	2300      	movs	r3, #0
 801ac0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801ac0e:	4b4e      	ldr	r3, [pc, #312]	; (801ad48 <xTaskIncrementTick+0x144>)
 801ac10:	681b      	ldr	r3, [r3, #0]
 801ac12:	2b00      	cmp	r3, #0
 801ac14:	f040 8088 	bne.w	801ad28 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801ac18:	4b4c      	ldr	r3, [pc, #304]	; (801ad4c <xTaskIncrementTick+0x148>)
 801ac1a:	681b      	ldr	r3, [r3, #0]
 801ac1c:	3301      	adds	r3, #1
 801ac1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801ac20:	4a4a      	ldr	r2, [pc, #296]	; (801ad4c <xTaskIncrementTick+0x148>)
 801ac22:	693b      	ldr	r3, [r7, #16]
 801ac24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801ac26:	693b      	ldr	r3, [r7, #16]
 801ac28:	2b00      	cmp	r3, #0
 801ac2a:	d11f      	bne.n	801ac6c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 801ac2c:	4b48      	ldr	r3, [pc, #288]	; (801ad50 <xTaskIncrementTick+0x14c>)
 801ac2e:	681b      	ldr	r3, [r3, #0]
 801ac30:	681b      	ldr	r3, [r3, #0]
 801ac32:	2b00      	cmp	r3, #0
 801ac34:	d009      	beq.n	801ac4a <xTaskIncrementTick+0x46>
 801ac36:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac3a:	f383 8811 	msr	BASEPRI, r3
 801ac3e:	f3bf 8f6f 	isb	sy
 801ac42:	f3bf 8f4f 	dsb	sy
 801ac46:	603b      	str	r3, [r7, #0]
 801ac48:	e7fe      	b.n	801ac48 <xTaskIncrementTick+0x44>
 801ac4a:	4b41      	ldr	r3, [pc, #260]	; (801ad50 <xTaskIncrementTick+0x14c>)
 801ac4c:	681b      	ldr	r3, [r3, #0]
 801ac4e:	60fb      	str	r3, [r7, #12]
 801ac50:	4b40      	ldr	r3, [pc, #256]	; (801ad54 <xTaskIncrementTick+0x150>)
 801ac52:	681b      	ldr	r3, [r3, #0]
 801ac54:	4a3e      	ldr	r2, [pc, #248]	; (801ad50 <xTaskIncrementTick+0x14c>)
 801ac56:	6013      	str	r3, [r2, #0]
 801ac58:	4a3e      	ldr	r2, [pc, #248]	; (801ad54 <xTaskIncrementTick+0x150>)
 801ac5a:	68fb      	ldr	r3, [r7, #12]
 801ac5c:	6013      	str	r3, [r2, #0]
 801ac5e:	4b3e      	ldr	r3, [pc, #248]	; (801ad58 <xTaskIncrementTick+0x154>)
 801ac60:	681b      	ldr	r3, [r3, #0]
 801ac62:	3301      	adds	r3, #1
 801ac64:	4a3c      	ldr	r2, [pc, #240]	; (801ad58 <xTaskIncrementTick+0x154>)
 801ac66:	6013      	str	r3, [r2, #0]
 801ac68:	f000 fac4 	bl	801b1f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801ac6c:	4b3b      	ldr	r3, [pc, #236]	; (801ad5c <xTaskIncrementTick+0x158>)
 801ac6e:	681b      	ldr	r3, [r3, #0]
 801ac70:	693a      	ldr	r2, [r7, #16]
 801ac72:	429a      	cmp	r2, r3
 801ac74:	d349      	bcc.n	801ad0a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801ac76:	4b36      	ldr	r3, [pc, #216]	; (801ad50 <xTaskIncrementTick+0x14c>)
 801ac78:	681b      	ldr	r3, [r3, #0]
 801ac7a:	681b      	ldr	r3, [r3, #0]
 801ac7c:	2b00      	cmp	r3, #0
 801ac7e:	d104      	bne.n	801ac8a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ac80:	4b36      	ldr	r3, [pc, #216]	; (801ad5c <xTaskIncrementTick+0x158>)
 801ac82:	f04f 32ff 	mov.w	r2, #4294967295
 801ac86:	601a      	str	r2, [r3, #0]
					break;
 801ac88:	e03f      	b.n	801ad0a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ac8a:	4b31      	ldr	r3, [pc, #196]	; (801ad50 <xTaskIncrementTick+0x14c>)
 801ac8c:	681b      	ldr	r3, [r3, #0]
 801ac8e:	68db      	ldr	r3, [r3, #12]
 801ac90:	68db      	ldr	r3, [r3, #12]
 801ac92:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801ac94:	68bb      	ldr	r3, [r7, #8]
 801ac96:	685b      	ldr	r3, [r3, #4]
 801ac98:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801ac9a:	693a      	ldr	r2, [r7, #16]
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	429a      	cmp	r2, r3
 801aca0:	d203      	bcs.n	801acaa <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801aca2:	4a2e      	ldr	r2, [pc, #184]	; (801ad5c <xTaskIncrementTick+0x158>)
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801aca8:	e02f      	b.n	801ad0a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801acaa:	68bb      	ldr	r3, [r7, #8]
 801acac:	3304      	adds	r3, #4
 801acae:	4618      	mov	r0, r3
 801acb0:	f7fe fca0 	bl	80195f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801acb4:	68bb      	ldr	r3, [r7, #8]
 801acb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801acb8:	2b00      	cmp	r3, #0
 801acba:	d004      	beq.n	801acc6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801acbc:	68bb      	ldr	r3, [r7, #8]
 801acbe:	3318      	adds	r3, #24
 801acc0:	4618      	mov	r0, r3
 801acc2:	f7fe fc97 	bl	80195f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801acc6:	68bb      	ldr	r3, [r7, #8]
 801acc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801acca:	4b25      	ldr	r3, [pc, #148]	; (801ad60 <xTaskIncrementTick+0x15c>)
 801accc:	681b      	ldr	r3, [r3, #0]
 801acce:	429a      	cmp	r2, r3
 801acd0:	d903      	bls.n	801acda <xTaskIncrementTick+0xd6>
 801acd2:	68bb      	ldr	r3, [r7, #8]
 801acd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801acd6:	4a22      	ldr	r2, [pc, #136]	; (801ad60 <xTaskIncrementTick+0x15c>)
 801acd8:	6013      	str	r3, [r2, #0]
 801acda:	68bb      	ldr	r3, [r7, #8]
 801acdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801acde:	4613      	mov	r3, r2
 801ace0:	009b      	lsls	r3, r3, #2
 801ace2:	4413      	add	r3, r2
 801ace4:	009b      	lsls	r3, r3, #2
 801ace6:	4a1f      	ldr	r2, [pc, #124]	; (801ad64 <xTaskIncrementTick+0x160>)
 801ace8:	441a      	add	r2, r3
 801acea:	68bb      	ldr	r3, [r7, #8]
 801acec:	3304      	adds	r3, #4
 801acee:	4619      	mov	r1, r3
 801acf0:	4610      	mov	r0, r2
 801acf2:	f7fe fc22 	bl	801953a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801acf6:	68bb      	ldr	r3, [r7, #8]
 801acf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801acfa:	4b1b      	ldr	r3, [pc, #108]	; (801ad68 <xTaskIncrementTick+0x164>)
 801acfc:	681b      	ldr	r3, [r3, #0]
 801acfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ad00:	429a      	cmp	r2, r3
 801ad02:	d3b8      	bcc.n	801ac76 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 801ad04:	2301      	movs	r3, #1
 801ad06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801ad08:	e7b5      	b.n	801ac76 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801ad0a:	4b17      	ldr	r3, [pc, #92]	; (801ad68 <xTaskIncrementTick+0x164>)
 801ad0c:	681b      	ldr	r3, [r3, #0]
 801ad0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ad10:	4914      	ldr	r1, [pc, #80]	; (801ad64 <xTaskIncrementTick+0x160>)
 801ad12:	4613      	mov	r3, r2
 801ad14:	009b      	lsls	r3, r3, #2
 801ad16:	4413      	add	r3, r2
 801ad18:	009b      	lsls	r3, r3, #2
 801ad1a:	440b      	add	r3, r1
 801ad1c:	681b      	ldr	r3, [r3, #0]
 801ad1e:	2b01      	cmp	r3, #1
 801ad20:	d907      	bls.n	801ad32 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 801ad22:	2301      	movs	r3, #1
 801ad24:	617b      	str	r3, [r7, #20]
 801ad26:	e004      	b.n	801ad32 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801ad28:	4b10      	ldr	r3, [pc, #64]	; (801ad6c <xTaskIncrementTick+0x168>)
 801ad2a:	681b      	ldr	r3, [r3, #0]
 801ad2c:	3301      	adds	r3, #1
 801ad2e:	4a0f      	ldr	r2, [pc, #60]	; (801ad6c <xTaskIncrementTick+0x168>)
 801ad30:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801ad32:	4b0f      	ldr	r3, [pc, #60]	; (801ad70 <xTaskIncrementTick+0x16c>)
 801ad34:	681b      	ldr	r3, [r3, #0]
 801ad36:	2b00      	cmp	r3, #0
 801ad38:	d001      	beq.n	801ad3e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 801ad3a:	2301      	movs	r3, #1
 801ad3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801ad3e:	697b      	ldr	r3, [r7, #20]
}
 801ad40:	4618      	mov	r0, r3
 801ad42:	3718      	adds	r7, #24
 801ad44:	46bd      	mov	sp, r7
 801ad46:	bd80      	pop	{r7, pc}
 801ad48:	20001060 	.word	0x20001060
 801ad4c:	2000103c 	.word	0x2000103c
 801ad50:	20000ff0 	.word	0x20000ff0
 801ad54:	20000ff4 	.word	0x20000ff4
 801ad58:	20001050 	.word	0x20001050
 801ad5c:	20001058 	.word	0x20001058
 801ad60:	20001040 	.word	0x20001040
 801ad64:	20000b68 	.word	0x20000b68
 801ad68:	20000b64 	.word	0x20000b64
 801ad6c:	20001048 	.word	0x20001048
 801ad70:	2000104c 	.word	0x2000104c

0801ad74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801ad74:	b480      	push	{r7}
 801ad76:	b085      	sub	sp, #20
 801ad78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801ad7a:	4b27      	ldr	r3, [pc, #156]	; (801ae18 <vTaskSwitchContext+0xa4>)
 801ad7c:	681b      	ldr	r3, [r3, #0]
 801ad7e:	2b00      	cmp	r3, #0
 801ad80:	d003      	beq.n	801ad8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801ad82:	4b26      	ldr	r3, [pc, #152]	; (801ae1c <vTaskSwitchContext+0xa8>)
 801ad84:	2201      	movs	r2, #1
 801ad86:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801ad88:	e040      	b.n	801ae0c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 801ad8a:	4b24      	ldr	r3, [pc, #144]	; (801ae1c <vTaskSwitchContext+0xa8>)
 801ad8c:	2200      	movs	r2, #0
 801ad8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ad90:	4b23      	ldr	r3, [pc, #140]	; (801ae20 <vTaskSwitchContext+0xac>)
 801ad92:	681b      	ldr	r3, [r3, #0]
 801ad94:	60fb      	str	r3, [r7, #12]
 801ad96:	e00f      	b.n	801adb8 <vTaskSwitchContext+0x44>
 801ad98:	68fb      	ldr	r3, [r7, #12]
 801ad9a:	2b00      	cmp	r3, #0
 801ad9c:	d109      	bne.n	801adb2 <vTaskSwitchContext+0x3e>
 801ad9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ada2:	f383 8811 	msr	BASEPRI, r3
 801ada6:	f3bf 8f6f 	isb	sy
 801adaa:	f3bf 8f4f 	dsb	sy
 801adae:	607b      	str	r3, [r7, #4]
 801adb0:	e7fe      	b.n	801adb0 <vTaskSwitchContext+0x3c>
 801adb2:	68fb      	ldr	r3, [r7, #12]
 801adb4:	3b01      	subs	r3, #1
 801adb6:	60fb      	str	r3, [r7, #12]
 801adb8:	491a      	ldr	r1, [pc, #104]	; (801ae24 <vTaskSwitchContext+0xb0>)
 801adba:	68fa      	ldr	r2, [r7, #12]
 801adbc:	4613      	mov	r3, r2
 801adbe:	009b      	lsls	r3, r3, #2
 801adc0:	4413      	add	r3, r2
 801adc2:	009b      	lsls	r3, r3, #2
 801adc4:	440b      	add	r3, r1
 801adc6:	681b      	ldr	r3, [r3, #0]
 801adc8:	2b00      	cmp	r3, #0
 801adca:	d0e5      	beq.n	801ad98 <vTaskSwitchContext+0x24>
 801adcc:	68fa      	ldr	r2, [r7, #12]
 801adce:	4613      	mov	r3, r2
 801add0:	009b      	lsls	r3, r3, #2
 801add2:	4413      	add	r3, r2
 801add4:	009b      	lsls	r3, r3, #2
 801add6:	4a13      	ldr	r2, [pc, #76]	; (801ae24 <vTaskSwitchContext+0xb0>)
 801add8:	4413      	add	r3, r2
 801adda:	60bb      	str	r3, [r7, #8]
 801addc:	68bb      	ldr	r3, [r7, #8]
 801adde:	685b      	ldr	r3, [r3, #4]
 801ade0:	685a      	ldr	r2, [r3, #4]
 801ade2:	68bb      	ldr	r3, [r7, #8]
 801ade4:	605a      	str	r2, [r3, #4]
 801ade6:	68bb      	ldr	r3, [r7, #8]
 801ade8:	685a      	ldr	r2, [r3, #4]
 801adea:	68bb      	ldr	r3, [r7, #8]
 801adec:	3308      	adds	r3, #8
 801adee:	429a      	cmp	r2, r3
 801adf0:	d104      	bne.n	801adfc <vTaskSwitchContext+0x88>
 801adf2:	68bb      	ldr	r3, [r7, #8]
 801adf4:	685b      	ldr	r3, [r3, #4]
 801adf6:	685a      	ldr	r2, [r3, #4]
 801adf8:	68bb      	ldr	r3, [r7, #8]
 801adfa:	605a      	str	r2, [r3, #4]
 801adfc:	68bb      	ldr	r3, [r7, #8]
 801adfe:	685b      	ldr	r3, [r3, #4]
 801ae00:	68db      	ldr	r3, [r3, #12]
 801ae02:	4a09      	ldr	r2, [pc, #36]	; (801ae28 <vTaskSwitchContext+0xb4>)
 801ae04:	6013      	str	r3, [r2, #0]
 801ae06:	4a06      	ldr	r2, [pc, #24]	; (801ae20 <vTaskSwitchContext+0xac>)
 801ae08:	68fb      	ldr	r3, [r7, #12]
 801ae0a:	6013      	str	r3, [r2, #0]
}
 801ae0c:	bf00      	nop
 801ae0e:	3714      	adds	r7, #20
 801ae10:	46bd      	mov	sp, r7
 801ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae16:	4770      	bx	lr
 801ae18:	20001060 	.word	0x20001060
 801ae1c:	2000104c 	.word	0x2000104c
 801ae20:	20001040 	.word	0x20001040
 801ae24:	20000b68 	.word	0x20000b68
 801ae28:	20000b64 	.word	0x20000b64

0801ae2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801ae2c:	b580      	push	{r7, lr}
 801ae2e:	b084      	sub	sp, #16
 801ae30:	af00      	add	r7, sp, #0
 801ae32:	6078      	str	r0, [r7, #4]
 801ae34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801ae36:	687b      	ldr	r3, [r7, #4]
 801ae38:	2b00      	cmp	r3, #0
 801ae3a:	d109      	bne.n	801ae50 <vTaskPlaceOnEventList+0x24>
 801ae3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ae40:	f383 8811 	msr	BASEPRI, r3
 801ae44:	f3bf 8f6f 	isb	sy
 801ae48:	f3bf 8f4f 	dsb	sy
 801ae4c:	60fb      	str	r3, [r7, #12]
 801ae4e:	e7fe      	b.n	801ae4e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801ae50:	4b07      	ldr	r3, [pc, #28]	; (801ae70 <vTaskPlaceOnEventList+0x44>)
 801ae52:	681b      	ldr	r3, [r3, #0]
 801ae54:	3318      	adds	r3, #24
 801ae56:	4619      	mov	r1, r3
 801ae58:	6878      	ldr	r0, [r7, #4]
 801ae5a:	f7fe fb92 	bl	8019582 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801ae5e:	2101      	movs	r1, #1
 801ae60:	6838      	ldr	r0, [r7, #0]
 801ae62:	f000 fb6d 	bl	801b540 <prvAddCurrentTaskToDelayedList>
}
 801ae66:	bf00      	nop
 801ae68:	3710      	adds	r7, #16
 801ae6a:	46bd      	mov	sp, r7
 801ae6c:	bd80      	pop	{r7, pc}
 801ae6e:	bf00      	nop
 801ae70:	20000b64 	.word	0x20000b64

0801ae74 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801ae74:	b580      	push	{r7, lr}
 801ae76:	b086      	sub	sp, #24
 801ae78:	af00      	add	r7, sp, #0
 801ae7a:	60f8      	str	r0, [r7, #12]
 801ae7c:	60b9      	str	r1, [r7, #8]
 801ae7e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801ae80:	68fb      	ldr	r3, [r7, #12]
 801ae82:	2b00      	cmp	r3, #0
 801ae84:	d109      	bne.n	801ae9a <vTaskPlaceOnEventListRestricted+0x26>
 801ae86:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ae8a:	f383 8811 	msr	BASEPRI, r3
 801ae8e:	f3bf 8f6f 	isb	sy
 801ae92:	f3bf 8f4f 	dsb	sy
 801ae96:	617b      	str	r3, [r7, #20]
 801ae98:	e7fe      	b.n	801ae98 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801ae9a:	4b0a      	ldr	r3, [pc, #40]	; (801aec4 <vTaskPlaceOnEventListRestricted+0x50>)
 801ae9c:	681b      	ldr	r3, [r3, #0]
 801ae9e:	3318      	adds	r3, #24
 801aea0:	4619      	mov	r1, r3
 801aea2:	68f8      	ldr	r0, [r7, #12]
 801aea4:	f7fe fb49 	bl	801953a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	2b00      	cmp	r3, #0
 801aeac:	d002      	beq.n	801aeb4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 801aeae:	f04f 33ff 	mov.w	r3, #4294967295
 801aeb2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801aeb4:	6879      	ldr	r1, [r7, #4]
 801aeb6:	68b8      	ldr	r0, [r7, #8]
 801aeb8:	f000 fb42 	bl	801b540 <prvAddCurrentTaskToDelayedList>
	}
 801aebc:	bf00      	nop
 801aebe:	3718      	adds	r7, #24
 801aec0:	46bd      	mov	sp, r7
 801aec2:	bd80      	pop	{r7, pc}
 801aec4:	20000b64 	.word	0x20000b64

0801aec8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801aec8:	b580      	push	{r7, lr}
 801aeca:	b086      	sub	sp, #24
 801aecc:	af00      	add	r7, sp, #0
 801aece:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	68db      	ldr	r3, [r3, #12]
 801aed4:	68db      	ldr	r3, [r3, #12]
 801aed6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801aed8:	693b      	ldr	r3, [r7, #16]
 801aeda:	2b00      	cmp	r3, #0
 801aedc:	d109      	bne.n	801aef2 <xTaskRemoveFromEventList+0x2a>
 801aede:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aee2:	f383 8811 	msr	BASEPRI, r3
 801aee6:	f3bf 8f6f 	isb	sy
 801aeea:	f3bf 8f4f 	dsb	sy
 801aeee:	60fb      	str	r3, [r7, #12]
 801aef0:	e7fe      	b.n	801aef0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801aef2:	693b      	ldr	r3, [r7, #16]
 801aef4:	3318      	adds	r3, #24
 801aef6:	4618      	mov	r0, r3
 801aef8:	f7fe fb7c 	bl	80195f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801aefc:	4b1d      	ldr	r3, [pc, #116]	; (801af74 <xTaskRemoveFromEventList+0xac>)
 801aefe:	681b      	ldr	r3, [r3, #0]
 801af00:	2b00      	cmp	r3, #0
 801af02:	d11d      	bne.n	801af40 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801af04:	693b      	ldr	r3, [r7, #16]
 801af06:	3304      	adds	r3, #4
 801af08:	4618      	mov	r0, r3
 801af0a:	f7fe fb73 	bl	80195f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801af0e:	693b      	ldr	r3, [r7, #16]
 801af10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801af12:	4b19      	ldr	r3, [pc, #100]	; (801af78 <xTaskRemoveFromEventList+0xb0>)
 801af14:	681b      	ldr	r3, [r3, #0]
 801af16:	429a      	cmp	r2, r3
 801af18:	d903      	bls.n	801af22 <xTaskRemoveFromEventList+0x5a>
 801af1a:	693b      	ldr	r3, [r7, #16]
 801af1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801af1e:	4a16      	ldr	r2, [pc, #88]	; (801af78 <xTaskRemoveFromEventList+0xb0>)
 801af20:	6013      	str	r3, [r2, #0]
 801af22:	693b      	ldr	r3, [r7, #16]
 801af24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801af26:	4613      	mov	r3, r2
 801af28:	009b      	lsls	r3, r3, #2
 801af2a:	4413      	add	r3, r2
 801af2c:	009b      	lsls	r3, r3, #2
 801af2e:	4a13      	ldr	r2, [pc, #76]	; (801af7c <xTaskRemoveFromEventList+0xb4>)
 801af30:	441a      	add	r2, r3
 801af32:	693b      	ldr	r3, [r7, #16]
 801af34:	3304      	adds	r3, #4
 801af36:	4619      	mov	r1, r3
 801af38:	4610      	mov	r0, r2
 801af3a:	f7fe fafe 	bl	801953a <vListInsertEnd>
 801af3e:	e005      	b.n	801af4c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801af40:	693b      	ldr	r3, [r7, #16]
 801af42:	3318      	adds	r3, #24
 801af44:	4619      	mov	r1, r3
 801af46:	480e      	ldr	r0, [pc, #56]	; (801af80 <xTaskRemoveFromEventList+0xb8>)
 801af48:	f7fe faf7 	bl	801953a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801af4c:	693b      	ldr	r3, [r7, #16]
 801af4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801af50:	4b0c      	ldr	r3, [pc, #48]	; (801af84 <xTaskRemoveFromEventList+0xbc>)
 801af52:	681b      	ldr	r3, [r3, #0]
 801af54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801af56:	429a      	cmp	r2, r3
 801af58:	d905      	bls.n	801af66 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801af5a:	2301      	movs	r3, #1
 801af5c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801af5e:	4b0a      	ldr	r3, [pc, #40]	; (801af88 <xTaskRemoveFromEventList+0xc0>)
 801af60:	2201      	movs	r2, #1
 801af62:	601a      	str	r2, [r3, #0]
 801af64:	e001      	b.n	801af6a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801af66:	2300      	movs	r3, #0
 801af68:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801af6a:	697b      	ldr	r3, [r7, #20]
}
 801af6c:	4618      	mov	r0, r3
 801af6e:	3718      	adds	r7, #24
 801af70:	46bd      	mov	sp, r7
 801af72:	bd80      	pop	{r7, pc}
 801af74:	20001060 	.word	0x20001060
 801af78:	20001040 	.word	0x20001040
 801af7c:	20000b68 	.word	0x20000b68
 801af80:	20000ff8 	.word	0x20000ff8
 801af84:	20000b64 	.word	0x20000b64
 801af88:	2000104c 	.word	0x2000104c

0801af8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801af8c:	b480      	push	{r7}
 801af8e:	b083      	sub	sp, #12
 801af90:	af00      	add	r7, sp, #0
 801af92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801af94:	4b06      	ldr	r3, [pc, #24]	; (801afb0 <vTaskInternalSetTimeOutState+0x24>)
 801af96:	681a      	ldr	r2, [r3, #0]
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801af9c:	4b05      	ldr	r3, [pc, #20]	; (801afb4 <vTaskInternalSetTimeOutState+0x28>)
 801af9e:	681a      	ldr	r2, [r3, #0]
 801afa0:	687b      	ldr	r3, [r7, #4]
 801afa2:	605a      	str	r2, [r3, #4]
}
 801afa4:	bf00      	nop
 801afa6:	370c      	adds	r7, #12
 801afa8:	46bd      	mov	sp, r7
 801afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afae:	4770      	bx	lr
 801afb0:	20001050 	.word	0x20001050
 801afb4:	2000103c 	.word	0x2000103c

0801afb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801afb8:	b580      	push	{r7, lr}
 801afba:	b088      	sub	sp, #32
 801afbc:	af00      	add	r7, sp, #0
 801afbe:	6078      	str	r0, [r7, #4]
 801afc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801afc2:	687b      	ldr	r3, [r7, #4]
 801afc4:	2b00      	cmp	r3, #0
 801afc6:	d109      	bne.n	801afdc <xTaskCheckForTimeOut+0x24>
 801afc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801afcc:	f383 8811 	msr	BASEPRI, r3
 801afd0:	f3bf 8f6f 	isb	sy
 801afd4:	f3bf 8f4f 	dsb	sy
 801afd8:	613b      	str	r3, [r7, #16]
 801afda:	e7fe      	b.n	801afda <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 801afdc:	683b      	ldr	r3, [r7, #0]
 801afde:	2b00      	cmp	r3, #0
 801afe0:	d109      	bne.n	801aff6 <xTaskCheckForTimeOut+0x3e>
 801afe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801afe6:	f383 8811 	msr	BASEPRI, r3
 801afea:	f3bf 8f6f 	isb	sy
 801afee:	f3bf 8f4f 	dsb	sy
 801aff2:	60fb      	str	r3, [r7, #12]
 801aff4:	e7fe      	b.n	801aff4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 801aff6:	f000 ff61 	bl	801bebc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801affa:	4b1d      	ldr	r3, [pc, #116]	; (801b070 <xTaskCheckForTimeOut+0xb8>)
 801affc:	681b      	ldr	r3, [r3, #0]
 801affe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801b000:	687b      	ldr	r3, [r7, #4]
 801b002:	685b      	ldr	r3, [r3, #4]
 801b004:	69ba      	ldr	r2, [r7, #24]
 801b006:	1ad3      	subs	r3, r2, r3
 801b008:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801b00a:	683b      	ldr	r3, [r7, #0]
 801b00c:	681b      	ldr	r3, [r3, #0]
 801b00e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b012:	d102      	bne.n	801b01a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801b014:	2300      	movs	r3, #0
 801b016:	61fb      	str	r3, [r7, #28]
 801b018:	e023      	b.n	801b062 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801b01a:	687b      	ldr	r3, [r7, #4]
 801b01c:	681a      	ldr	r2, [r3, #0]
 801b01e:	4b15      	ldr	r3, [pc, #84]	; (801b074 <xTaskCheckForTimeOut+0xbc>)
 801b020:	681b      	ldr	r3, [r3, #0]
 801b022:	429a      	cmp	r2, r3
 801b024:	d007      	beq.n	801b036 <xTaskCheckForTimeOut+0x7e>
 801b026:	687b      	ldr	r3, [r7, #4]
 801b028:	685b      	ldr	r3, [r3, #4]
 801b02a:	69ba      	ldr	r2, [r7, #24]
 801b02c:	429a      	cmp	r2, r3
 801b02e:	d302      	bcc.n	801b036 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801b030:	2301      	movs	r3, #1
 801b032:	61fb      	str	r3, [r7, #28]
 801b034:	e015      	b.n	801b062 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801b036:	683b      	ldr	r3, [r7, #0]
 801b038:	681b      	ldr	r3, [r3, #0]
 801b03a:	697a      	ldr	r2, [r7, #20]
 801b03c:	429a      	cmp	r2, r3
 801b03e:	d20b      	bcs.n	801b058 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801b040:	683b      	ldr	r3, [r7, #0]
 801b042:	681a      	ldr	r2, [r3, #0]
 801b044:	697b      	ldr	r3, [r7, #20]
 801b046:	1ad2      	subs	r2, r2, r3
 801b048:	683b      	ldr	r3, [r7, #0]
 801b04a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801b04c:	6878      	ldr	r0, [r7, #4]
 801b04e:	f7ff ff9d 	bl	801af8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801b052:	2300      	movs	r3, #0
 801b054:	61fb      	str	r3, [r7, #28]
 801b056:	e004      	b.n	801b062 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 801b058:	683b      	ldr	r3, [r7, #0]
 801b05a:	2200      	movs	r2, #0
 801b05c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801b05e:	2301      	movs	r3, #1
 801b060:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801b062:	f000 ff59 	bl	801bf18 <vPortExitCritical>

	return xReturn;
 801b066:	69fb      	ldr	r3, [r7, #28]
}
 801b068:	4618      	mov	r0, r3
 801b06a:	3720      	adds	r7, #32
 801b06c:	46bd      	mov	sp, r7
 801b06e:	bd80      	pop	{r7, pc}
 801b070:	2000103c 	.word	0x2000103c
 801b074:	20001050 	.word	0x20001050

0801b078 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801b078:	b480      	push	{r7}
 801b07a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801b07c:	4b03      	ldr	r3, [pc, #12]	; (801b08c <vTaskMissedYield+0x14>)
 801b07e:	2201      	movs	r2, #1
 801b080:	601a      	str	r2, [r3, #0]
}
 801b082:	bf00      	nop
 801b084:	46bd      	mov	sp, r7
 801b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b08a:	4770      	bx	lr
 801b08c:	2000104c 	.word	0x2000104c

0801b090 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801b090:	b580      	push	{r7, lr}
 801b092:	b082      	sub	sp, #8
 801b094:	af00      	add	r7, sp, #0
 801b096:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801b098:	f000 f852 	bl	801b140 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801b09c:	4b06      	ldr	r3, [pc, #24]	; (801b0b8 <prvIdleTask+0x28>)
 801b09e:	681b      	ldr	r3, [r3, #0]
 801b0a0:	2b01      	cmp	r3, #1
 801b0a2:	d9f9      	bls.n	801b098 <prvIdleTask+0x8>
			{
				taskYIELD();
 801b0a4:	4b05      	ldr	r3, [pc, #20]	; (801b0bc <prvIdleTask+0x2c>)
 801b0a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b0aa:	601a      	str	r2, [r3, #0]
 801b0ac:	f3bf 8f4f 	dsb	sy
 801b0b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801b0b4:	e7f0      	b.n	801b098 <prvIdleTask+0x8>
 801b0b6:	bf00      	nop
 801b0b8:	20000b68 	.word	0x20000b68
 801b0bc:	e000ed04 	.word	0xe000ed04

0801b0c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801b0c0:	b580      	push	{r7, lr}
 801b0c2:	b082      	sub	sp, #8
 801b0c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801b0c6:	2300      	movs	r3, #0
 801b0c8:	607b      	str	r3, [r7, #4]
 801b0ca:	e00c      	b.n	801b0e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801b0cc:	687a      	ldr	r2, [r7, #4]
 801b0ce:	4613      	mov	r3, r2
 801b0d0:	009b      	lsls	r3, r3, #2
 801b0d2:	4413      	add	r3, r2
 801b0d4:	009b      	lsls	r3, r3, #2
 801b0d6:	4a12      	ldr	r2, [pc, #72]	; (801b120 <prvInitialiseTaskLists+0x60>)
 801b0d8:	4413      	add	r3, r2
 801b0da:	4618      	mov	r0, r3
 801b0dc:	f7fe fa00 	bl	80194e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801b0e0:	687b      	ldr	r3, [r7, #4]
 801b0e2:	3301      	adds	r3, #1
 801b0e4:	607b      	str	r3, [r7, #4]
 801b0e6:	687b      	ldr	r3, [r7, #4]
 801b0e8:	2b37      	cmp	r3, #55	; 0x37
 801b0ea:	d9ef      	bls.n	801b0cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801b0ec:	480d      	ldr	r0, [pc, #52]	; (801b124 <prvInitialiseTaskLists+0x64>)
 801b0ee:	f7fe f9f7 	bl	80194e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801b0f2:	480d      	ldr	r0, [pc, #52]	; (801b128 <prvInitialiseTaskLists+0x68>)
 801b0f4:	f7fe f9f4 	bl	80194e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801b0f8:	480c      	ldr	r0, [pc, #48]	; (801b12c <prvInitialiseTaskLists+0x6c>)
 801b0fa:	f7fe f9f1 	bl	80194e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801b0fe:	480c      	ldr	r0, [pc, #48]	; (801b130 <prvInitialiseTaskLists+0x70>)
 801b100:	f7fe f9ee 	bl	80194e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801b104:	480b      	ldr	r0, [pc, #44]	; (801b134 <prvInitialiseTaskLists+0x74>)
 801b106:	f7fe f9eb 	bl	80194e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801b10a:	4b0b      	ldr	r3, [pc, #44]	; (801b138 <prvInitialiseTaskLists+0x78>)
 801b10c:	4a05      	ldr	r2, [pc, #20]	; (801b124 <prvInitialiseTaskLists+0x64>)
 801b10e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801b110:	4b0a      	ldr	r3, [pc, #40]	; (801b13c <prvInitialiseTaskLists+0x7c>)
 801b112:	4a05      	ldr	r2, [pc, #20]	; (801b128 <prvInitialiseTaskLists+0x68>)
 801b114:	601a      	str	r2, [r3, #0]
}
 801b116:	bf00      	nop
 801b118:	3708      	adds	r7, #8
 801b11a:	46bd      	mov	sp, r7
 801b11c:	bd80      	pop	{r7, pc}
 801b11e:	bf00      	nop
 801b120:	20000b68 	.word	0x20000b68
 801b124:	20000fc8 	.word	0x20000fc8
 801b128:	20000fdc 	.word	0x20000fdc
 801b12c:	20000ff8 	.word	0x20000ff8
 801b130:	2000100c 	.word	0x2000100c
 801b134:	20001024 	.word	0x20001024
 801b138:	20000ff0 	.word	0x20000ff0
 801b13c:	20000ff4 	.word	0x20000ff4

0801b140 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801b140:	b580      	push	{r7, lr}
 801b142:	b082      	sub	sp, #8
 801b144:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801b146:	e019      	b.n	801b17c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801b148:	f000 feb8 	bl	801bebc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b14c:	4b0f      	ldr	r3, [pc, #60]	; (801b18c <prvCheckTasksWaitingTermination+0x4c>)
 801b14e:	68db      	ldr	r3, [r3, #12]
 801b150:	68db      	ldr	r3, [r3, #12]
 801b152:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	3304      	adds	r3, #4
 801b158:	4618      	mov	r0, r3
 801b15a:	f7fe fa4b 	bl	80195f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801b15e:	4b0c      	ldr	r3, [pc, #48]	; (801b190 <prvCheckTasksWaitingTermination+0x50>)
 801b160:	681b      	ldr	r3, [r3, #0]
 801b162:	3b01      	subs	r3, #1
 801b164:	4a0a      	ldr	r2, [pc, #40]	; (801b190 <prvCheckTasksWaitingTermination+0x50>)
 801b166:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801b168:	4b0a      	ldr	r3, [pc, #40]	; (801b194 <prvCheckTasksWaitingTermination+0x54>)
 801b16a:	681b      	ldr	r3, [r3, #0]
 801b16c:	3b01      	subs	r3, #1
 801b16e:	4a09      	ldr	r2, [pc, #36]	; (801b194 <prvCheckTasksWaitingTermination+0x54>)
 801b170:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801b172:	f000 fed1 	bl	801bf18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801b176:	6878      	ldr	r0, [r7, #4]
 801b178:	f000 f80e 	bl	801b198 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801b17c:	4b05      	ldr	r3, [pc, #20]	; (801b194 <prvCheckTasksWaitingTermination+0x54>)
 801b17e:	681b      	ldr	r3, [r3, #0]
 801b180:	2b00      	cmp	r3, #0
 801b182:	d1e1      	bne.n	801b148 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801b184:	bf00      	nop
 801b186:	3708      	adds	r7, #8
 801b188:	46bd      	mov	sp, r7
 801b18a:	bd80      	pop	{r7, pc}
 801b18c:	2000100c 	.word	0x2000100c
 801b190:	20001038 	.word	0x20001038
 801b194:	20001020 	.word	0x20001020

0801b198 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801b198:	b580      	push	{r7, lr}
 801b19a:	b084      	sub	sp, #16
 801b19c:	af00      	add	r7, sp, #0
 801b19e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801b1a0:	687b      	ldr	r3, [r7, #4]
 801b1a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801b1a6:	2b00      	cmp	r3, #0
 801b1a8:	d108      	bne.n	801b1bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801b1aa:	687b      	ldr	r3, [r7, #4]
 801b1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b1ae:	4618      	mov	r0, r3
 801b1b0:	f001 f860 	bl	801c274 <vPortFree>
				vPortFree( pxTCB );
 801b1b4:	6878      	ldr	r0, [r7, #4]
 801b1b6:	f001 f85d 	bl	801c274 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801b1ba:	e017      	b.n	801b1ec <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801b1bc:	687b      	ldr	r3, [r7, #4]
 801b1be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801b1c2:	2b01      	cmp	r3, #1
 801b1c4:	d103      	bne.n	801b1ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801b1c6:	6878      	ldr	r0, [r7, #4]
 801b1c8:	f001 f854 	bl	801c274 <vPortFree>
	}
 801b1cc:	e00e      	b.n	801b1ec <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801b1ce:	687b      	ldr	r3, [r7, #4]
 801b1d0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801b1d4:	2b02      	cmp	r3, #2
 801b1d6:	d009      	beq.n	801b1ec <prvDeleteTCB+0x54>
 801b1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b1dc:	f383 8811 	msr	BASEPRI, r3
 801b1e0:	f3bf 8f6f 	isb	sy
 801b1e4:	f3bf 8f4f 	dsb	sy
 801b1e8:	60fb      	str	r3, [r7, #12]
 801b1ea:	e7fe      	b.n	801b1ea <prvDeleteTCB+0x52>
	}
 801b1ec:	bf00      	nop
 801b1ee:	3710      	adds	r7, #16
 801b1f0:	46bd      	mov	sp, r7
 801b1f2:	bd80      	pop	{r7, pc}

0801b1f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801b1f4:	b480      	push	{r7}
 801b1f6:	b083      	sub	sp, #12
 801b1f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b1fa:	4b0c      	ldr	r3, [pc, #48]	; (801b22c <prvResetNextTaskUnblockTime+0x38>)
 801b1fc:	681b      	ldr	r3, [r3, #0]
 801b1fe:	681b      	ldr	r3, [r3, #0]
 801b200:	2b00      	cmp	r3, #0
 801b202:	d104      	bne.n	801b20e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801b204:	4b0a      	ldr	r3, [pc, #40]	; (801b230 <prvResetNextTaskUnblockTime+0x3c>)
 801b206:	f04f 32ff 	mov.w	r2, #4294967295
 801b20a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801b20c:	e008      	b.n	801b220 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b20e:	4b07      	ldr	r3, [pc, #28]	; (801b22c <prvResetNextTaskUnblockTime+0x38>)
 801b210:	681b      	ldr	r3, [r3, #0]
 801b212:	68db      	ldr	r3, [r3, #12]
 801b214:	68db      	ldr	r3, [r3, #12]
 801b216:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801b218:	687b      	ldr	r3, [r7, #4]
 801b21a:	685b      	ldr	r3, [r3, #4]
 801b21c:	4a04      	ldr	r2, [pc, #16]	; (801b230 <prvResetNextTaskUnblockTime+0x3c>)
 801b21e:	6013      	str	r3, [r2, #0]
}
 801b220:	bf00      	nop
 801b222:	370c      	adds	r7, #12
 801b224:	46bd      	mov	sp, r7
 801b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b22a:	4770      	bx	lr
 801b22c:	20000ff0 	.word	0x20000ff0
 801b230:	20001058 	.word	0x20001058

0801b234 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801b234:	b480      	push	{r7}
 801b236:	b083      	sub	sp, #12
 801b238:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801b23a:	4b0b      	ldr	r3, [pc, #44]	; (801b268 <xTaskGetSchedulerState+0x34>)
 801b23c:	681b      	ldr	r3, [r3, #0]
 801b23e:	2b00      	cmp	r3, #0
 801b240:	d102      	bne.n	801b248 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801b242:	2301      	movs	r3, #1
 801b244:	607b      	str	r3, [r7, #4]
 801b246:	e008      	b.n	801b25a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b248:	4b08      	ldr	r3, [pc, #32]	; (801b26c <xTaskGetSchedulerState+0x38>)
 801b24a:	681b      	ldr	r3, [r3, #0]
 801b24c:	2b00      	cmp	r3, #0
 801b24e:	d102      	bne.n	801b256 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801b250:	2302      	movs	r3, #2
 801b252:	607b      	str	r3, [r7, #4]
 801b254:	e001      	b.n	801b25a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801b256:	2300      	movs	r3, #0
 801b258:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801b25a:	687b      	ldr	r3, [r7, #4]
	}
 801b25c:	4618      	mov	r0, r3
 801b25e:	370c      	adds	r7, #12
 801b260:	46bd      	mov	sp, r7
 801b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b266:	4770      	bx	lr
 801b268:	20001044 	.word	0x20001044
 801b26c:	20001060 	.word	0x20001060

0801b270 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801b270:	b580      	push	{r7, lr}
 801b272:	b084      	sub	sp, #16
 801b274:	af00      	add	r7, sp, #0
 801b276:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801b27c:	2300      	movs	r3, #0
 801b27e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801b280:	687b      	ldr	r3, [r7, #4]
 801b282:	2b00      	cmp	r3, #0
 801b284:	d051      	beq.n	801b32a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801b286:	68bb      	ldr	r3, [r7, #8]
 801b288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b28a:	4b2a      	ldr	r3, [pc, #168]	; (801b334 <xTaskPriorityInherit+0xc4>)
 801b28c:	681b      	ldr	r3, [r3, #0]
 801b28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b290:	429a      	cmp	r2, r3
 801b292:	d241      	bcs.n	801b318 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801b294:	68bb      	ldr	r3, [r7, #8]
 801b296:	699b      	ldr	r3, [r3, #24]
 801b298:	2b00      	cmp	r3, #0
 801b29a:	db06      	blt.n	801b2aa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b29c:	4b25      	ldr	r3, [pc, #148]	; (801b334 <xTaskPriorityInherit+0xc4>)
 801b29e:	681b      	ldr	r3, [r3, #0]
 801b2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b2a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801b2a6:	68bb      	ldr	r3, [r7, #8]
 801b2a8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801b2aa:	68bb      	ldr	r3, [r7, #8]
 801b2ac:	6959      	ldr	r1, [r3, #20]
 801b2ae:	68bb      	ldr	r3, [r7, #8]
 801b2b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b2b2:	4613      	mov	r3, r2
 801b2b4:	009b      	lsls	r3, r3, #2
 801b2b6:	4413      	add	r3, r2
 801b2b8:	009b      	lsls	r3, r3, #2
 801b2ba:	4a1f      	ldr	r2, [pc, #124]	; (801b338 <xTaskPriorityInherit+0xc8>)
 801b2bc:	4413      	add	r3, r2
 801b2be:	4299      	cmp	r1, r3
 801b2c0:	d122      	bne.n	801b308 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b2c2:	68bb      	ldr	r3, [r7, #8]
 801b2c4:	3304      	adds	r3, #4
 801b2c6:	4618      	mov	r0, r3
 801b2c8:	f7fe f994 	bl	80195f4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801b2cc:	4b19      	ldr	r3, [pc, #100]	; (801b334 <xTaskPriorityInherit+0xc4>)
 801b2ce:	681b      	ldr	r3, [r3, #0]
 801b2d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b2d2:	68bb      	ldr	r3, [r7, #8]
 801b2d4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801b2d6:	68bb      	ldr	r3, [r7, #8]
 801b2d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b2da:	4b18      	ldr	r3, [pc, #96]	; (801b33c <xTaskPriorityInherit+0xcc>)
 801b2dc:	681b      	ldr	r3, [r3, #0]
 801b2de:	429a      	cmp	r2, r3
 801b2e0:	d903      	bls.n	801b2ea <xTaskPriorityInherit+0x7a>
 801b2e2:	68bb      	ldr	r3, [r7, #8]
 801b2e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b2e6:	4a15      	ldr	r2, [pc, #84]	; (801b33c <xTaskPriorityInherit+0xcc>)
 801b2e8:	6013      	str	r3, [r2, #0]
 801b2ea:	68bb      	ldr	r3, [r7, #8]
 801b2ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b2ee:	4613      	mov	r3, r2
 801b2f0:	009b      	lsls	r3, r3, #2
 801b2f2:	4413      	add	r3, r2
 801b2f4:	009b      	lsls	r3, r3, #2
 801b2f6:	4a10      	ldr	r2, [pc, #64]	; (801b338 <xTaskPriorityInherit+0xc8>)
 801b2f8:	441a      	add	r2, r3
 801b2fa:	68bb      	ldr	r3, [r7, #8]
 801b2fc:	3304      	adds	r3, #4
 801b2fe:	4619      	mov	r1, r3
 801b300:	4610      	mov	r0, r2
 801b302:	f7fe f91a 	bl	801953a <vListInsertEnd>
 801b306:	e004      	b.n	801b312 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801b308:	4b0a      	ldr	r3, [pc, #40]	; (801b334 <xTaskPriorityInherit+0xc4>)
 801b30a:	681b      	ldr	r3, [r3, #0]
 801b30c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b30e:	68bb      	ldr	r3, [r7, #8]
 801b310:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801b312:	2301      	movs	r3, #1
 801b314:	60fb      	str	r3, [r7, #12]
 801b316:	e008      	b.n	801b32a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801b318:	68bb      	ldr	r3, [r7, #8]
 801b31a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801b31c:	4b05      	ldr	r3, [pc, #20]	; (801b334 <xTaskPriorityInherit+0xc4>)
 801b31e:	681b      	ldr	r3, [r3, #0]
 801b320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b322:	429a      	cmp	r2, r3
 801b324:	d201      	bcs.n	801b32a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801b326:	2301      	movs	r3, #1
 801b328:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801b32a:	68fb      	ldr	r3, [r7, #12]
	}
 801b32c:	4618      	mov	r0, r3
 801b32e:	3710      	adds	r7, #16
 801b330:	46bd      	mov	sp, r7
 801b332:	bd80      	pop	{r7, pc}
 801b334:	20000b64 	.word	0x20000b64
 801b338:	20000b68 	.word	0x20000b68
 801b33c:	20001040 	.word	0x20001040

0801b340 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801b340:	b580      	push	{r7, lr}
 801b342:	b086      	sub	sp, #24
 801b344:	af00      	add	r7, sp, #0
 801b346:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801b348:	687b      	ldr	r3, [r7, #4]
 801b34a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801b34c:	2300      	movs	r3, #0
 801b34e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801b350:	687b      	ldr	r3, [r7, #4]
 801b352:	2b00      	cmp	r3, #0
 801b354:	d054      	beq.n	801b400 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801b356:	4b2d      	ldr	r3, [pc, #180]	; (801b40c <xTaskPriorityDisinherit+0xcc>)
 801b358:	681b      	ldr	r3, [r3, #0]
 801b35a:	693a      	ldr	r2, [r7, #16]
 801b35c:	429a      	cmp	r2, r3
 801b35e:	d009      	beq.n	801b374 <xTaskPriorityDisinherit+0x34>
 801b360:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b364:	f383 8811 	msr	BASEPRI, r3
 801b368:	f3bf 8f6f 	isb	sy
 801b36c:	f3bf 8f4f 	dsb	sy
 801b370:	60fb      	str	r3, [r7, #12]
 801b372:	e7fe      	b.n	801b372 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 801b374:	693b      	ldr	r3, [r7, #16]
 801b376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b378:	2b00      	cmp	r3, #0
 801b37a:	d109      	bne.n	801b390 <xTaskPriorityDisinherit+0x50>
 801b37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b380:	f383 8811 	msr	BASEPRI, r3
 801b384:	f3bf 8f6f 	isb	sy
 801b388:	f3bf 8f4f 	dsb	sy
 801b38c:	60bb      	str	r3, [r7, #8]
 801b38e:	e7fe      	b.n	801b38e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 801b390:	693b      	ldr	r3, [r7, #16]
 801b392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b394:	1e5a      	subs	r2, r3, #1
 801b396:	693b      	ldr	r3, [r7, #16]
 801b398:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801b39a:	693b      	ldr	r3, [r7, #16]
 801b39c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b39e:	693b      	ldr	r3, [r7, #16]
 801b3a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b3a2:	429a      	cmp	r2, r3
 801b3a4:	d02c      	beq.n	801b400 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801b3a6:	693b      	ldr	r3, [r7, #16]
 801b3a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b3aa:	2b00      	cmp	r3, #0
 801b3ac:	d128      	bne.n	801b400 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b3ae:	693b      	ldr	r3, [r7, #16]
 801b3b0:	3304      	adds	r3, #4
 801b3b2:	4618      	mov	r0, r3
 801b3b4:	f7fe f91e 	bl	80195f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801b3b8:	693b      	ldr	r3, [r7, #16]
 801b3ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801b3bc:	693b      	ldr	r3, [r7, #16]
 801b3be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b3c0:	693b      	ldr	r3, [r7, #16]
 801b3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b3c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801b3c8:	693b      	ldr	r3, [r7, #16]
 801b3ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801b3cc:	693b      	ldr	r3, [r7, #16]
 801b3ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b3d0:	4b0f      	ldr	r3, [pc, #60]	; (801b410 <xTaskPriorityDisinherit+0xd0>)
 801b3d2:	681b      	ldr	r3, [r3, #0]
 801b3d4:	429a      	cmp	r2, r3
 801b3d6:	d903      	bls.n	801b3e0 <xTaskPriorityDisinherit+0xa0>
 801b3d8:	693b      	ldr	r3, [r7, #16]
 801b3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b3dc:	4a0c      	ldr	r2, [pc, #48]	; (801b410 <xTaskPriorityDisinherit+0xd0>)
 801b3de:	6013      	str	r3, [r2, #0]
 801b3e0:	693b      	ldr	r3, [r7, #16]
 801b3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b3e4:	4613      	mov	r3, r2
 801b3e6:	009b      	lsls	r3, r3, #2
 801b3e8:	4413      	add	r3, r2
 801b3ea:	009b      	lsls	r3, r3, #2
 801b3ec:	4a09      	ldr	r2, [pc, #36]	; (801b414 <xTaskPriorityDisinherit+0xd4>)
 801b3ee:	441a      	add	r2, r3
 801b3f0:	693b      	ldr	r3, [r7, #16]
 801b3f2:	3304      	adds	r3, #4
 801b3f4:	4619      	mov	r1, r3
 801b3f6:	4610      	mov	r0, r2
 801b3f8:	f7fe f89f 	bl	801953a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801b3fc:	2301      	movs	r3, #1
 801b3fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801b400:	697b      	ldr	r3, [r7, #20]
	}
 801b402:	4618      	mov	r0, r3
 801b404:	3718      	adds	r7, #24
 801b406:	46bd      	mov	sp, r7
 801b408:	bd80      	pop	{r7, pc}
 801b40a:	bf00      	nop
 801b40c:	20000b64 	.word	0x20000b64
 801b410:	20001040 	.word	0x20001040
 801b414:	20000b68 	.word	0x20000b68

0801b418 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801b418:	b580      	push	{r7, lr}
 801b41a:	b088      	sub	sp, #32
 801b41c:	af00      	add	r7, sp, #0
 801b41e:	6078      	str	r0, [r7, #4]
 801b420:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801b426:	2301      	movs	r3, #1
 801b428:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801b42a:	687b      	ldr	r3, [r7, #4]
 801b42c:	2b00      	cmp	r3, #0
 801b42e:	d068      	beq.n	801b502 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801b430:	69bb      	ldr	r3, [r7, #24]
 801b432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b434:	2b00      	cmp	r3, #0
 801b436:	d109      	bne.n	801b44c <vTaskPriorityDisinheritAfterTimeout+0x34>
 801b438:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b43c:	f383 8811 	msr	BASEPRI, r3
 801b440:	f3bf 8f6f 	isb	sy
 801b444:	f3bf 8f4f 	dsb	sy
 801b448:	60fb      	str	r3, [r7, #12]
 801b44a:	e7fe      	b.n	801b44a <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801b44c:	69bb      	ldr	r3, [r7, #24]
 801b44e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b450:	683a      	ldr	r2, [r7, #0]
 801b452:	429a      	cmp	r2, r3
 801b454:	d902      	bls.n	801b45c <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801b456:	683b      	ldr	r3, [r7, #0]
 801b458:	61fb      	str	r3, [r7, #28]
 801b45a:	e002      	b.n	801b462 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801b45c:	69bb      	ldr	r3, [r7, #24]
 801b45e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b460:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801b462:	69bb      	ldr	r3, [r7, #24]
 801b464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b466:	69fa      	ldr	r2, [r7, #28]
 801b468:	429a      	cmp	r2, r3
 801b46a:	d04a      	beq.n	801b502 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801b46c:	69bb      	ldr	r3, [r7, #24]
 801b46e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b470:	697a      	ldr	r2, [r7, #20]
 801b472:	429a      	cmp	r2, r3
 801b474:	d145      	bne.n	801b502 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801b476:	4b25      	ldr	r3, [pc, #148]	; (801b50c <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 801b478:	681b      	ldr	r3, [r3, #0]
 801b47a:	69ba      	ldr	r2, [r7, #24]
 801b47c:	429a      	cmp	r2, r3
 801b47e:	d109      	bne.n	801b494 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 801b480:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b484:	f383 8811 	msr	BASEPRI, r3
 801b488:	f3bf 8f6f 	isb	sy
 801b48c:	f3bf 8f4f 	dsb	sy
 801b490:	60bb      	str	r3, [r7, #8]
 801b492:	e7fe      	b.n	801b492 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801b494:	69bb      	ldr	r3, [r7, #24]
 801b496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b498:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801b49a:	69bb      	ldr	r3, [r7, #24]
 801b49c:	69fa      	ldr	r2, [r7, #28]
 801b49e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801b4a0:	69bb      	ldr	r3, [r7, #24]
 801b4a2:	699b      	ldr	r3, [r3, #24]
 801b4a4:	2b00      	cmp	r3, #0
 801b4a6:	db04      	blt.n	801b4b2 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b4a8:	69fb      	ldr	r3, [r7, #28]
 801b4aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801b4ae:	69bb      	ldr	r3, [r7, #24]
 801b4b0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801b4b2:	69bb      	ldr	r3, [r7, #24]
 801b4b4:	6959      	ldr	r1, [r3, #20]
 801b4b6:	693a      	ldr	r2, [r7, #16]
 801b4b8:	4613      	mov	r3, r2
 801b4ba:	009b      	lsls	r3, r3, #2
 801b4bc:	4413      	add	r3, r2
 801b4be:	009b      	lsls	r3, r3, #2
 801b4c0:	4a13      	ldr	r2, [pc, #76]	; (801b510 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801b4c2:	4413      	add	r3, r2
 801b4c4:	4299      	cmp	r1, r3
 801b4c6:	d11c      	bne.n	801b502 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b4c8:	69bb      	ldr	r3, [r7, #24]
 801b4ca:	3304      	adds	r3, #4
 801b4cc:	4618      	mov	r0, r3
 801b4ce:	f7fe f891 	bl	80195f4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801b4d2:	69bb      	ldr	r3, [r7, #24]
 801b4d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b4d6:	4b0f      	ldr	r3, [pc, #60]	; (801b514 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801b4d8:	681b      	ldr	r3, [r3, #0]
 801b4da:	429a      	cmp	r2, r3
 801b4dc:	d903      	bls.n	801b4e6 <vTaskPriorityDisinheritAfterTimeout+0xce>
 801b4de:	69bb      	ldr	r3, [r7, #24]
 801b4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b4e2:	4a0c      	ldr	r2, [pc, #48]	; (801b514 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801b4e4:	6013      	str	r3, [r2, #0]
 801b4e6:	69bb      	ldr	r3, [r7, #24]
 801b4e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b4ea:	4613      	mov	r3, r2
 801b4ec:	009b      	lsls	r3, r3, #2
 801b4ee:	4413      	add	r3, r2
 801b4f0:	009b      	lsls	r3, r3, #2
 801b4f2:	4a07      	ldr	r2, [pc, #28]	; (801b510 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801b4f4:	441a      	add	r2, r3
 801b4f6:	69bb      	ldr	r3, [r7, #24]
 801b4f8:	3304      	adds	r3, #4
 801b4fa:	4619      	mov	r1, r3
 801b4fc:	4610      	mov	r0, r2
 801b4fe:	f7fe f81c 	bl	801953a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801b502:	bf00      	nop
 801b504:	3720      	adds	r7, #32
 801b506:	46bd      	mov	sp, r7
 801b508:	bd80      	pop	{r7, pc}
 801b50a:	bf00      	nop
 801b50c:	20000b64 	.word	0x20000b64
 801b510:	20000b68 	.word	0x20000b68
 801b514:	20001040 	.word	0x20001040

0801b518 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801b518:	b480      	push	{r7}
 801b51a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801b51c:	4b07      	ldr	r3, [pc, #28]	; (801b53c <pvTaskIncrementMutexHeldCount+0x24>)
 801b51e:	681b      	ldr	r3, [r3, #0]
 801b520:	2b00      	cmp	r3, #0
 801b522:	d004      	beq.n	801b52e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801b524:	4b05      	ldr	r3, [pc, #20]	; (801b53c <pvTaskIncrementMutexHeldCount+0x24>)
 801b526:	681b      	ldr	r3, [r3, #0]
 801b528:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b52a:	3201      	adds	r2, #1
 801b52c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801b52e:	4b03      	ldr	r3, [pc, #12]	; (801b53c <pvTaskIncrementMutexHeldCount+0x24>)
 801b530:	681b      	ldr	r3, [r3, #0]
	}
 801b532:	4618      	mov	r0, r3
 801b534:	46bd      	mov	sp, r7
 801b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b53a:	4770      	bx	lr
 801b53c:	20000b64 	.word	0x20000b64

0801b540 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801b540:	b580      	push	{r7, lr}
 801b542:	b084      	sub	sp, #16
 801b544:	af00      	add	r7, sp, #0
 801b546:	6078      	str	r0, [r7, #4]
 801b548:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801b54a:	4b21      	ldr	r3, [pc, #132]	; (801b5d0 <prvAddCurrentTaskToDelayedList+0x90>)
 801b54c:	681b      	ldr	r3, [r3, #0]
 801b54e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b550:	4b20      	ldr	r3, [pc, #128]	; (801b5d4 <prvAddCurrentTaskToDelayedList+0x94>)
 801b552:	681b      	ldr	r3, [r3, #0]
 801b554:	3304      	adds	r3, #4
 801b556:	4618      	mov	r0, r3
 801b558:	f7fe f84c 	bl	80195f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801b55c:	687b      	ldr	r3, [r7, #4]
 801b55e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b562:	d10a      	bne.n	801b57a <prvAddCurrentTaskToDelayedList+0x3a>
 801b564:	683b      	ldr	r3, [r7, #0]
 801b566:	2b00      	cmp	r3, #0
 801b568:	d007      	beq.n	801b57a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801b56a:	4b1a      	ldr	r3, [pc, #104]	; (801b5d4 <prvAddCurrentTaskToDelayedList+0x94>)
 801b56c:	681b      	ldr	r3, [r3, #0]
 801b56e:	3304      	adds	r3, #4
 801b570:	4619      	mov	r1, r3
 801b572:	4819      	ldr	r0, [pc, #100]	; (801b5d8 <prvAddCurrentTaskToDelayedList+0x98>)
 801b574:	f7fd ffe1 	bl	801953a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801b578:	e026      	b.n	801b5c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801b57a:	68fa      	ldr	r2, [r7, #12]
 801b57c:	687b      	ldr	r3, [r7, #4]
 801b57e:	4413      	add	r3, r2
 801b580:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801b582:	4b14      	ldr	r3, [pc, #80]	; (801b5d4 <prvAddCurrentTaskToDelayedList+0x94>)
 801b584:	681b      	ldr	r3, [r3, #0]
 801b586:	68ba      	ldr	r2, [r7, #8]
 801b588:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801b58a:	68ba      	ldr	r2, [r7, #8]
 801b58c:	68fb      	ldr	r3, [r7, #12]
 801b58e:	429a      	cmp	r2, r3
 801b590:	d209      	bcs.n	801b5a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801b592:	4b12      	ldr	r3, [pc, #72]	; (801b5dc <prvAddCurrentTaskToDelayedList+0x9c>)
 801b594:	681a      	ldr	r2, [r3, #0]
 801b596:	4b0f      	ldr	r3, [pc, #60]	; (801b5d4 <prvAddCurrentTaskToDelayedList+0x94>)
 801b598:	681b      	ldr	r3, [r3, #0]
 801b59a:	3304      	adds	r3, #4
 801b59c:	4619      	mov	r1, r3
 801b59e:	4610      	mov	r0, r2
 801b5a0:	f7fd ffef 	bl	8019582 <vListInsert>
}
 801b5a4:	e010      	b.n	801b5c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801b5a6:	4b0e      	ldr	r3, [pc, #56]	; (801b5e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 801b5a8:	681a      	ldr	r2, [r3, #0]
 801b5aa:	4b0a      	ldr	r3, [pc, #40]	; (801b5d4 <prvAddCurrentTaskToDelayedList+0x94>)
 801b5ac:	681b      	ldr	r3, [r3, #0]
 801b5ae:	3304      	adds	r3, #4
 801b5b0:	4619      	mov	r1, r3
 801b5b2:	4610      	mov	r0, r2
 801b5b4:	f7fd ffe5 	bl	8019582 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801b5b8:	4b0a      	ldr	r3, [pc, #40]	; (801b5e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 801b5ba:	681b      	ldr	r3, [r3, #0]
 801b5bc:	68ba      	ldr	r2, [r7, #8]
 801b5be:	429a      	cmp	r2, r3
 801b5c0:	d202      	bcs.n	801b5c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801b5c2:	4a08      	ldr	r2, [pc, #32]	; (801b5e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 801b5c4:	68bb      	ldr	r3, [r7, #8]
 801b5c6:	6013      	str	r3, [r2, #0]
}
 801b5c8:	bf00      	nop
 801b5ca:	3710      	adds	r7, #16
 801b5cc:	46bd      	mov	sp, r7
 801b5ce:	bd80      	pop	{r7, pc}
 801b5d0:	2000103c 	.word	0x2000103c
 801b5d4:	20000b64 	.word	0x20000b64
 801b5d8:	20001024 	.word	0x20001024
 801b5dc:	20000ff4 	.word	0x20000ff4
 801b5e0:	20000ff0 	.word	0x20000ff0
 801b5e4:	20001058 	.word	0x20001058

0801b5e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801b5e8:	b580      	push	{r7, lr}
 801b5ea:	b08a      	sub	sp, #40	; 0x28
 801b5ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801b5ee:	2300      	movs	r3, #0
 801b5f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801b5f2:	f000 faff 	bl	801bbf4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801b5f6:	4b1c      	ldr	r3, [pc, #112]	; (801b668 <xTimerCreateTimerTask+0x80>)
 801b5f8:	681b      	ldr	r3, [r3, #0]
 801b5fa:	2b00      	cmp	r3, #0
 801b5fc:	d021      	beq.n	801b642 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801b5fe:	2300      	movs	r3, #0
 801b600:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801b602:	2300      	movs	r3, #0
 801b604:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801b606:	1d3a      	adds	r2, r7, #4
 801b608:	f107 0108 	add.w	r1, r7, #8
 801b60c:	f107 030c 	add.w	r3, r7, #12
 801b610:	4618      	mov	r0, r3
 801b612:	f7fd ff4b 	bl	80194ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801b616:	6879      	ldr	r1, [r7, #4]
 801b618:	68bb      	ldr	r3, [r7, #8]
 801b61a:	68fa      	ldr	r2, [r7, #12]
 801b61c:	9202      	str	r2, [sp, #8]
 801b61e:	9301      	str	r3, [sp, #4]
 801b620:	2302      	movs	r3, #2
 801b622:	9300      	str	r3, [sp, #0]
 801b624:	2300      	movs	r3, #0
 801b626:	460a      	mov	r2, r1
 801b628:	4910      	ldr	r1, [pc, #64]	; (801b66c <xTimerCreateTimerTask+0x84>)
 801b62a:	4811      	ldr	r0, [pc, #68]	; (801b670 <xTimerCreateTimerTask+0x88>)
 801b62c:	f7fe fffa 	bl	801a624 <xTaskCreateStatic>
 801b630:	4602      	mov	r2, r0
 801b632:	4b10      	ldr	r3, [pc, #64]	; (801b674 <xTimerCreateTimerTask+0x8c>)
 801b634:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801b636:	4b0f      	ldr	r3, [pc, #60]	; (801b674 <xTimerCreateTimerTask+0x8c>)
 801b638:	681b      	ldr	r3, [r3, #0]
 801b63a:	2b00      	cmp	r3, #0
 801b63c:	d001      	beq.n	801b642 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801b63e:	2301      	movs	r3, #1
 801b640:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801b642:	697b      	ldr	r3, [r7, #20]
 801b644:	2b00      	cmp	r3, #0
 801b646:	d109      	bne.n	801b65c <xTimerCreateTimerTask+0x74>
 801b648:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b64c:	f383 8811 	msr	BASEPRI, r3
 801b650:	f3bf 8f6f 	isb	sy
 801b654:	f3bf 8f4f 	dsb	sy
 801b658:	613b      	str	r3, [r7, #16]
 801b65a:	e7fe      	b.n	801b65a <xTimerCreateTimerTask+0x72>
	return xReturn;
 801b65c:	697b      	ldr	r3, [r7, #20]
}
 801b65e:	4618      	mov	r0, r3
 801b660:	3718      	adds	r7, #24
 801b662:	46bd      	mov	sp, r7
 801b664:	bd80      	pop	{r7, pc}
 801b666:	bf00      	nop
 801b668:	20001094 	.word	0x20001094
 801b66c:	0801fb20 	.word	0x0801fb20
 801b670:	0801b7a9 	.word	0x0801b7a9
 801b674:	20001098 	.word	0x20001098

0801b678 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801b678:	b580      	push	{r7, lr}
 801b67a:	b08a      	sub	sp, #40	; 0x28
 801b67c:	af00      	add	r7, sp, #0
 801b67e:	60f8      	str	r0, [r7, #12]
 801b680:	60b9      	str	r1, [r7, #8]
 801b682:	607a      	str	r2, [r7, #4]
 801b684:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801b686:	2300      	movs	r3, #0
 801b688:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801b68a:	68fb      	ldr	r3, [r7, #12]
 801b68c:	2b00      	cmp	r3, #0
 801b68e:	d109      	bne.n	801b6a4 <xTimerGenericCommand+0x2c>
 801b690:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b694:	f383 8811 	msr	BASEPRI, r3
 801b698:	f3bf 8f6f 	isb	sy
 801b69c:	f3bf 8f4f 	dsb	sy
 801b6a0:	623b      	str	r3, [r7, #32]
 801b6a2:	e7fe      	b.n	801b6a2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801b6a4:	4b19      	ldr	r3, [pc, #100]	; (801b70c <xTimerGenericCommand+0x94>)
 801b6a6:	681b      	ldr	r3, [r3, #0]
 801b6a8:	2b00      	cmp	r3, #0
 801b6aa:	d02a      	beq.n	801b702 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801b6ac:	68bb      	ldr	r3, [r7, #8]
 801b6ae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801b6b0:	687b      	ldr	r3, [r7, #4]
 801b6b2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801b6b4:	68fb      	ldr	r3, [r7, #12]
 801b6b6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801b6b8:	68bb      	ldr	r3, [r7, #8]
 801b6ba:	2b05      	cmp	r3, #5
 801b6bc:	dc18      	bgt.n	801b6f0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801b6be:	f7ff fdb9 	bl	801b234 <xTaskGetSchedulerState>
 801b6c2:	4603      	mov	r3, r0
 801b6c4:	2b02      	cmp	r3, #2
 801b6c6:	d109      	bne.n	801b6dc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801b6c8:	4b10      	ldr	r3, [pc, #64]	; (801b70c <xTimerGenericCommand+0x94>)
 801b6ca:	6818      	ldr	r0, [r3, #0]
 801b6cc:	f107 0110 	add.w	r1, r7, #16
 801b6d0:	2300      	movs	r3, #0
 801b6d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b6d4:	f7fe f95c 	bl	8019990 <xQueueGenericSend>
 801b6d8:	6278      	str	r0, [r7, #36]	; 0x24
 801b6da:	e012      	b.n	801b702 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801b6dc:	4b0b      	ldr	r3, [pc, #44]	; (801b70c <xTimerGenericCommand+0x94>)
 801b6de:	6818      	ldr	r0, [r3, #0]
 801b6e0:	f107 0110 	add.w	r1, r7, #16
 801b6e4:	2300      	movs	r3, #0
 801b6e6:	2200      	movs	r2, #0
 801b6e8:	f7fe f952 	bl	8019990 <xQueueGenericSend>
 801b6ec:	6278      	str	r0, [r7, #36]	; 0x24
 801b6ee:	e008      	b.n	801b702 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801b6f0:	4b06      	ldr	r3, [pc, #24]	; (801b70c <xTimerGenericCommand+0x94>)
 801b6f2:	6818      	ldr	r0, [r3, #0]
 801b6f4:	f107 0110 	add.w	r1, r7, #16
 801b6f8:	2300      	movs	r3, #0
 801b6fa:	683a      	ldr	r2, [r7, #0]
 801b6fc:	f7fe fa42 	bl	8019b84 <xQueueGenericSendFromISR>
 801b700:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801b702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801b704:	4618      	mov	r0, r3
 801b706:	3728      	adds	r7, #40	; 0x28
 801b708:	46bd      	mov	sp, r7
 801b70a:	bd80      	pop	{r7, pc}
 801b70c:	20001094 	.word	0x20001094

0801b710 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801b710:	b580      	push	{r7, lr}
 801b712:	b088      	sub	sp, #32
 801b714:	af02      	add	r7, sp, #8
 801b716:	6078      	str	r0, [r7, #4]
 801b718:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b71a:	4b22      	ldr	r3, [pc, #136]	; (801b7a4 <prvProcessExpiredTimer+0x94>)
 801b71c:	681b      	ldr	r3, [r3, #0]
 801b71e:	68db      	ldr	r3, [r3, #12]
 801b720:	68db      	ldr	r3, [r3, #12]
 801b722:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b724:	697b      	ldr	r3, [r7, #20]
 801b726:	3304      	adds	r3, #4
 801b728:	4618      	mov	r0, r3
 801b72a:	f7fd ff63 	bl	80195f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b72e:	697b      	ldr	r3, [r7, #20]
 801b730:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b734:	f003 0304 	and.w	r3, r3, #4
 801b738:	2b00      	cmp	r3, #0
 801b73a:	d021      	beq.n	801b780 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801b73c:	697b      	ldr	r3, [r7, #20]
 801b73e:	699a      	ldr	r2, [r3, #24]
 801b740:	687b      	ldr	r3, [r7, #4]
 801b742:	18d1      	adds	r1, r2, r3
 801b744:	687b      	ldr	r3, [r7, #4]
 801b746:	683a      	ldr	r2, [r7, #0]
 801b748:	6978      	ldr	r0, [r7, #20]
 801b74a:	f000 f8d1 	bl	801b8f0 <prvInsertTimerInActiveList>
 801b74e:	4603      	mov	r3, r0
 801b750:	2b00      	cmp	r3, #0
 801b752:	d01e      	beq.n	801b792 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801b754:	2300      	movs	r3, #0
 801b756:	9300      	str	r3, [sp, #0]
 801b758:	2300      	movs	r3, #0
 801b75a:	687a      	ldr	r2, [r7, #4]
 801b75c:	2100      	movs	r1, #0
 801b75e:	6978      	ldr	r0, [r7, #20]
 801b760:	f7ff ff8a 	bl	801b678 <xTimerGenericCommand>
 801b764:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801b766:	693b      	ldr	r3, [r7, #16]
 801b768:	2b00      	cmp	r3, #0
 801b76a:	d112      	bne.n	801b792 <prvProcessExpiredTimer+0x82>
 801b76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b770:	f383 8811 	msr	BASEPRI, r3
 801b774:	f3bf 8f6f 	isb	sy
 801b778:	f3bf 8f4f 	dsb	sy
 801b77c:	60fb      	str	r3, [r7, #12]
 801b77e:	e7fe      	b.n	801b77e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b780:	697b      	ldr	r3, [r7, #20]
 801b782:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b786:	f023 0301 	bic.w	r3, r3, #1
 801b78a:	b2da      	uxtb	r2, r3
 801b78c:	697b      	ldr	r3, [r7, #20]
 801b78e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b792:	697b      	ldr	r3, [r7, #20]
 801b794:	6a1b      	ldr	r3, [r3, #32]
 801b796:	6978      	ldr	r0, [r7, #20]
 801b798:	4798      	blx	r3
}
 801b79a:	bf00      	nop
 801b79c:	3718      	adds	r7, #24
 801b79e:	46bd      	mov	sp, r7
 801b7a0:	bd80      	pop	{r7, pc}
 801b7a2:	bf00      	nop
 801b7a4:	2000108c 	.word	0x2000108c

0801b7a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801b7a8:	b580      	push	{r7, lr}
 801b7aa:	b084      	sub	sp, #16
 801b7ac:	af00      	add	r7, sp, #0
 801b7ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801b7b0:	f107 0308 	add.w	r3, r7, #8
 801b7b4:	4618      	mov	r0, r3
 801b7b6:	f000 f857 	bl	801b868 <prvGetNextExpireTime>
 801b7ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801b7bc:	68bb      	ldr	r3, [r7, #8]
 801b7be:	4619      	mov	r1, r3
 801b7c0:	68f8      	ldr	r0, [r7, #12]
 801b7c2:	f000 f803 	bl	801b7cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801b7c6:	f000 f8d5 	bl	801b974 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801b7ca:	e7f1      	b.n	801b7b0 <prvTimerTask+0x8>

0801b7cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801b7cc:	b580      	push	{r7, lr}
 801b7ce:	b084      	sub	sp, #16
 801b7d0:	af00      	add	r7, sp, #0
 801b7d2:	6078      	str	r0, [r7, #4]
 801b7d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801b7d6:	f7ff f95b 	bl	801aa90 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801b7da:	f107 0308 	add.w	r3, r7, #8
 801b7de:	4618      	mov	r0, r3
 801b7e0:	f000 f866 	bl	801b8b0 <prvSampleTimeNow>
 801b7e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801b7e6:	68bb      	ldr	r3, [r7, #8]
 801b7e8:	2b00      	cmp	r3, #0
 801b7ea:	d130      	bne.n	801b84e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801b7ec:	683b      	ldr	r3, [r7, #0]
 801b7ee:	2b00      	cmp	r3, #0
 801b7f0:	d10a      	bne.n	801b808 <prvProcessTimerOrBlockTask+0x3c>
 801b7f2:	687a      	ldr	r2, [r7, #4]
 801b7f4:	68fb      	ldr	r3, [r7, #12]
 801b7f6:	429a      	cmp	r2, r3
 801b7f8:	d806      	bhi.n	801b808 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801b7fa:	f7ff f957 	bl	801aaac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801b7fe:	68f9      	ldr	r1, [r7, #12]
 801b800:	6878      	ldr	r0, [r7, #4]
 801b802:	f7ff ff85 	bl	801b710 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801b806:	e024      	b.n	801b852 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801b808:	683b      	ldr	r3, [r7, #0]
 801b80a:	2b00      	cmp	r3, #0
 801b80c:	d008      	beq.n	801b820 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801b80e:	4b13      	ldr	r3, [pc, #76]	; (801b85c <prvProcessTimerOrBlockTask+0x90>)
 801b810:	681b      	ldr	r3, [r3, #0]
 801b812:	681b      	ldr	r3, [r3, #0]
 801b814:	2b00      	cmp	r3, #0
 801b816:	d101      	bne.n	801b81c <prvProcessTimerOrBlockTask+0x50>
 801b818:	2301      	movs	r3, #1
 801b81a:	e000      	b.n	801b81e <prvProcessTimerOrBlockTask+0x52>
 801b81c:	2300      	movs	r3, #0
 801b81e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801b820:	4b0f      	ldr	r3, [pc, #60]	; (801b860 <prvProcessTimerOrBlockTask+0x94>)
 801b822:	6818      	ldr	r0, [r3, #0]
 801b824:	687a      	ldr	r2, [r7, #4]
 801b826:	68fb      	ldr	r3, [r7, #12]
 801b828:	1ad3      	subs	r3, r2, r3
 801b82a:	683a      	ldr	r2, [r7, #0]
 801b82c:	4619      	mov	r1, r3
 801b82e:	f7fe fec5 	bl	801a5bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801b832:	f7ff f93b 	bl	801aaac <xTaskResumeAll>
 801b836:	4603      	mov	r3, r0
 801b838:	2b00      	cmp	r3, #0
 801b83a:	d10a      	bne.n	801b852 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801b83c:	4b09      	ldr	r3, [pc, #36]	; (801b864 <prvProcessTimerOrBlockTask+0x98>)
 801b83e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b842:	601a      	str	r2, [r3, #0]
 801b844:	f3bf 8f4f 	dsb	sy
 801b848:	f3bf 8f6f 	isb	sy
}
 801b84c:	e001      	b.n	801b852 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801b84e:	f7ff f92d 	bl	801aaac <xTaskResumeAll>
}
 801b852:	bf00      	nop
 801b854:	3710      	adds	r7, #16
 801b856:	46bd      	mov	sp, r7
 801b858:	bd80      	pop	{r7, pc}
 801b85a:	bf00      	nop
 801b85c:	20001090 	.word	0x20001090
 801b860:	20001094 	.word	0x20001094
 801b864:	e000ed04 	.word	0xe000ed04

0801b868 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801b868:	b480      	push	{r7}
 801b86a:	b085      	sub	sp, #20
 801b86c:	af00      	add	r7, sp, #0
 801b86e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801b870:	4b0e      	ldr	r3, [pc, #56]	; (801b8ac <prvGetNextExpireTime+0x44>)
 801b872:	681b      	ldr	r3, [r3, #0]
 801b874:	681b      	ldr	r3, [r3, #0]
 801b876:	2b00      	cmp	r3, #0
 801b878:	d101      	bne.n	801b87e <prvGetNextExpireTime+0x16>
 801b87a:	2201      	movs	r2, #1
 801b87c:	e000      	b.n	801b880 <prvGetNextExpireTime+0x18>
 801b87e:	2200      	movs	r2, #0
 801b880:	687b      	ldr	r3, [r7, #4]
 801b882:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801b884:	687b      	ldr	r3, [r7, #4]
 801b886:	681b      	ldr	r3, [r3, #0]
 801b888:	2b00      	cmp	r3, #0
 801b88a:	d105      	bne.n	801b898 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801b88c:	4b07      	ldr	r3, [pc, #28]	; (801b8ac <prvGetNextExpireTime+0x44>)
 801b88e:	681b      	ldr	r3, [r3, #0]
 801b890:	68db      	ldr	r3, [r3, #12]
 801b892:	681b      	ldr	r3, [r3, #0]
 801b894:	60fb      	str	r3, [r7, #12]
 801b896:	e001      	b.n	801b89c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801b898:	2300      	movs	r3, #0
 801b89a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801b89c:	68fb      	ldr	r3, [r7, #12]
}
 801b89e:	4618      	mov	r0, r3
 801b8a0:	3714      	adds	r7, #20
 801b8a2:	46bd      	mov	sp, r7
 801b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8a8:	4770      	bx	lr
 801b8aa:	bf00      	nop
 801b8ac:	2000108c 	.word	0x2000108c

0801b8b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801b8b0:	b580      	push	{r7, lr}
 801b8b2:	b084      	sub	sp, #16
 801b8b4:	af00      	add	r7, sp, #0
 801b8b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801b8b8:	f7ff f994 	bl	801abe4 <xTaskGetTickCount>
 801b8bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801b8be:	4b0b      	ldr	r3, [pc, #44]	; (801b8ec <prvSampleTimeNow+0x3c>)
 801b8c0:	681b      	ldr	r3, [r3, #0]
 801b8c2:	68fa      	ldr	r2, [r7, #12]
 801b8c4:	429a      	cmp	r2, r3
 801b8c6:	d205      	bcs.n	801b8d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801b8c8:	f000 f930 	bl	801bb2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801b8cc:	687b      	ldr	r3, [r7, #4]
 801b8ce:	2201      	movs	r2, #1
 801b8d0:	601a      	str	r2, [r3, #0]
 801b8d2:	e002      	b.n	801b8da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801b8d4:	687b      	ldr	r3, [r7, #4]
 801b8d6:	2200      	movs	r2, #0
 801b8d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801b8da:	4a04      	ldr	r2, [pc, #16]	; (801b8ec <prvSampleTimeNow+0x3c>)
 801b8dc:	68fb      	ldr	r3, [r7, #12]
 801b8de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801b8e0:	68fb      	ldr	r3, [r7, #12]
}
 801b8e2:	4618      	mov	r0, r3
 801b8e4:	3710      	adds	r7, #16
 801b8e6:	46bd      	mov	sp, r7
 801b8e8:	bd80      	pop	{r7, pc}
 801b8ea:	bf00      	nop
 801b8ec:	2000109c 	.word	0x2000109c

0801b8f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801b8f0:	b580      	push	{r7, lr}
 801b8f2:	b086      	sub	sp, #24
 801b8f4:	af00      	add	r7, sp, #0
 801b8f6:	60f8      	str	r0, [r7, #12]
 801b8f8:	60b9      	str	r1, [r7, #8]
 801b8fa:	607a      	str	r2, [r7, #4]
 801b8fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801b8fe:	2300      	movs	r3, #0
 801b900:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801b902:	68fb      	ldr	r3, [r7, #12]
 801b904:	68ba      	ldr	r2, [r7, #8]
 801b906:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801b908:	68fb      	ldr	r3, [r7, #12]
 801b90a:	68fa      	ldr	r2, [r7, #12]
 801b90c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801b90e:	68ba      	ldr	r2, [r7, #8]
 801b910:	687b      	ldr	r3, [r7, #4]
 801b912:	429a      	cmp	r2, r3
 801b914:	d812      	bhi.n	801b93c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b916:	687a      	ldr	r2, [r7, #4]
 801b918:	683b      	ldr	r3, [r7, #0]
 801b91a:	1ad2      	subs	r2, r2, r3
 801b91c:	68fb      	ldr	r3, [r7, #12]
 801b91e:	699b      	ldr	r3, [r3, #24]
 801b920:	429a      	cmp	r2, r3
 801b922:	d302      	bcc.n	801b92a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801b924:	2301      	movs	r3, #1
 801b926:	617b      	str	r3, [r7, #20]
 801b928:	e01b      	b.n	801b962 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801b92a:	4b10      	ldr	r3, [pc, #64]	; (801b96c <prvInsertTimerInActiveList+0x7c>)
 801b92c:	681a      	ldr	r2, [r3, #0]
 801b92e:	68fb      	ldr	r3, [r7, #12]
 801b930:	3304      	adds	r3, #4
 801b932:	4619      	mov	r1, r3
 801b934:	4610      	mov	r0, r2
 801b936:	f7fd fe24 	bl	8019582 <vListInsert>
 801b93a:	e012      	b.n	801b962 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801b93c:	687a      	ldr	r2, [r7, #4]
 801b93e:	683b      	ldr	r3, [r7, #0]
 801b940:	429a      	cmp	r2, r3
 801b942:	d206      	bcs.n	801b952 <prvInsertTimerInActiveList+0x62>
 801b944:	68ba      	ldr	r2, [r7, #8]
 801b946:	683b      	ldr	r3, [r7, #0]
 801b948:	429a      	cmp	r2, r3
 801b94a:	d302      	bcc.n	801b952 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801b94c:	2301      	movs	r3, #1
 801b94e:	617b      	str	r3, [r7, #20]
 801b950:	e007      	b.n	801b962 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801b952:	4b07      	ldr	r3, [pc, #28]	; (801b970 <prvInsertTimerInActiveList+0x80>)
 801b954:	681a      	ldr	r2, [r3, #0]
 801b956:	68fb      	ldr	r3, [r7, #12]
 801b958:	3304      	adds	r3, #4
 801b95a:	4619      	mov	r1, r3
 801b95c:	4610      	mov	r0, r2
 801b95e:	f7fd fe10 	bl	8019582 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801b962:	697b      	ldr	r3, [r7, #20]
}
 801b964:	4618      	mov	r0, r3
 801b966:	3718      	adds	r7, #24
 801b968:	46bd      	mov	sp, r7
 801b96a:	bd80      	pop	{r7, pc}
 801b96c:	20001090 	.word	0x20001090
 801b970:	2000108c 	.word	0x2000108c

0801b974 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801b974:	b580      	push	{r7, lr}
 801b976:	b08e      	sub	sp, #56	; 0x38
 801b978:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801b97a:	e0c6      	b.n	801bb0a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	2b00      	cmp	r3, #0
 801b980:	da17      	bge.n	801b9b2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801b982:	1d3b      	adds	r3, r7, #4
 801b984:	3304      	adds	r3, #4
 801b986:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801b988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b98a:	2b00      	cmp	r3, #0
 801b98c:	d109      	bne.n	801b9a2 <prvProcessReceivedCommands+0x2e>
 801b98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b992:	f383 8811 	msr	BASEPRI, r3
 801b996:	f3bf 8f6f 	isb	sy
 801b99a:	f3bf 8f4f 	dsb	sy
 801b99e:	61fb      	str	r3, [r7, #28]
 801b9a0:	e7fe      	b.n	801b9a0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801b9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b9a4:	681b      	ldr	r3, [r3, #0]
 801b9a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b9a8:	6850      	ldr	r0, [r2, #4]
 801b9aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b9ac:	6892      	ldr	r2, [r2, #8]
 801b9ae:	4611      	mov	r1, r2
 801b9b0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	2b00      	cmp	r3, #0
 801b9b6:	f2c0 80a7 	blt.w	801bb08 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801b9ba:	68fb      	ldr	r3, [r7, #12]
 801b9bc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801b9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b9c0:	695b      	ldr	r3, [r3, #20]
 801b9c2:	2b00      	cmp	r3, #0
 801b9c4:	d004      	beq.n	801b9d0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b9c8:	3304      	adds	r3, #4
 801b9ca:	4618      	mov	r0, r3
 801b9cc:	f7fd fe12 	bl	80195f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801b9d0:	463b      	mov	r3, r7
 801b9d2:	4618      	mov	r0, r3
 801b9d4:	f7ff ff6c 	bl	801b8b0 <prvSampleTimeNow>
 801b9d8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801b9da:	687b      	ldr	r3, [r7, #4]
 801b9dc:	2b09      	cmp	r3, #9
 801b9de:	f200 8094 	bhi.w	801bb0a <prvProcessReceivedCommands+0x196>
 801b9e2:	a201      	add	r2, pc, #4	; (adr r2, 801b9e8 <prvProcessReceivedCommands+0x74>)
 801b9e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b9e8:	0801ba11 	.word	0x0801ba11
 801b9ec:	0801ba11 	.word	0x0801ba11
 801b9f0:	0801ba11 	.word	0x0801ba11
 801b9f4:	0801ba83 	.word	0x0801ba83
 801b9f8:	0801ba97 	.word	0x0801ba97
 801b9fc:	0801badf 	.word	0x0801badf
 801ba00:	0801ba11 	.word	0x0801ba11
 801ba04:	0801ba11 	.word	0x0801ba11
 801ba08:	0801ba83 	.word	0x0801ba83
 801ba0c:	0801ba97 	.word	0x0801ba97
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801ba10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ba16:	f043 0301 	orr.w	r3, r3, #1
 801ba1a:	b2da      	uxtb	r2, r3
 801ba1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801ba22:	68ba      	ldr	r2, [r7, #8]
 801ba24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba26:	699b      	ldr	r3, [r3, #24]
 801ba28:	18d1      	adds	r1, r2, r3
 801ba2a:	68bb      	ldr	r3, [r7, #8]
 801ba2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ba2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ba30:	f7ff ff5e 	bl	801b8f0 <prvInsertTimerInActiveList>
 801ba34:	4603      	mov	r3, r0
 801ba36:	2b00      	cmp	r3, #0
 801ba38:	d067      	beq.n	801bb0a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801ba3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba3c:	6a1b      	ldr	r3, [r3, #32]
 801ba3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ba40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801ba42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ba48:	f003 0304 	and.w	r3, r3, #4
 801ba4c:	2b00      	cmp	r3, #0
 801ba4e:	d05c      	beq.n	801bb0a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801ba50:	68ba      	ldr	r2, [r7, #8]
 801ba52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba54:	699b      	ldr	r3, [r3, #24]
 801ba56:	441a      	add	r2, r3
 801ba58:	2300      	movs	r3, #0
 801ba5a:	9300      	str	r3, [sp, #0]
 801ba5c:	2300      	movs	r3, #0
 801ba5e:	2100      	movs	r1, #0
 801ba60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ba62:	f7ff fe09 	bl	801b678 <xTimerGenericCommand>
 801ba66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801ba68:	6a3b      	ldr	r3, [r7, #32]
 801ba6a:	2b00      	cmp	r3, #0
 801ba6c:	d14d      	bne.n	801bb0a <prvProcessReceivedCommands+0x196>
 801ba6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ba72:	f383 8811 	msr	BASEPRI, r3
 801ba76:	f3bf 8f6f 	isb	sy
 801ba7a:	f3bf 8f4f 	dsb	sy
 801ba7e:	61bb      	str	r3, [r7, #24]
 801ba80:	e7fe      	b.n	801ba80 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801ba82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ba88:	f023 0301 	bic.w	r3, r3, #1
 801ba8c:	b2da      	uxtb	r2, r3
 801ba8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801ba94:	e039      	b.n	801bb0a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801ba96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ba9c:	f043 0301 	orr.w	r3, r3, #1
 801baa0:	b2da      	uxtb	r2, r3
 801baa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801baa4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801baa8:	68ba      	ldr	r2, [r7, #8]
 801baaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801baac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801baae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bab0:	699b      	ldr	r3, [r3, #24]
 801bab2:	2b00      	cmp	r3, #0
 801bab4:	d109      	bne.n	801baca <prvProcessReceivedCommands+0x156>
 801bab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801baba:	f383 8811 	msr	BASEPRI, r3
 801babe:	f3bf 8f6f 	isb	sy
 801bac2:	f3bf 8f4f 	dsb	sy
 801bac6:	617b      	str	r3, [r7, #20]
 801bac8:	e7fe      	b.n	801bac8 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801baca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bacc:	699a      	ldr	r2, [r3, #24]
 801bace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bad0:	18d1      	adds	r1, r2, r3
 801bad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bad6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bad8:	f7ff ff0a 	bl	801b8f0 <prvInsertTimerInActiveList>
					break;
 801badc:	e015      	b.n	801bb0a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801bade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bae0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bae4:	f003 0302 	and.w	r3, r3, #2
 801bae8:	2b00      	cmp	r3, #0
 801baea:	d103      	bne.n	801baf4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 801baec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801baee:	f000 fbc1 	bl	801c274 <vPortFree>
 801baf2:	e00a      	b.n	801bb0a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801baf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801baf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bafa:	f023 0301 	bic.w	r3, r3, #1
 801bafe:	b2da      	uxtb	r2, r3
 801bb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bb02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801bb06:	e000      	b.n	801bb0a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801bb08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801bb0a:	4b07      	ldr	r3, [pc, #28]	; (801bb28 <prvProcessReceivedCommands+0x1b4>)
 801bb0c:	681b      	ldr	r3, [r3, #0]
 801bb0e:	1d39      	adds	r1, r7, #4
 801bb10:	2200      	movs	r2, #0
 801bb12:	4618      	mov	r0, r3
 801bb14:	f7fe f954 	bl	8019dc0 <xQueueReceive>
 801bb18:	4603      	mov	r3, r0
 801bb1a:	2b00      	cmp	r3, #0
 801bb1c:	f47f af2e 	bne.w	801b97c <prvProcessReceivedCommands+0x8>
	}
}
 801bb20:	bf00      	nop
 801bb22:	3730      	adds	r7, #48	; 0x30
 801bb24:	46bd      	mov	sp, r7
 801bb26:	bd80      	pop	{r7, pc}
 801bb28:	20001094 	.word	0x20001094

0801bb2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801bb2c:	b580      	push	{r7, lr}
 801bb2e:	b088      	sub	sp, #32
 801bb30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801bb32:	e047      	b.n	801bbc4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801bb34:	4b2d      	ldr	r3, [pc, #180]	; (801bbec <prvSwitchTimerLists+0xc0>)
 801bb36:	681b      	ldr	r3, [r3, #0]
 801bb38:	68db      	ldr	r3, [r3, #12]
 801bb3a:	681b      	ldr	r3, [r3, #0]
 801bb3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801bb3e:	4b2b      	ldr	r3, [pc, #172]	; (801bbec <prvSwitchTimerLists+0xc0>)
 801bb40:	681b      	ldr	r3, [r3, #0]
 801bb42:	68db      	ldr	r3, [r3, #12]
 801bb44:	68db      	ldr	r3, [r3, #12]
 801bb46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801bb48:	68fb      	ldr	r3, [r7, #12]
 801bb4a:	3304      	adds	r3, #4
 801bb4c:	4618      	mov	r0, r3
 801bb4e:	f7fd fd51 	bl	80195f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801bb52:	68fb      	ldr	r3, [r7, #12]
 801bb54:	6a1b      	ldr	r3, [r3, #32]
 801bb56:	68f8      	ldr	r0, [r7, #12]
 801bb58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801bb5a:	68fb      	ldr	r3, [r7, #12]
 801bb5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bb60:	f003 0304 	and.w	r3, r3, #4
 801bb64:	2b00      	cmp	r3, #0
 801bb66:	d02d      	beq.n	801bbc4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801bb68:	68fb      	ldr	r3, [r7, #12]
 801bb6a:	699b      	ldr	r3, [r3, #24]
 801bb6c:	693a      	ldr	r2, [r7, #16]
 801bb6e:	4413      	add	r3, r2
 801bb70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801bb72:	68ba      	ldr	r2, [r7, #8]
 801bb74:	693b      	ldr	r3, [r7, #16]
 801bb76:	429a      	cmp	r2, r3
 801bb78:	d90e      	bls.n	801bb98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801bb7a:	68fb      	ldr	r3, [r7, #12]
 801bb7c:	68ba      	ldr	r2, [r7, #8]
 801bb7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801bb80:	68fb      	ldr	r3, [r7, #12]
 801bb82:	68fa      	ldr	r2, [r7, #12]
 801bb84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801bb86:	4b19      	ldr	r3, [pc, #100]	; (801bbec <prvSwitchTimerLists+0xc0>)
 801bb88:	681a      	ldr	r2, [r3, #0]
 801bb8a:	68fb      	ldr	r3, [r7, #12]
 801bb8c:	3304      	adds	r3, #4
 801bb8e:	4619      	mov	r1, r3
 801bb90:	4610      	mov	r0, r2
 801bb92:	f7fd fcf6 	bl	8019582 <vListInsert>
 801bb96:	e015      	b.n	801bbc4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801bb98:	2300      	movs	r3, #0
 801bb9a:	9300      	str	r3, [sp, #0]
 801bb9c:	2300      	movs	r3, #0
 801bb9e:	693a      	ldr	r2, [r7, #16]
 801bba0:	2100      	movs	r1, #0
 801bba2:	68f8      	ldr	r0, [r7, #12]
 801bba4:	f7ff fd68 	bl	801b678 <xTimerGenericCommand>
 801bba8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801bbaa:	687b      	ldr	r3, [r7, #4]
 801bbac:	2b00      	cmp	r3, #0
 801bbae:	d109      	bne.n	801bbc4 <prvSwitchTimerLists+0x98>
 801bbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bbb4:	f383 8811 	msr	BASEPRI, r3
 801bbb8:	f3bf 8f6f 	isb	sy
 801bbbc:	f3bf 8f4f 	dsb	sy
 801bbc0:	603b      	str	r3, [r7, #0]
 801bbc2:	e7fe      	b.n	801bbc2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801bbc4:	4b09      	ldr	r3, [pc, #36]	; (801bbec <prvSwitchTimerLists+0xc0>)
 801bbc6:	681b      	ldr	r3, [r3, #0]
 801bbc8:	681b      	ldr	r3, [r3, #0]
 801bbca:	2b00      	cmp	r3, #0
 801bbcc:	d1b2      	bne.n	801bb34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801bbce:	4b07      	ldr	r3, [pc, #28]	; (801bbec <prvSwitchTimerLists+0xc0>)
 801bbd0:	681b      	ldr	r3, [r3, #0]
 801bbd2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801bbd4:	4b06      	ldr	r3, [pc, #24]	; (801bbf0 <prvSwitchTimerLists+0xc4>)
 801bbd6:	681b      	ldr	r3, [r3, #0]
 801bbd8:	4a04      	ldr	r2, [pc, #16]	; (801bbec <prvSwitchTimerLists+0xc0>)
 801bbda:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801bbdc:	4a04      	ldr	r2, [pc, #16]	; (801bbf0 <prvSwitchTimerLists+0xc4>)
 801bbde:	697b      	ldr	r3, [r7, #20]
 801bbe0:	6013      	str	r3, [r2, #0]
}
 801bbe2:	bf00      	nop
 801bbe4:	3718      	adds	r7, #24
 801bbe6:	46bd      	mov	sp, r7
 801bbe8:	bd80      	pop	{r7, pc}
 801bbea:	bf00      	nop
 801bbec:	2000108c 	.word	0x2000108c
 801bbf0:	20001090 	.word	0x20001090

0801bbf4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801bbf4:	b580      	push	{r7, lr}
 801bbf6:	b082      	sub	sp, #8
 801bbf8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801bbfa:	f000 f95f 	bl	801bebc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801bbfe:	4b15      	ldr	r3, [pc, #84]	; (801bc54 <prvCheckForValidListAndQueue+0x60>)
 801bc00:	681b      	ldr	r3, [r3, #0]
 801bc02:	2b00      	cmp	r3, #0
 801bc04:	d120      	bne.n	801bc48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801bc06:	4814      	ldr	r0, [pc, #80]	; (801bc58 <prvCheckForValidListAndQueue+0x64>)
 801bc08:	f7fd fc6a 	bl	80194e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801bc0c:	4813      	ldr	r0, [pc, #76]	; (801bc5c <prvCheckForValidListAndQueue+0x68>)
 801bc0e:	f7fd fc67 	bl	80194e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801bc12:	4b13      	ldr	r3, [pc, #76]	; (801bc60 <prvCheckForValidListAndQueue+0x6c>)
 801bc14:	4a10      	ldr	r2, [pc, #64]	; (801bc58 <prvCheckForValidListAndQueue+0x64>)
 801bc16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801bc18:	4b12      	ldr	r3, [pc, #72]	; (801bc64 <prvCheckForValidListAndQueue+0x70>)
 801bc1a:	4a10      	ldr	r2, [pc, #64]	; (801bc5c <prvCheckForValidListAndQueue+0x68>)
 801bc1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801bc1e:	2300      	movs	r3, #0
 801bc20:	9300      	str	r3, [sp, #0]
 801bc22:	4b11      	ldr	r3, [pc, #68]	; (801bc68 <prvCheckForValidListAndQueue+0x74>)
 801bc24:	4a11      	ldr	r2, [pc, #68]	; (801bc6c <prvCheckForValidListAndQueue+0x78>)
 801bc26:	2110      	movs	r1, #16
 801bc28:	200a      	movs	r0, #10
 801bc2a:	f7fd fd75 	bl	8019718 <xQueueGenericCreateStatic>
 801bc2e:	4602      	mov	r2, r0
 801bc30:	4b08      	ldr	r3, [pc, #32]	; (801bc54 <prvCheckForValidListAndQueue+0x60>)
 801bc32:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801bc34:	4b07      	ldr	r3, [pc, #28]	; (801bc54 <prvCheckForValidListAndQueue+0x60>)
 801bc36:	681b      	ldr	r3, [r3, #0]
 801bc38:	2b00      	cmp	r3, #0
 801bc3a:	d005      	beq.n	801bc48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801bc3c:	4b05      	ldr	r3, [pc, #20]	; (801bc54 <prvCheckForValidListAndQueue+0x60>)
 801bc3e:	681b      	ldr	r3, [r3, #0]
 801bc40:	490b      	ldr	r1, [pc, #44]	; (801bc70 <prvCheckForValidListAndQueue+0x7c>)
 801bc42:	4618      	mov	r0, r3
 801bc44:	f7fe fc68 	bl	801a518 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801bc48:	f000 f966 	bl	801bf18 <vPortExitCritical>
}
 801bc4c:	bf00      	nop
 801bc4e:	46bd      	mov	sp, r7
 801bc50:	bd80      	pop	{r7, pc}
 801bc52:	bf00      	nop
 801bc54:	20001094 	.word	0x20001094
 801bc58:	20001064 	.word	0x20001064
 801bc5c:	20001078 	.word	0x20001078
 801bc60:	2000108c 	.word	0x2000108c
 801bc64:	20001090 	.word	0x20001090
 801bc68:	20001140 	.word	0x20001140
 801bc6c:	200010a0 	.word	0x200010a0
 801bc70:	0801fb28 	.word	0x0801fb28

0801bc74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801bc74:	b480      	push	{r7}
 801bc76:	b085      	sub	sp, #20
 801bc78:	af00      	add	r7, sp, #0
 801bc7a:	60f8      	str	r0, [r7, #12]
 801bc7c:	60b9      	str	r1, [r7, #8]
 801bc7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801bc80:	68fb      	ldr	r3, [r7, #12]
 801bc82:	3b04      	subs	r3, #4
 801bc84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801bc86:	68fb      	ldr	r3, [r7, #12]
 801bc88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801bc8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801bc8e:	68fb      	ldr	r3, [r7, #12]
 801bc90:	3b04      	subs	r3, #4
 801bc92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801bc94:	68bb      	ldr	r3, [r7, #8]
 801bc96:	f023 0201 	bic.w	r2, r3, #1
 801bc9a:	68fb      	ldr	r3, [r7, #12]
 801bc9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801bc9e:	68fb      	ldr	r3, [r7, #12]
 801bca0:	3b04      	subs	r3, #4
 801bca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801bca4:	4a0c      	ldr	r2, [pc, #48]	; (801bcd8 <pxPortInitialiseStack+0x64>)
 801bca6:	68fb      	ldr	r3, [r7, #12]
 801bca8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801bcaa:	68fb      	ldr	r3, [r7, #12]
 801bcac:	3b14      	subs	r3, #20
 801bcae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801bcb0:	687a      	ldr	r2, [r7, #4]
 801bcb2:	68fb      	ldr	r3, [r7, #12]
 801bcb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801bcb6:	68fb      	ldr	r3, [r7, #12]
 801bcb8:	3b04      	subs	r3, #4
 801bcba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801bcbc:	68fb      	ldr	r3, [r7, #12]
 801bcbe:	f06f 0202 	mvn.w	r2, #2
 801bcc2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801bcc4:	68fb      	ldr	r3, [r7, #12]
 801bcc6:	3b20      	subs	r3, #32
 801bcc8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801bcca:	68fb      	ldr	r3, [r7, #12]
}
 801bccc:	4618      	mov	r0, r3
 801bcce:	3714      	adds	r7, #20
 801bcd0:	46bd      	mov	sp, r7
 801bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcd6:	4770      	bx	lr
 801bcd8:	0801bcdd 	.word	0x0801bcdd

0801bcdc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801bcdc:	b480      	push	{r7}
 801bcde:	b085      	sub	sp, #20
 801bce0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801bce2:	2300      	movs	r3, #0
 801bce4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801bce6:	4b11      	ldr	r3, [pc, #68]	; (801bd2c <prvTaskExitError+0x50>)
 801bce8:	681b      	ldr	r3, [r3, #0]
 801bcea:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bcee:	d009      	beq.n	801bd04 <prvTaskExitError+0x28>
 801bcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bcf4:	f383 8811 	msr	BASEPRI, r3
 801bcf8:	f3bf 8f6f 	isb	sy
 801bcfc:	f3bf 8f4f 	dsb	sy
 801bd00:	60fb      	str	r3, [r7, #12]
 801bd02:	e7fe      	b.n	801bd02 <prvTaskExitError+0x26>
 801bd04:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bd08:	f383 8811 	msr	BASEPRI, r3
 801bd0c:	f3bf 8f6f 	isb	sy
 801bd10:	f3bf 8f4f 	dsb	sy
 801bd14:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801bd16:	bf00      	nop
 801bd18:	687b      	ldr	r3, [r7, #4]
 801bd1a:	2b00      	cmp	r3, #0
 801bd1c:	d0fc      	beq.n	801bd18 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801bd1e:	bf00      	nop
 801bd20:	3714      	adds	r7, #20
 801bd22:	46bd      	mov	sp, r7
 801bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd28:	4770      	bx	lr
 801bd2a:	bf00      	nop
 801bd2c:	200001ac 	.word	0x200001ac

0801bd30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801bd30:	4b07      	ldr	r3, [pc, #28]	; (801bd50 <pxCurrentTCBConst2>)
 801bd32:	6819      	ldr	r1, [r3, #0]
 801bd34:	6808      	ldr	r0, [r1, #0]
 801bd36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd3a:	f380 8809 	msr	PSP, r0
 801bd3e:	f3bf 8f6f 	isb	sy
 801bd42:	f04f 0000 	mov.w	r0, #0
 801bd46:	f380 8811 	msr	BASEPRI, r0
 801bd4a:	4770      	bx	lr
 801bd4c:	f3af 8000 	nop.w

0801bd50 <pxCurrentTCBConst2>:
 801bd50:	20000b64 	.word	0x20000b64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801bd54:	bf00      	nop
 801bd56:	bf00      	nop

0801bd58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801bd58:	4808      	ldr	r0, [pc, #32]	; (801bd7c <prvPortStartFirstTask+0x24>)
 801bd5a:	6800      	ldr	r0, [r0, #0]
 801bd5c:	6800      	ldr	r0, [r0, #0]
 801bd5e:	f380 8808 	msr	MSP, r0
 801bd62:	f04f 0000 	mov.w	r0, #0
 801bd66:	f380 8814 	msr	CONTROL, r0
 801bd6a:	b662      	cpsie	i
 801bd6c:	b661      	cpsie	f
 801bd6e:	f3bf 8f4f 	dsb	sy
 801bd72:	f3bf 8f6f 	isb	sy
 801bd76:	df00      	svc	0
 801bd78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801bd7a:	bf00      	nop
 801bd7c:	e000ed08 	.word	0xe000ed08

0801bd80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801bd80:	b580      	push	{r7, lr}
 801bd82:	b086      	sub	sp, #24
 801bd84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801bd86:	4b44      	ldr	r3, [pc, #272]	; (801be98 <xPortStartScheduler+0x118>)
 801bd88:	681b      	ldr	r3, [r3, #0]
 801bd8a:	4a44      	ldr	r2, [pc, #272]	; (801be9c <xPortStartScheduler+0x11c>)
 801bd8c:	4293      	cmp	r3, r2
 801bd8e:	d109      	bne.n	801bda4 <xPortStartScheduler+0x24>
 801bd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bd94:	f383 8811 	msr	BASEPRI, r3
 801bd98:	f3bf 8f6f 	isb	sy
 801bd9c:	f3bf 8f4f 	dsb	sy
 801bda0:	613b      	str	r3, [r7, #16]
 801bda2:	e7fe      	b.n	801bda2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801bda4:	4b3c      	ldr	r3, [pc, #240]	; (801be98 <xPortStartScheduler+0x118>)
 801bda6:	681b      	ldr	r3, [r3, #0]
 801bda8:	4a3d      	ldr	r2, [pc, #244]	; (801bea0 <xPortStartScheduler+0x120>)
 801bdaa:	4293      	cmp	r3, r2
 801bdac:	d109      	bne.n	801bdc2 <xPortStartScheduler+0x42>
 801bdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bdb2:	f383 8811 	msr	BASEPRI, r3
 801bdb6:	f3bf 8f6f 	isb	sy
 801bdba:	f3bf 8f4f 	dsb	sy
 801bdbe:	60fb      	str	r3, [r7, #12]
 801bdc0:	e7fe      	b.n	801bdc0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801bdc2:	4b38      	ldr	r3, [pc, #224]	; (801bea4 <xPortStartScheduler+0x124>)
 801bdc4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801bdc6:	697b      	ldr	r3, [r7, #20]
 801bdc8:	781b      	ldrb	r3, [r3, #0]
 801bdca:	b2db      	uxtb	r3, r3
 801bdcc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801bdce:	697b      	ldr	r3, [r7, #20]
 801bdd0:	22ff      	movs	r2, #255	; 0xff
 801bdd2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801bdd4:	697b      	ldr	r3, [r7, #20]
 801bdd6:	781b      	ldrb	r3, [r3, #0]
 801bdd8:	b2db      	uxtb	r3, r3
 801bdda:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801bddc:	78fb      	ldrb	r3, [r7, #3]
 801bdde:	b2db      	uxtb	r3, r3
 801bde0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801bde4:	b2da      	uxtb	r2, r3
 801bde6:	4b30      	ldr	r3, [pc, #192]	; (801bea8 <xPortStartScheduler+0x128>)
 801bde8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801bdea:	4b30      	ldr	r3, [pc, #192]	; (801beac <xPortStartScheduler+0x12c>)
 801bdec:	2207      	movs	r2, #7
 801bdee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801bdf0:	e009      	b.n	801be06 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 801bdf2:	4b2e      	ldr	r3, [pc, #184]	; (801beac <xPortStartScheduler+0x12c>)
 801bdf4:	681b      	ldr	r3, [r3, #0]
 801bdf6:	3b01      	subs	r3, #1
 801bdf8:	4a2c      	ldr	r2, [pc, #176]	; (801beac <xPortStartScheduler+0x12c>)
 801bdfa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801bdfc:	78fb      	ldrb	r3, [r7, #3]
 801bdfe:	b2db      	uxtb	r3, r3
 801be00:	005b      	lsls	r3, r3, #1
 801be02:	b2db      	uxtb	r3, r3
 801be04:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801be06:	78fb      	ldrb	r3, [r7, #3]
 801be08:	b2db      	uxtb	r3, r3
 801be0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801be0e:	2b80      	cmp	r3, #128	; 0x80
 801be10:	d0ef      	beq.n	801bdf2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801be12:	4b26      	ldr	r3, [pc, #152]	; (801beac <xPortStartScheduler+0x12c>)
 801be14:	681b      	ldr	r3, [r3, #0]
 801be16:	f1c3 0307 	rsb	r3, r3, #7
 801be1a:	2b04      	cmp	r3, #4
 801be1c:	d009      	beq.n	801be32 <xPortStartScheduler+0xb2>
 801be1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801be22:	f383 8811 	msr	BASEPRI, r3
 801be26:	f3bf 8f6f 	isb	sy
 801be2a:	f3bf 8f4f 	dsb	sy
 801be2e:	60bb      	str	r3, [r7, #8]
 801be30:	e7fe      	b.n	801be30 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801be32:	4b1e      	ldr	r3, [pc, #120]	; (801beac <xPortStartScheduler+0x12c>)
 801be34:	681b      	ldr	r3, [r3, #0]
 801be36:	021b      	lsls	r3, r3, #8
 801be38:	4a1c      	ldr	r2, [pc, #112]	; (801beac <xPortStartScheduler+0x12c>)
 801be3a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801be3c:	4b1b      	ldr	r3, [pc, #108]	; (801beac <xPortStartScheduler+0x12c>)
 801be3e:	681b      	ldr	r3, [r3, #0]
 801be40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801be44:	4a19      	ldr	r2, [pc, #100]	; (801beac <xPortStartScheduler+0x12c>)
 801be46:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801be48:	687b      	ldr	r3, [r7, #4]
 801be4a:	b2da      	uxtb	r2, r3
 801be4c:	697b      	ldr	r3, [r7, #20]
 801be4e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801be50:	4b17      	ldr	r3, [pc, #92]	; (801beb0 <xPortStartScheduler+0x130>)
 801be52:	681b      	ldr	r3, [r3, #0]
 801be54:	4a16      	ldr	r2, [pc, #88]	; (801beb0 <xPortStartScheduler+0x130>)
 801be56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801be5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801be5c:	4b14      	ldr	r3, [pc, #80]	; (801beb0 <xPortStartScheduler+0x130>)
 801be5e:	681b      	ldr	r3, [r3, #0]
 801be60:	4a13      	ldr	r2, [pc, #76]	; (801beb0 <xPortStartScheduler+0x130>)
 801be62:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801be66:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801be68:	f000 f8d6 	bl	801c018 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801be6c:	4b11      	ldr	r3, [pc, #68]	; (801beb4 <xPortStartScheduler+0x134>)
 801be6e:	2200      	movs	r2, #0
 801be70:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801be72:	f000 f8f5 	bl	801c060 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801be76:	4b10      	ldr	r3, [pc, #64]	; (801beb8 <xPortStartScheduler+0x138>)
 801be78:	681b      	ldr	r3, [r3, #0]
 801be7a:	4a0f      	ldr	r2, [pc, #60]	; (801beb8 <xPortStartScheduler+0x138>)
 801be7c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801be80:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801be82:	f7ff ff69 	bl	801bd58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801be86:	f7fe ff75 	bl	801ad74 <vTaskSwitchContext>
	prvTaskExitError();
 801be8a:	f7ff ff27 	bl	801bcdc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801be8e:	2300      	movs	r3, #0
}
 801be90:	4618      	mov	r0, r3
 801be92:	3718      	adds	r7, #24
 801be94:	46bd      	mov	sp, r7
 801be96:	bd80      	pop	{r7, pc}
 801be98:	e000ed00 	.word	0xe000ed00
 801be9c:	410fc271 	.word	0x410fc271
 801bea0:	410fc270 	.word	0x410fc270
 801bea4:	e000e400 	.word	0xe000e400
 801bea8:	20001190 	.word	0x20001190
 801beac:	20001194 	.word	0x20001194
 801beb0:	e000ed20 	.word	0xe000ed20
 801beb4:	200001ac 	.word	0x200001ac
 801beb8:	e000ef34 	.word	0xe000ef34

0801bebc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801bebc:	b480      	push	{r7}
 801bebe:	b083      	sub	sp, #12
 801bec0:	af00      	add	r7, sp, #0
 801bec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bec6:	f383 8811 	msr	BASEPRI, r3
 801beca:	f3bf 8f6f 	isb	sy
 801bece:	f3bf 8f4f 	dsb	sy
 801bed2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801bed4:	4b0e      	ldr	r3, [pc, #56]	; (801bf10 <vPortEnterCritical+0x54>)
 801bed6:	681b      	ldr	r3, [r3, #0]
 801bed8:	3301      	adds	r3, #1
 801beda:	4a0d      	ldr	r2, [pc, #52]	; (801bf10 <vPortEnterCritical+0x54>)
 801bedc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801bede:	4b0c      	ldr	r3, [pc, #48]	; (801bf10 <vPortEnterCritical+0x54>)
 801bee0:	681b      	ldr	r3, [r3, #0]
 801bee2:	2b01      	cmp	r3, #1
 801bee4:	d10e      	bne.n	801bf04 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801bee6:	4b0b      	ldr	r3, [pc, #44]	; (801bf14 <vPortEnterCritical+0x58>)
 801bee8:	681b      	ldr	r3, [r3, #0]
 801beea:	b2db      	uxtb	r3, r3
 801beec:	2b00      	cmp	r3, #0
 801beee:	d009      	beq.n	801bf04 <vPortEnterCritical+0x48>
 801bef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bef4:	f383 8811 	msr	BASEPRI, r3
 801bef8:	f3bf 8f6f 	isb	sy
 801befc:	f3bf 8f4f 	dsb	sy
 801bf00:	603b      	str	r3, [r7, #0]
 801bf02:	e7fe      	b.n	801bf02 <vPortEnterCritical+0x46>
	}
}
 801bf04:	bf00      	nop
 801bf06:	370c      	adds	r7, #12
 801bf08:	46bd      	mov	sp, r7
 801bf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf0e:	4770      	bx	lr
 801bf10:	200001ac 	.word	0x200001ac
 801bf14:	e000ed04 	.word	0xe000ed04

0801bf18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801bf18:	b480      	push	{r7}
 801bf1a:	b083      	sub	sp, #12
 801bf1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801bf1e:	4b11      	ldr	r3, [pc, #68]	; (801bf64 <vPortExitCritical+0x4c>)
 801bf20:	681b      	ldr	r3, [r3, #0]
 801bf22:	2b00      	cmp	r3, #0
 801bf24:	d109      	bne.n	801bf3a <vPortExitCritical+0x22>
 801bf26:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bf2a:	f383 8811 	msr	BASEPRI, r3
 801bf2e:	f3bf 8f6f 	isb	sy
 801bf32:	f3bf 8f4f 	dsb	sy
 801bf36:	607b      	str	r3, [r7, #4]
 801bf38:	e7fe      	b.n	801bf38 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801bf3a:	4b0a      	ldr	r3, [pc, #40]	; (801bf64 <vPortExitCritical+0x4c>)
 801bf3c:	681b      	ldr	r3, [r3, #0]
 801bf3e:	3b01      	subs	r3, #1
 801bf40:	4a08      	ldr	r2, [pc, #32]	; (801bf64 <vPortExitCritical+0x4c>)
 801bf42:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801bf44:	4b07      	ldr	r3, [pc, #28]	; (801bf64 <vPortExitCritical+0x4c>)
 801bf46:	681b      	ldr	r3, [r3, #0]
 801bf48:	2b00      	cmp	r3, #0
 801bf4a:	d104      	bne.n	801bf56 <vPortExitCritical+0x3e>
 801bf4c:	2300      	movs	r3, #0
 801bf4e:	603b      	str	r3, [r7, #0]
	__asm volatile
 801bf50:	683b      	ldr	r3, [r7, #0]
 801bf52:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 801bf56:	bf00      	nop
 801bf58:	370c      	adds	r7, #12
 801bf5a:	46bd      	mov	sp, r7
 801bf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf60:	4770      	bx	lr
 801bf62:	bf00      	nop
 801bf64:	200001ac 	.word	0x200001ac
	...

0801bf70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801bf70:	f3ef 8009 	mrs	r0, PSP
 801bf74:	f3bf 8f6f 	isb	sy
 801bf78:	4b15      	ldr	r3, [pc, #84]	; (801bfd0 <pxCurrentTCBConst>)
 801bf7a:	681a      	ldr	r2, [r3, #0]
 801bf7c:	f01e 0f10 	tst.w	lr, #16
 801bf80:	bf08      	it	eq
 801bf82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801bf86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf8a:	6010      	str	r0, [r2, #0]
 801bf8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801bf90:	f04f 0050 	mov.w	r0, #80	; 0x50
 801bf94:	f380 8811 	msr	BASEPRI, r0
 801bf98:	f3bf 8f4f 	dsb	sy
 801bf9c:	f3bf 8f6f 	isb	sy
 801bfa0:	f7fe fee8 	bl	801ad74 <vTaskSwitchContext>
 801bfa4:	f04f 0000 	mov.w	r0, #0
 801bfa8:	f380 8811 	msr	BASEPRI, r0
 801bfac:	bc09      	pop	{r0, r3}
 801bfae:	6819      	ldr	r1, [r3, #0]
 801bfb0:	6808      	ldr	r0, [r1, #0]
 801bfb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfb6:	f01e 0f10 	tst.w	lr, #16
 801bfba:	bf08      	it	eq
 801bfbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801bfc0:	f380 8809 	msr	PSP, r0
 801bfc4:	f3bf 8f6f 	isb	sy
 801bfc8:	4770      	bx	lr
 801bfca:	bf00      	nop
 801bfcc:	f3af 8000 	nop.w

0801bfd0 <pxCurrentTCBConst>:
 801bfd0:	20000b64 	.word	0x20000b64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801bfd4:	bf00      	nop
 801bfd6:	bf00      	nop

0801bfd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801bfd8:	b580      	push	{r7, lr}
 801bfda:	b082      	sub	sp, #8
 801bfdc:	af00      	add	r7, sp, #0
	__asm volatile
 801bfde:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bfe2:	f383 8811 	msr	BASEPRI, r3
 801bfe6:	f3bf 8f6f 	isb	sy
 801bfea:	f3bf 8f4f 	dsb	sy
 801bfee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801bff0:	f7fe fe08 	bl	801ac04 <xTaskIncrementTick>
 801bff4:	4603      	mov	r3, r0
 801bff6:	2b00      	cmp	r3, #0
 801bff8:	d003      	beq.n	801c002 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801bffa:	4b06      	ldr	r3, [pc, #24]	; (801c014 <SysTick_Handler+0x3c>)
 801bffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801c000:	601a      	str	r2, [r3, #0]
 801c002:	2300      	movs	r3, #0
 801c004:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c006:	683b      	ldr	r3, [r7, #0]
 801c008:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801c00c:	bf00      	nop
 801c00e:	3708      	adds	r7, #8
 801c010:	46bd      	mov	sp, r7
 801c012:	bd80      	pop	{r7, pc}
 801c014:	e000ed04 	.word	0xe000ed04

0801c018 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801c018:	b480      	push	{r7}
 801c01a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801c01c:	4b0b      	ldr	r3, [pc, #44]	; (801c04c <vPortSetupTimerInterrupt+0x34>)
 801c01e:	2200      	movs	r2, #0
 801c020:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801c022:	4b0b      	ldr	r3, [pc, #44]	; (801c050 <vPortSetupTimerInterrupt+0x38>)
 801c024:	2200      	movs	r2, #0
 801c026:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801c028:	4b0a      	ldr	r3, [pc, #40]	; (801c054 <vPortSetupTimerInterrupt+0x3c>)
 801c02a:	681b      	ldr	r3, [r3, #0]
 801c02c:	4a0a      	ldr	r2, [pc, #40]	; (801c058 <vPortSetupTimerInterrupt+0x40>)
 801c02e:	fba2 2303 	umull	r2, r3, r2, r3
 801c032:	099b      	lsrs	r3, r3, #6
 801c034:	4a09      	ldr	r2, [pc, #36]	; (801c05c <vPortSetupTimerInterrupt+0x44>)
 801c036:	3b01      	subs	r3, #1
 801c038:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801c03a:	4b04      	ldr	r3, [pc, #16]	; (801c04c <vPortSetupTimerInterrupt+0x34>)
 801c03c:	2207      	movs	r2, #7
 801c03e:	601a      	str	r2, [r3, #0]
}
 801c040:	bf00      	nop
 801c042:	46bd      	mov	sp, r7
 801c044:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c048:	4770      	bx	lr
 801c04a:	bf00      	nop
 801c04c:	e000e010 	.word	0xe000e010
 801c050:	e000e018 	.word	0xe000e018
 801c054:	20000004 	.word	0x20000004
 801c058:	10624dd3 	.word	0x10624dd3
 801c05c:	e000e014 	.word	0xe000e014

0801c060 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801c060:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801c070 <vPortEnableVFP+0x10>
 801c064:	6801      	ldr	r1, [r0, #0]
 801c066:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801c06a:	6001      	str	r1, [r0, #0]
 801c06c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801c06e:	bf00      	nop
 801c070:	e000ed88 	.word	0xe000ed88

0801c074 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801c074:	b480      	push	{r7}
 801c076:	b085      	sub	sp, #20
 801c078:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801c07a:	f3ef 8305 	mrs	r3, IPSR
 801c07e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801c080:	68fb      	ldr	r3, [r7, #12]
 801c082:	2b0f      	cmp	r3, #15
 801c084:	d913      	bls.n	801c0ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801c086:	4a16      	ldr	r2, [pc, #88]	; (801c0e0 <vPortValidateInterruptPriority+0x6c>)
 801c088:	68fb      	ldr	r3, [r7, #12]
 801c08a:	4413      	add	r3, r2
 801c08c:	781b      	ldrb	r3, [r3, #0]
 801c08e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801c090:	4b14      	ldr	r3, [pc, #80]	; (801c0e4 <vPortValidateInterruptPriority+0x70>)
 801c092:	781b      	ldrb	r3, [r3, #0]
 801c094:	7afa      	ldrb	r2, [r7, #11]
 801c096:	429a      	cmp	r2, r3
 801c098:	d209      	bcs.n	801c0ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801c09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c09e:	f383 8811 	msr	BASEPRI, r3
 801c0a2:	f3bf 8f6f 	isb	sy
 801c0a6:	f3bf 8f4f 	dsb	sy
 801c0aa:	607b      	str	r3, [r7, #4]
 801c0ac:	e7fe      	b.n	801c0ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801c0ae:	4b0e      	ldr	r3, [pc, #56]	; (801c0e8 <vPortValidateInterruptPriority+0x74>)
 801c0b0:	681b      	ldr	r3, [r3, #0]
 801c0b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801c0b6:	4b0d      	ldr	r3, [pc, #52]	; (801c0ec <vPortValidateInterruptPriority+0x78>)
 801c0b8:	681b      	ldr	r3, [r3, #0]
 801c0ba:	429a      	cmp	r2, r3
 801c0bc:	d909      	bls.n	801c0d2 <vPortValidateInterruptPriority+0x5e>
 801c0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c0c2:	f383 8811 	msr	BASEPRI, r3
 801c0c6:	f3bf 8f6f 	isb	sy
 801c0ca:	f3bf 8f4f 	dsb	sy
 801c0ce:	603b      	str	r3, [r7, #0]
 801c0d0:	e7fe      	b.n	801c0d0 <vPortValidateInterruptPriority+0x5c>
	}
 801c0d2:	bf00      	nop
 801c0d4:	3714      	adds	r7, #20
 801c0d6:	46bd      	mov	sp, r7
 801c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0dc:	4770      	bx	lr
 801c0de:	bf00      	nop
 801c0e0:	e000e3f0 	.word	0xe000e3f0
 801c0e4:	20001190 	.word	0x20001190
 801c0e8:	e000ed0c 	.word	0xe000ed0c
 801c0ec:	20001194 	.word	0x20001194

0801c0f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801c0f0:	b580      	push	{r7, lr}
 801c0f2:	b08a      	sub	sp, #40	; 0x28
 801c0f4:	af00      	add	r7, sp, #0
 801c0f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801c0f8:	2300      	movs	r3, #0
 801c0fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801c0fc:	f7fe fcc8 	bl	801aa90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801c100:	4b57      	ldr	r3, [pc, #348]	; (801c260 <pvPortMalloc+0x170>)
 801c102:	681b      	ldr	r3, [r3, #0]
 801c104:	2b00      	cmp	r3, #0
 801c106:	d101      	bne.n	801c10c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801c108:	f000 f90c 	bl	801c324 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801c10c:	4b55      	ldr	r3, [pc, #340]	; (801c264 <pvPortMalloc+0x174>)
 801c10e:	681a      	ldr	r2, [r3, #0]
 801c110:	687b      	ldr	r3, [r7, #4]
 801c112:	4013      	ands	r3, r2
 801c114:	2b00      	cmp	r3, #0
 801c116:	f040 808c 	bne.w	801c232 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801c11a:	687b      	ldr	r3, [r7, #4]
 801c11c:	2b00      	cmp	r3, #0
 801c11e:	d01c      	beq.n	801c15a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 801c120:	2208      	movs	r2, #8
 801c122:	687b      	ldr	r3, [r7, #4]
 801c124:	4413      	add	r3, r2
 801c126:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801c128:	687b      	ldr	r3, [r7, #4]
 801c12a:	f003 0307 	and.w	r3, r3, #7
 801c12e:	2b00      	cmp	r3, #0
 801c130:	d013      	beq.n	801c15a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801c132:	687b      	ldr	r3, [r7, #4]
 801c134:	f023 0307 	bic.w	r3, r3, #7
 801c138:	3308      	adds	r3, #8
 801c13a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	f003 0307 	and.w	r3, r3, #7
 801c142:	2b00      	cmp	r3, #0
 801c144:	d009      	beq.n	801c15a <pvPortMalloc+0x6a>
 801c146:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c14a:	f383 8811 	msr	BASEPRI, r3
 801c14e:	f3bf 8f6f 	isb	sy
 801c152:	f3bf 8f4f 	dsb	sy
 801c156:	617b      	str	r3, [r7, #20]
 801c158:	e7fe      	b.n	801c158 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801c15a:	687b      	ldr	r3, [r7, #4]
 801c15c:	2b00      	cmp	r3, #0
 801c15e:	d068      	beq.n	801c232 <pvPortMalloc+0x142>
 801c160:	4b41      	ldr	r3, [pc, #260]	; (801c268 <pvPortMalloc+0x178>)
 801c162:	681b      	ldr	r3, [r3, #0]
 801c164:	687a      	ldr	r2, [r7, #4]
 801c166:	429a      	cmp	r2, r3
 801c168:	d863      	bhi.n	801c232 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801c16a:	4b40      	ldr	r3, [pc, #256]	; (801c26c <pvPortMalloc+0x17c>)
 801c16c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801c16e:	4b3f      	ldr	r3, [pc, #252]	; (801c26c <pvPortMalloc+0x17c>)
 801c170:	681b      	ldr	r3, [r3, #0]
 801c172:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801c174:	e004      	b.n	801c180 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 801c176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c178:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801c17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c17c:	681b      	ldr	r3, [r3, #0]
 801c17e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801c180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c182:	685b      	ldr	r3, [r3, #4]
 801c184:	687a      	ldr	r2, [r7, #4]
 801c186:	429a      	cmp	r2, r3
 801c188:	d903      	bls.n	801c192 <pvPortMalloc+0xa2>
 801c18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c18c:	681b      	ldr	r3, [r3, #0]
 801c18e:	2b00      	cmp	r3, #0
 801c190:	d1f1      	bne.n	801c176 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801c192:	4b33      	ldr	r3, [pc, #204]	; (801c260 <pvPortMalloc+0x170>)
 801c194:	681b      	ldr	r3, [r3, #0]
 801c196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c198:	429a      	cmp	r2, r3
 801c19a:	d04a      	beq.n	801c232 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801c19c:	6a3b      	ldr	r3, [r7, #32]
 801c19e:	681b      	ldr	r3, [r3, #0]
 801c1a0:	2208      	movs	r2, #8
 801c1a2:	4413      	add	r3, r2
 801c1a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801c1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1a8:	681a      	ldr	r2, [r3, #0]
 801c1aa:	6a3b      	ldr	r3, [r7, #32]
 801c1ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801c1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1b0:	685a      	ldr	r2, [r3, #4]
 801c1b2:	687b      	ldr	r3, [r7, #4]
 801c1b4:	1ad2      	subs	r2, r2, r3
 801c1b6:	2308      	movs	r3, #8
 801c1b8:	005b      	lsls	r3, r3, #1
 801c1ba:	429a      	cmp	r2, r3
 801c1bc:	d91e      	bls.n	801c1fc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801c1be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	4413      	add	r3, r2
 801c1c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801c1c6:	69bb      	ldr	r3, [r7, #24]
 801c1c8:	f003 0307 	and.w	r3, r3, #7
 801c1cc:	2b00      	cmp	r3, #0
 801c1ce:	d009      	beq.n	801c1e4 <pvPortMalloc+0xf4>
 801c1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c1d4:	f383 8811 	msr	BASEPRI, r3
 801c1d8:	f3bf 8f6f 	isb	sy
 801c1dc:	f3bf 8f4f 	dsb	sy
 801c1e0:	613b      	str	r3, [r7, #16]
 801c1e2:	e7fe      	b.n	801c1e2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801c1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1e6:	685a      	ldr	r2, [r3, #4]
 801c1e8:	687b      	ldr	r3, [r7, #4]
 801c1ea:	1ad2      	subs	r2, r2, r3
 801c1ec:	69bb      	ldr	r3, [r7, #24]
 801c1ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801c1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1f2:	687a      	ldr	r2, [r7, #4]
 801c1f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801c1f6:	69b8      	ldr	r0, [r7, #24]
 801c1f8:	f000 f8f6 	bl	801c3e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801c1fc:	4b1a      	ldr	r3, [pc, #104]	; (801c268 <pvPortMalloc+0x178>)
 801c1fe:	681a      	ldr	r2, [r3, #0]
 801c200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c202:	685b      	ldr	r3, [r3, #4]
 801c204:	1ad3      	subs	r3, r2, r3
 801c206:	4a18      	ldr	r2, [pc, #96]	; (801c268 <pvPortMalloc+0x178>)
 801c208:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801c20a:	4b17      	ldr	r3, [pc, #92]	; (801c268 <pvPortMalloc+0x178>)
 801c20c:	681a      	ldr	r2, [r3, #0]
 801c20e:	4b18      	ldr	r3, [pc, #96]	; (801c270 <pvPortMalloc+0x180>)
 801c210:	681b      	ldr	r3, [r3, #0]
 801c212:	429a      	cmp	r2, r3
 801c214:	d203      	bcs.n	801c21e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801c216:	4b14      	ldr	r3, [pc, #80]	; (801c268 <pvPortMalloc+0x178>)
 801c218:	681b      	ldr	r3, [r3, #0]
 801c21a:	4a15      	ldr	r2, [pc, #84]	; (801c270 <pvPortMalloc+0x180>)
 801c21c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801c21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c220:	685a      	ldr	r2, [r3, #4]
 801c222:	4b10      	ldr	r3, [pc, #64]	; (801c264 <pvPortMalloc+0x174>)
 801c224:	681b      	ldr	r3, [r3, #0]
 801c226:	431a      	orrs	r2, r3
 801c228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c22a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801c22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c22e:	2200      	movs	r2, #0
 801c230:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801c232:	f7fe fc3b 	bl	801aaac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801c236:	69fb      	ldr	r3, [r7, #28]
 801c238:	f003 0307 	and.w	r3, r3, #7
 801c23c:	2b00      	cmp	r3, #0
 801c23e:	d009      	beq.n	801c254 <pvPortMalloc+0x164>
 801c240:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c244:	f383 8811 	msr	BASEPRI, r3
 801c248:	f3bf 8f6f 	isb	sy
 801c24c:	f3bf 8f4f 	dsb	sy
 801c250:	60fb      	str	r3, [r7, #12]
 801c252:	e7fe      	b.n	801c252 <pvPortMalloc+0x162>
	return pvReturn;
 801c254:	69fb      	ldr	r3, [r7, #28]
}
 801c256:	4618      	mov	r0, r3
 801c258:	3728      	adds	r7, #40	; 0x28
 801c25a:	46bd      	mov	sp, r7
 801c25c:	bd80      	pop	{r7, pc}
 801c25e:	bf00      	nop
 801c260:	20002910 	.word	0x20002910
 801c264:	2000291c 	.word	0x2000291c
 801c268:	20002914 	.word	0x20002914
 801c26c:	20002908 	.word	0x20002908
 801c270:	20002918 	.word	0x20002918

0801c274 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801c274:	b580      	push	{r7, lr}
 801c276:	b086      	sub	sp, #24
 801c278:	af00      	add	r7, sp, #0
 801c27a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801c27c:	687b      	ldr	r3, [r7, #4]
 801c27e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801c280:	687b      	ldr	r3, [r7, #4]
 801c282:	2b00      	cmp	r3, #0
 801c284:	d046      	beq.n	801c314 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801c286:	2308      	movs	r3, #8
 801c288:	425b      	negs	r3, r3
 801c28a:	697a      	ldr	r2, [r7, #20]
 801c28c:	4413      	add	r3, r2
 801c28e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801c290:	697b      	ldr	r3, [r7, #20]
 801c292:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801c294:	693b      	ldr	r3, [r7, #16]
 801c296:	685a      	ldr	r2, [r3, #4]
 801c298:	4b20      	ldr	r3, [pc, #128]	; (801c31c <vPortFree+0xa8>)
 801c29a:	681b      	ldr	r3, [r3, #0]
 801c29c:	4013      	ands	r3, r2
 801c29e:	2b00      	cmp	r3, #0
 801c2a0:	d109      	bne.n	801c2b6 <vPortFree+0x42>
 801c2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c2a6:	f383 8811 	msr	BASEPRI, r3
 801c2aa:	f3bf 8f6f 	isb	sy
 801c2ae:	f3bf 8f4f 	dsb	sy
 801c2b2:	60fb      	str	r3, [r7, #12]
 801c2b4:	e7fe      	b.n	801c2b4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801c2b6:	693b      	ldr	r3, [r7, #16]
 801c2b8:	681b      	ldr	r3, [r3, #0]
 801c2ba:	2b00      	cmp	r3, #0
 801c2bc:	d009      	beq.n	801c2d2 <vPortFree+0x5e>
 801c2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c2c2:	f383 8811 	msr	BASEPRI, r3
 801c2c6:	f3bf 8f6f 	isb	sy
 801c2ca:	f3bf 8f4f 	dsb	sy
 801c2ce:	60bb      	str	r3, [r7, #8]
 801c2d0:	e7fe      	b.n	801c2d0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801c2d2:	693b      	ldr	r3, [r7, #16]
 801c2d4:	685a      	ldr	r2, [r3, #4]
 801c2d6:	4b11      	ldr	r3, [pc, #68]	; (801c31c <vPortFree+0xa8>)
 801c2d8:	681b      	ldr	r3, [r3, #0]
 801c2da:	4013      	ands	r3, r2
 801c2dc:	2b00      	cmp	r3, #0
 801c2de:	d019      	beq.n	801c314 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801c2e0:	693b      	ldr	r3, [r7, #16]
 801c2e2:	681b      	ldr	r3, [r3, #0]
 801c2e4:	2b00      	cmp	r3, #0
 801c2e6:	d115      	bne.n	801c314 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801c2e8:	693b      	ldr	r3, [r7, #16]
 801c2ea:	685a      	ldr	r2, [r3, #4]
 801c2ec:	4b0b      	ldr	r3, [pc, #44]	; (801c31c <vPortFree+0xa8>)
 801c2ee:	681b      	ldr	r3, [r3, #0]
 801c2f0:	43db      	mvns	r3, r3
 801c2f2:	401a      	ands	r2, r3
 801c2f4:	693b      	ldr	r3, [r7, #16]
 801c2f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801c2f8:	f7fe fbca 	bl	801aa90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801c2fc:	693b      	ldr	r3, [r7, #16]
 801c2fe:	685a      	ldr	r2, [r3, #4]
 801c300:	4b07      	ldr	r3, [pc, #28]	; (801c320 <vPortFree+0xac>)
 801c302:	681b      	ldr	r3, [r3, #0]
 801c304:	4413      	add	r3, r2
 801c306:	4a06      	ldr	r2, [pc, #24]	; (801c320 <vPortFree+0xac>)
 801c308:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801c30a:	6938      	ldr	r0, [r7, #16]
 801c30c:	f000 f86c 	bl	801c3e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801c310:	f7fe fbcc 	bl	801aaac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801c314:	bf00      	nop
 801c316:	3718      	adds	r7, #24
 801c318:	46bd      	mov	sp, r7
 801c31a:	bd80      	pop	{r7, pc}
 801c31c:	2000291c 	.word	0x2000291c
 801c320:	20002914 	.word	0x20002914

0801c324 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801c324:	b480      	push	{r7}
 801c326:	b085      	sub	sp, #20
 801c328:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801c32a:	f241 7370 	movw	r3, #6000	; 0x1770
 801c32e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801c330:	4b27      	ldr	r3, [pc, #156]	; (801c3d0 <prvHeapInit+0xac>)
 801c332:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801c334:	68fb      	ldr	r3, [r7, #12]
 801c336:	f003 0307 	and.w	r3, r3, #7
 801c33a:	2b00      	cmp	r3, #0
 801c33c:	d00c      	beq.n	801c358 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801c33e:	68fb      	ldr	r3, [r7, #12]
 801c340:	3307      	adds	r3, #7
 801c342:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801c344:	68fb      	ldr	r3, [r7, #12]
 801c346:	f023 0307 	bic.w	r3, r3, #7
 801c34a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801c34c:	68ba      	ldr	r2, [r7, #8]
 801c34e:	68fb      	ldr	r3, [r7, #12]
 801c350:	1ad3      	subs	r3, r2, r3
 801c352:	4a1f      	ldr	r2, [pc, #124]	; (801c3d0 <prvHeapInit+0xac>)
 801c354:	4413      	add	r3, r2
 801c356:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801c358:	68fb      	ldr	r3, [r7, #12]
 801c35a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801c35c:	4a1d      	ldr	r2, [pc, #116]	; (801c3d4 <prvHeapInit+0xb0>)
 801c35e:	687b      	ldr	r3, [r7, #4]
 801c360:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801c362:	4b1c      	ldr	r3, [pc, #112]	; (801c3d4 <prvHeapInit+0xb0>)
 801c364:	2200      	movs	r2, #0
 801c366:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801c368:	687b      	ldr	r3, [r7, #4]
 801c36a:	68ba      	ldr	r2, [r7, #8]
 801c36c:	4413      	add	r3, r2
 801c36e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801c370:	2208      	movs	r2, #8
 801c372:	68fb      	ldr	r3, [r7, #12]
 801c374:	1a9b      	subs	r3, r3, r2
 801c376:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801c378:	68fb      	ldr	r3, [r7, #12]
 801c37a:	f023 0307 	bic.w	r3, r3, #7
 801c37e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801c380:	68fb      	ldr	r3, [r7, #12]
 801c382:	4a15      	ldr	r2, [pc, #84]	; (801c3d8 <prvHeapInit+0xb4>)
 801c384:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801c386:	4b14      	ldr	r3, [pc, #80]	; (801c3d8 <prvHeapInit+0xb4>)
 801c388:	681b      	ldr	r3, [r3, #0]
 801c38a:	2200      	movs	r2, #0
 801c38c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801c38e:	4b12      	ldr	r3, [pc, #72]	; (801c3d8 <prvHeapInit+0xb4>)
 801c390:	681b      	ldr	r3, [r3, #0]
 801c392:	2200      	movs	r2, #0
 801c394:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801c396:	687b      	ldr	r3, [r7, #4]
 801c398:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801c39a:	683b      	ldr	r3, [r7, #0]
 801c39c:	68fa      	ldr	r2, [r7, #12]
 801c39e:	1ad2      	subs	r2, r2, r3
 801c3a0:	683b      	ldr	r3, [r7, #0]
 801c3a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801c3a4:	4b0c      	ldr	r3, [pc, #48]	; (801c3d8 <prvHeapInit+0xb4>)
 801c3a6:	681a      	ldr	r2, [r3, #0]
 801c3a8:	683b      	ldr	r3, [r7, #0]
 801c3aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801c3ac:	683b      	ldr	r3, [r7, #0]
 801c3ae:	685b      	ldr	r3, [r3, #4]
 801c3b0:	4a0a      	ldr	r2, [pc, #40]	; (801c3dc <prvHeapInit+0xb8>)
 801c3b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801c3b4:	683b      	ldr	r3, [r7, #0]
 801c3b6:	685b      	ldr	r3, [r3, #4]
 801c3b8:	4a09      	ldr	r2, [pc, #36]	; (801c3e0 <prvHeapInit+0xbc>)
 801c3ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801c3bc:	4b09      	ldr	r3, [pc, #36]	; (801c3e4 <prvHeapInit+0xc0>)
 801c3be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801c3c2:	601a      	str	r2, [r3, #0]
}
 801c3c4:	bf00      	nop
 801c3c6:	3714      	adds	r7, #20
 801c3c8:	46bd      	mov	sp, r7
 801c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3ce:	4770      	bx	lr
 801c3d0:	20001198 	.word	0x20001198
 801c3d4:	20002908 	.word	0x20002908
 801c3d8:	20002910 	.word	0x20002910
 801c3dc:	20002918 	.word	0x20002918
 801c3e0:	20002914 	.word	0x20002914
 801c3e4:	2000291c 	.word	0x2000291c

0801c3e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801c3e8:	b480      	push	{r7}
 801c3ea:	b085      	sub	sp, #20
 801c3ec:	af00      	add	r7, sp, #0
 801c3ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801c3f0:	4b28      	ldr	r3, [pc, #160]	; (801c494 <prvInsertBlockIntoFreeList+0xac>)
 801c3f2:	60fb      	str	r3, [r7, #12]
 801c3f4:	e002      	b.n	801c3fc <prvInsertBlockIntoFreeList+0x14>
 801c3f6:	68fb      	ldr	r3, [r7, #12]
 801c3f8:	681b      	ldr	r3, [r3, #0]
 801c3fa:	60fb      	str	r3, [r7, #12]
 801c3fc:	68fb      	ldr	r3, [r7, #12]
 801c3fe:	681b      	ldr	r3, [r3, #0]
 801c400:	687a      	ldr	r2, [r7, #4]
 801c402:	429a      	cmp	r2, r3
 801c404:	d8f7      	bhi.n	801c3f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801c406:	68fb      	ldr	r3, [r7, #12]
 801c408:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801c40a:	68fb      	ldr	r3, [r7, #12]
 801c40c:	685b      	ldr	r3, [r3, #4]
 801c40e:	68ba      	ldr	r2, [r7, #8]
 801c410:	4413      	add	r3, r2
 801c412:	687a      	ldr	r2, [r7, #4]
 801c414:	429a      	cmp	r2, r3
 801c416:	d108      	bne.n	801c42a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801c418:	68fb      	ldr	r3, [r7, #12]
 801c41a:	685a      	ldr	r2, [r3, #4]
 801c41c:	687b      	ldr	r3, [r7, #4]
 801c41e:	685b      	ldr	r3, [r3, #4]
 801c420:	441a      	add	r2, r3
 801c422:	68fb      	ldr	r3, [r7, #12]
 801c424:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801c426:	68fb      	ldr	r3, [r7, #12]
 801c428:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801c42a:	687b      	ldr	r3, [r7, #4]
 801c42c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801c42e:	687b      	ldr	r3, [r7, #4]
 801c430:	685b      	ldr	r3, [r3, #4]
 801c432:	68ba      	ldr	r2, [r7, #8]
 801c434:	441a      	add	r2, r3
 801c436:	68fb      	ldr	r3, [r7, #12]
 801c438:	681b      	ldr	r3, [r3, #0]
 801c43a:	429a      	cmp	r2, r3
 801c43c:	d118      	bne.n	801c470 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801c43e:	68fb      	ldr	r3, [r7, #12]
 801c440:	681a      	ldr	r2, [r3, #0]
 801c442:	4b15      	ldr	r3, [pc, #84]	; (801c498 <prvInsertBlockIntoFreeList+0xb0>)
 801c444:	681b      	ldr	r3, [r3, #0]
 801c446:	429a      	cmp	r2, r3
 801c448:	d00d      	beq.n	801c466 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801c44a:	687b      	ldr	r3, [r7, #4]
 801c44c:	685a      	ldr	r2, [r3, #4]
 801c44e:	68fb      	ldr	r3, [r7, #12]
 801c450:	681b      	ldr	r3, [r3, #0]
 801c452:	685b      	ldr	r3, [r3, #4]
 801c454:	441a      	add	r2, r3
 801c456:	687b      	ldr	r3, [r7, #4]
 801c458:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801c45a:	68fb      	ldr	r3, [r7, #12]
 801c45c:	681b      	ldr	r3, [r3, #0]
 801c45e:	681a      	ldr	r2, [r3, #0]
 801c460:	687b      	ldr	r3, [r7, #4]
 801c462:	601a      	str	r2, [r3, #0]
 801c464:	e008      	b.n	801c478 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801c466:	4b0c      	ldr	r3, [pc, #48]	; (801c498 <prvInsertBlockIntoFreeList+0xb0>)
 801c468:	681a      	ldr	r2, [r3, #0]
 801c46a:	687b      	ldr	r3, [r7, #4]
 801c46c:	601a      	str	r2, [r3, #0]
 801c46e:	e003      	b.n	801c478 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801c470:	68fb      	ldr	r3, [r7, #12]
 801c472:	681a      	ldr	r2, [r3, #0]
 801c474:	687b      	ldr	r3, [r7, #4]
 801c476:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801c478:	68fa      	ldr	r2, [r7, #12]
 801c47a:	687b      	ldr	r3, [r7, #4]
 801c47c:	429a      	cmp	r2, r3
 801c47e:	d002      	beq.n	801c486 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801c480:	68fb      	ldr	r3, [r7, #12]
 801c482:	687a      	ldr	r2, [r7, #4]
 801c484:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801c486:	bf00      	nop
 801c488:	3714      	adds	r7, #20
 801c48a:	46bd      	mov	sp, r7
 801c48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c490:	4770      	bx	lr
 801c492:	bf00      	nop
 801c494:	20002908 	.word	0x20002908
 801c498:	20002910 	.word	0x20002910

0801c49c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801c49c:	b580      	push	{r7, lr}
 801c49e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801c4a0:	2201      	movs	r2, #1
 801c4a2:	490e      	ldr	r1, [pc, #56]	; (801c4dc <MX_USB_HOST_Init+0x40>)
 801c4a4:	480e      	ldr	r0, [pc, #56]	; (801c4e0 <MX_USB_HOST_Init+0x44>)
 801c4a6:	f7f8 fe27 	bl	80150f8 <USBH_Init>
 801c4aa:	4603      	mov	r3, r0
 801c4ac:	2b00      	cmp	r3, #0
 801c4ae:	d001      	beq.n	801c4b4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801c4b0:	f7e5 fe9e 	bl	80021f0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 801c4b4:	490b      	ldr	r1, [pc, #44]	; (801c4e4 <MX_USB_HOST_Init+0x48>)
 801c4b6:	480a      	ldr	r0, [pc, #40]	; (801c4e0 <MX_USB_HOST_Init+0x44>)
 801c4b8:	f7f8 feac 	bl	8015214 <USBH_RegisterClass>
 801c4bc:	4603      	mov	r3, r0
 801c4be:	2b00      	cmp	r3, #0
 801c4c0:	d001      	beq.n	801c4c6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801c4c2:	f7e5 fe95 	bl	80021f0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801c4c6:	4806      	ldr	r0, [pc, #24]	; (801c4e0 <MX_USB_HOST_Init+0x44>)
 801c4c8:	f7f8 ff30 	bl	801532c <USBH_Start>
 801c4cc:	4603      	mov	r3, r0
 801c4ce:	2b00      	cmp	r3, #0
 801c4d0:	d001      	beq.n	801c4d6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801c4d2:	f7e5 fe8d 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801c4d6:	bf00      	nop
 801c4d8:	bd80      	pop	{r7, pc}
 801c4da:	bf00      	nop
 801c4dc:	0801c4e9 	.word	0x0801c4e9
 801c4e0:	20004bac 	.word	0x20004bac
 801c4e4:	2000018c 	.word	0x2000018c

0801c4e8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801c4e8:	b580      	push	{r7, lr}
 801c4ea:	b082      	sub	sp, #8
 801c4ec:	af00      	add	r7, sp, #0
 801c4ee:	6078      	str	r0, [r7, #4]
 801c4f0:	460b      	mov	r3, r1
 801c4f2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
	 switch(id)
 801c4f4:	78fb      	ldrb	r3, [r7, #3]
 801c4f6:	3b01      	subs	r3, #1
 801c4f8:	2b04      	cmp	r3, #4
 801c4fa:	d826      	bhi.n	801c54a <USBH_UserProcess+0x62>
 801c4fc:	a201      	add	r2, pc, #4	; (adr r2, 801c504 <USBH_UserProcess+0x1c>)
 801c4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c502:	bf00      	nop
 801c504:	0801c54b 	.word	0x0801c54b
 801c508:	0801c52b 	.word	0x0801c52b
 801c50c:	0801c54b 	.word	0x0801c54b
 801c510:	0801c53d 	.word	0x0801c53d
 801c514:	0801c519 	.word	0x0801c519
		  {
		  case HOST_USER_SELECT_CONFIGURATION:
		  break;

		  case HOST_USER_DISCONNECTION:
		  Appli_state = APPLICATION_DISCONNECT;
 801c518:	4b0e      	ldr	r3, [pc, #56]	; (801c554 <USBH_UserProcess+0x6c>)
 801c51a:	2203      	movs	r2, #3
 801c51c:	701a      	strb	r2, [r3, #0]
		  UART_Write("APPLICATION_DISCONNECT\r\n");
 801c51e:	480e      	ldr	r0, [pc, #56]	; (801c558 <USBH_UserProcess+0x70>)
 801c520:	f7e5 fb0c 	bl	8001b3c <UART_Write>
		  Unmount_USB();
 801c524:	f7e4 fd48 	bl	8000fb8 <Unmount_USB>
		  break;
 801c528:	e010      	b.n	801c54c <USBH_UserProcess+0x64>

		  case HOST_USER_CLASS_ACTIVE:
		  Appli_state = APPLICATION_READY;
 801c52a:	4b0a      	ldr	r3, [pc, #40]	; (801c554 <USBH_UserProcess+0x6c>)
 801c52c:	2202      	movs	r2, #2
 801c52e:	701a      	strb	r2, [r3, #0]
	  	  UART_Write("APPLICATION_READY\r\n");
 801c530:	480a      	ldr	r0, [pc, #40]	; (801c55c <USBH_UserProcess+0x74>)
 801c532:	f7e5 fb03 	bl	8001b3c <UART_Write>

		  Mount_USB();
 801c536:	f7e4 fd1d 	bl	8000f74 <Mount_USB>
		  break;
 801c53a:	e007      	b.n	801c54c <USBH_UserProcess+0x64>

		  case HOST_USER_CONNECTION:
		  Appli_state = APPLICATION_START;
 801c53c:	4b05      	ldr	r3, [pc, #20]	; (801c554 <USBH_UserProcess+0x6c>)
 801c53e:	2201      	movs	r2, #1
 801c540:	701a      	strb	r2, [r3, #0]
		  UART_Write("APPLICATION_START\r\n");
 801c542:	4807      	ldr	r0, [pc, #28]	; (801c560 <USBH_UserProcess+0x78>)
 801c544:	f7e5 fafa 	bl	8001b3c <UART_Write>
		  break;
 801c548:	e000      	b.n	801c54c <USBH_UserProcess+0x64>

		  default:
		  break;
 801c54a:	bf00      	nop
		  }
  /* USER CODE END CALL_BACK_1 */
}
 801c54c:	bf00      	nop
 801c54e:	3708      	adds	r7, #8
 801c550:	46bd      	mov	sp, r7
 801c552:	bd80      	pop	{r7, pc}
 801c554:	20002920 	.word	0x20002920
 801c558:	0801fb30 	.word	0x0801fb30
 801c55c:	0801fb4c 	.word	0x0801fb4c
 801c560:	0801fb60 	.word	0x0801fb60

0801c564 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801c564:	b580      	push	{r7, lr}
 801c566:	b08a      	sub	sp, #40	; 0x28
 801c568:	af00      	add	r7, sp, #0
 801c56a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c56c:	f107 0314 	add.w	r3, r7, #20
 801c570:	2200      	movs	r2, #0
 801c572:	601a      	str	r2, [r3, #0]
 801c574:	605a      	str	r2, [r3, #4]
 801c576:	609a      	str	r2, [r3, #8]
 801c578:	60da      	str	r2, [r3, #12]
 801c57a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	681b      	ldr	r3, [r3, #0]
 801c580:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c584:	d14e      	bne.n	801c624 <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801c586:	4b29      	ldr	r3, [pc, #164]	; (801c62c <HAL_HCD_MspInit+0xc8>)
 801c588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c58a:	4a28      	ldr	r2, [pc, #160]	; (801c62c <HAL_HCD_MspInit+0xc8>)
 801c58c:	f043 0301 	orr.w	r3, r3, #1
 801c590:	64d3      	str	r3, [r2, #76]	; 0x4c
 801c592:	4b26      	ldr	r3, [pc, #152]	; (801c62c <HAL_HCD_MspInit+0xc8>)
 801c594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c596:	f003 0301 	and.w	r3, r3, #1
 801c59a:	613b      	str	r3, [r7, #16]
 801c59c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801c59e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801c5a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c5a4:	2302      	movs	r3, #2
 801c5a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c5a8:	2300      	movs	r3, #0
 801c5aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801c5ac:	2303      	movs	r3, #3
 801c5ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801c5b0:	230a      	movs	r3, #10
 801c5b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801c5b4:	f107 0314 	add.w	r3, r7, #20
 801c5b8:	4619      	mov	r1, r3
 801c5ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801c5be:	f7ef f945 	bl	800b84c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801c5c2:	4b1a      	ldr	r3, [pc, #104]	; (801c62c <HAL_HCD_MspInit+0xc8>)
 801c5c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c5c6:	4a19      	ldr	r2, [pc, #100]	; (801c62c <HAL_HCD_MspInit+0xc8>)
 801c5c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801c5cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 801c5ce:	4b17      	ldr	r3, [pc, #92]	; (801c62c <HAL_HCD_MspInit+0xc8>)
 801c5d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c5d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801c5d6:	60fb      	str	r3, [r7, #12]
 801c5d8:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801c5da:	4b14      	ldr	r3, [pc, #80]	; (801c62c <HAL_HCD_MspInit+0xc8>)
 801c5dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c5de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c5e2:	2b00      	cmp	r3, #0
 801c5e4:	d114      	bne.n	801c610 <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801c5e6:	4b11      	ldr	r3, [pc, #68]	; (801c62c <HAL_HCD_MspInit+0xc8>)
 801c5e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c5ea:	4a10      	ldr	r2, [pc, #64]	; (801c62c <HAL_HCD_MspInit+0xc8>)
 801c5ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c5f0:	6593      	str	r3, [r2, #88]	; 0x58
 801c5f2:	4b0e      	ldr	r3, [pc, #56]	; (801c62c <HAL_HCD_MspInit+0xc8>)
 801c5f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c5f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c5fa:	60bb      	str	r3, [r7, #8]
 801c5fc:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 801c5fe:	f7f2 f933 	bl	800e868 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 801c602:	4b0a      	ldr	r3, [pc, #40]	; (801c62c <HAL_HCD_MspInit+0xc8>)
 801c604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c606:	4a09      	ldr	r2, [pc, #36]	; (801c62c <HAL_HCD_MspInit+0xc8>)
 801c608:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801c60c:	6593      	str	r3, [r2, #88]	; 0x58
 801c60e:	e001      	b.n	801c614 <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 801c610:	f7f2 f92a 	bl	800e868 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801c614:	2200      	movs	r2, #0
 801c616:	2105      	movs	r1, #5
 801c618:	2043      	movs	r0, #67	; 0x43
 801c61a:	f7ee fef5 	bl	800b408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801c61e:	2043      	movs	r0, #67	; 0x43
 801c620:	f7ee ff0e 	bl	800b440 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801c624:	bf00      	nop
 801c626:	3728      	adds	r7, #40	; 0x28
 801c628:	46bd      	mov	sp, r7
 801c62a:	bd80      	pop	{r7, pc}
 801c62c:	40021000 	.word	0x40021000

0801c630 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801c630:	b580      	push	{r7, lr}
 801c632:	b082      	sub	sp, #8
 801c634:	af00      	add	r7, sp, #0
 801c636:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801c638:	687b      	ldr	r3, [r7, #4]
 801c63a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c63e:	4618      	mov	r0, r3
 801c640:	f7f9 fa57 	bl	8015af2 <USBH_LL_IncTimer>
}
 801c644:	bf00      	nop
 801c646:	3708      	adds	r7, #8
 801c648:	46bd      	mov	sp, r7
 801c64a:	bd80      	pop	{r7, pc}

0801c64c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801c64c:	b580      	push	{r7, lr}
 801c64e:	b082      	sub	sp, #8
 801c650:	af00      	add	r7, sp, #0
 801c652:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801c654:	687b      	ldr	r3, [r7, #4]
 801c656:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c65a:	4618      	mov	r0, r3
 801c65c:	f7f9 fa8f 	bl	8015b7e <USBH_LL_Connect>
}
 801c660:	bf00      	nop
 801c662:	3708      	adds	r7, #8
 801c664:	46bd      	mov	sp, r7
 801c666:	bd80      	pop	{r7, pc}

0801c668 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801c668:	b580      	push	{r7, lr}
 801c66a:	b082      	sub	sp, #8
 801c66c:	af00      	add	r7, sp, #0
 801c66e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801c670:	687b      	ldr	r3, [r7, #4]
 801c672:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c676:	4618      	mov	r0, r3
 801c678:	f7f9 fa98 	bl	8015bac <USBH_LL_Disconnect>
}
 801c67c:	bf00      	nop
 801c67e:	3708      	adds	r7, #8
 801c680:	46bd      	mov	sp, r7
 801c682:	bd80      	pop	{r7, pc}

0801c684 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801c684:	b480      	push	{r7}
 801c686:	b083      	sub	sp, #12
 801c688:	af00      	add	r7, sp, #0
 801c68a:	6078      	str	r0, [r7, #4]
 801c68c:	460b      	mov	r3, r1
 801c68e:	70fb      	strb	r3, [r7, #3]
 801c690:	4613      	mov	r3, r2
 801c692:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 801c694:	bf00      	nop
 801c696:	370c      	adds	r7, #12
 801c698:	46bd      	mov	sp, r7
 801c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c69e:	4770      	bx	lr

0801c6a0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801c6a0:	b580      	push	{r7, lr}
 801c6a2:	b082      	sub	sp, #8
 801c6a4:	af00      	add	r7, sp, #0
 801c6a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801c6a8:	687b      	ldr	r3, [r7, #4]
 801c6aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c6ae:	4618      	mov	r0, r3
 801c6b0:	f7f9 fa49 	bl	8015b46 <USBH_LL_PortEnabled>
}
 801c6b4:	bf00      	nop
 801c6b6:	3708      	adds	r7, #8
 801c6b8:	46bd      	mov	sp, r7
 801c6ba:	bd80      	pop	{r7, pc}

0801c6bc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801c6bc:	b580      	push	{r7, lr}
 801c6be:	b082      	sub	sp, #8
 801c6c0:	af00      	add	r7, sp, #0
 801c6c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801c6c4:	687b      	ldr	r3, [r7, #4]
 801c6c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c6ca:	4618      	mov	r0, r3
 801c6cc:	f7f9 fa49 	bl	8015b62 <USBH_LL_PortDisabled>
}
 801c6d0:	bf00      	nop
 801c6d2:	3708      	adds	r7, #8
 801c6d4:	46bd      	mov	sp, r7
 801c6d6:	bd80      	pop	{r7, pc}

0801c6d8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801c6d8:	b580      	push	{r7, lr}
 801c6da:	b082      	sub	sp, #8
 801c6dc:	af00      	add	r7, sp, #0
 801c6de:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801c6e0:	687b      	ldr	r3, [r7, #4]
 801c6e2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801c6e6:	2b01      	cmp	r3, #1
 801c6e8:	d12a      	bne.n	801c740 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801c6ea:	4a18      	ldr	r2, [pc, #96]	; (801c74c <USBH_LL_Init+0x74>)
 801c6ec:	687b      	ldr	r3, [r7, #4]
 801c6ee:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 801c6f2:	687b      	ldr	r3, [r7, #4]
 801c6f4:	4a15      	ldr	r2, [pc, #84]	; (801c74c <USBH_LL_Init+0x74>)
 801c6f6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801c6fa:	4b14      	ldr	r3, [pc, #80]	; (801c74c <USBH_LL_Init+0x74>)
 801c6fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801c700:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801c702:	4b12      	ldr	r3, [pc, #72]	; (801c74c <USBH_LL_Init+0x74>)
 801c704:	2208      	movs	r2, #8
 801c706:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801c708:	4b10      	ldr	r3, [pc, #64]	; (801c74c <USBH_LL_Init+0x74>)
 801c70a:	2201      	movs	r2, #1
 801c70c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801c70e:	4b0f      	ldr	r3, [pc, #60]	; (801c74c <USBH_LL_Init+0x74>)
 801c710:	2200      	movs	r2, #0
 801c712:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801c714:	4b0d      	ldr	r3, [pc, #52]	; (801c74c <USBH_LL_Init+0x74>)
 801c716:	2202      	movs	r2, #2
 801c718:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801c71a:	4b0c      	ldr	r3, [pc, #48]	; (801c74c <USBH_LL_Init+0x74>)
 801c71c:	2200      	movs	r2, #0
 801c71e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801c720:	480a      	ldr	r0, [pc, #40]	; (801c74c <USBH_LL_Init+0x74>)
 801c722:	f7ef fb5f 	bl	800bde4 <HAL_HCD_Init>
 801c726:	4603      	mov	r3, r0
 801c728:	2b00      	cmp	r3, #0
 801c72a:	d001      	beq.n	801c730 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801c72c:	f7e5 fd60 	bl	80021f0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801c730:	4806      	ldr	r0, [pc, #24]	; (801c74c <USBH_LL_Init+0x74>)
 801c732:	f7ef ff5f 	bl	800c5f4 <HAL_HCD_GetCurrentFrame>
 801c736:	4603      	mov	r3, r0
 801c738:	4619      	mov	r1, r3
 801c73a:	6878      	ldr	r0, [r7, #4]
 801c73c:	f7f9 f9ca 	bl	8015ad4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801c740:	2300      	movs	r3, #0
}
 801c742:	4618      	mov	r0, r3
 801c744:	3708      	adds	r7, #8
 801c746:	46bd      	mov	sp, r7
 801c748:	bd80      	pop	{r7, pc}
 801c74a:	bf00      	nop
 801c74c:	200086b4 	.word	0x200086b4

0801c750 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801c750:	b580      	push	{r7, lr}
 801c752:	b084      	sub	sp, #16
 801c754:	af00      	add	r7, sp, #0
 801c756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c758:	2300      	movs	r3, #0
 801c75a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801c75c:	2300      	movs	r3, #0
 801c75e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801c760:	687b      	ldr	r3, [r7, #4]
 801c762:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801c766:	4618      	mov	r0, r3
 801c768:	f7ef fecc 	bl	800c504 <HAL_HCD_Start>
 801c76c:	4603      	mov	r3, r0
 801c76e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801c770:	7bfb      	ldrb	r3, [r7, #15]
 801c772:	4618      	mov	r0, r3
 801c774:	f000 f986 	bl	801ca84 <USBH_Get_USB_Status>
 801c778:	4603      	mov	r3, r0
 801c77a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c77c:	7bbb      	ldrb	r3, [r7, #14]
}
 801c77e:	4618      	mov	r0, r3
 801c780:	3710      	adds	r7, #16
 801c782:	46bd      	mov	sp, r7
 801c784:	bd80      	pop	{r7, pc}

0801c786 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801c786:	b580      	push	{r7, lr}
 801c788:	b084      	sub	sp, #16
 801c78a:	af00      	add	r7, sp, #0
 801c78c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c78e:	2300      	movs	r3, #0
 801c790:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801c792:	2300      	movs	r3, #0
 801c794:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801c796:	687b      	ldr	r3, [r7, #4]
 801c798:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801c79c:	4618      	mov	r0, r3
 801c79e:	f7ef fed4 	bl	800c54a <HAL_HCD_Stop>
 801c7a2:	4603      	mov	r3, r0
 801c7a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801c7a6:	7bfb      	ldrb	r3, [r7, #15]
 801c7a8:	4618      	mov	r0, r3
 801c7aa:	f000 f96b 	bl	801ca84 <USBH_Get_USB_Status>
 801c7ae:	4603      	mov	r3, r0
 801c7b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c7b2:	7bbb      	ldrb	r3, [r7, #14]
}
 801c7b4:	4618      	mov	r0, r3
 801c7b6:	3710      	adds	r7, #16
 801c7b8:	46bd      	mov	sp, r7
 801c7ba:	bd80      	pop	{r7, pc}

0801c7bc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801c7bc:	b580      	push	{r7, lr}
 801c7be:	b084      	sub	sp, #16
 801c7c0:	af00      	add	r7, sp, #0
 801c7c2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801c7c4:	2301      	movs	r3, #1
 801c7c6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801c7c8:	687b      	ldr	r3, [r7, #4]
 801c7ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801c7ce:	4618      	mov	r0, r3
 801c7d0:	f7ef ff1e 	bl	800c610 <HAL_HCD_GetCurrentSpeed>
 801c7d4:	4603      	mov	r3, r0
 801c7d6:	2b01      	cmp	r3, #1
 801c7d8:	d007      	beq.n	801c7ea <USBH_LL_GetSpeed+0x2e>
 801c7da:	2b01      	cmp	r3, #1
 801c7dc:	d302      	bcc.n	801c7e4 <USBH_LL_GetSpeed+0x28>
 801c7de:	2b02      	cmp	r3, #2
 801c7e0:	d006      	beq.n	801c7f0 <USBH_LL_GetSpeed+0x34>
 801c7e2:	e008      	b.n	801c7f6 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801c7e4:	2300      	movs	r3, #0
 801c7e6:	73fb      	strb	r3, [r7, #15]
    break;
 801c7e8:	e008      	b.n	801c7fc <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 801c7ea:	2301      	movs	r3, #1
 801c7ec:	73fb      	strb	r3, [r7, #15]
    break;
 801c7ee:	e005      	b.n	801c7fc <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 801c7f0:	2302      	movs	r3, #2
 801c7f2:	73fb      	strb	r3, [r7, #15]
    break;
 801c7f4:	e002      	b.n	801c7fc <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 801c7f6:	2301      	movs	r3, #1
 801c7f8:	73fb      	strb	r3, [r7, #15]
    break;
 801c7fa:	bf00      	nop
  }
  return  speed;
 801c7fc:	7bfb      	ldrb	r3, [r7, #15]
}
 801c7fe:	4618      	mov	r0, r3
 801c800:	3710      	adds	r7, #16
 801c802:	46bd      	mov	sp, r7
 801c804:	bd80      	pop	{r7, pc}

0801c806 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801c806:	b580      	push	{r7, lr}
 801c808:	b084      	sub	sp, #16
 801c80a:	af00      	add	r7, sp, #0
 801c80c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c80e:	2300      	movs	r3, #0
 801c810:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801c812:	2300      	movs	r3, #0
 801c814:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801c816:	687b      	ldr	r3, [r7, #4]
 801c818:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801c81c:	4618      	mov	r0, r3
 801c81e:	f7ef feb1 	bl	800c584 <HAL_HCD_ResetPort>
 801c822:	4603      	mov	r3, r0
 801c824:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801c826:	7bfb      	ldrb	r3, [r7, #15]
 801c828:	4618      	mov	r0, r3
 801c82a:	f000 f92b 	bl	801ca84 <USBH_Get_USB_Status>
 801c82e:	4603      	mov	r3, r0
 801c830:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c832:	7bbb      	ldrb	r3, [r7, #14]
}
 801c834:	4618      	mov	r0, r3
 801c836:	3710      	adds	r7, #16
 801c838:	46bd      	mov	sp, r7
 801c83a:	bd80      	pop	{r7, pc}

0801c83c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801c83c:	b580      	push	{r7, lr}
 801c83e:	b082      	sub	sp, #8
 801c840:	af00      	add	r7, sp, #0
 801c842:	6078      	str	r0, [r7, #4]
 801c844:	460b      	mov	r3, r1
 801c846:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801c848:	687b      	ldr	r3, [r7, #4]
 801c84a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801c84e:	78fa      	ldrb	r2, [r7, #3]
 801c850:	4611      	mov	r1, r2
 801c852:	4618      	mov	r0, r3
 801c854:	f7ef feb9 	bl	800c5ca <HAL_HCD_HC_GetXferCount>
 801c858:	4603      	mov	r3, r0
}
 801c85a:	4618      	mov	r0, r3
 801c85c:	3708      	adds	r7, #8
 801c85e:	46bd      	mov	sp, r7
 801c860:	bd80      	pop	{r7, pc}

0801c862 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801c862:	b590      	push	{r4, r7, lr}
 801c864:	b089      	sub	sp, #36	; 0x24
 801c866:	af04      	add	r7, sp, #16
 801c868:	6078      	str	r0, [r7, #4]
 801c86a:	4608      	mov	r0, r1
 801c86c:	4611      	mov	r1, r2
 801c86e:	461a      	mov	r2, r3
 801c870:	4603      	mov	r3, r0
 801c872:	70fb      	strb	r3, [r7, #3]
 801c874:	460b      	mov	r3, r1
 801c876:	70bb      	strb	r3, [r7, #2]
 801c878:	4613      	mov	r3, r2
 801c87a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c87c:	2300      	movs	r3, #0
 801c87e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801c880:	2300      	movs	r3, #0
 801c882:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801c884:	687b      	ldr	r3, [r7, #4]
 801c886:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801c88a:	787c      	ldrb	r4, [r7, #1]
 801c88c:	78ba      	ldrb	r2, [r7, #2]
 801c88e:	78f9      	ldrb	r1, [r7, #3]
 801c890:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801c892:	9302      	str	r3, [sp, #8]
 801c894:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c898:	9301      	str	r3, [sp, #4]
 801c89a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801c89e:	9300      	str	r3, [sp, #0]
 801c8a0:	4623      	mov	r3, r4
 801c8a2:	f7ef fb01 	bl	800bea8 <HAL_HCD_HC_Init>
 801c8a6:	4603      	mov	r3, r0
 801c8a8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801c8aa:	7bfb      	ldrb	r3, [r7, #15]
 801c8ac:	4618      	mov	r0, r3
 801c8ae:	f000 f8e9 	bl	801ca84 <USBH_Get_USB_Status>
 801c8b2:	4603      	mov	r3, r0
 801c8b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c8b6:	7bbb      	ldrb	r3, [r7, #14]
}
 801c8b8:	4618      	mov	r0, r3
 801c8ba:	3714      	adds	r7, #20
 801c8bc:	46bd      	mov	sp, r7
 801c8be:	bd90      	pop	{r4, r7, pc}

0801c8c0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801c8c0:	b580      	push	{r7, lr}
 801c8c2:	b084      	sub	sp, #16
 801c8c4:	af00      	add	r7, sp, #0
 801c8c6:	6078      	str	r0, [r7, #4]
 801c8c8:	460b      	mov	r3, r1
 801c8ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c8cc:	2300      	movs	r3, #0
 801c8ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801c8d0:	2300      	movs	r3, #0
 801c8d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801c8d4:	687b      	ldr	r3, [r7, #4]
 801c8d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801c8da:	78fa      	ldrb	r2, [r7, #3]
 801c8dc:	4611      	mov	r1, r2
 801c8de:	4618      	mov	r0, r3
 801c8e0:	f7ef fb7a 	bl	800bfd8 <HAL_HCD_HC_Halt>
 801c8e4:	4603      	mov	r3, r0
 801c8e6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801c8e8:	7bfb      	ldrb	r3, [r7, #15]
 801c8ea:	4618      	mov	r0, r3
 801c8ec:	f000 f8ca 	bl	801ca84 <USBH_Get_USB_Status>
 801c8f0:	4603      	mov	r3, r0
 801c8f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c8f4:	7bbb      	ldrb	r3, [r7, #14]
}
 801c8f6:	4618      	mov	r0, r3
 801c8f8:	3710      	adds	r7, #16
 801c8fa:	46bd      	mov	sp, r7
 801c8fc:	bd80      	pop	{r7, pc}

0801c8fe <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801c8fe:	b590      	push	{r4, r7, lr}
 801c900:	b089      	sub	sp, #36	; 0x24
 801c902:	af04      	add	r7, sp, #16
 801c904:	6078      	str	r0, [r7, #4]
 801c906:	4608      	mov	r0, r1
 801c908:	4611      	mov	r1, r2
 801c90a:	461a      	mov	r2, r3
 801c90c:	4603      	mov	r3, r0
 801c90e:	70fb      	strb	r3, [r7, #3]
 801c910:	460b      	mov	r3, r1
 801c912:	70bb      	strb	r3, [r7, #2]
 801c914:	4613      	mov	r3, r2
 801c916:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c918:	2300      	movs	r3, #0
 801c91a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801c91c:	2300      	movs	r3, #0
 801c91e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801c920:	687b      	ldr	r3, [r7, #4]
 801c922:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801c926:	787c      	ldrb	r4, [r7, #1]
 801c928:	78ba      	ldrb	r2, [r7, #2]
 801c92a:	78f9      	ldrb	r1, [r7, #3]
 801c92c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801c930:	9303      	str	r3, [sp, #12]
 801c932:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801c934:	9302      	str	r3, [sp, #8]
 801c936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c938:	9301      	str	r3, [sp, #4]
 801c93a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801c93e:	9300      	str	r3, [sp, #0]
 801c940:	4623      	mov	r3, r4
 801c942:	f7ef fb6d 	bl	800c020 <HAL_HCD_HC_SubmitRequest>
 801c946:	4603      	mov	r3, r0
 801c948:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 801c94a:	7bfb      	ldrb	r3, [r7, #15]
 801c94c:	4618      	mov	r0, r3
 801c94e:	f000 f899 	bl	801ca84 <USBH_Get_USB_Status>
 801c952:	4603      	mov	r3, r0
 801c954:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c956:	7bbb      	ldrb	r3, [r7, #14]
}
 801c958:	4618      	mov	r0, r3
 801c95a:	3714      	adds	r7, #20
 801c95c:	46bd      	mov	sp, r7
 801c95e:	bd90      	pop	{r4, r7, pc}

0801c960 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801c960:	b580      	push	{r7, lr}
 801c962:	b082      	sub	sp, #8
 801c964:	af00      	add	r7, sp, #0
 801c966:	6078      	str	r0, [r7, #4]
 801c968:	460b      	mov	r3, r1
 801c96a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801c96c:	687b      	ldr	r3, [r7, #4]
 801c96e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801c972:	78fa      	ldrb	r2, [r7, #3]
 801c974:	4611      	mov	r1, r2
 801c976:	4618      	mov	r0, r3
 801c978:	f7ef fe12 	bl	800c5a0 <HAL_HCD_HC_GetURBState>
 801c97c:	4603      	mov	r3, r0
}
 801c97e:	4618      	mov	r0, r3
 801c980:	3708      	adds	r7, #8
 801c982:	46bd      	mov	sp, r7
 801c984:	bd80      	pop	{r7, pc}

0801c986 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801c986:	b580      	push	{r7, lr}
 801c988:	b082      	sub	sp, #8
 801c98a:	af00      	add	r7, sp, #0
 801c98c:	6078      	str	r0, [r7, #4]
 801c98e:	460b      	mov	r3, r1
 801c990:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 801c992:	20c8      	movs	r0, #200	; 0xc8
 801c994:	f7ed f9fa 	bl	8009d8c <HAL_Delay>
  return USBH_OK;
 801c998:	2300      	movs	r3, #0
}
 801c99a:	4618      	mov	r0, r3
 801c99c:	3708      	adds	r7, #8
 801c99e:	46bd      	mov	sp, r7
 801c9a0:	bd80      	pop	{r7, pc}

0801c9a2 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801c9a2:	b480      	push	{r7}
 801c9a4:	b085      	sub	sp, #20
 801c9a6:	af00      	add	r7, sp, #0
 801c9a8:	6078      	str	r0, [r7, #4]
 801c9aa:	460b      	mov	r3, r1
 801c9ac:	70fb      	strb	r3, [r7, #3]
 801c9ae:	4613      	mov	r3, r2
 801c9b0:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801c9b2:	687b      	ldr	r3, [r7, #4]
 801c9b4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801c9b8:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801c9ba:	78fa      	ldrb	r2, [r7, #3]
 801c9bc:	68f9      	ldr	r1, [r7, #12]
 801c9be:	4613      	mov	r3, r2
 801c9c0:	009b      	lsls	r3, r3, #2
 801c9c2:	4413      	add	r3, r2
 801c9c4:	00db      	lsls	r3, r3, #3
 801c9c6:	440b      	add	r3, r1
 801c9c8:	333b      	adds	r3, #59	; 0x3b
 801c9ca:	781b      	ldrb	r3, [r3, #0]
 801c9cc:	2b00      	cmp	r3, #0
 801c9ce:	d00a      	beq.n	801c9e6 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801c9d0:	78fa      	ldrb	r2, [r7, #3]
 801c9d2:	68f9      	ldr	r1, [r7, #12]
 801c9d4:	4613      	mov	r3, r2
 801c9d6:	009b      	lsls	r3, r3, #2
 801c9d8:	4413      	add	r3, r2
 801c9da:	00db      	lsls	r3, r3, #3
 801c9dc:	440b      	add	r3, r1
 801c9de:	3350      	adds	r3, #80	; 0x50
 801c9e0:	78ba      	ldrb	r2, [r7, #2]
 801c9e2:	701a      	strb	r2, [r3, #0]
 801c9e4:	e009      	b.n	801c9fa <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801c9e6:	78fa      	ldrb	r2, [r7, #3]
 801c9e8:	68f9      	ldr	r1, [r7, #12]
 801c9ea:	4613      	mov	r3, r2
 801c9ec:	009b      	lsls	r3, r3, #2
 801c9ee:	4413      	add	r3, r2
 801c9f0:	00db      	lsls	r3, r3, #3
 801c9f2:	440b      	add	r3, r1
 801c9f4:	3351      	adds	r3, #81	; 0x51
 801c9f6:	78ba      	ldrb	r2, [r7, #2]
 801c9f8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801c9fa:	2300      	movs	r3, #0
}
 801c9fc:	4618      	mov	r0, r3
 801c9fe:	3714      	adds	r7, #20
 801ca00:	46bd      	mov	sp, r7
 801ca02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca06:	4770      	bx	lr

0801ca08 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801ca08:	b480      	push	{r7}
 801ca0a:	b085      	sub	sp, #20
 801ca0c:	af00      	add	r7, sp, #0
 801ca0e:	6078      	str	r0, [r7, #4]
 801ca10:	460b      	mov	r3, r1
 801ca12:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 801ca14:	2300      	movs	r3, #0
 801ca16:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801ca18:	687b      	ldr	r3, [r7, #4]
 801ca1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801ca1e:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 801ca20:	78fa      	ldrb	r2, [r7, #3]
 801ca22:	68b9      	ldr	r1, [r7, #8]
 801ca24:	4613      	mov	r3, r2
 801ca26:	009b      	lsls	r3, r3, #2
 801ca28:	4413      	add	r3, r2
 801ca2a:	00db      	lsls	r3, r3, #3
 801ca2c:	440b      	add	r3, r1
 801ca2e:	333b      	adds	r3, #59	; 0x3b
 801ca30:	781b      	ldrb	r3, [r3, #0]
 801ca32:	2b00      	cmp	r3, #0
 801ca34:	d00a      	beq.n	801ca4c <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 801ca36:	78fa      	ldrb	r2, [r7, #3]
 801ca38:	68b9      	ldr	r1, [r7, #8]
 801ca3a:	4613      	mov	r3, r2
 801ca3c:	009b      	lsls	r3, r3, #2
 801ca3e:	4413      	add	r3, r2
 801ca40:	00db      	lsls	r3, r3, #3
 801ca42:	440b      	add	r3, r1
 801ca44:	3350      	adds	r3, #80	; 0x50
 801ca46:	781b      	ldrb	r3, [r3, #0]
 801ca48:	73fb      	strb	r3, [r7, #15]
 801ca4a:	e009      	b.n	801ca60 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 801ca4c:	78fa      	ldrb	r2, [r7, #3]
 801ca4e:	68b9      	ldr	r1, [r7, #8]
 801ca50:	4613      	mov	r3, r2
 801ca52:	009b      	lsls	r3, r3, #2
 801ca54:	4413      	add	r3, r2
 801ca56:	00db      	lsls	r3, r3, #3
 801ca58:	440b      	add	r3, r1
 801ca5a:	3351      	adds	r3, #81	; 0x51
 801ca5c:	781b      	ldrb	r3, [r3, #0]
 801ca5e:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 801ca60:	7bfb      	ldrb	r3, [r7, #15]
}
 801ca62:	4618      	mov	r0, r3
 801ca64:	3714      	adds	r7, #20
 801ca66:	46bd      	mov	sp, r7
 801ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca6c:	4770      	bx	lr

0801ca6e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801ca6e:	b580      	push	{r7, lr}
 801ca70:	b082      	sub	sp, #8
 801ca72:	af00      	add	r7, sp, #0
 801ca74:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801ca76:	6878      	ldr	r0, [r7, #4]
 801ca78:	f7ed f988 	bl	8009d8c <HAL_Delay>
}
 801ca7c:	bf00      	nop
 801ca7e:	3708      	adds	r7, #8
 801ca80:	46bd      	mov	sp, r7
 801ca82:	bd80      	pop	{r7, pc}

0801ca84 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801ca84:	b480      	push	{r7}
 801ca86:	b085      	sub	sp, #20
 801ca88:	af00      	add	r7, sp, #0
 801ca8a:	4603      	mov	r3, r0
 801ca8c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801ca8e:	2300      	movs	r3, #0
 801ca90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801ca92:	79fb      	ldrb	r3, [r7, #7]
 801ca94:	2b03      	cmp	r3, #3
 801ca96:	d817      	bhi.n	801cac8 <USBH_Get_USB_Status+0x44>
 801ca98:	a201      	add	r2, pc, #4	; (adr r2, 801caa0 <USBH_Get_USB_Status+0x1c>)
 801ca9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ca9e:	bf00      	nop
 801caa0:	0801cab1 	.word	0x0801cab1
 801caa4:	0801cab7 	.word	0x0801cab7
 801caa8:	0801cabd 	.word	0x0801cabd
 801caac:	0801cac3 	.word	0x0801cac3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801cab0:	2300      	movs	r3, #0
 801cab2:	73fb      	strb	r3, [r7, #15]
    break;
 801cab4:	e00b      	b.n	801cace <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801cab6:	2302      	movs	r3, #2
 801cab8:	73fb      	strb	r3, [r7, #15]
    break;
 801caba:	e008      	b.n	801cace <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801cabc:	2301      	movs	r3, #1
 801cabe:	73fb      	strb	r3, [r7, #15]
    break;
 801cac0:	e005      	b.n	801cace <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801cac2:	2302      	movs	r3, #2
 801cac4:	73fb      	strb	r3, [r7, #15]
    break;
 801cac6:	e002      	b.n	801cace <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801cac8:	2302      	movs	r3, #2
 801caca:	73fb      	strb	r3, [r7, #15]
    break;
 801cacc:	bf00      	nop
  }
  return usb_status;
 801cace:	7bfb      	ldrb	r3, [r7, #15]
}
 801cad0:	4618      	mov	r0, r3
 801cad2:	3714      	adds	r7, #20
 801cad4:	46bd      	mov	sp, r7
 801cad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cada:	4770      	bx	lr

0801cadc <__errno>:
 801cadc:	4b01      	ldr	r3, [pc, #4]	; (801cae4 <__errno+0x8>)
 801cade:	6818      	ldr	r0, [r3, #0]
 801cae0:	4770      	bx	lr
 801cae2:	bf00      	nop
 801cae4:	200001b0 	.word	0x200001b0

0801cae8 <__libc_init_array>:
 801cae8:	b570      	push	{r4, r5, r6, lr}
 801caea:	4e0d      	ldr	r6, [pc, #52]	; (801cb20 <__libc_init_array+0x38>)
 801caec:	4c0d      	ldr	r4, [pc, #52]	; (801cb24 <__libc_init_array+0x3c>)
 801caee:	1ba4      	subs	r4, r4, r6
 801caf0:	10a4      	asrs	r4, r4, #2
 801caf2:	2500      	movs	r5, #0
 801caf4:	42a5      	cmp	r5, r4
 801caf6:	d109      	bne.n	801cb0c <__libc_init_array+0x24>
 801caf8:	4e0b      	ldr	r6, [pc, #44]	; (801cb28 <__libc_init_array+0x40>)
 801cafa:	4c0c      	ldr	r4, [pc, #48]	; (801cb2c <__libc_init_array+0x44>)
 801cafc:	f002 f9b2 	bl	801ee64 <_init>
 801cb00:	1ba4      	subs	r4, r4, r6
 801cb02:	10a4      	asrs	r4, r4, #2
 801cb04:	2500      	movs	r5, #0
 801cb06:	42a5      	cmp	r5, r4
 801cb08:	d105      	bne.n	801cb16 <__libc_init_array+0x2e>
 801cb0a:	bd70      	pop	{r4, r5, r6, pc}
 801cb0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801cb10:	4798      	blx	r3
 801cb12:	3501      	adds	r5, #1
 801cb14:	e7ee      	b.n	801caf4 <__libc_init_array+0xc>
 801cb16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801cb1a:	4798      	blx	r3
 801cb1c:	3501      	adds	r5, #1
 801cb1e:	e7f2      	b.n	801cb06 <__libc_init_array+0x1e>
 801cb20:	0801fe10 	.word	0x0801fe10
 801cb24:	0801fe10 	.word	0x0801fe10
 801cb28:	0801fe10 	.word	0x0801fe10
 801cb2c:	0801fe14 	.word	0x0801fe14

0801cb30 <malloc>:
 801cb30:	4b02      	ldr	r3, [pc, #8]	; (801cb3c <malloc+0xc>)
 801cb32:	4601      	mov	r1, r0
 801cb34:	6818      	ldr	r0, [r3, #0]
 801cb36:	f000 b86d 	b.w	801cc14 <_malloc_r>
 801cb3a:	bf00      	nop
 801cb3c:	200001b0 	.word	0x200001b0

0801cb40 <free>:
 801cb40:	4b02      	ldr	r3, [pc, #8]	; (801cb4c <free+0xc>)
 801cb42:	4601      	mov	r1, r0
 801cb44:	6818      	ldr	r0, [r3, #0]
 801cb46:	f000 b817 	b.w	801cb78 <_free_r>
 801cb4a:	bf00      	nop
 801cb4c:	200001b0 	.word	0x200001b0

0801cb50 <memcpy>:
 801cb50:	b510      	push	{r4, lr}
 801cb52:	1e43      	subs	r3, r0, #1
 801cb54:	440a      	add	r2, r1
 801cb56:	4291      	cmp	r1, r2
 801cb58:	d100      	bne.n	801cb5c <memcpy+0xc>
 801cb5a:	bd10      	pop	{r4, pc}
 801cb5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cb60:	f803 4f01 	strb.w	r4, [r3, #1]!
 801cb64:	e7f7      	b.n	801cb56 <memcpy+0x6>

0801cb66 <memset>:
 801cb66:	4402      	add	r2, r0
 801cb68:	4603      	mov	r3, r0
 801cb6a:	4293      	cmp	r3, r2
 801cb6c:	d100      	bne.n	801cb70 <memset+0xa>
 801cb6e:	4770      	bx	lr
 801cb70:	f803 1b01 	strb.w	r1, [r3], #1
 801cb74:	e7f9      	b.n	801cb6a <memset+0x4>
	...

0801cb78 <_free_r>:
 801cb78:	b538      	push	{r3, r4, r5, lr}
 801cb7a:	4605      	mov	r5, r0
 801cb7c:	2900      	cmp	r1, #0
 801cb7e:	d045      	beq.n	801cc0c <_free_r+0x94>
 801cb80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cb84:	1f0c      	subs	r4, r1, #4
 801cb86:	2b00      	cmp	r3, #0
 801cb88:	bfb8      	it	lt
 801cb8a:	18e4      	addlt	r4, r4, r3
 801cb8c:	f000 f9f6 	bl	801cf7c <__malloc_lock>
 801cb90:	4a1f      	ldr	r2, [pc, #124]	; (801cc10 <_free_r+0x98>)
 801cb92:	6813      	ldr	r3, [r2, #0]
 801cb94:	4610      	mov	r0, r2
 801cb96:	b933      	cbnz	r3, 801cba6 <_free_r+0x2e>
 801cb98:	6063      	str	r3, [r4, #4]
 801cb9a:	6014      	str	r4, [r2, #0]
 801cb9c:	4628      	mov	r0, r5
 801cb9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cba2:	f000 b9ec 	b.w	801cf7e <__malloc_unlock>
 801cba6:	42a3      	cmp	r3, r4
 801cba8:	d90c      	bls.n	801cbc4 <_free_r+0x4c>
 801cbaa:	6821      	ldr	r1, [r4, #0]
 801cbac:	1862      	adds	r2, r4, r1
 801cbae:	4293      	cmp	r3, r2
 801cbb0:	bf04      	itt	eq
 801cbb2:	681a      	ldreq	r2, [r3, #0]
 801cbb4:	685b      	ldreq	r3, [r3, #4]
 801cbb6:	6063      	str	r3, [r4, #4]
 801cbb8:	bf04      	itt	eq
 801cbba:	1852      	addeq	r2, r2, r1
 801cbbc:	6022      	streq	r2, [r4, #0]
 801cbbe:	6004      	str	r4, [r0, #0]
 801cbc0:	e7ec      	b.n	801cb9c <_free_r+0x24>
 801cbc2:	4613      	mov	r3, r2
 801cbc4:	685a      	ldr	r2, [r3, #4]
 801cbc6:	b10a      	cbz	r2, 801cbcc <_free_r+0x54>
 801cbc8:	42a2      	cmp	r2, r4
 801cbca:	d9fa      	bls.n	801cbc2 <_free_r+0x4a>
 801cbcc:	6819      	ldr	r1, [r3, #0]
 801cbce:	1858      	adds	r0, r3, r1
 801cbd0:	42a0      	cmp	r0, r4
 801cbd2:	d10b      	bne.n	801cbec <_free_r+0x74>
 801cbd4:	6820      	ldr	r0, [r4, #0]
 801cbd6:	4401      	add	r1, r0
 801cbd8:	1858      	adds	r0, r3, r1
 801cbda:	4282      	cmp	r2, r0
 801cbdc:	6019      	str	r1, [r3, #0]
 801cbde:	d1dd      	bne.n	801cb9c <_free_r+0x24>
 801cbe0:	6810      	ldr	r0, [r2, #0]
 801cbe2:	6852      	ldr	r2, [r2, #4]
 801cbe4:	605a      	str	r2, [r3, #4]
 801cbe6:	4401      	add	r1, r0
 801cbe8:	6019      	str	r1, [r3, #0]
 801cbea:	e7d7      	b.n	801cb9c <_free_r+0x24>
 801cbec:	d902      	bls.n	801cbf4 <_free_r+0x7c>
 801cbee:	230c      	movs	r3, #12
 801cbf0:	602b      	str	r3, [r5, #0]
 801cbf2:	e7d3      	b.n	801cb9c <_free_r+0x24>
 801cbf4:	6820      	ldr	r0, [r4, #0]
 801cbf6:	1821      	adds	r1, r4, r0
 801cbf8:	428a      	cmp	r2, r1
 801cbfa:	bf04      	itt	eq
 801cbfc:	6811      	ldreq	r1, [r2, #0]
 801cbfe:	6852      	ldreq	r2, [r2, #4]
 801cc00:	6062      	str	r2, [r4, #4]
 801cc02:	bf04      	itt	eq
 801cc04:	1809      	addeq	r1, r1, r0
 801cc06:	6021      	streq	r1, [r4, #0]
 801cc08:	605c      	str	r4, [r3, #4]
 801cc0a:	e7c7      	b.n	801cb9c <_free_r+0x24>
 801cc0c:	bd38      	pop	{r3, r4, r5, pc}
 801cc0e:	bf00      	nop
 801cc10:	20002924 	.word	0x20002924

0801cc14 <_malloc_r>:
 801cc14:	b570      	push	{r4, r5, r6, lr}
 801cc16:	1ccd      	adds	r5, r1, #3
 801cc18:	f025 0503 	bic.w	r5, r5, #3
 801cc1c:	3508      	adds	r5, #8
 801cc1e:	2d0c      	cmp	r5, #12
 801cc20:	bf38      	it	cc
 801cc22:	250c      	movcc	r5, #12
 801cc24:	2d00      	cmp	r5, #0
 801cc26:	4606      	mov	r6, r0
 801cc28:	db01      	blt.n	801cc2e <_malloc_r+0x1a>
 801cc2a:	42a9      	cmp	r1, r5
 801cc2c:	d903      	bls.n	801cc36 <_malloc_r+0x22>
 801cc2e:	230c      	movs	r3, #12
 801cc30:	6033      	str	r3, [r6, #0]
 801cc32:	2000      	movs	r0, #0
 801cc34:	bd70      	pop	{r4, r5, r6, pc}
 801cc36:	f000 f9a1 	bl	801cf7c <__malloc_lock>
 801cc3a:	4a21      	ldr	r2, [pc, #132]	; (801ccc0 <_malloc_r+0xac>)
 801cc3c:	6814      	ldr	r4, [r2, #0]
 801cc3e:	4621      	mov	r1, r4
 801cc40:	b991      	cbnz	r1, 801cc68 <_malloc_r+0x54>
 801cc42:	4c20      	ldr	r4, [pc, #128]	; (801ccc4 <_malloc_r+0xb0>)
 801cc44:	6823      	ldr	r3, [r4, #0]
 801cc46:	b91b      	cbnz	r3, 801cc50 <_malloc_r+0x3c>
 801cc48:	4630      	mov	r0, r6
 801cc4a:	f000 f855 	bl	801ccf8 <_sbrk_r>
 801cc4e:	6020      	str	r0, [r4, #0]
 801cc50:	4629      	mov	r1, r5
 801cc52:	4630      	mov	r0, r6
 801cc54:	f000 f850 	bl	801ccf8 <_sbrk_r>
 801cc58:	1c43      	adds	r3, r0, #1
 801cc5a:	d124      	bne.n	801cca6 <_malloc_r+0x92>
 801cc5c:	230c      	movs	r3, #12
 801cc5e:	6033      	str	r3, [r6, #0]
 801cc60:	4630      	mov	r0, r6
 801cc62:	f000 f98c 	bl	801cf7e <__malloc_unlock>
 801cc66:	e7e4      	b.n	801cc32 <_malloc_r+0x1e>
 801cc68:	680b      	ldr	r3, [r1, #0]
 801cc6a:	1b5b      	subs	r3, r3, r5
 801cc6c:	d418      	bmi.n	801cca0 <_malloc_r+0x8c>
 801cc6e:	2b0b      	cmp	r3, #11
 801cc70:	d90f      	bls.n	801cc92 <_malloc_r+0x7e>
 801cc72:	600b      	str	r3, [r1, #0]
 801cc74:	50cd      	str	r5, [r1, r3]
 801cc76:	18cc      	adds	r4, r1, r3
 801cc78:	4630      	mov	r0, r6
 801cc7a:	f000 f980 	bl	801cf7e <__malloc_unlock>
 801cc7e:	f104 000b 	add.w	r0, r4, #11
 801cc82:	1d23      	adds	r3, r4, #4
 801cc84:	f020 0007 	bic.w	r0, r0, #7
 801cc88:	1ac3      	subs	r3, r0, r3
 801cc8a:	d0d3      	beq.n	801cc34 <_malloc_r+0x20>
 801cc8c:	425a      	negs	r2, r3
 801cc8e:	50e2      	str	r2, [r4, r3]
 801cc90:	e7d0      	b.n	801cc34 <_malloc_r+0x20>
 801cc92:	428c      	cmp	r4, r1
 801cc94:	684b      	ldr	r3, [r1, #4]
 801cc96:	bf16      	itet	ne
 801cc98:	6063      	strne	r3, [r4, #4]
 801cc9a:	6013      	streq	r3, [r2, #0]
 801cc9c:	460c      	movne	r4, r1
 801cc9e:	e7eb      	b.n	801cc78 <_malloc_r+0x64>
 801cca0:	460c      	mov	r4, r1
 801cca2:	6849      	ldr	r1, [r1, #4]
 801cca4:	e7cc      	b.n	801cc40 <_malloc_r+0x2c>
 801cca6:	1cc4      	adds	r4, r0, #3
 801cca8:	f024 0403 	bic.w	r4, r4, #3
 801ccac:	42a0      	cmp	r0, r4
 801ccae:	d005      	beq.n	801ccbc <_malloc_r+0xa8>
 801ccb0:	1a21      	subs	r1, r4, r0
 801ccb2:	4630      	mov	r0, r6
 801ccb4:	f000 f820 	bl	801ccf8 <_sbrk_r>
 801ccb8:	3001      	adds	r0, #1
 801ccba:	d0cf      	beq.n	801cc5c <_malloc_r+0x48>
 801ccbc:	6025      	str	r5, [r4, #0]
 801ccbe:	e7db      	b.n	801cc78 <_malloc_r+0x64>
 801ccc0:	20002924 	.word	0x20002924
 801ccc4:	20002928 	.word	0x20002928

0801ccc8 <iprintf>:
 801ccc8:	b40f      	push	{r0, r1, r2, r3}
 801ccca:	4b0a      	ldr	r3, [pc, #40]	; (801ccf4 <iprintf+0x2c>)
 801cccc:	b513      	push	{r0, r1, r4, lr}
 801ccce:	681c      	ldr	r4, [r3, #0]
 801ccd0:	b124      	cbz	r4, 801ccdc <iprintf+0x14>
 801ccd2:	69a3      	ldr	r3, [r4, #24]
 801ccd4:	b913      	cbnz	r3, 801ccdc <iprintf+0x14>
 801ccd6:	4620      	mov	r0, r4
 801ccd8:	f000 f8c6 	bl	801ce68 <__sinit>
 801ccdc:	ab05      	add	r3, sp, #20
 801ccde:	9a04      	ldr	r2, [sp, #16]
 801cce0:	68a1      	ldr	r1, [r4, #8]
 801cce2:	9301      	str	r3, [sp, #4]
 801cce4:	4620      	mov	r0, r4
 801cce6:	f000 fac7 	bl	801d278 <_vfiprintf_r>
 801ccea:	b002      	add	sp, #8
 801ccec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ccf0:	b004      	add	sp, #16
 801ccf2:	4770      	bx	lr
 801ccf4:	200001b0 	.word	0x200001b0

0801ccf8 <_sbrk_r>:
 801ccf8:	b538      	push	{r3, r4, r5, lr}
 801ccfa:	4c06      	ldr	r4, [pc, #24]	; (801cd14 <_sbrk_r+0x1c>)
 801ccfc:	2300      	movs	r3, #0
 801ccfe:	4605      	mov	r5, r0
 801cd00:	4608      	mov	r0, r1
 801cd02:	6023      	str	r3, [r4, #0]
 801cd04:	f7e5 fff2 	bl	8002cec <_sbrk>
 801cd08:	1c43      	adds	r3, r0, #1
 801cd0a:	d102      	bne.n	801cd12 <_sbrk_r+0x1a>
 801cd0c:	6823      	ldr	r3, [r4, #0]
 801cd0e:	b103      	cbz	r3, 801cd12 <_sbrk_r+0x1a>
 801cd10:	602b      	str	r3, [r5, #0]
 801cd12:	bd38      	pop	{r3, r4, r5, pc}
 801cd14:	20008978 	.word	0x20008978

0801cd18 <sniprintf>:
 801cd18:	b40c      	push	{r2, r3}
 801cd1a:	b530      	push	{r4, r5, lr}
 801cd1c:	4b17      	ldr	r3, [pc, #92]	; (801cd7c <sniprintf+0x64>)
 801cd1e:	1e0c      	subs	r4, r1, #0
 801cd20:	b09d      	sub	sp, #116	; 0x74
 801cd22:	681d      	ldr	r5, [r3, #0]
 801cd24:	da08      	bge.n	801cd38 <sniprintf+0x20>
 801cd26:	238b      	movs	r3, #139	; 0x8b
 801cd28:	602b      	str	r3, [r5, #0]
 801cd2a:	f04f 30ff 	mov.w	r0, #4294967295
 801cd2e:	b01d      	add	sp, #116	; 0x74
 801cd30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cd34:	b002      	add	sp, #8
 801cd36:	4770      	bx	lr
 801cd38:	f44f 7302 	mov.w	r3, #520	; 0x208
 801cd3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801cd40:	bf14      	ite	ne
 801cd42:	f104 33ff 	addne.w	r3, r4, #4294967295
 801cd46:	4623      	moveq	r3, r4
 801cd48:	9304      	str	r3, [sp, #16]
 801cd4a:	9307      	str	r3, [sp, #28]
 801cd4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cd50:	9002      	str	r0, [sp, #8]
 801cd52:	9006      	str	r0, [sp, #24]
 801cd54:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cd58:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801cd5a:	ab21      	add	r3, sp, #132	; 0x84
 801cd5c:	a902      	add	r1, sp, #8
 801cd5e:	4628      	mov	r0, r5
 801cd60:	9301      	str	r3, [sp, #4]
 801cd62:	f000 f967 	bl	801d034 <_svfiprintf_r>
 801cd66:	1c43      	adds	r3, r0, #1
 801cd68:	bfbc      	itt	lt
 801cd6a:	238b      	movlt	r3, #139	; 0x8b
 801cd6c:	602b      	strlt	r3, [r5, #0]
 801cd6e:	2c00      	cmp	r4, #0
 801cd70:	d0dd      	beq.n	801cd2e <sniprintf+0x16>
 801cd72:	9b02      	ldr	r3, [sp, #8]
 801cd74:	2200      	movs	r2, #0
 801cd76:	701a      	strb	r2, [r3, #0]
 801cd78:	e7d9      	b.n	801cd2e <sniprintf+0x16>
 801cd7a:	bf00      	nop
 801cd7c:	200001b0 	.word	0x200001b0

0801cd80 <siprintf>:
 801cd80:	b40e      	push	{r1, r2, r3}
 801cd82:	b500      	push	{lr}
 801cd84:	b09c      	sub	sp, #112	; 0x70
 801cd86:	ab1d      	add	r3, sp, #116	; 0x74
 801cd88:	9002      	str	r0, [sp, #8]
 801cd8a:	9006      	str	r0, [sp, #24]
 801cd8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801cd90:	4809      	ldr	r0, [pc, #36]	; (801cdb8 <siprintf+0x38>)
 801cd92:	9107      	str	r1, [sp, #28]
 801cd94:	9104      	str	r1, [sp, #16]
 801cd96:	4909      	ldr	r1, [pc, #36]	; (801cdbc <siprintf+0x3c>)
 801cd98:	f853 2b04 	ldr.w	r2, [r3], #4
 801cd9c:	9105      	str	r1, [sp, #20]
 801cd9e:	6800      	ldr	r0, [r0, #0]
 801cda0:	9301      	str	r3, [sp, #4]
 801cda2:	a902      	add	r1, sp, #8
 801cda4:	f000 f946 	bl	801d034 <_svfiprintf_r>
 801cda8:	9b02      	ldr	r3, [sp, #8]
 801cdaa:	2200      	movs	r2, #0
 801cdac:	701a      	strb	r2, [r3, #0]
 801cdae:	b01c      	add	sp, #112	; 0x70
 801cdb0:	f85d eb04 	ldr.w	lr, [sp], #4
 801cdb4:	b003      	add	sp, #12
 801cdb6:	4770      	bx	lr
 801cdb8:	200001b0 	.word	0x200001b0
 801cdbc:	ffff0208 	.word	0xffff0208

0801cdc0 <strncat>:
 801cdc0:	b530      	push	{r4, r5, lr}
 801cdc2:	4603      	mov	r3, r0
 801cdc4:	781c      	ldrb	r4, [r3, #0]
 801cdc6:	1c5d      	adds	r5, r3, #1
 801cdc8:	b944      	cbnz	r4, 801cddc <strncat+0x1c>
 801cdca:	f112 32ff 	adds.w	r2, r2, #4294967295
 801cdce:	d304      	bcc.n	801cdda <strncat+0x1a>
 801cdd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cdd4:	f803 4b01 	strb.w	r4, [r3], #1
 801cdd8:	b914      	cbnz	r4, 801cde0 <strncat+0x20>
 801cdda:	bd30      	pop	{r4, r5, pc}
 801cddc:	462b      	mov	r3, r5
 801cdde:	e7f1      	b.n	801cdc4 <strncat+0x4>
 801cde0:	2a00      	cmp	r2, #0
 801cde2:	d1f2      	bne.n	801cdca <strncat+0xa>
 801cde4:	701a      	strb	r2, [r3, #0]
 801cde6:	e7f0      	b.n	801cdca <strncat+0xa>

0801cde8 <std>:
 801cde8:	2300      	movs	r3, #0
 801cdea:	b510      	push	{r4, lr}
 801cdec:	4604      	mov	r4, r0
 801cdee:	e9c0 3300 	strd	r3, r3, [r0]
 801cdf2:	6083      	str	r3, [r0, #8]
 801cdf4:	8181      	strh	r1, [r0, #12]
 801cdf6:	6643      	str	r3, [r0, #100]	; 0x64
 801cdf8:	81c2      	strh	r2, [r0, #14]
 801cdfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cdfe:	6183      	str	r3, [r0, #24]
 801ce00:	4619      	mov	r1, r3
 801ce02:	2208      	movs	r2, #8
 801ce04:	305c      	adds	r0, #92	; 0x5c
 801ce06:	f7ff feae 	bl	801cb66 <memset>
 801ce0a:	4b05      	ldr	r3, [pc, #20]	; (801ce20 <std+0x38>)
 801ce0c:	6263      	str	r3, [r4, #36]	; 0x24
 801ce0e:	4b05      	ldr	r3, [pc, #20]	; (801ce24 <std+0x3c>)
 801ce10:	62a3      	str	r3, [r4, #40]	; 0x28
 801ce12:	4b05      	ldr	r3, [pc, #20]	; (801ce28 <std+0x40>)
 801ce14:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ce16:	4b05      	ldr	r3, [pc, #20]	; (801ce2c <std+0x44>)
 801ce18:	6224      	str	r4, [r4, #32]
 801ce1a:	6323      	str	r3, [r4, #48]	; 0x30
 801ce1c:	bd10      	pop	{r4, pc}
 801ce1e:	bf00      	nop
 801ce20:	0801d7b5 	.word	0x0801d7b5
 801ce24:	0801d7d7 	.word	0x0801d7d7
 801ce28:	0801d80f 	.word	0x0801d80f
 801ce2c:	0801d833 	.word	0x0801d833

0801ce30 <_cleanup_r>:
 801ce30:	4901      	ldr	r1, [pc, #4]	; (801ce38 <_cleanup_r+0x8>)
 801ce32:	f000 b885 	b.w	801cf40 <_fwalk_reent>
 801ce36:	bf00      	nop
 801ce38:	0801db0d 	.word	0x0801db0d

0801ce3c <__sfmoreglue>:
 801ce3c:	b570      	push	{r4, r5, r6, lr}
 801ce3e:	1e4a      	subs	r2, r1, #1
 801ce40:	2568      	movs	r5, #104	; 0x68
 801ce42:	4355      	muls	r5, r2
 801ce44:	460e      	mov	r6, r1
 801ce46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ce4a:	f7ff fee3 	bl	801cc14 <_malloc_r>
 801ce4e:	4604      	mov	r4, r0
 801ce50:	b140      	cbz	r0, 801ce64 <__sfmoreglue+0x28>
 801ce52:	2100      	movs	r1, #0
 801ce54:	e9c0 1600 	strd	r1, r6, [r0]
 801ce58:	300c      	adds	r0, #12
 801ce5a:	60a0      	str	r0, [r4, #8]
 801ce5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ce60:	f7ff fe81 	bl	801cb66 <memset>
 801ce64:	4620      	mov	r0, r4
 801ce66:	bd70      	pop	{r4, r5, r6, pc}

0801ce68 <__sinit>:
 801ce68:	6983      	ldr	r3, [r0, #24]
 801ce6a:	b510      	push	{r4, lr}
 801ce6c:	4604      	mov	r4, r0
 801ce6e:	bb33      	cbnz	r3, 801cebe <__sinit+0x56>
 801ce70:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801ce74:	6503      	str	r3, [r0, #80]	; 0x50
 801ce76:	4b12      	ldr	r3, [pc, #72]	; (801cec0 <__sinit+0x58>)
 801ce78:	4a12      	ldr	r2, [pc, #72]	; (801cec4 <__sinit+0x5c>)
 801ce7a:	681b      	ldr	r3, [r3, #0]
 801ce7c:	6282      	str	r2, [r0, #40]	; 0x28
 801ce7e:	4298      	cmp	r0, r3
 801ce80:	bf04      	itt	eq
 801ce82:	2301      	moveq	r3, #1
 801ce84:	6183      	streq	r3, [r0, #24]
 801ce86:	f000 f81f 	bl	801cec8 <__sfp>
 801ce8a:	6060      	str	r0, [r4, #4]
 801ce8c:	4620      	mov	r0, r4
 801ce8e:	f000 f81b 	bl	801cec8 <__sfp>
 801ce92:	60a0      	str	r0, [r4, #8]
 801ce94:	4620      	mov	r0, r4
 801ce96:	f000 f817 	bl	801cec8 <__sfp>
 801ce9a:	2200      	movs	r2, #0
 801ce9c:	60e0      	str	r0, [r4, #12]
 801ce9e:	2104      	movs	r1, #4
 801cea0:	6860      	ldr	r0, [r4, #4]
 801cea2:	f7ff ffa1 	bl	801cde8 <std>
 801cea6:	2201      	movs	r2, #1
 801cea8:	2109      	movs	r1, #9
 801ceaa:	68a0      	ldr	r0, [r4, #8]
 801ceac:	f7ff ff9c 	bl	801cde8 <std>
 801ceb0:	2202      	movs	r2, #2
 801ceb2:	2112      	movs	r1, #18
 801ceb4:	68e0      	ldr	r0, [r4, #12]
 801ceb6:	f7ff ff97 	bl	801cde8 <std>
 801ceba:	2301      	movs	r3, #1
 801cebc:	61a3      	str	r3, [r4, #24]
 801cebe:	bd10      	pop	{r4, pc}
 801cec0:	0801fd28 	.word	0x0801fd28
 801cec4:	0801ce31 	.word	0x0801ce31

0801cec8 <__sfp>:
 801cec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ceca:	4b1b      	ldr	r3, [pc, #108]	; (801cf38 <__sfp+0x70>)
 801cecc:	681e      	ldr	r6, [r3, #0]
 801cece:	69b3      	ldr	r3, [r6, #24]
 801ced0:	4607      	mov	r7, r0
 801ced2:	b913      	cbnz	r3, 801ceda <__sfp+0x12>
 801ced4:	4630      	mov	r0, r6
 801ced6:	f7ff ffc7 	bl	801ce68 <__sinit>
 801ceda:	3648      	adds	r6, #72	; 0x48
 801cedc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801cee0:	3b01      	subs	r3, #1
 801cee2:	d503      	bpl.n	801ceec <__sfp+0x24>
 801cee4:	6833      	ldr	r3, [r6, #0]
 801cee6:	b133      	cbz	r3, 801cef6 <__sfp+0x2e>
 801cee8:	6836      	ldr	r6, [r6, #0]
 801ceea:	e7f7      	b.n	801cedc <__sfp+0x14>
 801ceec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801cef0:	b16d      	cbz	r5, 801cf0e <__sfp+0x46>
 801cef2:	3468      	adds	r4, #104	; 0x68
 801cef4:	e7f4      	b.n	801cee0 <__sfp+0x18>
 801cef6:	2104      	movs	r1, #4
 801cef8:	4638      	mov	r0, r7
 801cefa:	f7ff ff9f 	bl	801ce3c <__sfmoreglue>
 801cefe:	6030      	str	r0, [r6, #0]
 801cf00:	2800      	cmp	r0, #0
 801cf02:	d1f1      	bne.n	801cee8 <__sfp+0x20>
 801cf04:	230c      	movs	r3, #12
 801cf06:	603b      	str	r3, [r7, #0]
 801cf08:	4604      	mov	r4, r0
 801cf0a:	4620      	mov	r0, r4
 801cf0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cf0e:	4b0b      	ldr	r3, [pc, #44]	; (801cf3c <__sfp+0x74>)
 801cf10:	6665      	str	r5, [r4, #100]	; 0x64
 801cf12:	e9c4 5500 	strd	r5, r5, [r4]
 801cf16:	60a5      	str	r5, [r4, #8]
 801cf18:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801cf1c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801cf20:	2208      	movs	r2, #8
 801cf22:	4629      	mov	r1, r5
 801cf24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801cf28:	f7ff fe1d 	bl	801cb66 <memset>
 801cf2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801cf30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801cf34:	e7e9      	b.n	801cf0a <__sfp+0x42>
 801cf36:	bf00      	nop
 801cf38:	0801fd28 	.word	0x0801fd28
 801cf3c:	ffff0001 	.word	0xffff0001

0801cf40 <_fwalk_reent>:
 801cf40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cf44:	4680      	mov	r8, r0
 801cf46:	4689      	mov	r9, r1
 801cf48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801cf4c:	2600      	movs	r6, #0
 801cf4e:	b914      	cbnz	r4, 801cf56 <_fwalk_reent+0x16>
 801cf50:	4630      	mov	r0, r6
 801cf52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cf56:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801cf5a:	3f01      	subs	r7, #1
 801cf5c:	d501      	bpl.n	801cf62 <_fwalk_reent+0x22>
 801cf5e:	6824      	ldr	r4, [r4, #0]
 801cf60:	e7f5      	b.n	801cf4e <_fwalk_reent+0xe>
 801cf62:	89ab      	ldrh	r3, [r5, #12]
 801cf64:	2b01      	cmp	r3, #1
 801cf66:	d907      	bls.n	801cf78 <_fwalk_reent+0x38>
 801cf68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801cf6c:	3301      	adds	r3, #1
 801cf6e:	d003      	beq.n	801cf78 <_fwalk_reent+0x38>
 801cf70:	4629      	mov	r1, r5
 801cf72:	4640      	mov	r0, r8
 801cf74:	47c8      	blx	r9
 801cf76:	4306      	orrs	r6, r0
 801cf78:	3568      	adds	r5, #104	; 0x68
 801cf7a:	e7ee      	b.n	801cf5a <_fwalk_reent+0x1a>

0801cf7c <__malloc_lock>:
 801cf7c:	4770      	bx	lr

0801cf7e <__malloc_unlock>:
 801cf7e:	4770      	bx	lr

0801cf80 <__ssputs_r>:
 801cf80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cf84:	688e      	ldr	r6, [r1, #8]
 801cf86:	429e      	cmp	r6, r3
 801cf88:	4682      	mov	sl, r0
 801cf8a:	460c      	mov	r4, r1
 801cf8c:	4690      	mov	r8, r2
 801cf8e:	4699      	mov	r9, r3
 801cf90:	d837      	bhi.n	801d002 <__ssputs_r+0x82>
 801cf92:	898a      	ldrh	r2, [r1, #12]
 801cf94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801cf98:	d031      	beq.n	801cffe <__ssputs_r+0x7e>
 801cf9a:	6825      	ldr	r5, [r4, #0]
 801cf9c:	6909      	ldr	r1, [r1, #16]
 801cf9e:	1a6f      	subs	r7, r5, r1
 801cfa0:	6965      	ldr	r5, [r4, #20]
 801cfa2:	2302      	movs	r3, #2
 801cfa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cfa8:	fb95 f5f3 	sdiv	r5, r5, r3
 801cfac:	f109 0301 	add.w	r3, r9, #1
 801cfb0:	443b      	add	r3, r7
 801cfb2:	429d      	cmp	r5, r3
 801cfb4:	bf38      	it	cc
 801cfb6:	461d      	movcc	r5, r3
 801cfb8:	0553      	lsls	r3, r2, #21
 801cfba:	d530      	bpl.n	801d01e <__ssputs_r+0x9e>
 801cfbc:	4629      	mov	r1, r5
 801cfbe:	f7ff fe29 	bl	801cc14 <_malloc_r>
 801cfc2:	4606      	mov	r6, r0
 801cfc4:	b950      	cbnz	r0, 801cfdc <__ssputs_r+0x5c>
 801cfc6:	230c      	movs	r3, #12
 801cfc8:	f8ca 3000 	str.w	r3, [sl]
 801cfcc:	89a3      	ldrh	r3, [r4, #12]
 801cfce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cfd2:	81a3      	strh	r3, [r4, #12]
 801cfd4:	f04f 30ff 	mov.w	r0, #4294967295
 801cfd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cfdc:	463a      	mov	r2, r7
 801cfde:	6921      	ldr	r1, [r4, #16]
 801cfe0:	f7ff fdb6 	bl	801cb50 <memcpy>
 801cfe4:	89a3      	ldrh	r3, [r4, #12]
 801cfe6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801cfea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cfee:	81a3      	strh	r3, [r4, #12]
 801cff0:	6126      	str	r6, [r4, #16]
 801cff2:	6165      	str	r5, [r4, #20]
 801cff4:	443e      	add	r6, r7
 801cff6:	1bed      	subs	r5, r5, r7
 801cff8:	6026      	str	r6, [r4, #0]
 801cffa:	60a5      	str	r5, [r4, #8]
 801cffc:	464e      	mov	r6, r9
 801cffe:	454e      	cmp	r6, r9
 801d000:	d900      	bls.n	801d004 <__ssputs_r+0x84>
 801d002:	464e      	mov	r6, r9
 801d004:	4632      	mov	r2, r6
 801d006:	4641      	mov	r1, r8
 801d008:	6820      	ldr	r0, [r4, #0]
 801d00a:	f000 fe1f 	bl	801dc4c <memmove>
 801d00e:	68a3      	ldr	r3, [r4, #8]
 801d010:	1b9b      	subs	r3, r3, r6
 801d012:	60a3      	str	r3, [r4, #8]
 801d014:	6823      	ldr	r3, [r4, #0]
 801d016:	441e      	add	r6, r3
 801d018:	6026      	str	r6, [r4, #0]
 801d01a:	2000      	movs	r0, #0
 801d01c:	e7dc      	b.n	801cfd8 <__ssputs_r+0x58>
 801d01e:	462a      	mov	r2, r5
 801d020:	f000 fe2d 	bl	801dc7e <_realloc_r>
 801d024:	4606      	mov	r6, r0
 801d026:	2800      	cmp	r0, #0
 801d028:	d1e2      	bne.n	801cff0 <__ssputs_r+0x70>
 801d02a:	6921      	ldr	r1, [r4, #16]
 801d02c:	4650      	mov	r0, sl
 801d02e:	f7ff fda3 	bl	801cb78 <_free_r>
 801d032:	e7c8      	b.n	801cfc6 <__ssputs_r+0x46>

0801d034 <_svfiprintf_r>:
 801d034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d038:	461d      	mov	r5, r3
 801d03a:	898b      	ldrh	r3, [r1, #12]
 801d03c:	061f      	lsls	r7, r3, #24
 801d03e:	b09d      	sub	sp, #116	; 0x74
 801d040:	4680      	mov	r8, r0
 801d042:	460c      	mov	r4, r1
 801d044:	4616      	mov	r6, r2
 801d046:	d50f      	bpl.n	801d068 <_svfiprintf_r+0x34>
 801d048:	690b      	ldr	r3, [r1, #16]
 801d04a:	b96b      	cbnz	r3, 801d068 <_svfiprintf_r+0x34>
 801d04c:	2140      	movs	r1, #64	; 0x40
 801d04e:	f7ff fde1 	bl	801cc14 <_malloc_r>
 801d052:	6020      	str	r0, [r4, #0]
 801d054:	6120      	str	r0, [r4, #16]
 801d056:	b928      	cbnz	r0, 801d064 <_svfiprintf_r+0x30>
 801d058:	230c      	movs	r3, #12
 801d05a:	f8c8 3000 	str.w	r3, [r8]
 801d05e:	f04f 30ff 	mov.w	r0, #4294967295
 801d062:	e0c8      	b.n	801d1f6 <_svfiprintf_r+0x1c2>
 801d064:	2340      	movs	r3, #64	; 0x40
 801d066:	6163      	str	r3, [r4, #20]
 801d068:	2300      	movs	r3, #0
 801d06a:	9309      	str	r3, [sp, #36]	; 0x24
 801d06c:	2320      	movs	r3, #32
 801d06e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d072:	2330      	movs	r3, #48	; 0x30
 801d074:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d078:	9503      	str	r5, [sp, #12]
 801d07a:	f04f 0b01 	mov.w	fp, #1
 801d07e:	4637      	mov	r7, r6
 801d080:	463d      	mov	r5, r7
 801d082:	f815 3b01 	ldrb.w	r3, [r5], #1
 801d086:	b10b      	cbz	r3, 801d08c <_svfiprintf_r+0x58>
 801d088:	2b25      	cmp	r3, #37	; 0x25
 801d08a:	d13e      	bne.n	801d10a <_svfiprintf_r+0xd6>
 801d08c:	ebb7 0a06 	subs.w	sl, r7, r6
 801d090:	d00b      	beq.n	801d0aa <_svfiprintf_r+0x76>
 801d092:	4653      	mov	r3, sl
 801d094:	4632      	mov	r2, r6
 801d096:	4621      	mov	r1, r4
 801d098:	4640      	mov	r0, r8
 801d09a:	f7ff ff71 	bl	801cf80 <__ssputs_r>
 801d09e:	3001      	adds	r0, #1
 801d0a0:	f000 80a4 	beq.w	801d1ec <_svfiprintf_r+0x1b8>
 801d0a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d0a6:	4453      	add	r3, sl
 801d0a8:	9309      	str	r3, [sp, #36]	; 0x24
 801d0aa:	783b      	ldrb	r3, [r7, #0]
 801d0ac:	2b00      	cmp	r3, #0
 801d0ae:	f000 809d 	beq.w	801d1ec <_svfiprintf_r+0x1b8>
 801d0b2:	2300      	movs	r3, #0
 801d0b4:	f04f 32ff 	mov.w	r2, #4294967295
 801d0b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d0bc:	9304      	str	r3, [sp, #16]
 801d0be:	9307      	str	r3, [sp, #28]
 801d0c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d0c4:	931a      	str	r3, [sp, #104]	; 0x68
 801d0c6:	462f      	mov	r7, r5
 801d0c8:	2205      	movs	r2, #5
 801d0ca:	f817 1b01 	ldrb.w	r1, [r7], #1
 801d0ce:	4850      	ldr	r0, [pc, #320]	; (801d210 <_svfiprintf_r+0x1dc>)
 801d0d0:	f7e3 f886 	bl	80001e0 <memchr>
 801d0d4:	9b04      	ldr	r3, [sp, #16]
 801d0d6:	b9d0      	cbnz	r0, 801d10e <_svfiprintf_r+0xda>
 801d0d8:	06d9      	lsls	r1, r3, #27
 801d0da:	bf44      	itt	mi
 801d0dc:	2220      	movmi	r2, #32
 801d0de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801d0e2:	071a      	lsls	r2, r3, #28
 801d0e4:	bf44      	itt	mi
 801d0e6:	222b      	movmi	r2, #43	; 0x2b
 801d0e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801d0ec:	782a      	ldrb	r2, [r5, #0]
 801d0ee:	2a2a      	cmp	r2, #42	; 0x2a
 801d0f0:	d015      	beq.n	801d11e <_svfiprintf_r+0xea>
 801d0f2:	9a07      	ldr	r2, [sp, #28]
 801d0f4:	462f      	mov	r7, r5
 801d0f6:	2000      	movs	r0, #0
 801d0f8:	250a      	movs	r5, #10
 801d0fa:	4639      	mov	r1, r7
 801d0fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d100:	3b30      	subs	r3, #48	; 0x30
 801d102:	2b09      	cmp	r3, #9
 801d104:	d94d      	bls.n	801d1a2 <_svfiprintf_r+0x16e>
 801d106:	b1b8      	cbz	r0, 801d138 <_svfiprintf_r+0x104>
 801d108:	e00f      	b.n	801d12a <_svfiprintf_r+0xf6>
 801d10a:	462f      	mov	r7, r5
 801d10c:	e7b8      	b.n	801d080 <_svfiprintf_r+0x4c>
 801d10e:	4a40      	ldr	r2, [pc, #256]	; (801d210 <_svfiprintf_r+0x1dc>)
 801d110:	1a80      	subs	r0, r0, r2
 801d112:	fa0b f000 	lsl.w	r0, fp, r0
 801d116:	4318      	orrs	r0, r3
 801d118:	9004      	str	r0, [sp, #16]
 801d11a:	463d      	mov	r5, r7
 801d11c:	e7d3      	b.n	801d0c6 <_svfiprintf_r+0x92>
 801d11e:	9a03      	ldr	r2, [sp, #12]
 801d120:	1d11      	adds	r1, r2, #4
 801d122:	6812      	ldr	r2, [r2, #0]
 801d124:	9103      	str	r1, [sp, #12]
 801d126:	2a00      	cmp	r2, #0
 801d128:	db01      	blt.n	801d12e <_svfiprintf_r+0xfa>
 801d12a:	9207      	str	r2, [sp, #28]
 801d12c:	e004      	b.n	801d138 <_svfiprintf_r+0x104>
 801d12e:	4252      	negs	r2, r2
 801d130:	f043 0302 	orr.w	r3, r3, #2
 801d134:	9207      	str	r2, [sp, #28]
 801d136:	9304      	str	r3, [sp, #16]
 801d138:	783b      	ldrb	r3, [r7, #0]
 801d13a:	2b2e      	cmp	r3, #46	; 0x2e
 801d13c:	d10c      	bne.n	801d158 <_svfiprintf_r+0x124>
 801d13e:	787b      	ldrb	r3, [r7, #1]
 801d140:	2b2a      	cmp	r3, #42	; 0x2a
 801d142:	d133      	bne.n	801d1ac <_svfiprintf_r+0x178>
 801d144:	9b03      	ldr	r3, [sp, #12]
 801d146:	1d1a      	adds	r2, r3, #4
 801d148:	681b      	ldr	r3, [r3, #0]
 801d14a:	9203      	str	r2, [sp, #12]
 801d14c:	2b00      	cmp	r3, #0
 801d14e:	bfb8      	it	lt
 801d150:	f04f 33ff 	movlt.w	r3, #4294967295
 801d154:	3702      	adds	r7, #2
 801d156:	9305      	str	r3, [sp, #20]
 801d158:	4d2e      	ldr	r5, [pc, #184]	; (801d214 <_svfiprintf_r+0x1e0>)
 801d15a:	7839      	ldrb	r1, [r7, #0]
 801d15c:	2203      	movs	r2, #3
 801d15e:	4628      	mov	r0, r5
 801d160:	f7e3 f83e 	bl	80001e0 <memchr>
 801d164:	b138      	cbz	r0, 801d176 <_svfiprintf_r+0x142>
 801d166:	2340      	movs	r3, #64	; 0x40
 801d168:	1b40      	subs	r0, r0, r5
 801d16a:	fa03 f000 	lsl.w	r0, r3, r0
 801d16e:	9b04      	ldr	r3, [sp, #16]
 801d170:	4303      	orrs	r3, r0
 801d172:	3701      	adds	r7, #1
 801d174:	9304      	str	r3, [sp, #16]
 801d176:	7839      	ldrb	r1, [r7, #0]
 801d178:	4827      	ldr	r0, [pc, #156]	; (801d218 <_svfiprintf_r+0x1e4>)
 801d17a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d17e:	2206      	movs	r2, #6
 801d180:	1c7e      	adds	r6, r7, #1
 801d182:	f7e3 f82d 	bl	80001e0 <memchr>
 801d186:	2800      	cmp	r0, #0
 801d188:	d038      	beq.n	801d1fc <_svfiprintf_r+0x1c8>
 801d18a:	4b24      	ldr	r3, [pc, #144]	; (801d21c <_svfiprintf_r+0x1e8>)
 801d18c:	bb13      	cbnz	r3, 801d1d4 <_svfiprintf_r+0x1a0>
 801d18e:	9b03      	ldr	r3, [sp, #12]
 801d190:	3307      	adds	r3, #7
 801d192:	f023 0307 	bic.w	r3, r3, #7
 801d196:	3308      	adds	r3, #8
 801d198:	9303      	str	r3, [sp, #12]
 801d19a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d19c:	444b      	add	r3, r9
 801d19e:	9309      	str	r3, [sp, #36]	; 0x24
 801d1a0:	e76d      	b.n	801d07e <_svfiprintf_r+0x4a>
 801d1a2:	fb05 3202 	mla	r2, r5, r2, r3
 801d1a6:	2001      	movs	r0, #1
 801d1a8:	460f      	mov	r7, r1
 801d1aa:	e7a6      	b.n	801d0fa <_svfiprintf_r+0xc6>
 801d1ac:	2300      	movs	r3, #0
 801d1ae:	3701      	adds	r7, #1
 801d1b0:	9305      	str	r3, [sp, #20]
 801d1b2:	4619      	mov	r1, r3
 801d1b4:	250a      	movs	r5, #10
 801d1b6:	4638      	mov	r0, r7
 801d1b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d1bc:	3a30      	subs	r2, #48	; 0x30
 801d1be:	2a09      	cmp	r2, #9
 801d1c0:	d903      	bls.n	801d1ca <_svfiprintf_r+0x196>
 801d1c2:	2b00      	cmp	r3, #0
 801d1c4:	d0c8      	beq.n	801d158 <_svfiprintf_r+0x124>
 801d1c6:	9105      	str	r1, [sp, #20]
 801d1c8:	e7c6      	b.n	801d158 <_svfiprintf_r+0x124>
 801d1ca:	fb05 2101 	mla	r1, r5, r1, r2
 801d1ce:	2301      	movs	r3, #1
 801d1d0:	4607      	mov	r7, r0
 801d1d2:	e7f0      	b.n	801d1b6 <_svfiprintf_r+0x182>
 801d1d4:	ab03      	add	r3, sp, #12
 801d1d6:	9300      	str	r3, [sp, #0]
 801d1d8:	4622      	mov	r2, r4
 801d1da:	4b11      	ldr	r3, [pc, #68]	; (801d220 <_svfiprintf_r+0x1ec>)
 801d1dc:	a904      	add	r1, sp, #16
 801d1de:	4640      	mov	r0, r8
 801d1e0:	f3af 8000 	nop.w
 801d1e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 801d1e8:	4681      	mov	r9, r0
 801d1ea:	d1d6      	bne.n	801d19a <_svfiprintf_r+0x166>
 801d1ec:	89a3      	ldrh	r3, [r4, #12]
 801d1ee:	065b      	lsls	r3, r3, #25
 801d1f0:	f53f af35 	bmi.w	801d05e <_svfiprintf_r+0x2a>
 801d1f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d1f6:	b01d      	add	sp, #116	; 0x74
 801d1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1fc:	ab03      	add	r3, sp, #12
 801d1fe:	9300      	str	r3, [sp, #0]
 801d200:	4622      	mov	r2, r4
 801d202:	4b07      	ldr	r3, [pc, #28]	; (801d220 <_svfiprintf_r+0x1ec>)
 801d204:	a904      	add	r1, sp, #16
 801d206:	4640      	mov	r0, r8
 801d208:	f000 f9c2 	bl	801d590 <_printf_i>
 801d20c:	e7ea      	b.n	801d1e4 <_svfiprintf_r+0x1b0>
 801d20e:	bf00      	nop
 801d210:	0801fd8c 	.word	0x0801fd8c
 801d214:	0801fd92 	.word	0x0801fd92
 801d218:	0801fd96 	.word	0x0801fd96
 801d21c:	00000000 	.word	0x00000000
 801d220:	0801cf81 	.word	0x0801cf81

0801d224 <__sfputc_r>:
 801d224:	6893      	ldr	r3, [r2, #8]
 801d226:	3b01      	subs	r3, #1
 801d228:	2b00      	cmp	r3, #0
 801d22a:	b410      	push	{r4}
 801d22c:	6093      	str	r3, [r2, #8]
 801d22e:	da08      	bge.n	801d242 <__sfputc_r+0x1e>
 801d230:	6994      	ldr	r4, [r2, #24]
 801d232:	42a3      	cmp	r3, r4
 801d234:	db01      	blt.n	801d23a <__sfputc_r+0x16>
 801d236:	290a      	cmp	r1, #10
 801d238:	d103      	bne.n	801d242 <__sfputc_r+0x1e>
 801d23a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d23e:	f000 bafd 	b.w	801d83c <__swbuf_r>
 801d242:	6813      	ldr	r3, [r2, #0]
 801d244:	1c58      	adds	r0, r3, #1
 801d246:	6010      	str	r0, [r2, #0]
 801d248:	7019      	strb	r1, [r3, #0]
 801d24a:	4608      	mov	r0, r1
 801d24c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d250:	4770      	bx	lr

0801d252 <__sfputs_r>:
 801d252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d254:	4606      	mov	r6, r0
 801d256:	460f      	mov	r7, r1
 801d258:	4614      	mov	r4, r2
 801d25a:	18d5      	adds	r5, r2, r3
 801d25c:	42ac      	cmp	r4, r5
 801d25e:	d101      	bne.n	801d264 <__sfputs_r+0x12>
 801d260:	2000      	movs	r0, #0
 801d262:	e007      	b.n	801d274 <__sfputs_r+0x22>
 801d264:	463a      	mov	r2, r7
 801d266:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d26a:	4630      	mov	r0, r6
 801d26c:	f7ff ffda 	bl	801d224 <__sfputc_r>
 801d270:	1c43      	adds	r3, r0, #1
 801d272:	d1f3      	bne.n	801d25c <__sfputs_r+0xa>
 801d274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d278 <_vfiprintf_r>:
 801d278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d27c:	460c      	mov	r4, r1
 801d27e:	b09d      	sub	sp, #116	; 0x74
 801d280:	4617      	mov	r7, r2
 801d282:	461d      	mov	r5, r3
 801d284:	4606      	mov	r6, r0
 801d286:	b118      	cbz	r0, 801d290 <_vfiprintf_r+0x18>
 801d288:	6983      	ldr	r3, [r0, #24]
 801d28a:	b90b      	cbnz	r3, 801d290 <_vfiprintf_r+0x18>
 801d28c:	f7ff fdec 	bl	801ce68 <__sinit>
 801d290:	4b7c      	ldr	r3, [pc, #496]	; (801d484 <_vfiprintf_r+0x20c>)
 801d292:	429c      	cmp	r4, r3
 801d294:	d158      	bne.n	801d348 <_vfiprintf_r+0xd0>
 801d296:	6874      	ldr	r4, [r6, #4]
 801d298:	89a3      	ldrh	r3, [r4, #12]
 801d29a:	0718      	lsls	r0, r3, #28
 801d29c:	d55e      	bpl.n	801d35c <_vfiprintf_r+0xe4>
 801d29e:	6923      	ldr	r3, [r4, #16]
 801d2a0:	2b00      	cmp	r3, #0
 801d2a2:	d05b      	beq.n	801d35c <_vfiprintf_r+0xe4>
 801d2a4:	2300      	movs	r3, #0
 801d2a6:	9309      	str	r3, [sp, #36]	; 0x24
 801d2a8:	2320      	movs	r3, #32
 801d2aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d2ae:	2330      	movs	r3, #48	; 0x30
 801d2b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d2b4:	9503      	str	r5, [sp, #12]
 801d2b6:	f04f 0b01 	mov.w	fp, #1
 801d2ba:	46b8      	mov	r8, r7
 801d2bc:	4645      	mov	r5, r8
 801d2be:	f815 3b01 	ldrb.w	r3, [r5], #1
 801d2c2:	b10b      	cbz	r3, 801d2c8 <_vfiprintf_r+0x50>
 801d2c4:	2b25      	cmp	r3, #37	; 0x25
 801d2c6:	d154      	bne.n	801d372 <_vfiprintf_r+0xfa>
 801d2c8:	ebb8 0a07 	subs.w	sl, r8, r7
 801d2cc:	d00b      	beq.n	801d2e6 <_vfiprintf_r+0x6e>
 801d2ce:	4653      	mov	r3, sl
 801d2d0:	463a      	mov	r2, r7
 801d2d2:	4621      	mov	r1, r4
 801d2d4:	4630      	mov	r0, r6
 801d2d6:	f7ff ffbc 	bl	801d252 <__sfputs_r>
 801d2da:	3001      	adds	r0, #1
 801d2dc:	f000 80c2 	beq.w	801d464 <_vfiprintf_r+0x1ec>
 801d2e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2e2:	4453      	add	r3, sl
 801d2e4:	9309      	str	r3, [sp, #36]	; 0x24
 801d2e6:	f898 3000 	ldrb.w	r3, [r8]
 801d2ea:	2b00      	cmp	r3, #0
 801d2ec:	f000 80ba 	beq.w	801d464 <_vfiprintf_r+0x1ec>
 801d2f0:	2300      	movs	r3, #0
 801d2f2:	f04f 32ff 	mov.w	r2, #4294967295
 801d2f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d2fa:	9304      	str	r3, [sp, #16]
 801d2fc:	9307      	str	r3, [sp, #28]
 801d2fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d302:	931a      	str	r3, [sp, #104]	; 0x68
 801d304:	46a8      	mov	r8, r5
 801d306:	2205      	movs	r2, #5
 801d308:	f818 1b01 	ldrb.w	r1, [r8], #1
 801d30c:	485e      	ldr	r0, [pc, #376]	; (801d488 <_vfiprintf_r+0x210>)
 801d30e:	f7e2 ff67 	bl	80001e0 <memchr>
 801d312:	9b04      	ldr	r3, [sp, #16]
 801d314:	bb78      	cbnz	r0, 801d376 <_vfiprintf_r+0xfe>
 801d316:	06d9      	lsls	r1, r3, #27
 801d318:	bf44      	itt	mi
 801d31a:	2220      	movmi	r2, #32
 801d31c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801d320:	071a      	lsls	r2, r3, #28
 801d322:	bf44      	itt	mi
 801d324:	222b      	movmi	r2, #43	; 0x2b
 801d326:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801d32a:	782a      	ldrb	r2, [r5, #0]
 801d32c:	2a2a      	cmp	r2, #42	; 0x2a
 801d32e:	d02a      	beq.n	801d386 <_vfiprintf_r+0x10e>
 801d330:	9a07      	ldr	r2, [sp, #28]
 801d332:	46a8      	mov	r8, r5
 801d334:	2000      	movs	r0, #0
 801d336:	250a      	movs	r5, #10
 801d338:	4641      	mov	r1, r8
 801d33a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d33e:	3b30      	subs	r3, #48	; 0x30
 801d340:	2b09      	cmp	r3, #9
 801d342:	d969      	bls.n	801d418 <_vfiprintf_r+0x1a0>
 801d344:	b360      	cbz	r0, 801d3a0 <_vfiprintf_r+0x128>
 801d346:	e024      	b.n	801d392 <_vfiprintf_r+0x11a>
 801d348:	4b50      	ldr	r3, [pc, #320]	; (801d48c <_vfiprintf_r+0x214>)
 801d34a:	429c      	cmp	r4, r3
 801d34c:	d101      	bne.n	801d352 <_vfiprintf_r+0xda>
 801d34e:	68b4      	ldr	r4, [r6, #8]
 801d350:	e7a2      	b.n	801d298 <_vfiprintf_r+0x20>
 801d352:	4b4f      	ldr	r3, [pc, #316]	; (801d490 <_vfiprintf_r+0x218>)
 801d354:	429c      	cmp	r4, r3
 801d356:	bf08      	it	eq
 801d358:	68f4      	ldreq	r4, [r6, #12]
 801d35a:	e79d      	b.n	801d298 <_vfiprintf_r+0x20>
 801d35c:	4621      	mov	r1, r4
 801d35e:	4630      	mov	r0, r6
 801d360:	f000 fad0 	bl	801d904 <__swsetup_r>
 801d364:	2800      	cmp	r0, #0
 801d366:	d09d      	beq.n	801d2a4 <_vfiprintf_r+0x2c>
 801d368:	f04f 30ff 	mov.w	r0, #4294967295
 801d36c:	b01d      	add	sp, #116	; 0x74
 801d36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d372:	46a8      	mov	r8, r5
 801d374:	e7a2      	b.n	801d2bc <_vfiprintf_r+0x44>
 801d376:	4a44      	ldr	r2, [pc, #272]	; (801d488 <_vfiprintf_r+0x210>)
 801d378:	1a80      	subs	r0, r0, r2
 801d37a:	fa0b f000 	lsl.w	r0, fp, r0
 801d37e:	4318      	orrs	r0, r3
 801d380:	9004      	str	r0, [sp, #16]
 801d382:	4645      	mov	r5, r8
 801d384:	e7be      	b.n	801d304 <_vfiprintf_r+0x8c>
 801d386:	9a03      	ldr	r2, [sp, #12]
 801d388:	1d11      	adds	r1, r2, #4
 801d38a:	6812      	ldr	r2, [r2, #0]
 801d38c:	9103      	str	r1, [sp, #12]
 801d38e:	2a00      	cmp	r2, #0
 801d390:	db01      	blt.n	801d396 <_vfiprintf_r+0x11e>
 801d392:	9207      	str	r2, [sp, #28]
 801d394:	e004      	b.n	801d3a0 <_vfiprintf_r+0x128>
 801d396:	4252      	negs	r2, r2
 801d398:	f043 0302 	orr.w	r3, r3, #2
 801d39c:	9207      	str	r2, [sp, #28]
 801d39e:	9304      	str	r3, [sp, #16]
 801d3a0:	f898 3000 	ldrb.w	r3, [r8]
 801d3a4:	2b2e      	cmp	r3, #46	; 0x2e
 801d3a6:	d10e      	bne.n	801d3c6 <_vfiprintf_r+0x14e>
 801d3a8:	f898 3001 	ldrb.w	r3, [r8, #1]
 801d3ac:	2b2a      	cmp	r3, #42	; 0x2a
 801d3ae:	d138      	bne.n	801d422 <_vfiprintf_r+0x1aa>
 801d3b0:	9b03      	ldr	r3, [sp, #12]
 801d3b2:	1d1a      	adds	r2, r3, #4
 801d3b4:	681b      	ldr	r3, [r3, #0]
 801d3b6:	9203      	str	r2, [sp, #12]
 801d3b8:	2b00      	cmp	r3, #0
 801d3ba:	bfb8      	it	lt
 801d3bc:	f04f 33ff 	movlt.w	r3, #4294967295
 801d3c0:	f108 0802 	add.w	r8, r8, #2
 801d3c4:	9305      	str	r3, [sp, #20]
 801d3c6:	4d33      	ldr	r5, [pc, #204]	; (801d494 <_vfiprintf_r+0x21c>)
 801d3c8:	f898 1000 	ldrb.w	r1, [r8]
 801d3cc:	2203      	movs	r2, #3
 801d3ce:	4628      	mov	r0, r5
 801d3d0:	f7e2 ff06 	bl	80001e0 <memchr>
 801d3d4:	b140      	cbz	r0, 801d3e8 <_vfiprintf_r+0x170>
 801d3d6:	2340      	movs	r3, #64	; 0x40
 801d3d8:	1b40      	subs	r0, r0, r5
 801d3da:	fa03 f000 	lsl.w	r0, r3, r0
 801d3de:	9b04      	ldr	r3, [sp, #16]
 801d3e0:	4303      	orrs	r3, r0
 801d3e2:	f108 0801 	add.w	r8, r8, #1
 801d3e6:	9304      	str	r3, [sp, #16]
 801d3e8:	f898 1000 	ldrb.w	r1, [r8]
 801d3ec:	482a      	ldr	r0, [pc, #168]	; (801d498 <_vfiprintf_r+0x220>)
 801d3ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d3f2:	2206      	movs	r2, #6
 801d3f4:	f108 0701 	add.w	r7, r8, #1
 801d3f8:	f7e2 fef2 	bl	80001e0 <memchr>
 801d3fc:	2800      	cmp	r0, #0
 801d3fe:	d037      	beq.n	801d470 <_vfiprintf_r+0x1f8>
 801d400:	4b26      	ldr	r3, [pc, #152]	; (801d49c <_vfiprintf_r+0x224>)
 801d402:	bb1b      	cbnz	r3, 801d44c <_vfiprintf_r+0x1d4>
 801d404:	9b03      	ldr	r3, [sp, #12]
 801d406:	3307      	adds	r3, #7
 801d408:	f023 0307 	bic.w	r3, r3, #7
 801d40c:	3308      	adds	r3, #8
 801d40e:	9303      	str	r3, [sp, #12]
 801d410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d412:	444b      	add	r3, r9
 801d414:	9309      	str	r3, [sp, #36]	; 0x24
 801d416:	e750      	b.n	801d2ba <_vfiprintf_r+0x42>
 801d418:	fb05 3202 	mla	r2, r5, r2, r3
 801d41c:	2001      	movs	r0, #1
 801d41e:	4688      	mov	r8, r1
 801d420:	e78a      	b.n	801d338 <_vfiprintf_r+0xc0>
 801d422:	2300      	movs	r3, #0
 801d424:	f108 0801 	add.w	r8, r8, #1
 801d428:	9305      	str	r3, [sp, #20]
 801d42a:	4619      	mov	r1, r3
 801d42c:	250a      	movs	r5, #10
 801d42e:	4640      	mov	r0, r8
 801d430:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d434:	3a30      	subs	r2, #48	; 0x30
 801d436:	2a09      	cmp	r2, #9
 801d438:	d903      	bls.n	801d442 <_vfiprintf_r+0x1ca>
 801d43a:	2b00      	cmp	r3, #0
 801d43c:	d0c3      	beq.n	801d3c6 <_vfiprintf_r+0x14e>
 801d43e:	9105      	str	r1, [sp, #20]
 801d440:	e7c1      	b.n	801d3c6 <_vfiprintf_r+0x14e>
 801d442:	fb05 2101 	mla	r1, r5, r1, r2
 801d446:	2301      	movs	r3, #1
 801d448:	4680      	mov	r8, r0
 801d44a:	e7f0      	b.n	801d42e <_vfiprintf_r+0x1b6>
 801d44c:	ab03      	add	r3, sp, #12
 801d44e:	9300      	str	r3, [sp, #0]
 801d450:	4622      	mov	r2, r4
 801d452:	4b13      	ldr	r3, [pc, #76]	; (801d4a0 <_vfiprintf_r+0x228>)
 801d454:	a904      	add	r1, sp, #16
 801d456:	4630      	mov	r0, r6
 801d458:	f3af 8000 	nop.w
 801d45c:	f1b0 3fff 	cmp.w	r0, #4294967295
 801d460:	4681      	mov	r9, r0
 801d462:	d1d5      	bne.n	801d410 <_vfiprintf_r+0x198>
 801d464:	89a3      	ldrh	r3, [r4, #12]
 801d466:	065b      	lsls	r3, r3, #25
 801d468:	f53f af7e 	bmi.w	801d368 <_vfiprintf_r+0xf0>
 801d46c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d46e:	e77d      	b.n	801d36c <_vfiprintf_r+0xf4>
 801d470:	ab03      	add	r3, sp, #12
 801d472:	9300      	str	r3, [sp, #0]
 801d474:	4622      	mov	r2, r4
 801d476:	4b0a      	ldr	r3, [pc, #40]	; (801d4a0 <_vfiprintf_r+0x228>)
 801d478:	a904      	add	r1, sp, #16
 801d47a:	4630      	mov	r0, r6
 801d47c:	f000 f888 	bl	801d590 <_printf_i>
 801d480:	e7ec      	b.n	801d45c <_vfiprintf_r+0x1e4>
 801d482:	bf00      	nop
 801d484:	0801fd4c 	.word	0x0801fd4c
 801d488:	0801fd8c 	.word	0x0801fd8c
 801d48c:	0801fd6c 	.word	0x0801fd6c
 801d490:	0801fd2c 	.word	0x0801fd2c
 801d494:	0801fd92 	.word	0x0801fd92
 801d498:	0801fd96 	.word	0x0801fd96
 801d49c:	00000000 	.word	0x00000000
 801d4a0:	0801d253 	.word	0x0801d253

0801d4a4 <_printf_common>:
 801d4a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d4a8:	4691      	mov	r9, r2
 801d4aa:	461f      	mov	r7, r3
 801d4ac:	688a      	ldr	r2, [r1, #8]
 801d4ae:	690b      	ldr	r3, [r1, #16]
 801d4b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d4b4:	4293      	cmp	r3, r2
 801d4b6:	bfb8      	it	lt
 801d4b8:	4613      	movlt	r3, r2
 801d4ba:	f8c9 3000 	str.w	r3, [r9]
 801d4be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d4c2:	4606      	mov	r6, r0
 801d4c4:	460c      	mov	r4, r1
 801d4c6:	b112      	cbz	r2, 801d4ce <_printf_common+0x2a>
 801d4c8:	3301      	adds	r3, #1
 801d4ca:	f8c9 3000 	str.w	r3, [r9]
 801d4ce:	6823      	ldr	r3, [r4, #0]
 801d4d0:	0699      	lsls	r1, r3, #26
 801d4d2:	bf42      	ittt	mi
 801d4d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 801d4d8:	3302      	addmi	r3, #2
 801d4da:	f8c9 3000 	strmi.w	r3, [r9]
 801d4de:	6825      	ldr	r5, [r4, #0]
 801d4e0:	f015 0506 	ands.w	r5, r5, #6
 801d4e4:	d107      	bne.n	801d4f6 <_printf_common+0x52>
 801d4e6:	f104 0a19 	add.w	sl, r4, #25
 801d4ea:	68e3      	ldr	r3, [r4, #12]
 801d4ec:	f8d9 2000 	ldr.w	r2, [r9]
 801d4f0:	1a9b      	subs	r3, r3, r2
 801d4f2:	42ab      	cmp	r3, r5
 801d4f4:	dc28      	bgt.n	801d548 <_printf_common+0xa4>
 801d4f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801d4fa:	6822      	ldr	r2, [r4, #0]
 801d4fc:	3300      	adds	r3, #0
 801d4fe:	bf18      	it	ne
 801d500:	2301      	movne	r3, #1
 801d502:	0692      	lsls	r2, r2, #26
 801d504:	d42d      	bmi.n	801d562 <_printf_common+0xbe>
 801d506:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d50a:	4639      	mov	r1, r7
 801d50c:	4630      	mov	r0, r6
 801d50e:	47c0      	blx	r8
 801d510:	3001      	adds	r0, #1
 801d512:	d020      	beq.n	801d556 <_printf_common+0xb2>
 801d514:	6823      	ldr	r3, [r4, #0]
 801d516:	68e5      	ldr	r5, [r4, #12]
 801d518:	f8d9 2000 	ldr.w	r2, [r9]
 801d51c:	f003 0306 	and.w	r3, r3, #6
 801d520:	2b04      	cmp	r3, #4
 801d522:	bf08      	it	eq
 801d524:	1aad      	subeq	r5, r5, r2
 801d526:	68a3      	ldr	r3, [r4, #8]
 801d528:	6922      	ldr	r2, [r4, #16]
 801d52a:	bf0c      	ite	eq
 801d52c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d530:	2500      	movne	r5, #0
 801d532:	4293      	cmp	r3, r2
 801d534:	bfc4      	itt	gt
 801d536:	1a9b      	subgt	r3, r3, r2
 801d538:	18ed      	addgt	r5, r5, r3
 801d53a:	f04f 0900 	mov.w	r9, #0
 801d53e:	341a      	adds	r4, #26
 801d540:	454d      	cmp	r5, r9
 801d542:	d11a      	bne.n	801d57a <_printf_common+0xd6>
 801d544:	2000      	movs	r0, #0
 801d546:	e008      	b.n	801d55a <_printf_common+0xb6>
 801d548:	2301      	movs	r3, #1
 801d54a:	4652      	mov	r2, sl
 801d54c:	4639      	mov	r1, r7
 801d54e:	4630      	mov	r0, r6
 801d550:	47c0      	blx	r8
 801d552:	3001      	adds	r0, #1
 801d554:	d103      	bne.n	801d55e <_printf_common+0xba>
 801d556:	f04f 30ff 	mov.w	r0, #4294967295
 801d55a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d55e:	3501      	adds	r5, #1
 801d560:	e7c3      	b.n	801d4ea <_printf_common+0x46>
 801d562:	18e1      	adds	r1, r4, r3
 801d564:	1c5a      	adds	r2, r3, #1
 801d566:	2030      	movs	r0, #48	; 0x30
 801d568:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d56c:	4422      	add	r2, r4
 801d56e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d572:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d576:	3302      	adds	r3, #2
 801d578:	e7c5      	b.n	801d506 <_printf_common+0x62>
 801d57a:	2301      	movs	r3, #1
 801d57c:	4622      	mov	r2, r4
 801d57e:	4639      	mov	r1, r7
 801d580:	4630      	mov	r0, r6
 801d582:	47c0      	blx	r8
 801d584:	3001      	adds	r0, #1
 801d586:	d0e6      	beq.n	801d556 <_printf_common+0xb2>
 801d588:	f109 0901 	add.w	r9, r9, #1
 801d58c:	e7d8      	b.n	801d540 <_printf_common+0x9c>
	...

0801d590 <_printf_i>:
 801d590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d594:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801d598:	460c      	mov	r4, r1
 801d59a:	7e09      	ldrb	r1, [r1, #24]
 801d59c:	b085      	sub	sp, #20
 801d59e:	296e      	cmp	r1, #110	; 0x6e
 801d5a0:	4617      	mov	r7, r2
 801d5a2:	4606      	mov	r6, r0
 801d5a4:	4698      	mov	r8, r3
 801d5a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d5a8:	f000 80b3 	beq.w	801d712 <_printf_i+0x182>
 801d5ac:	d822      	bhi.n	801d5f4 <_printf_i+0x64>
 801d5ae:	2963      	cmp	r1, #99	; 0x63
 801d5b0:	d036      	beq.n	801d620 <_printf_i+0x90>
 801d5b2:	d80a      	bhi.n	801d5ca <_printf_i+0x3a>
 801d5b4:	2900      	cmp	r1, #0
 801d5b6:	f000 80b9 	beq.w	801d72c <_printf_i+0x19c>
 801d5ba:	2958      	cmp	r1, #88	; 0x58
 801d5bc:	f000 8083 	beq.w	801d6c6 <_printf_i+0x136>
 801d5c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d5c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801d5c8:	e032      	b.n	801d630 <_printf_i+0xa0>
 801d5ca:	2964      	cmp	r1, #100	; 0x64
 801d5cc:	d001      	beq.n	801d5d2 <_printf_i+0x42>
 801d5ce:	2969      	cmp	r1, #105	; 0x69
 801d5d0:	d1f6      	bne.n	801d5c0 <_printf_i+0x30>
 801d5d2:	6820      	ldr	r0, [r4, #0]
 801d5d4:	6813      	ldr	r3, [r2, #0]
 801d5d6:	0605      	lsls	r5, r0, #24
 801d5d8:	f103 0104 	add.w	r1, r3, #4
 801d5dc:	d52a      	bpl.n	801d634 <_printf_i+0xa4>
 801d5de:	681b      	ldr	r3, [r3, #0]
 801d5e0:	6011      	str	r1, [r2, #0]
 801d5e2:	2b00      	cmp	r3, #0
 801d5e4:	da03      	bge.n	801d5ee <_printf_i+0x5e>
 801d5e6:	222d      	movs	r2, #45	; 0x2d
 801d5e8:	425b      	negs	r3, r3
 801d5ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801d5ee:	486f      	ldr	r0, [pc, #444]	; (801d7ac <_printf_i+0x21c>)
 801d5f0:	220a      	movs	r2, #10
 801d5f2:	e039      	b.n	801d668 <_printf_i+0xd8>
 801d5f4:	2973      	cmp	r1, #115	; 0x73
 801d5f6:	f000 809d 	beq.w	801d734 <_printf_i+0x1a4>
 801d5fa:	d808      	bhi.n	801d60e <_printf_i+0x7e>
 801d5fc:	296f      	cmp	r1, #111	; 0x6f
 801d5fe:	d020      	beq.n	801d642 <_printf_i+0xb2>
 801d600:	2970      	cmp	r1, #112	; 0x70
 801d602:	d1dd      	bne.n	801d5c0 <_printf_i+0x30>
 801d604:	6823      	ldr	r3, [r4, #0]
 801d606:	f043 0320 	orr.w	r3, r3, #32
 801d60a:	6023      	str	r3, [r4, #0]
 801d60c:	e003      	b.n	801d616 <_printf_i+0x86>
 801d60e:	2975      	cmp	r1, #117	; 0x75
 801d610:	d017      	beq.n	801d642 <_printf_i+0xb2>
 801d612:	2978      	cmp	r1, #120	; 0x78
 801d614:	d1d4      	bne.n	801d5c0 <_printf_i+0x30>
 801d616:	2378      	movs	r3, #120	; 0x78
 801d618:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801d61c:	4864      	ldr	r0, [pc, #400]	; (801d7b0 <_printf_i+0x220>)
 801d61e:	e055      	b.n	801d6cc <_printf_i+0x13c>
 801d620:	6813      	ldr	r3, [r2, #0]
 801d622:	1d19      	adds	r1, r3, #4
 801d624:	681b      	ldr	r3, [r3, #0]
 801d626:	6011      	str	r1, [r2, #0]
 801d628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d62c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d630:	2301      	movs	r3, #1
 801d632:	e08c      	b.n	801d74e <_printf_i+0x1be>
 801d634:	681b      	ldr	r3, [r3, #0]
 801d636:	6011      	str	r1, [r2, #0]
 801d638:	f010 0f40 	tst.w	r0, #64	; 0x40
 801d63c:	bf18      	it	ne
 801d63e:	b21b      	sxthne	r3, r3
 801d640:	e7cf      	b.n	801d5e2 <_printf_i+0x52>
 801d642:	6813      	ldr	r3, [r2, #0]
 801d644:	6825      	ldr	r5, [r4, #0]
 801d646:	1d18      	adds	r0, r3, #4
 801d648:	6010      	str	r0, [r2, #0]
 801d64a:	0628      	lsls	r0, r5, #24
 801d64c:	d501      	bpl.n	801d652 <_printf_i+0xc2>
 801d64e:	681b      	ldr	r3, [r3, #0]
 801d650:	e002      	b.n	801d658 <_printf_i+0xc8>
 801d652:	0668      	lsls	r0, r5, #25
 801d654:	d5fb      	bpl.n	801d64e <_printf_i+0xbe>
 801d656:	881b      	ldrh	r3, [r3, #0]
 801d658:	4854      	ldr	r0, [pc, #336]	; (801d7ac <_printf_i+0x21c>)
 801d65a:	296f      	cmp	r1, #111	; 0x6f
 801d65c:	bf14      	ite	ne
 801d65e:	220a      	movne	r2, #10
 801d660:	2208      	moveq	r2, #8
 801d662:	2100      	movs	r1, #0
 801d664:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d668:	6865      	ldr	r5, [r4, #4]
 801d66a:	60a5      	str	r5, [r4, #8]
 801d66c:	2d00      	cmp	r5, #0
 801d66e:	f2c0 8095 	blt.w	801d79c <_printf_i+0x20c>
 801d672:	6821      	ldr	r1, [r4, #0]
 801d674:	f021 0104 	bic.w	r1, r1, #4
 801d678:	6021      	str	r1, [r4, #0]
 801d67a:	2b00      	cmp	r3, #0
 801d67c:	d13d      	bne.n	801d6fa <_printf_i+0x16a>
 801d67e:	2d00      	cmp	r5, #0
 801d680:	f040 808e 	bne.w	801d7a0 <_printf_i+0x210>
 801d684:	4665      	mov	r5, ip
 801d686:	2a08      	cmp	r2, #8
 801d688:	d10b      	bne.n	801d6a2 <_printf_i+0x112>
 801d68a:	6823      	ldr	r3, [r4, #0]
 801d68c:	07db      	lsls	r3, r3, #31
 801d68e:	d508      	bpl.n	801d6a2 <_printf_i+0x112>
 801d690:	6923      	ldr	r3, [r4, #16]
 801d692:	6862      	ldr	r2, [r4, #4]
 801d694:	429a      	cmp	r2, r3
 801d696:	bfde      	ittt	le
 801d698:	2330      	movle	r3, #48	; 0x30
 801d69a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801d69e:	f105 35ff 	addle.w	r5, r5, #4294967295
 801d6a2:	ebac 0305 	sub.w	r3, ip, r5
 801d6a6:	6123      	str	r3, [r4, #16]
 801d6a8:	f8cd 8000 	str.w	r8, [sp]
 801d6ac:	463b      	mov	r3, r7
 801d6ae:	aa03      	add	r2, sp, #12
 801d6b0:	4621      	mov	r1, r4
 801d6b2:	4630      	mov	r0, r6
 801d6b4:	f7ff fef6 	bl	801d4a4 <_printf_common>
 801d6b8:	3001      	adds	r0, #1
 801d6ba:	d14d      	bne.n	801d758 <_printf_i+0x1c8>
 801d6bc:	f04f 30ff 	mov.w	r0, #4294967295
 801d6c0:	b005      	add	sp, #20
 801d6c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d6c6:	4839      	ldr	r0, [pc, #228]	; (801d7ac <_printf_i+0x21c>)
 801d6c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801d6cc:	6813      	ldr	r3, [r2, #0]
 801d6ce:	6821      	ldr	r1, [r4, #0]
 801d6d0:	1d1d      	adds	r5, r3, #4
 801d6d2:	681b      	ldr	r3, [r3, #0]
 801d6d4:	6015      	str	r5, [r2, #0]
 801d6d6:	060a      	lsls	r2, r1, #24
 801d6d8:	d50b      	bpl.n	801d6f2 <_printf_i+0x162>
 801d6da:	07ca      	lsls	r2, r1, #31
 801d6dc:	bf44      	itt	mi
 801d6de:	f041 0120 	orrmi.w	r1, r1, #32
 801d6e2:	6021      	strmi	r1, [r4, #0]
 801d6e4:	b91b      	cbnz	r3, 801d6ee <_printf_i+0x15e>
 801d6e6:	6822      	ldr	r2, [r4, #0]
 801d6e8:	f022 0220 	bic.w	r2, r2, #32
 801d6ec:	6022      	str	r2, [r4, #0]
 801d6ee:	2210      	movs	r2, #16
 801d6f0:	e7b7      	b.n	801d662 <_printf_i+0xd2>
 801d6f2:	064d      	lsls	r5, r1, #25
 801d6f4:	bf48      	it	mi
 801d6f6:	b29b      	uxthmi	r3, r3
 801d6f8:	e7ef      	b.n	801d6da <_printf_i+0x14a>
 801d6fa:	4665      	mov	r5, ip
 801d6fc:	fbb3 f1f2 	udiv	r1, r3, r2
 801d700:	fb02 3311 	mls	r3, r2, r1, r3
 801d704:	5cc3      	ldrb	r3, [r0, r3]
 801d706:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801d70a:	460b      	mov	r3, r1
 801d70c:	2900      	cmp	r1, #0
 801d70e:	d1f5      	bne.n	801d6fc <_printf_i+0x16c>
 801d710:	e7b9      	b.n	801d686 <_printf_i+0xf6>
 801d712:	6813      	ldr	r3, [r2, #0]
 801d714:	6825      	ldr	r5, [r4, #0]
 801d716:	6961      	ldr	r1, [r4, #20]
 801d718:	1d18      	adds	r0, r3, #4
 801d71a:	6010      	str	r0, [r2, #0]
 801d71c:	0628      	lsls	r0, r5, #24
 801d71e:	681b      	ldr	r3, [r3, #0]
 801d720:	d501      	bpl.n	801d726 <_printf_i+0x196>
 801d722:	6019      	str	r1, [r3, #0]
 801d724:	e002      	b.n	801d72c <_printf_i+0x19c>
 801d726:	066a      	lsls	r2, r5, #25
 801d728:	d5fb      	bpl.n	801d722 <_printf_i+0x192>
 801d72a:	8019      	strh	r1, [r3, #0]
 801d72c:	2300      	movs	r3, #0
 801d72e:	6123      	str	r3, [r4, #16]
 801d730:	4665      	mov	r5, ip
 801d732:	e7b9      	b.n	801d6a8 <_printf_i+0x118>
 801d734:	6813      	ldr	r3, [r2, #0]
 801d736:	1d19      	adds	r1, r3, #4
 801d738:	6011      	str	r1, [r2, #0]
 801d73a:	681d      	ldr	r5, [r3, #0]
 801d73c:	6862      	ldr	r2, [r4, #4]
 801d73e:	2100      	movs	r1, #0
 801d740:	4628      	mov	r0, r5
 801d742:	f7e2 fd4d 	bl	80001e0 <memchr>
 801d746:	b108      	cbz	r0, 801d74c <_printf_i+0x1bc>
 801d748:	1b40      	subs	r0, r0, r5
 801d74a:	6060      	str	r0, [r4, #4]
 801d74c:	6863      	ldr	r3, [r4, #4]
 801d74e:	6123      	str	r3, [r4, #16]
 801d750:	2300      	movs	r3, #0
 801d752:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d756:	e7a7      	b.n	801d6a8 <_printf_i+0x118>
 801d758:	6923      	ldr	r3, [r4, #16]
 801d75a:	462a      	mov	r2, r5
 801d75c:	4639      	mov	r1, r7
 801d75e:	4630      	mov	r0, r6
 801d760:	47c0      	blx	r8
 801d762:	3001      	adds	r0, #1
 801d764:	d0aa      	beq.n	801d6bc <_printf_i+0x12c>
 801d766:	6823      	ldr	r3, [r4, #0]
 801d768:	079b      	lsls	r3, r3, #30
 801d76a:	d413      	bmi.n	801d794 <_printf_i+0x204>
 801d76c:	68e0      	ldr	r0, [r4, #12]
 801d76e:	9b03      	ldr	r3, [sp, #12]
 801d770:	4298      	cmp	r0, r3
 801d772:	bfb8      	it	lt
 801d774:	4618      	movlt	r0, r3
 801d776:	e7a3      	b.n	801d6c0 <_printf_i+0x130>
 801d778:	2301      	movs	r3, #1
 801d77a:	464a      	mov	r2, r9
 801d77c:	4639      	mov	r1, r7
 801d77e:	4630      	mov	r0, r6
 801d780:	47c0      	blx	r8
 801d782:	3001      	adds	r0, #1
 801d784:	d09a      	beq.n	801d6bc <_printf_i+0x12c>
 801d786:	3501      	adds	r5, #1
 801d788:	68e3      	ldr	r3, [r4, #12]
 801d78a:	9a03      	ldr	r2, [sp, #12]
 801d78c:	1a9b      	subs	r3, r3, r2
 801d78e:	42ab      	cmp	r3, r5
 801d790:	dcf2      	bgt.n	801d778 <_printf_i+0x1e8>
 801d792:	e7eb      	b.n	801d76c <_printf_i+0x1dc>
 801d794:	2500      	movs	r5, #0
 801d796:	f104 0919 	add.w	r9, r4, #25
 801d79a:	e7f5      	b.n	801d788 <_printf_i+0x1f8>
 801d79c:	2b00      	cmp	r3, #0
 801d79e:	d1ac      	bne.n	801d6fa <_printf_i+0x16a>
 801d7a0:	7803      	ldrb	r3, [r0, #0]
 801d7a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d7a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d7aa:	e76c      	b.n	801d686 <_printf_i+0xf6>
 801d7ac:	0801fd9d 	.word	0x0801fd9d
 801d7b0:	0801fdae 	.word	0x0801fdae

0801d7b4 <__sread>:
 801d7b4:	b510      	push	{r4, lr}
 801d7b6:	460c      	mov	r4, r1
 801d7b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d7bc:	f000 fa86 	bl	801dccc <_read_r>
 801d7c0:	2800      	cmp	r0, #0
 801d7c2:	bfab      	itete	ge
 801d7c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d7c6:	89a3      	ldrhlt	r3, [r4, #12]
 801d7c8:	181b      	addge	r3, r3, r0
 801d7ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d7ce:	bfac      	ite	ge
 801d7d0:	6563      	strge	r3, [r4, #84]	; 0x54
 801d7d2:	81a3      	strhlt	r3, [r4, #12]
 801d7d4:	bd10      	pop	{r4, pc}

0801d7d6 <__swrite>:
 801d7d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d7da:	461f      	mov	r7, r3
 801d7dc:	898b      	ldrh	r3, [r1, #12]
 801d7de:	05db      	lsls	r3, r3, #23
 801d7e0:	4605      	mov	r5, r0
 801d7e2:	460c      	mov	r4, r1
 801d7e4:	4616      	mov	r6, r2
 801d7e6:	d505      	bpl.n	801d7f4 <__swrite+0x1e>
 801d7e8:	2302      	movs	r3, #2
 801d7ea:	2200      	movs	r2, #0
 801d7ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d7f0:	f000 f9b6 	bl	801db60 <_lseek_r>
 801d7f4:	89a3      	ldrh	r3, [r4, #12]
 801d7f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d7fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d7fe:	81a3      	strh	r3, [r4, #12]
 801d800:	4632      	mov	r2, r6
 801d802:	463b      	mov	r3, r7
 801d804:	4628      	mov	r0, r5
 801d806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d80a:	f000 b869 	b.w	801d8e0 <_write_r>

0801d80e <__sseek>:
 801d80e:	b510      	push	{r4, lr}
 801d810:	460c      	mov	r4, r1
 801d812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d816:	f000 f9a3 	bl	801db60 <_lseek_r>
 801d81a:	1c43      	adds	r3, r0, #1
 801d81c:	89a3      	ldrh	r3, [r4, #12]
 801d81e:	bf15      	itete	ne
 801d820:	6560      	strne	r0, [r4, #84]	; 0x54
 801d822:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d826:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d82a:	81a3      	strheq	r3, [r4, #12]
 801d82c:	bf18      	it	ne
 801d82e:	81a3      	strhne	r3, [r4, #12]
 801d830:	bd10      	pop	{r4, pc}

0801d832 <__sclose>:
 801d832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d836:	f000 b8d3 	b.w	801d9e0 <_close_r>
	...

0801d83c <__swbuf_r>:
 801d83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d83e:	460e      	mov	r6, r1
 801d840:	4614      	mov	r4, r2
 801d842:	4605      	mov	r5, r0
 801d844:	b118      	cbz	r0, 801d84e <__swbuf_r+0x12>
 801d846:	6983      	ldr	r3, [r0, #24]
 801d848:	b90b      	cbnz	r3, 801d84e <__swbuf_r+0x12>
 801d84a:	f7ff fb0d 	bl	801ce68 <__sinit>
 801d84e:	4b21      	ldr	r3, [pc, #132]	; (801d8d4 <__swbuf_r+0x98>)
 801d850:	429c      	cmp	r4, r3
 801d852:	d12a      	bne.n	801d8aa <__swbuf_r+0x6e>
 801d854:	686c      	ldr	r4, [r5, #4]
 801d856:	69a3      	ldr	r3, [r4, #24]
 801d858:	60a3      	str	r3, [r4, #8]
 801d85a:	89a3      	ldrh	r3, [r4, #12]
 801d85c:	071a      	lsls	r2, r3, #28
 801d85e:	d52e      	bpl.n	801d8be <__swbuf_r+0x82>
 801d860:	6923      	ldr	r3, [r4, #16]
 801d862:	b363      	cbz	r3, 801d8be <__swbuf_r+0x82>
 801d864:	6923      	ldr	r3, [r4, #16]
 801d866:	6820      	ldr	r0, [r4, #0]
 801d868:	1ac0      	subs	r0, r0, r3
 801d86a:	6963      	ldr	r3, [r4, #20]
 801d86c:	b2f6      	uxtb	r6, r6
 801d86e:	4283      	cmp	r3, r0
 801d870:	4637      	mov	r7, r6
 801d872:	dc04      	bgt.n	801d87e <__swbuf_r+0x42>
 801d874:	4621      	mov	r1, r4
 801d876:	4628      	mov	r0, r5
 801d878:	f000 f948 	bl	801db0c <_fflush_r>
 801d87c:	bb28      	cbnz	r0, 801d8ca <__swbuf_r+0x8e>
 801d87e:	68a3      	ldr	r3, [r4, #8]
 801d880:	3b01      	subs	r3, #1
 801d882:	60a3      	str	r3, [r4, #8]
 801d884:	6823      	ldr	r3, [r4, #0]
 801d886:	1c5a      	adds	r2, r3, #1
 801d888:	6022      	str	r2, [r4, #0]
 801d88a:	701e      	strb	r6, [r3, #0]
 801d88c:	6963      	ldr	r3, [r4, #20]
 801d88e:	3001      	adds	r0, #1
 801d890:	4283      	cmp	r3, r0
 801d892:	d004      	beq.n	801d89e <__swbuf_r+0x62>
 801d894:	89a3      	ldrh	r3, [r4, #12]
 801d896:	07db      	lsls	r3, r3, #31
 801d898:	d519      	bpl.n	801d8ce <__swbuf_r+0x92>
 801d89a:	2e0a      	cmp	r6, #10
 801d89c:	d117      	bne.n	801d8ce <__swbuf_r+0x92>
 801d89e:	4621      	mov	r1, r4
 801d8a0:	4628      	mov	r0, r5
 801d8a2:	f000 f933 	bl	801db0c <_fflush_r>
 801d8a6:	b190      	cbz	r0, 801d8ce <__swbuf_r+0x92>
 801d8a8:	e00f      	b.n	801d8ca <__swbuf_r+0x8e>
 801d8aa:	4b0b      	ldr	r3, [pc, #44]	; (801d8d8 <__swbuf_r+0x9c>)
 801d8ac:	429c      	cmp	r4, r3
 801d8ae:	d101      	bne.n	801d8b4 <__swbuf_r+0x78>
 801d8b0:	68ac      	ldr	r4, [r5, #8]
 801d8b2:	e7d0      	b.n	801d856 <__swbuf_r+0x1a>
 801d8b4:	4b09      	ldr	r3, [pc, #36]	; (801d8dc <__swbuf_r+0xa0>)
 801d8b6:	429c      	cmp	r4, r3
 801d8b8:	bf08      	it	eq
 801d8ba:	68ec      	ldreq	r4, [r5, #12]
 801d8bc:	e7cb      	b.n	801d856 <__swbuf_r+0x1a>
 801d8be:	4621      	mov	r1, r4
 801d8c0:	4628      	mov	r0, r5
 801d8c2:	f000 f81f 	bl	801d904 <__swsetup_r>
 801d8c6:	2800      	cmp	r0, #0
 801d8c8:	d0cc      	beq.n	801d864 <__swbuf_r+0x28>
 801d8ca:	f04f 37ff 	mov.w	r7, #4294967295
 801d8ce:	4638      	mov	r0, r7
 801d8d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d8d2:	bf00      	nop
 801d8d4:	0801fd4c 	.word	0x0801fd4c
 801d8d8:	0801fd6c 	.word	0x0801fd6c
 801d8dc:	0801fd2c 	.word	0x0801fd2c

0801d8e0 <_write_r>:
 801d8e0:	b538      	push	{r3, r4, r5, lr}
 801d8e2:	4c07      	ldr	r4, [pc, #28]	; (801d900 <_write_r+0x20>)
 801d8e4:	4605      	mov	r5, r0
 801d8e6:	4608      	mov	r0, r1
 801d8e8:	4611      	mov	r1, r2
 801d8ea:	2200      	movs	r2, #0
 801d8ec:	6022      	str	r2, [r4, #0]
 801d8ee:	461a      	mov	r2, r3
 801d8f0:	f7e5 f9ab 	bl	8002c4a <_write>
 801d8f4:	1c43      	adds	r3, r0, #1
 801d8f6:	d102      	bne.n	801d8fe <_write_r+0x1e>
 801d8f8:	6823      	ldr	r3, [r4, #0]
 801d8fa:	b103      	cbz	r3, 801d8fe <_write_r+0x1e>
 801d8fc:	602b      	str	r3, [r5, #0]
 801d8fe:	bd38      	pop	{r3, r4, r5, pc}
 801d900:	20008978 	.word	0x20008978

0801d904 <__swsetup_r>:
 801d904:	4b32      	ldr	r3, [pc, #200]	; (801d9d0 <__swsetup_r+0xcc>)
 801d906:	b570      	push	{r4, r5, r6, lr}
 801d908:	681d      	ldr	r5, [r3, #0]
 801d90a:	4606      	mov	r6, r0
 801d90c:	460c      	mov	r4, r1
 801d90e:	b125      	cbz	r5, 801d91a <__swsetup_r+0x16>
 801d910:	69ab      	ldr	r3, [r5, #24]
 801d912:	b913      	cbnz	r3, 801d91a <__swsetup_r+0x16>
 801d914:	4628      	mov	r0, r5
 801d916:	f7ff faa7 	bl	801ce68 <__sinit>
 801d91a:	4b2e      	ldr	r3, [pc, #184]	; (801d9d4 <__swsetup_r+0xd0>)
 801d91c:	429c      	cmp	r4, r3
 801d91e:	d10f      	bne.n	801d940 <__swsetup_r+0x3c>
 801d920:	686c      	ldr	r4, [r5, #4]
 801d922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d926:	b29a      	uxth	r2, r3
 801d928:	0715      	lsls	r5, r2, #28
 801d92a:	d42c      	bmi.n	801d986 <__swsetup_r+0x82>
 801d92c:	06d0      	lsls	r0, r2, #27
 801d92e:	d411      	bmi.n	801d954 <__swsetup_r+0x50>
 801d930:	2209      	movs	r2, #9
 801d932:	6032      	str	r2, [r6, #0]
 801d934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d938:	81a3      	strh	r3, [r4, #12]
 801d93a:	f04f 30ff 	mov.w	r0, #4294967295
 801d93e:	e03e      	b.n	801d9be <__swsetup_r+0xba>
 801d940:	4b25      	ldr	r3, [pc, #148]	; (801d9d8 <__swsetup_r+0xd4>)
 801d942:	429c      	cmp	r4, r3
 801d944:	d101      	bne.n	801d94a <__swsetup_r+0x46>
 801d946:	68ac      	ldr	r4, [r5, #8]
 801d948:	e7eb      	b.n	801d922 <__swsetup_r+0x1e>
 801d94a:	4b24      	ldr	r3, [pc, #144]	; (801d9dc <__swsetup_r+0xd8>)
 801d94c:	429c      	cmp	r4, r3
 801d94e:	bf08      	it	eq
 801d950:	68ec      	ldreq	r4, [r5, #12]
 801d952:	e7e6      	b.n	801d922 <__swsetup_r+0x1e>
 801d954:	0751      	lsls	r1, r2, #29
 801d956:	d512      	bpl.n	801d97e <__swsetup_r+0x7a>
 801d958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d95a:	b141      	cbz	r1, 801d96e <__swsetup_r+0x6a>
 801d95c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d960:	4299      	cmp	r1, r3
 801d962:	d002      	beq.n	801d96a <__swsetup_r+0x66>
 801d964:	4630      	mov	r0, r6
 801d966:	f7ff f907 	bl	801cb78 <_free_r>
 801d96a:	2300      	movs	r3, #0
 801d96c:	6363      	str	r3, [r4, #52]	; 0x34
 801d96e:	89a3      	ldrh	r3, [r4, #12]
 801d970:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d974:	81a3      	strh	r3, [r4, #12]
 801d976:	2300      	movs	r3, #0
 801d978:	6063      	str	r3, [r4, #4]
 801d97a:	6923      	ldr	r3, [r4, #16]
 801d97c:	6023      	str	r3, [r4, #0]
 801d97e:	89a3      	ldrh	r3, [r4, #12]
 801d980:	f043 0308 	orr.w	r3, r3, #8
 801d984:	81a3      	strh	r3, [r4, #12]
 801d986:	6923      	ldr	r3, [r4, #16]
 801d988:	b94b      	cbnz	r3, 801d99e <__swsetup_r+0x9a>
 801d98a:	89a3      	ldrh	r3, [r4, #12]
 801d98c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d994:	d003      	beq.n	801d99e <__swsetup_r+0x9a>
 801d996:	4621      	mov	r1, r4
 801d998:	4630      	mov	r0, r6
 801d99a:	f000 f917 	bl	801dbcc <__smakebuf_r>
 801d99e:	89a2      	ldrh	r2, [r4, #12]
 801d9a0:	f012 0301 	ands.w	r3, r2, #1
 801d9a4:	d00c      	beq.n	801d9c0 <__swsetup_r+0xbc>
 801d9a6:	2300      	movs	r3, #0
 801d9a8:	60a3      	str	r3, [r4, #8]
 801d9aa:	6963      	ldr	r3, [r4, #20]
 801d9ac:	425b      	negs	r3, r3
 801d9ae:	61a3      	str	r3, [r4, #24]
 801d9b0:	6923      	ldr	r3, [r4, #16]
 801d9b2:	b953      	cbnz	r3, 801d9ca <__swsetup_r+0xc6>
 801d9b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d9b8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801d9bc:	d1ba      	bne.n	801d934 <__swsetup_r+0x30>
 801d9be:	bd70      	pop	{r4, r5, r6, pc}
 801d9c0:	0792      	lsls	r2, r2, #30
 801d9c2:	bf58      	it	pl
 801d9c4:	6963      	ldrpl	r3, [r4, #20]
 801d9c6:	60a3      	str	r3, [r4, #8]
 801d9c8:	e7f2      	b.n	801d9b0 <__swsetup_r+0xac>
 801d9ca:	2000      	movs	r0, #0
 801d9cc:	e7f7      	b.n	801d9be <__swsetup_r+0xba>
 801d9ce:	bf00      	nop
 801d9d0:	200001b0 	.word	0x200001b0
 801d9d4:	0801fd4c 	.word	0x0801fd4c
 801d9d8:	0801fd6c 	.word	0x0801fd6c
 801d9dc:	0801fd2c 	.word	0x0801fd2c

0801d9e0 <_close_r>:
 801d9e0:	b538      	push	{r3, r4, r5, lr}
 801d9e2:	4c06      	ldr	r4, [pc, #24]	; (801d9fc <_close_r+0x1c>)
 801d9e4:	2300      	movs	r3, #0
 801d9e6:	4605      	mov	r5, r0
 801d9e8:	4608      	mov	r0, r1
 801d9ea:	6023      	str	r3, [r4, #0]
 801d9ec:	f7e5 f949 	bl	8002c82 <_close>
 801d9f0:	1c43      	adds	r3, r0, #1
 801d9f2:	d102      	bne.n	801d9fa <_close_r+0x1a>
 801d9f4:	6823      	ldr	r3, [r4, #0]
 801d9f6:	b103      	cbz	r3, 801d9fa <_close_r+0x1a>
 801d9f8:	602b      	str	r3, [r5, #0]
 801d9fa:	bd38      	pop	{r3, r4, r5, pc}
 801d9fc:	20008978 	.word	0x20008978

0801da00 <__sflush_r>:
 801da00:	898a      	ldrh	r2, [r1, #12]
 801da02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801da06:	4605      	mov	r5, r0
 801da08:	0710      	lsls	r0, r2, #28
 801da0a:	460c      	mov	r4, r1
 801da0c:	d458      	bmi.n	801dac0 <__sflush_r+0xc0>
 801da0e:	684b      	ldr	r3, [r1, #4]
 801da10:	2b00      	cmp	r3, #0
 801da12:	dc05      	bgt.n	801da20 <__sflush_r+0x20>
 801da14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801da16:	2b00      	cmp	r3, #0
 801da18:	dc02      	bgt.n	801da20 <__sflush_r+0x20>
 801da1a:	2000      	movs	r0, #0
 801da1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801da20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801da22:	2e00      	cmp	r6, #0
 801da24:	d0f9      	beq.n	801da1a <__sflush_r+0x1a>
 801da26:	2300      	movs	r3, #0
 801da28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801da2c:	682f      	ldr	r7, [r5, #0]
 801da2e:	6a21      	ldr	r1, [r4, #32]
 801da30:	602b      	str	r3, [r5, #0]
 801da32:	d032      	beq.n	801da9a <__sflush_r+0x9a>
 801da34:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801da36:	89a3      	ldrh	r3, [r4, #12]
 801da38:	075a      	lsls	r2, r3, #29
 801da3a:	d505      	bpl.n	801da48 <__sflush_r+0x48>
 801da3c:	6863      	ldr	r3, [r4, #4]
 801da3e:	1ac0      	subs	r0, r0, r3
 801da40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801da42:	b10b      	cbz	r3, 801da48 <__sflush_r+0x48>
 801da44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801da46:	1ac0      	subs	r0, r0, r3
 801da48:	2300      	movs	r3, #0
 801da4a:	4602      	mov	r2, r0
 801da4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801da4e:	6a21      	ldr	r1, [r4, #32]
 801da50:	4628      	mov	r0, r5
 801da52:	47b0      	blx	r6
 801da54:	1c43      	adds	r3, r0, #1
 801da56:	89a3      	ldrh	r3, [r4, #12]
 801da58:	d106      	bne.n	801da68 <__sflush_r+0x68>
 801da5a:	6829      	ldr	r1, [r5, #0]
 801da5c:	291d      	cmp	r1, #29
 801da5e:	d848      	bhi.n	801daf2 <__sflush_r+0xf2>
 801da60:	4a29      	ldr	r2, [pc, #164]	; (801db08 <__sflush_r+0x108>)
 801da62:	40ca      	lsrs	r2, r1
 801da64:	07d6      	lsls	r6, r2, #31
 801da66:	d544      	bpl.n	801daf2 <__sflush_r+0xf2>
 801da68:	2200      	movs	r2, #0
 801da6a:	6062      	str	r2, [r4, #4]
 801da6c:	04d9      	lsls	r1, r3, #19
 801da6e:	6922      	ldr	r2, [r4, #16]
 801da70:	6022      	str	r2, [r4, #0]
 801da72:	d504      	bpl.n	801da7e <__sflush_r+0x7e>
 801da74:	1c42      	adds	r2, r0, #1
 801da76:	d101      	bne.n	801da7c <__sflush_r+0x7c>
 801da78:	682b      	ldr	r3, [r5, #0]
 801da7a:	b903      	cbnz	r3, 801da7e <__sflush_r+0x7e>
 801da7c:	6560      	str	r0, [r4, #84]	; 0x54
 801da7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801da80:	602f      	str	r7, [r5, #0]
 801da82:	2900      	cmp	r1, #0
 801da84:	d0c9      	beq.n	801da1a <__sflush_r+0x1a>
 801da86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801da8a:	4299      	cmp	r1, r3
 801da8c:	d002      	beq.n	801da94 <__sflush_r+0x94>
 801da8e:	4628      	mov	r0, r5
 801da90:	f7ff f872 	bl	801cb78 <_free_r>
 801da94:	2000      	movs	r0, #0
 801da96:	6360      	str	r0, [r4, #52]	; 0x34
 801da98:	e7c0      	b.n	801da1c <__sflush_r+0x1c>
 801da9a:	2301      	movs	r3, #1
 801da9c:	4628      	mov	r0, r5
 801da9e:	47b0      	blx	r6
 801daa0:	1c41      	adds	r1, r0, #1
 801daa2:	d1c8      	bne.n	801da36 <__sflush_r+0x36>
 801daa4:	682b      	ldr	r3, [r5, #0]
 801daa6:	2b00      	cmp	r3, #0
 801daa8:	d0c5      	beq.n	801da36 <__sflush_r+0x36>
 801daaa:	2b1d      	cmp	r3, #29
 801daac:	d001      	beq.n	801dab2 <__sflush_r+0xb2>
 801daae:	2b16      	cmp	r3, #22
 801dab0:	d101      	bne.n	801dab6 <__sflush_r+0xb6>
 801dab2:	602f      	str	r7, [r5, #0]
 801dab4:	e7b1      	b.n	801da1a <__sflush_r+0x1a>
 801dab6:	89a3      	ldrh	r3, [r4, #12]
 801dab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dabc:	81a3      	strh	r3, [r4, #12]
 801dabe:	e7ad      	b.n	801da1c <__sflush_r+0x1c>
 801dac0:	690f      	ldr	r7, [r1, #16]
 801dac2:	2f00      	cmp	r7, #0
 801dac4:	d0a9      	beq.n	801da1a <__sflush_r+0x1a>
 801dac6:	0793      	lsls	r3, r2, #30
 801dac8:	680e      	ldr	r6, [r1, #0]
 801daca:	bf08      	it	eq
 801dacc:	694b      	ldreq	r3, [r1, #20]
 801dace:	600f      	str	r7, [r1, #0]
 801dad0:	bf18      	it	ne
 801dad2:	2300      	movne	r3, #0
 801dad4:	eba6 0807 	sub.w	r8, r6, r7
 801dad8:	608b      	str	r3, [r1, #8]
 801dada:	f1b8 0f00 	cmp.w	r8, #0
 801dade:	dd9c      	ble.n	801da1a <__sflush_r+0x1a>
 801dae0:	4643      	mov	r3, r8
 801dae2:	463a      	mov	r2, r7
 801dae4:	6a21      	ldr	r1, [r4, #32]
 801dae6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801dae8:	4628      	mov	r0, r5
 801daea:	47b0      	blx	r6
 801daec:	2800      	cmp	r0, #0
 801daee:	dc06      	bgt.n	801dafe <__sflush_r+0xfe>
 801daf0:	89a3      	ldrh	r3, [r4, #12]
 801daf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801daf6:	81a3      	strh	r3, [r4, #12]
 801daf8:	f04f 30ff 	mov.w	r0, #4294967295
 801dafc:	e78e      	b.n	801da1c <__sflush_r+0x1c>
 801dafe:	4407      	add	r7, r0
 801db00:	eba8 0800 	sub.w	r8, r8, r0
 801db04:	e7e9      	b.n	801dada <__sflush_r+0xda>
 801db06:	bf00      	nop
 801db08:	20400001 	.word	0x20400001

0801db0c <_fflush_r>:
 801db0c:	b538      	push	{r3, r4, r5, lr}
 801db0e:	690b      	ldr	r3, [r1, #16]
 801db10:	4605      	mov	r5, r0
 801db12:	460c      	mov	r4, r1
 801db14:	b1db      	cbz	r3, 801db4e <_fflush_r+0x42>
 801db16:	b118      	cbz	r0, 801db20 <_fflush_r+0x14>
 801db18:	6983      	ldr	r3, [r0, #24]
 801db1a:	b90b      	cbnz	r3, 801db20 <_fflush_r+0x14>
 801db1c:	f7ff f9a4 	bl	801ce68 <__sinit>
 801db20:	4b0c      	ldr	r3, [pc, #48]	; (801db54 <_fflush_r+0x48>)
 801db22:	429c      	cmp	r4, r3
 801db24:	d109      	bne.n	801db3a <_fflush_r+0x2e>
 801db26:	686c      	ldr	r4, [r5, #4]
 801db28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801db2c:	b17b      	cbz	r3, 801db4e <_fflush_r+0x42>
 801db2e:	4621      	mov	r1, r4
 801db30:	4628      	mov	r0, r5
 801db32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801db36:	f7ff bf63 	b.w	801da00 <__sflush_r>
 801db3a:	4b07      	ldr	r3, [pc, #28]	; (801db58 <_fflush_r+0x4c>)
 801db3c:	429c      	cmp	r4, r3
 801db3e:	d101      	bne.n	801db44 <_fflush_r+0x38>
 801db40:	68ac      	ldr	r4, [r5, #8]
 801db42:	e7f1      	b.n	801db28 <_fflush_r+0x1c>
 801db44:	4b05      	ldr	r3, [pc, #20]	; (801db5c <_fflush_r+0x50>)
 801db46:	429c      	cmp	r4, r3
 801db48:	bf08      	it	eq
 801db4a:	68ec      	ldreq	r4, [r5, #12]
 801db4c:	e7ec      	b.n	801db28 <_fflush_r+0x1c>
 801db4e:	2000      	movs	r0, #0
 801db50:	bd38      	pop	{r3, r4, r5, pc}
 801db52:	bf00      	nop
 801db54:	0801fd4c 	.word	0x0801fd4c
 801db58:	0801fd6c 	.word	0x0801fd6c
 801db5c:	0801fd2c 	.word	0x0801fd2c

0801db60 <_lseek_r>:
 801db60:	b538      	push	{r3, r4, r5, lr}
 801db62:	4c07      	ldr	r4, [pc, #28]	; (801db80 <_lseek_r+0x20>)
 801db64:	4605      	mov	r5, r0
 801db66:	4608      	mov	r0, r1
 801db68:	4611      	mov	r1, r2
 801db6a:	2200      	movs	r2, #0
 801db6c:	6022      	str	r2, [r4, #0]
 801db6e:	461a      	mov	r2, r3
 801db70:	f7e5 f8ae 	bl	8002cd0 <_lseek>
 801db74:	1c43      	adds	r3, r0, #1
 801db76:	d102      	bne.n	801db7e <_lseek_r+0x1e>
 801db78:	6823      	ldr	r3, [r4, #0]
 801db7a:	b103      	cbz	r3, 801db7e <_lseek_r+0x1e>
 801db7c:	602b      	str	r3, [r5, #0]
 801db7e:	bd38      	pop	{r3, r4, r5, pc}
 801db80:	20008978 	.word	0x20008978

0801db84 <__swhatbuf_r>:
 801db84:	b570      	push	{r4, r5, r6, lr}
 801db86:	460e      	mov	r6, r1
 801db88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801db8c:	2900      	cmp	r1, #0
 801db8e:	b096      	sub	sp, #88	; 0x58
 801db90:	4614      	mov	r4, r2
 801db92:	461d      	mov	r5, r3
 801db94:	da07      	bge.n	801dba6 <__swhatbuf_r+0x22>
 801db96:	2300      	movs	r3, #0
 801db98:	602b      	str	r3, [r5, #0]
 801db9a:	89b3      	ldrh	r3, [r6, #12]
 801db9c:	061a      	lsls	r2, r3, #24
 801db9e:	d410      	bmi.n	801dbc2 <__swhatbuf_r+0x3e>
 801dba0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801dba4:	e00e      	b.n	801dbc4 <__swhatbuf_r+0x40>
 801dba6:	466a      	mov	r2, sp
 801dba8:	f000 f8a2 	bl	801dcf0 <_fstat_r>
 801dbac:	2800      	cmp	r0, #0
 801dbae:	dbf2      	blt.n	801db96 <__swhatbuf_r+0x12>
 801dbb0:	9a01      	ldr	r2, [sp, #4]
 801dbb2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801dbb6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801dbba:	425a      	negs	r2, r3
 801dbbc:	415a      	adcs	r2, r3
 801dbbe:	602a      	str	r2, [r5, #0]
 801dbc0:	e7ee      	b.n	801dba0 <__swhatbuf_r+0x1c>
 801dbc2:	2340      	movs	r3, #64	; 0x40
 801dbc4:	2000      	movs	r0, #0
 801dbc6:	6023      	str	r3, [r4, #0]
 801dbc8:	b016      	add	sp, #88	; 0x58
 801dbca:	bd70      	pop	{r4, r5, r6, pc}

0801dbcc <__smakebuf_r>:
 801dbcc:	898b      	ldrh	r3, [r1, #12]
 801dbce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801dbd0:	079d      	lsls	r5, r3, #30
 801dbd2:	4606      	mov	r6, r0
 801dbd4:	460c      	mov	r4, r1
 801dbd6:	d507      	bpl.n	801dbe8 <__smakebuf_r+0x1c>
 801dbd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801dbdc:	6023      	str	r3, [r4, #0]
 801dbde:	6123      	str	r3, [r4, #16]
 801dbe0:	2301      	movs	r3, #1
 801dbe2:	6163      	str	r3, [r4, #20]
 801dbe4:	b002      	add	sp, #8
 801dbe6:	bd70      	pop	{r4, r5, r6, pc}
 801dbe8:	ab01      	add	r3, sp, #4
 801dbea:	466a      	mov	r2, sp
 801dbec:	f7ff ffca 	bl	801db84 <__swhatbuf_r>
 801dbf0:	9900      	ldr	r1, [sp, #0]
 801dbf2:	4605      	mov	r5, r0
 801dbf4:	4630      	mov	r0, r6
 801dbf6:	f7ff f80d 	bl	801cc14 <_malloc_r>
 801dbfa:	b948      	cbnz	r0, 801dc10 <__smakebuf_r+0x44>
 801dbfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dc00:	059a      	lsls	r2, r3, #22
 801dc02:	d4ef      	bmi.n	801dbe4 <__smakebuf_r+0x18>
 801dc04:	f023 0303 	bic.w	r3, r3, #3
 801dc08:	f043 0302 	orr.w	r3, r3, #2
 801dc0c:	81a3      	strh	r3, [r4, #12]
 801dc0e:	e7e3      	b.n	801dbd8 <__smakebuf_r+0xc>
 801dc10:	4b0d      	ldr	r3, [pc, #52]	; (801dc48 <__smakebuf_r+0x7c>)
 801dc12:	62b3      	str	r3, [r6, #40]	; 0x28
 801dc14:	89a3      	ldrh	r3, [r4, #12]
 801dc16:	6020      	str	r0, [r4, #0]
 801dc18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dc1c:	81a3      	strh	r3, [r4, #12]
 801dc1e:	9b00      	ldr	r3, [sp, #0]
 801dc20:	6163      	str	r3, [r4, #20]
 801dc22:	9b01      	ldr	r3, [sp, #4]
 801dc24:	6120      	str	r0, [r4, #16]
 801dc26:	b15b      	cbz	r3, 801dc40 <__smakebuf_r+0x74>
 801dc28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dc2c:	4630      	mov	r0, r6
 801dc2e:	f000 f871 	bl	801dd14 <_isatty_r>
 801dc32:	b128      	cbz	r0, 801dc40 <__smakebuf_r+0x74>
 801dc34:	89a3      	ldrh	r3, [r4, #12]
 801dc36:	f023 0303 	bic.w	r3, r3, #3
 801dc3a:	f043 0301 	orr.w	r3, r3, #1
 801dc3e:	81a3      	strh	r3, [r4, #12]
 801dc40:	89a3      	ldrh	r3, [r4, #12]
 801dc42:	431d      	orrs	r5, r3
 801dc44:	81a5      	strh	r5, [r4, #12]
 801dc46:	e7cd      	b.n	801dbe4 <__smakebuf_r+0x18>
 801dc48:	0801ce31 	.word	0x0801ce31

0801dc4c <memmove>:
 801dc4c:	4288      	cmp	r0, r1
 801dc4e:	b510      	push	{r4, lr}
 801dc50:	eb01 0302 	add.w	r3, r1, r2
 801dc54:	d807      	bhi.n	801dc66 <memmove+0x1a>
 801dc56:	1e42      	subs	r2, r0, #1
 801dc58:	4299      	cmp	r1, r3
 801dc5a:	d00a      	beq.n	801dc72 <memmove+0x26>
 801dc5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801dc60:	f802 4f01 	strb.w	r4, [r2, #1]!
 801dc64:	e7f8      	b.n	801dc58 <memmove+0xc>
 801dc66:	4283      	cmp	r3, r0
 801dc68:	d9f5      	bls.n	801dc56 <memmove+0xa>
 801dc6a:	1881      	adds	r1, r0, r2
 801dc6c:	1ad2      	subs	r2, r2, r3
 801dc6e:	42d3      	cmn	r3, r2
 801dc70:	d100      	bne.n	801dc74 <memmove+0x28>
 801dc72:	bd10      	pop	{r4, pc}
 801dc74:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801dc78:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801dc7c:	e7f7      	b.n	801dc6e <memmove+0x22>

0801dc7e <_realloc_r>:
 801dc7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc80:	4607      	mov	r7, r0
 801dc82:	4614      	mov	r4, r2
 801dc84:	460e      	mov	r6, r1
 801dc86:	b921      	cbnz	r1, 801dc92 <_realloc_r+0x14>
 801dc88:	4611      	mov	r1, r2
 801dc8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801dc8e:	f7fe bfc1 	b.w	801cc14 <_malloc_r>
 801dc92:	b922      	cbnz	r2, 801dc9e <_realloc_r+0x20>
 801dc94:	f7fe ff70 	bl	801cb78 <_free_r>
 801dc98:	4625      	mov	r5, r4
 801dc9a:	4628      	mov	r0, r5
 801dc9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dc9e:	f000 f849 	bl	801dd34 <_malloc_usable_size_r>
 801dca2:	42a0      	cmp	r0, r4
 801dca4:	d20f      	bcs.n	801dcc6 <_realloc_r+0x48>
 801dca6:	4621      	mov	r1, r4
 801dca8:	4638      	mov	r0, r7
 801dcaa:	f7fe ffb3 	bl	801cc14 <_malloc_r>
 801dcae:	4605      	mov	r5, r0
 801dcb0:	2800      	cmp	r0, #0
 801dcb2:	d0f2      	beq.n	801dc9a <_realloc_r+0x1c>
 801dcb4:	4631      	mov	r1, r6
 801dcb6:	4622      	mov	r2, r4
 801dcb8:	f7fe ff4a 	bl	801cb50 <memcpy>
 801dcbc:	4631      	mov	r1, r6
 801dcbe:	4638      	mov	r0, r7
 801dcc0:	f7fe ff5a 	bl	801cb78 <_free_r>
 801dcc4:	e7e9      	b.n	801dc9a <_realloc_r+0x1c>
 801dcc6:	4635      	mov	r5, r6
 801dcc8:	e7e7      	b.n	801dc9a <_realloc_r+0x1c>
	...

0801dccc <_read_r>:
 801dccc:	b538      	push	{r3, r4, r5, lr}
 801dcce:	4c07      	ldr	r4, [pc, #28]	; (801dcec <_read_r+0x20>)
 801dcd0:	4605      	mov	r5, r0
 801dcd2:	4608      	mov	r0, r1
 801dcd4:	4611      	mov	r1, r2
 801dcd6:	2200      	movs	r2, #0
 801dcd8:	6022      	str	r2, [r4, #0]
 801dcda:	461a      	mov	r2, r3
 801dcdc:	f7e4 ff98 	bl	8002c10 <_read>
 801dce0:	1c43      	adds	r3, r0, #1
 801dce2:	d102      	bne.n	801dcea <_read_r+0x1e>
 801dce4:	6823      	ldr	r3, [r4, #0]
 801dce6:	b103      	cbz	r3, 801dcea <_read_r+0x1e>
 801dce8:	602b      	str	r3, [r5, #0]
 801dcea:	bd38      	pop	{r3, r4, r5, pc}
 801dcec:	20008978 	.word	0x20008978

0801dcf0 <_fstat_r>:
 801dcf0:	b538      	push	{r3, r4, r5, lr}
 801dcf2:	4c07      	ldr	r4, [pc, #28]	; (801dd10 <_fstat_r+0x20>)
 801dcf4:	2300      	movs	r3, #0
 801dcf6:	4605      	mov	r5, r0
 801dcf8:	4608      	mov	r0, r1
 801dcfa:	4611      	mov	r1, r2
 801dcfc:	6023      	str	r3, [r4, #0]
 801dcfe:	f7e4 ffcc 	bl	8002c9a <_fstat>
 801dd02:	1c43      	adds	r3, r0, #1
 801dd04:	d102      	bne.n	801dd0c <_fstat_r+0x1c>
 801dd06:	6823      	ldr	r3, [r4, #0]
 801dd08:	b103      	cbz	r3, 801dd0c <_fstat_r+0x1c>
 801dd0a:	602b      	str	r3, [r5, #0]
 801dd0c:	bd38      	pop	{r3, r4, r5, pc}
 801dd0e:	bf00      	nop
 801dd10:	20008978 	.word	0x20008978

0801dd14 <_isatty_r>:
 801dd14:	b538      	push	{r3, r4, r5, lr}
 801dd16:	4c06      	ldr	r4, [pc, #24]	; (801dd30 <_isatty_r+0x1c>)
 801dd18:	2300      	movs	r3, #0
 801dd1a:	4605      	mov	r5, r0
 801dd1c:	4608      	mov	r0, r1
 801dd1e:	6023      	str	r3, [r4, #0]
 801dd20:	f7e4 ffcb 	bl	8002cba <_isatty>
 801dd24:	1c43      	adds	r3, r0, #1
 801dd26:	d102      	bne.n	801dd2e <_isatty_r+0x1a>
 801dd28:	6823      	ldr	r3, [r4, #0]
 801dd2a:	b103      	cbz	r3, 801dd2e <_isatty_r+0x1a>
 801dd2c:	602b      	str	r3, [r5, #0]
 801dd2e:	bd38      	pop	{r3, r4, r5, pc}
 801dd30:	20008978 	.word	0x20008978

0801dd34 <_malloc_usable_size_r>:
 801dd34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dd38:	1f18      	subs	r0, r3, #4
 801dd3a:	2b00      	cmp	r3, #0
 801dd3c:	bfbc      	itt	lt
 801dd3e:	580b      	ldrlt	r3, [r1, r0]
 801dd40:	18c0      	addlt	r0, r0, r3
 801dd42:	4770      	bx	lr

0801dd44 <trunc>:
 801dd44:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 801dd48:	ec5c bb10 	vmov	fp, ip, d0
 801dd4c:	f3cc 500a 	ubfx	r0, ip, #20, #11
 801dd50:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 801dd54:	2913      	cmp	r1, #19
 801dd56:	4664      	mov	r4, ip
 801dd58:	dc11      	bgt.n	801dd7e <trunc+0x3a>
 801dd5a:	2900      	cmp	r1, #0
 801dd5c:	bfa7      	ittee	ge
 801dd5e:	4b15      	ldrge	r3, [pc, #84]	; (801ddb4 <trunc+0x70>)
 801dd60:	fa43 f101 	asrge.w	r1, r3, r1
 801dd64:	2200      	movlt	r2, #0
 801dd66:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 801dd6a:	bfa4      	itt	ge
 801dd6c:	2200      	movge	r2, #0
 801dd6e:	ea2c 0301 	bicge.w	r3, ip, r1
 801dd72:	4693      	mov	fp, r2
 801dd74:	469c      	mov	ip, r3
 801dd76:	ec4c bb10 	vmov	d0, fp, ip
 801dd7a:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 801dd7e:	2933      	cmp	r1, #51	; 0x33
 801dd80:	dd0d      	ble.n	801dd9e <trunc+0x5a>
 801dd82:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801dd86:	d1f6      	bne.n	801dd76 <trunc+0x32>
 801dd88:	4663      	mov	r3, ip
 801dd8a:	ee10 2a10 	vmov	r2, s0
 801dd8e:	ee10 0a10 	vmov	r0, s0
 801dd92:	4621      	mov	r1, r4
 801dd94:	f7e2 fa7a 	bl	800028c <__adddf3>
 801dd98:	4683      	mov	fp, r0
 801dd9a:	468c      	mov	ip, r1
 801dd9c:	e7eb      	b.n	801dd76 <trunc+0x32>
 801dd9e:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 801dda2:	f04f 33ff 	mov.w	r3, #4294967295
 801dda6:	fa23 f000 	lsr.w	r0, r3, r0
 801ddaa:	ea2b 0600 	bic.w	r6, fp, r0
 801ddae:	46b3      	mov	fp, r6
 801ddb0:	46a4      	mov	ip, r4
 801ddb2:	e7e0      	b.n	801dd76 <trunc+0x32>
 801ddb4:	000fffff 	.word	0x000fffff

0801ddb8 <pow>:
 801ddb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddbc:	ed2d 8b04 	vpush	{d8-d9}
 801ddc0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801e094 <pow+0x2dc>
 801ddc4:	b08d      	sub	sp, #52	; 0x34
 801ddc6:	ec57 6b10 	vmov	r6, r7, d0
 801ddca:	ec55 4b11 	vmov	r4, r5, d1
 801ddce:	f000 f963 	bl	801e098 <__ieee754_pow>
 801ddd2:	f999 3000 	ldrsb.w	r3, [r9]
 801ddd6:	9300      	str	r3, [sp, #0]
 801ddd8:	3301      	adds	r3, #1
 801ddda:	eeb0 8a40 	vmov.f32	s16, s0
 801ddde:	eef0 8a60 	vmov.f32	s17, s1
 801dde2:	46c8      	mov	r8, r9
 801dde4:	d05f      	beq.n	801dea6 <pow+0xee>
 801dde6:	4622      	mov	r2, r4
 801dde8:	462b      	mov	r3, r5
 801ddea:	4620      	mov	r0, r4
 801ddec:	4629      	mov	r1, r5
 801ddee:	f7e2 fe9d 	bl	8000b2c <__aeabi_dcmpun>
 801ddf2:	4683      	mov	fp, r0
 801ddf4:	2800      	cmp	r0, #0
 801ddf6:	d156      	bne.n	801dea6 <pow+0xee>
 801ddf8:	4632      	mov	r2, r6
 801ddfa:	463b      	mov	r3, r7
 801ddfc:	4630      	mov	r0, r6
 801ddfe:	4639      	mov	r1, r7
 801de00:	f7e2 fe94 	bl	8000b2c <__aeabi_dcmpun>
 801de04:	9001      	str	r0, [sp, #4]
 801de06:	b1e8      	cbz	r0, 801de44 <pow+0x8c>
 801de08:	2200      	movs	r2, #0
 801de0a:	2300      	movs	r3, #0
 801de0c:	4620      	mov	r0, r4
 801de0e:	4629      	mov	r1, r5
 801de10:	f7e2 fe5a 	bl	8000ac8 <__aeabi_dcmpeq>
 801de14:	2800      	cmp	r0, #0
 801de16:	d046      	beq.n	801dea6 <pow+0xee>
 801de18:	2301      	movs	r3, #1
 801de1a:	9302      	str	r3, [sp, #8]
 801de1c:	4b96      	ldr	r3, [pc, #600]	; (801e078 <pow+0x2c0>)
 801de1e:	9303      	str	r3, [sp, #12]
 801de20:	4b96      	ldr	r3, [pc, #600]	; (801e07c <pow+0x2c4>)
 801de22:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801de26:	2200      	movs	r2, #0
 801de28:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801de2c:	9b00      	ldr	r3, [sp, #0]
 801de2e:	2b02      	cmp	r3, #2
 801de30:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801de34:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801de38:	d033      	beq.n	801dea2 <pow+0xea>
 801de3a:	a802      	add	r0, sp, #8
 801de3c:	f000 fefb 	bl	801ec36 <matherr>
 801de40:	bb48      	cbnz	r0, 801de96 <pow+0xde>
 801de42:	e05d      	b.n	801df00 <pow+0x148>
 801de44:	f04f 0a00 	mov.w	sl, #0
 801de48:	f04f 0b00 	mov.w	fp, #0
 801de4c:	4652      	mov	r2, sl
 801de4e:	465b      	mov	r3, fp
 801de50:	4630      	mov	r0, r6
 801de52:	4639      	mov	r1, r7
 801de54:	f7e2 fe38 	bl	8000ac8 <__aeabi_dcmpeq>
 801de58:	ec4b ab19 	vmov	d9, sl, fp
 801de5c:	2800      	cmp	r0, #0
 801de5e:	d054      	beq.n	801df0a <pow+0x152>
 801de60:	4652      	mov	r2, sl
 801de62:	465b      	mov	r3, fp
 801de64:	4620      	mov	r0, r4
 801de66:	4629      	mov	r1, r5
 801de68:	f7e2 fe2e 	bl	8000ac8 <__aeabi_dcmpeq>
 801de6c:	4680      	mov	r8, r0
 801de6e:	b318      	cbz	r0, 801deb8 <pow+0x100>
 801de70:	2301      	movs	r3, #1
 801de72:	9302      	str	r3, [sp, #8]
 801de74:	4b80      	ldr	r3, [pc, #512]	; (801e078 <pow+0x2c0>)
 801de76:	9303      	str	r3, [sp, #12]
 801de78:	9b01      	ldr	r3, [sp, #4]
 801de7a:	930a      	str	r3, [sp, #40]	; 0x28
 801de7c:	9b00      	ldr	r3, [sp, #0]
 801de7e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801de82:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801de86:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801de8a:	2b00      	cmp	r3, #0
 801de8c:	d0d5      	beq.n	801de3a <pow+0x82>
 801de8e:	4b7b      	ldr	r3, [pc, #492]	; (801e07c <pow+0x2c4>)
 801de90:	2200      	movs	r2, #0
 801de92:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801de96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801de98:	b11b      	cbz	r3, 801dea2 <pow+0xea>
 801de9a:	f7fe fe1f 	bl	801cadc <__errno>
 801de9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dea0:	6003      	str	r3, [r0, #0]
 801dea2:	ed9d 8b08 	vldr	d8, [sp, #32]
 801dea6:	eeb0 0a48 	vmov.f32	s0, s16
 801deaa:	eef0 0a68 	vmov.f32	s1, s17
 801deae:	b00d      	add	sp, #52	; 0x34
 801deb0:	ecbd 8b04 	vpop	{d8-d9}
 801deb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801deb8:	ec45 4b10 	vmov	d0, r4, r5
 801debc:	f000 feb3 	bl	801ec26 <finite>
 801dec0:	2800      	cmp	r0, #0
 801dec2:	d0f0      	beq.n	801dea6 <pow+0xee>
 801dec4:	4652      	mov	r2, sl
 801dec6:	465b      	mov	r3, fp
 801dec8:	4620      	mov	r0, r4
 801deca:	4629      	mov	r1, r5
 801decc:	f7e2 fe06 	bl	8000adc <__aeabi_dcmplt>
 801ded0:	2800      	cmp	r0, #0
 801ded2:	d0e8      	beq.n	801dea6 <pow+0xee>
 801ded4:	2301      	movs	r3, #1
 801ded6:	9302      	str	r3, [sp, #8]
 801ded8:	4b67      	ldr	r3, [pc, #412]	; (801e078 <pow+0x2c0>)
 801deda:	9303      	str	r3, [sp, #12]
 801dedc:	f999 3000 	ldrsb.w	r3, [r9]
 801dee0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801dee4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801dee8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801deec:	b913      	cbnz	r3, 801def4 <pow+0x13c>
 801deee:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801def2:	e7a2      	b.n	801de3a <pow+0x82>
 801def4:	4962      	ldr	r1, [pc, #392]	; (801e080 <pow+0x2c8>)
 801def6:	2000      	movs	r0, #0
 801def8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801defc:	2b02      	cmp	r3, #2
 801defe:	d19c      	bne.n	801de3a <pow+0x82>
 801df00:	f7fe fdec 	bl	801cadc <__errno>
 801df04:	2321      	movs	r3, #33	; 0x21
 801df06:	6003      	str	r3, [r0, #0]
 801df08:	e7c5      	b.n	801de96 <pow+0xde>
 801df0a:	eeb0 0a48 	vmov.f32	s0, s16
 801df0e:	eef0 0a68 	vmov.f32	s1, s17
 801df12:	f000 fe88 	bl	801ec26 <finite>
 801df16:	9000      	str	r0, [sp, #0]
 801df18:	2800      	cmp	r0, #0
 801df1a:	f040 8081 	bne.w	801e020 <pow+0x268>
 801df1e:	ec47 6b10 	vmov	d0, r6, r7
 801df22:	f000 fe80 	bl	801ec26 <finite>
 801df26:	2800      	cmp	r0, #0
 801df28:	d07a      	beq.n	801e020 <pow+0x268>
 801df2a:	ec45 4b10 	vmov	d0, r4, r5
 801df2e:	f000 fe7a 	bl	801ec26 <finite>
 801df32:	2800      	cmp	r0, #0
 801df34:	d074      	beq.n	801e020 <pow+0x268>
 801df36:	ec53 2b18 	vmov	r2, r3, d8
 801df3a:	ee18 0a10 	vmov	r0, s16
 801df3e:	4619      	mov	r1, r3
 801df40:	f7e2 fdf4 	bl	8000b2c <__aeabi_dcmpun>
 801df44:	f999 9000 	ldrsb.w	r9, [r9]
 801df48:	4b4b      	ldr	r3, [pc, #300]	; (801e078 <pow+0x2c0>)
 801df4a:	b1b0      	cbz	r0, 801df7a <pow+0x1c2>
 801df4c:	2201      	movs	r2, #1
 801df4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801df52:	9b00      	ldr	r3, [sp, #0]
 801df54:	930a      	str	r3, [sp, #40]	; 0x28
 801df56:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801df5a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801df5e:	f1b9 0f00 	cmp.w	r9, #0
 801df62:	d0c4      	beq.n	801deee <pow+0x136>
 801df64:	4652      	mov	r2, sl
 801df66:	465b      	mov	r3, fp
 801df68:	4650      	mov	r0, sl
 801df6a:	4659      	mov	r1, fp
 801df6c:	f7e2 fc6e 	bl	800084c <__aeabi_ddiv>
 801df70:	f1b9 0f02 	cmp.w	r9, #2
 801df74:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801df78:	e7c1      	b.n	801defe <pow+0x146>
 801df7a:	2203      	movs	r2, #3
 801df7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801df80:	900a      	str	r0, [sp, #40]	; 0x28
 801df82:	4629      	mov	r1, r5
 801df84:	4620      	mov	r0, r4
 801df86:	2200      	movs	r2, #0
 801df88:	4b3e      	ldr	r3, [pc, #248]	; (801e084 <pow+0x2cc>)
 801df8a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801df8e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801df92:	f7e2 fb31 	bl	80005f8 <__aeabi_dmul>
 801df96:	4604      	mov	r4, r0
 801df98:	460d      	mov	r5, r1
 801df9a:	f1b9 0f00 	cmp.w	r9, #0
 801df9e:	d124      	bne.n	801dfea <pow+0x232>
 801dfa0:	4b39      	ldr	r3, [pc, #228]	; (801e088 <pow+0x2d0>)
 801dfa2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801dfa6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801dfaa:	4630      	mov	r0, r6
 801dfac:	4652      	mov	r2, sl
 801dfae:	465b      	mov	r3, fp
 801dfb0:	4639      	mov	r1, r7
 801dfb2:	f7e2 fd93 	bl	8000adc <__aeabi_dcmplt>
 801dfb6:	2800      	cmp	r0, #0
 801dfb8:	d056      	beq.n	801e068 <pow+0x2b0>
 801dfba:	ec45 4b10 	vmov	d0, r4, r5
 801dfbe:	f000 fe47 	bl	801ec50 <rint>
 801dfc2:	4622      	mov	r2, r4
 801dfc4:	462b      	mov	r3, r5
 801dfc6:	ec51 0b10 	vmov	r0, r1, d0
 801dfca:	f7e2 fd7d 	bl	8000ac8 <__aeabi_dcmpeq>
 801dfce:	b920      	cbnz	r0, 801dfda <pow+0x222>
 801dfd0:	4b2e      	ldr	r3, [pc, #184]	; (801e08c <pow+0x2d4>)
 801dfd2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801dfd6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801dfda:	f998 3000 	ldrsb.w	r3, [r8]
 801dfde:	2b02      	cmp	r3, #2
 801dfe0:	d142      	bne.n	801e068 <pow+0x2b0>
 801dfe2:	f7fe fd7b 	bl	801cadc <__errno>
 801dfe6:	2322      	movs	r3, #34	; 0x22
 801dfe8:	e78d      	b.n	801df06 <pow+0x14e>
 801dfea:	4b29      	ldr	r3, [pc, #164]	; (801e090 <pow+0x2d8>)
 801dfec:	2200      	movs	r2, #0
 801dfee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801dff2:	4630      	mov	r0, r6
 801dff4:	4652      	mov	r2, sl
 801dff6:	465b      	mov	r3, fp
 801dff8:	4639      	mov	r1, r7
 801dffa:	f7e2 fd6f 	bl	8000adc <__aeabi_dcmplt>
 801dffe:	2800      	cmp	r0, #0
 801e000:	d0eb      	beq.n	801dfda <pow+0x222>
 801e002:	ec45 4b10 	vmov	d0, r4, r5
 801e006:	f000 fe23 	bl	801ec50 <rint>
 801e00a:	4622      	mov	r2, r4
 801e00c:	462b      	mov	r3, r5
 801e00e:	ec51 0b10 	vmov	r0, r1, d0
 801e012:	f7e2 fd59 	bl	8000ac8 <__aeabi_dcmpeq>
 801e016:	2800      	cmp	r0, #0
 801e018:	d1df      	bne.n	801dfda <pow+0x222>
 801e01a:	2200      	movs	r2, #0
 801e01c:	4b18      	ldr	r3, [pc, #96]	; (801e080 <pow+0x2c8>)
 801e01e:	e7da      	b.n	801dfd6 <pow+0x21e>
 801e020:	2200      	movs	r2, #0
 801e022:	2300      	movs	r3, #0
 801e024:	ec51 0b18 	vmov	r0, r1, d8
 801e028:	f7e2 fd4e 	bl	8000ac8 <__aeabi_dcmpeq>
 801e02c:	2800      	cmp	r0, #0
 801e02e:	f43f af3a 	beq.w	801dea6 <pow+0xee>
 801e032:	ec47 6b10 	vmov	d0, r6, r7
 801e036:	f000 fdf6 	bl	801ec26 <finite>
 801e03a:	2800      	cmp	r0, #0
 801e03c:	f43f af33 	beq.w	801dea6 <pow+0xee>
 801e040:	ec45 4b10 	vmov	d0, r4, r5
 801e044:	f000 fdef 	bl	801ec26 <finite>
 801e048:	2800      	cmp	r0, #0
 801e04a:	f43f af2c 	beq.w	801dea6 <pow+0xee>
 801e04e:	2304      	movs	r3, #4
 801e050:	9302      	str	r3, [sp, #8]
 801e052:	4b09      	ldr	r3, [pc, #36]	; (801e078 <pow+0x2c0>)
 801e054:	9303      	str	r3, [sp, #12]
 801e056:	2300      	movs	r3, #0
 801e058:	930a      	str	r3, [sp, #40]	; 0x28
 801e05a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801e05e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801e062:	ed8d 9b08 	vstr	d9, [sp, #32]
 801e066:	e7b8      	b.n	801dfda <pow+0x222>
 801e068:	a802      	add	r0, sp, #8
 801e06a:	f000 fde4 	bl	801ec36 <matherr>
 801e06e:	2800      	cmp	r0, #0
 801e070:	f47f af11 	bne.w	801de96 <pow+0xde>
 801e074:	e7b5      	b.n	801dfe2 <pow+0x22a>
 801e076:	bf00      	nop
 801e078:	0801fdbf 	.word	0x0801fdbf
 801e07c:	3ff00000 	.word	0x3ff00000
 801e080:	fff00000 	.word	0xfff00000
 801e084:	3fe00000 	.word	0x3fe00000
 801e088:	47efffff 	.word	0x47efffff
 801e08c:	c7efffff 	.word	0xc7efffff
 801e090:	7ff00000 	.word	0x7ff00000
 801e094:	20000214 	.word	0x20000214

0801e098 <__ieee754_pow>:
 801e098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e09c:	b091      	sub	sp, #68	; 0x44
 801e09e:	ed8d 1b00 	vstr	d1, [sp]
 801e0a2:	e9dd 2900 	ldrd	r2, r9, [sp]
 801e0a6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801e0aa:	ea58 0302 	orrs.w	r3, r8, r2
 801e0ae:	ec57 6b10 	vmov	r6, r7, d0
 801e0b2:	f000 84be 	beq.w	801ea32 <__ieee754_pow+0x99a>
 801e0b6:	4b7a      	ldr	r3, [pc, #488]	; (801e2a0 <__ieee754_pow+0x208>)
 801e0b8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801e0bc:	429c      	cmp	r4, r3
 801e0be:	463d      	mov	r5, r7
 801e0c0:	ee10 aa10 	vmov	sl, s0
 801e0c4:	dc09      	bgt.n	801e0da <__ieee754_pow+0x42>
 801e0c6:	d103      	bne.n	801e0d0 <__ieee754_pow+0x38>
 801e0c8:	b93e      	cbnz	r6, 801e0da <__ieee754_pow+0x42>
 801e0ca:	45a0      	cmp	r8, r4
 801e0cc:	dc0d      	bgt.n	801e0ea <__ieee754_pow+0x52>
 801e0ce:	e001      	b.n	801e0d4 <__ieee754_pow+0x3c>
 801e0d0:	4598      	cmp	r8, r3
 801e0d2:	dc02      	bgt.n	801e0da <__ieee754_pow+0x42>
 801e0d4:	4598      	cmp	r8, r3
 801e0d6:	d10e      	bne.n	801e0f6 <__ieee754_pow+0x5e>
 801e0d8:	b16a      	cbz	r2, 801e0f6 <__ieee754_pow+0x5e>
 801e0da:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801e0de:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801e0e2:	ea54 030a 	orrs.w	r3, r4, sl
 801e0e6:	f000 84a4 	beq.w	801ea32 <__ieee754_pow+0x99a>
 801e0ea:	486e      	ldr	r0, [pc, #440]	; (801e2a4 <__ieee754_pow+0x20c>)
 801e0ec:	b011      	add	sp, #68	; 0x44
 801e0ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0f2:	f000 bda5 	b.w	801ec40 <nan>
 801e0f6:	2d00      	cmp	r5, #0
 801e0f8:	da53      	bge.n	801e1a2 <__ieee754_pow+0x10a>
 801e0fa:	4b6b      	ldr	r3, [pc, #428]	; (801e2a8 <__ieee754_pow+0x210>)
 801e0fc:	4598      	cmp	r8, r3
 801e0fe:	dc4d      	bgt.n	801e19c <__ieee754_pow+0x104>
 801e100:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801e104:	4598      	cmp	r8, r3
 801e106:	dd4c      	ble.n	801e1a2 <__ieee754_pow+0x10a>
 801e108:	ea4f 5328 	mov.w	r3, r8, asr #20
 801e10c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801e110:	2b14      	cmp	r3, #20
 801e112:	dd26      	ble.n	801e162 <__ieee754_pow+0xca>
 801e114:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801e118:	fa22 f103 	lsr.w	r1, r2, r3
 801e11c:	fa01 f303 	lsl.w	r3, r1, r3
 801e120:	4293      	cmp	r3, r2
 801e122:	d13e      	bne.n	801e1a2 <__ieee754_pow+0x10a>
 801e124:	f001 0101 	and.w	r1, r1, #1
 801e128:	f1c1 0b02 	rsb	fp, r1, #2
 801e12c:	2a00      	cmp	r2, #0
 801e12e:	d15b      	bne.n	801e1e8 <__ieee754_pow+0x150>
 801e130:	4b5b      	ldr	r3, [pc, #364]	; (801e2a0 <__ieee754_pow+0x208>)
 801e132:	4598      	cmp	r8, r3
 801e134:	d124      	bne.n	801e180 <__ieee754_pow+0xe8>
 801e136:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801e13a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801e13e:	ea53 030a 	orrs.w	r3, r3, sl
 801e142:	f000 8476 	beq.w	801ea32 <__ieee754_pow+0x99a>
 801e146:	4b59      	ldr	r3, [pc, #356]	; (801e2ac <__ieee754_pow+0x214>)
 801e148:	429c      	cmp	r4, r3
 801e14a:	dd2d      	ble.n	801e1a8 <__ieee754_pow+0x110>
 801e14c:	f1b9 0f00 	cmp.w	r9, #0
 801e150:	f280 8473 	bge.w	801ea3a <__ieee754_pow+0x9a2>
 801e154:	2000      	movs	r0, #0
 801e156:	2100      	movs	r1, #0
 801e158:	ec41 0b10 	vmov	d0, r0, r1
 801e15c:	b011      	add	sp, #68	; 0x44
 801e15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e162:	2a00      	cmp	r2, #0
 801e164:	d13e      	bne.n	801e1e4 <__ieee754_pow+0x14c>
 801e166:	f1c3 0314 	rsb	r3, r3, #20
 801e16a:	fa48 f103 	asr.w	r1, r8, r3
 801e16e:	fa01 f303 	lsl.w	r3, r1, r3
 801e172:	4543      	cmp	r3, r8
 801e174:	f040 8469 	bne.w	801ea4a <__ieee754_pow+0x9b2>
 801e178:	f001 0101 	and.w	r1, r1, #1
 801e17c:	f1c1 0b02 	rsb	fp, r1, #2
 801e180:	4b4b      	ldr	r3, [pc, #300]	; (801e2b0 <__ieee754_pow+0x218>)
 801e182:	4598      	cmp	r8, r3
 801e184:	d118      	bne.n	801e1b8 <__ieee754_pow+0x120>
 801e186:	f1b9 0f00 	cmp.w	r9, #0
 801e18a:	f280 845a 	bge.w	801ea42 <__ieee754_pow+0x9aa>
 801e18e:	4948      	ldr	r1, [pc, #288]	; (801e2b0 <__ieee754_pow+0x218>)
 801e190:	4632      	mov	r2, r6
 801e192:	463b      	mov	r3, r7
 801e194:	2000      	movs	r0, #0
 801e196:	f7e2 fb59 	bl	800084c <__aeabi_ddiv>
 801e19a:	e7dd      	b.n	801e158 <__ieee754_pow+0xc0>
 801e19c:	f04f 0b02 	mov.w	fp, #2
 801e1a0:	e7c4      	b.n	801e12c <__ieee754_pow+0x94>
 801e1a2:	f04f 0b00 	mov.w	fp, #0
 801e1a6:	e7c1      	b.n	801e12c <__ieee754_pow+0x94>
 801e1a8:	f1b9 0f00 	cmp.w	r9, #0
 801e1ac:	dad2      	bge.n	801e154 <__ieee754_pow+0xbc>
 801e1ae:	e9dd 0300 	ldrd	r0, r3, [sp]
 801e1b2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801e1b6:	e7cf      	b.n	801e158 <__ieee754_pow+0xc0>
 801e1b8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801e1bc:	d106      	bne.n	801e1cc <__ieee754_pow+0x134>
 801e1be:	4632      	mov	r2, r6
 801e1c0:	463b      	mov	r3, r7
 801e1c2:	4610      	mov	r0, r2
 801e1c4:	4619      	mov	r1, r3
 801e1c6:	f7e2 fa17 	bl	80005f8 <__aeabi_dmul>
 801e1ca:	e7c5      	b.n	801e158 <__ieee754_pow+0xc0>
 801e1cc:	4b39      	ldr	r3, [pc, #228]	; (801e2b4 <__ieee754_pow+0x21c>)
 801e1ce:	4599      	cmp	r9, r3
 801e1d0:	d10a      	bne.n	801e1e8 <__ieee754_pow+0x150>
 801e1d2:	2d00      	cmp	r5, #0
 801e1d4:	db08      	blt.n	801e1e8 <__ieee754_pow+0x150>
 801e1d6:	ec47 6b10 	vmov	d0, r6, r7
 801e1da:	b011      	add	sp, #68	; 0x44
 801e1dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1e0:	f000 bc68 	b.w	801eab4 <__ieee754_sqrt>
 801e1e4:	f04f 0b00 	mov.w	fp, #0
 801e1e8:	ec47 6b10 	vmov	d0, r6, r7
 801e1ec:	f000 fd12 	bl	801ec14 <fabs>
 801e1f0:	ec51 0b10 	vmov	r0, r1, d0
 801e1f4:	f1ba 0f00 	cmp.w	sl, #0
 801e1f8:	d127      	bne.n	801e24a <__ieee754_pow+0x1b2>
 801e1fa:	b124      	cbz	r4, 801e206 <__ieee754_pow+0x16e>
 801e1fc:	4b2c      	ldr	r3, [pc, #176]	; (801e2b0 <__ieee754_pow+0x218>)
 801e1fe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801e202:	429a      	cmp	r2, r3
 801e204:	d121      	bne.n	801e24a <__ieee754_pow+0x1b2>
 801e206:	f1b9 0f00 	cmp.w	r9, #0
 801e20a:	da05      	bge.n	801e218 <__ieee754_pow+0x180>
 801e20c:	4602      	mov	r2, r0
 801e20e:	460b      	mov	r3, r1
 801e210:	2000      	movs	r0, #0
 801e212:	4927      	ldr	r1, [pc, #156]	; (801e2b0 <__ieee754_pow+0x218>)
 801e214:	f7e2 fb1a 	bl	800084c <__aeabi_ddiv>
 801e218:	2d00      	cmp	r5, #0
 801e21a:	da9d      	bge.n	801e158 <__ieee754_pow+0xc0>
 801e21c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801e220:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801e224:	ea54 030b 	orrs.w	r3, r4, fp
 801e228:	d108      	bne.n	801e23c <__ieee754_pow+0x1a4>
 801e22a:	4602      	mov	r2, r0
 801e22c:	460b      	mov	r3, r1
 801e22e:	4610      	mov	r0, r2
 801e230:	4619      	mov	r1, r3
 801e232:	f7e2 f829 	bl	8000288 <__aeabi_dsub>
 801e236:	4602      	mov	r2, r0
 801e238:	460b      	mov	r3, r1
 801e23a:	e7ac      	b.n	801e196 <__ieee754_pow+0xfe>
 801e23c:	f1bb 0f01 	cmp.w	fp, #1
 801e240:	d18a      	bne.n	801e158 <__ieee754_pow+0xc0>
 801e242:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e246:	4619      	mov	r1, r3
 801e248:	e786      	b.n	801e158 <__ieee754_pow+0xc0>
 801e24a:	0fed      	lsrs	r5, r5, #31
 801e24c:	1e6b      	subs	r3, r5, #1
 801e24e:	930d      	str	r3, [sp, #52]	; 0x34
 801e250:	ea5b 0303 	orrs.w	r3, fp, r3
 801e254:	d102      	bne.n	801e25c <__ieee754_pow+0x1c4>
 801e256:	4632      	mov	r2, r6
 801e258:	463b      	mov	r3, r7
 801e25a:	e7e8      	b.n	801e22e <__ieee754_pow+0x196>
 801e25c:	4b16      	ldr	r3, [pc, #88]	; (801e2b8 <__ieee754_pow+0x220>)
 801e25e:	4598      	cmp	r8, r3
 801e260:	f340 80fe 	ble.w	801e460 <__ieee754_pow+0x3c8>
 801e264:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801e268:	4598      	cmp	r8, r3
 801e26a:	dd0a      	ble.n	801e282 <__ieee754_pow+0x1ea>
 801e26c:	4b0f      	ldr	r3, [pc, #60]	; (801e2ac <__ieee754_pow+0x214>)
 801e26e:	429c      	cmp	r4, r3
 801e270:	dc0d      	bgt.n	801e28e <__ieee754_pow+0x1f6>
 801e272:	f1b9 0f00 	cmp.w	r9, #0
 801e276:	f6bf af6d 	bge.w	801e154 <__ieee754_pow+0xbc>
 801e27a:	a307      	add	r3, pc, #28	; (adr r3, 801e298 <__ieee754_pow+0x200>)
 801e27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e280:	e79f      	b.n	801e1c2 <__ieee754_pow+0x12a>
 801e282:	4b0e      	ldr	r3, [pc, #56]	; (801e2bc <__ieee754_pow+0x224>)
 801e284:	429c      	cmp	r4, r3
 801e286:	ddf4      	ble.n	801e272 <__ieee754_pow+0x1da>
 801e288:	4b09      	ldr	r3, [pc, #36]	; (801e2b0 <__ieee754_pow+0x218>)
 801e28a:	429c      	cmp	r4, r3
 801e28c:	dd18      	ble.n	801e2c0 <__ieee754_pow+0x228>
 801e28e:	f1b9 0f00 	cmp.w	r9, #0
 801e292:	dcf2      	bgt.n	801e27a <__ieee754_pow+0x1e2>
 801e294:	e75e      	b.n	801e154 <__ieee754_pow+0xbc>
 801e296:	bf00      	nop
 801e298:	8800759c 	.word	0x8800759c
 801e29c:	7e37e43c 	.word	0x7e37e43c
 801e2a0:	7ff00000 	.word	0x7ff00000
 801e2a4:	0801fd91 	.word	0x0801fd91
 801e2a8:	433fffff 	.word	0x433fffff
 801e2ac:	3fefffff 	.word	0x3fefffff
 801e2b0:	3ff00000 	.word	0x3ff00000
 801e2b4:	3fe00000 	.word	0x3fe00000
 801e2b8:	41e00000 	.word	0x41e00000
 801e2bc:	3feffffe 	.word	0x3feffffe
 801e2c0:	2200      	movs	r2, #0
 801e2c2:	4b63      	ldr	r3, [pc, #396]	; (801e450 <__ieee754_pow+0x3b8>)
 801e2c4:	f7e1 ffe0 	bl	8000288 <__aeabi_dsub>
 801e2c8:	a355      	add	r3, pc, #340	; (adr r3, 801e420 <__ieee754_pow+0x388>)
 801e2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2ce:	4604      	mov	r4, r0
 801e2d0:	460d      	mov	r5, r1
 801e2d2:	f7e2 f991 	bl	80005f8 <__aeabi_dmul>
 801e2d6:	a354      	add	r3, pc, #336	; (adr r3, 801e428 <__ieee754_pow+0x390>)
 801e2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2dc:	4606      	mov	r6, r0
 801e2de:	460f      	mov	r7, r1
 801e2e0:	4620      	mov	r0, r4
 801e2e2:	4629      	mov	r1, r5
 801e2e4:	f7e2 f988 	bl	80005f8 <__aeabi_dmul>
 801e2e8:	2200      	movs	r2, #0
 801e2ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e2ee:	4b59      	ldr	r3, [pc, #356]	; (801e454 <__ieee754_pow+0x3bc>)
 801e2f0:	4620      	mov	r0, r4
 801e2f2:	4629      	mov	r1, r5
 801e2f4:	f7e2 f980 	bl	80005f8 <__aeabi_dmul>
 801e2f8:	4602      	mov	r2, r0
 801e2fa:	460b      	mov	r3, r1
 801e2fc:	a14c      	add	r1, pc, #304	; (adr r1, 801e430 <__ieee754_pow+0x398>)
 801e2fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e302:	f7e1 ffc1 	bl	8000288 <__aeabi_dsub>
 801e306:	4622      	mov	r2, r4
 801e308:	462b      	mov	r3, r5
 801e30a:	f7e2 f975 	bl	80005f8 <__aeabi_dmul>
 801e30e:	4602      	mov	r2, r0
 801e310:	460b      	mov	r3, r1
 801e312:	2000      	movs	r0, #0
 801e314:	4950      	ldr	r1, [pc, #320]	; (801e458 <__ieee754_pow+0x3c0>)
 801e316:	f7e1 ffb7 	bl	8000288 <__aeabi_dsub>
 801e31a:	4622      	mov	r2, r4
 801e31c:	462b      	mov	r3, r5
 801e31e:	4680      	mov	r8, r0
 801e320:	4689      	mov	r9, r1
 801e322:	4620      	mov	r0, r4
 801e324:	4629      	mov	r1, r5
 801e326:	f7e2 f967 	bl	80005f8 <__aeabi_dmul>
 801e32a:	4602      	mov	r2, r0
 801e32c:	460b      	mov	r3, r1
 801e32e:	4640      	mov	r0, r8
 801e330:	4649      	mov	r1, r9
 801e332:	f7e2 f961 	bl	80005f8 <__aeabi_dmul>
 801e336:	a340      	add	r3, pc, #256	; (adr r3, 801e438 <__ieee754_pow+0x3a0>)
 801e338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e33c:	f7e2 f95c 	bl	80005f8 <__aeabi_dmul>
 801e340:	4602      	mov	r2, r0
 801e342:	460b      	mov	r3, r1
 801e344:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e348:	f7e1 ff9e 	bl	8000288 <__aeabi_dsub>
 801e34c:	4602      	mov	r2, r0
 801e34e:	460b      	mov	r3, r1
 801e350:	4604      	mov	r4, r0
 801e352:	460d      	mov	r5, r1
 801e354:	4630      	mov	r0, r6
 801e356:	4639      	mov	r1, r7
 801e358:	f7e1 ff98 	bl	800028c <__adddf3>
 801e35c:	2000      	movs	r0, #0
 801e35e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801e362:	4632      	mov	r2, r6
 801e364:	463b      	mov	r3, r7
 801e366:	f7e1 ff8f 	bl	8000288 <__aeabi_dsub>
 801e36a:	4602      	mov	r2, r0
 801e36c:	460b      	mov	r3, r1
 801e36e:	4620      	mov	r0, r4
 801e370:	4629      	mov	r1, r5
 801e372:	f7e1 ff89 	bl	8000288 <__aeabi_dsub>
 801e376:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e378:	f10b 33ff 	add.w	r3, fp, #4294967295
 801e37c:	4313      	orrs	r3, r2
 801e37e:	4606      	mov	r6, r0
 801e380:	460f      	mov	r7, r1
 801e382:	f040 81eb 	bne.w	801e75c <__ieee754_pow+0x6c4>
 801e386:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801e440 <__ieee754_pow+0x3a8>
 801e38a:	e9dd 4500 	ldrd	r4, r5, [sp]
 801e38e:	2400      	movs	r4, #0
 801e390:	4622      	mov	r2, r4
 801e392:	462b      	mov	r3, r5
 801e394:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e398:	ed8d 7b02 	vstr	d7, [sp, #8]
 801e39c:	f7e1 ff74 	bl	8000288 <__aeabi_dsub>
 801e3a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e3a4:	f7e2 f928 	bl	80005f8 <__aeabi_dmul>
 801e3a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e3ac:	4680      	mov	r8, r0
 801e3ae:	4689      	mov	r9, r1
 801e3b0:	4630      	mov	r0, r6
 801e3b2:	4639      	mov	r1, r7
 801e3b4:	f7e2 f920 	bl	80005f8 <__aeabi_dmul>
 801e3b8:	4602      	mov	r2, r0
 801e3ba:	460b      	mov	r3, r1
 801e3bc:	4640      	mov	r0, r8
 801e3be:	4649      	mov	r1, r9
 801e3c0:	f7e1 ff64 	bl	800028c <__adddf3>
 801e3c4:	4622      	mov	r2, r4
 801e3c6:	462b      	mov	r3, r5
 801e3c8:	4680      	mov	r8, r0
 801e3ca:	4689      	mov	r9, r1
 801e3cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e3d0:	f7e2 f912 	bl	80005f8 <__aeabi_dmul>
 801e3d4:	460b      	mov	r3, r1
 801e3d6:	4604      	mov	r4, r0
 801e3d8:	460d      	mov	r5, r1
 801e3da:	4602      	mov	r2, r0
 801e3dc:	4649      	mov	r1, r9
 801e3de:	4640      	mov	r0, r8
 801e3e0:	e9cd 4500 	strd	r4, r5, [sp]
 801e3e4:	f7e1 ff52 	bl	800028c <__adddf3>
 801e3e8:	4b1c      	ldr	r3, [pc, #112]	; (801e45c <__ieee754_pow+0x3c4>)
 801e3ea:	4299      	cmp	r1, r3
 801e3ec:	4606      	mov	r6, r0
 801e3ee:	460f      	mov	r7, r1
 801e3f0:	468b      	mov	fp, r1
 801e3f2:	f340 82f7 	ble.w	801e9e4 <__ieee754_pow+0x94c>
 801e3f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801e3fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801e3fe:	4303      	orrs	r3, r0
 801e400:	f000 81ea 	beq.w	801e7d8 <__ieee754_pow+0x740>
 801e404:	a310      	add	r3, pc, #64	; (adr r3, 801e448 <__ieee754_pow+0x3b0>)
 801e406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e40a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e40e:	f7e2 f8f3 	bl	80005f8 <__aeabi_dmul>
 801e412:	a30d      	add	r3, pc, #52	; (adr r3, 801e448 <__ieee754_pow+0x3b0>)
 801e414:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e418:	e6d5      	b.n	801e1c6 <__ieee754_pow+0x12e>
 801e41a:	bf00      	nop
 801e41c:	f3af 8000 	nop.w
 801e420:	60000000 	.word	0x60000000
 801e424:	3ff71547 	.word	0x3ff71547
 801e428:	f85ddf44 	.word	0xf85ddf44
 801e42c:	3e54ae0b 	.word	0x3e54ae0b
 801e430:	55555555 	.word	0x55555555
 801e434:	3fd55555 	.word	0x3fd55555
 801e438:	652b82fe 	.word	0x652b82fe
 801e43c:	3ff71547 	.word	0x3ff71547
 801e440:	00000000 	.word	0x00000000
 801e444:	bff00000 	.word	0xbff00000
 801e448:	8800759c 	.word	0x8800759c
 801e44c:	7e37e43c 	.word	0x7e37e43c
 801e450:	3ff00000 	.word	0x3ff00000
 801e454:	3fd00000 	.word	0x3fd00000
 801e458:	3fe00000 	.word	0x3fe00000
 801e45c:	408fffff 	.word	0x408fffff
 801e460:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801e464:	f04f 0200 	mov.w	r2, #0
 801e468:	da05      	bge.n	801e476 <__ieee754_pow+0x3de>
 801e46a:	4bd3      	ldr	r3, [pc, #844]	; (801e7b8 <__ieee754_pow+0x720>)
 801e46c:	f7e2 f8c4 	bl	80005f8 <__aeabi_dmul>
 801e470:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801e474:	460c      	mov	r4, r1
 801e476:	1523      	asrs	r3, r4, #20
 801e478:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801e47c:	4413      	add	r3, r2
 801e47e:	9309      	str	r3, [sp, #36]	; 0x24
 801e480:	4bce      	ldr	r3, [pc, #824]	; (801e7bc <__ieee754_pow+0x724>)
 801e482:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801e486:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801e48a:	429c      	cmp	r4, r3
 801e48c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801e490:	dd08      	ble.n	801e4a4 <__ieee754_pow+0x40c>
 801e492:	4bcb      	ldr	r3, [pc, #812]	; (801e7c0 <__ieee754_pow+0x728>)
 801e494:	429c      	cmp	r4, r3
 801e496:	f340 815e 	ble.w	801e756 <__ieee754_pow+0x6be>
 801e49a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e49c:	3301      	adds	r3, #1
 801e49e:	9309      	str	r3, [sp, #36]	; 0x24
 801e4a0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801e4a4:	f04f 0a00 	mov.w	sl, #0
 801e4a8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801e4ac:	930c      	str	r3, [sp, #48]	; 0x30
 801e4ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e4b0:	4bc4      	ldr	r3, [pc, #784]	; (801e7c4 <__ieee754_pow+0x72c>)
 801e4b2:	4413      	add	r3, r2
 801e4b4:	ed93 7b00 	vldr	d7, [r3]
 801e4b8:	4629      	mov	r1, r5
 801e4ba:	ec53 2b17 	vmov	r2, r3, d7
 801e4be:	ed8d 7b06 	vstr	d7, [sp, #24]
 801e4c2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801e4c6:	f7e1 fedf 	bl	8000288 <__aeabi_dsub>
 801e4ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801e4ce:	4606      	mov	r6, r0
 801e4d0:	460f      	mov	r7, r1
 801e4d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e4d6:	f7e1 fed9 	bl	800028c <__adddf3>
 801e4da:	4602      	mov	r2, r0
 801e4dc:	460b      	mov	r3, r1
 801e4de:	2000      	movs	r0, #0
 801e4e0:	49b9      	ldr	r1, [pc, #740]	; (801e7c8 <__ieee754_pow+0x730>)
 801e4e2:	f7e2 f9b3 	bl	800084c <__aeabi_ddiv>
 801e4e6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801e4ea:	4602      	mov	r2, r0
 801e4ec:	460b      	mov	r3, r1
 801e4ee:	4630      	mov	r0, r6
 801e4f0:	4639      	mov	r1, r7
 801e4f2:	f7e2 f881 	bl	80005f8 <__aeabi_dmul>
 801e4f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801e4fa:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801e4fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801e502:	2300      	movs	r3, #0
 801e504:	9302      	str	r3, [sp, #8]
 801e506:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801e50a:	106d      	asrs	r5, r5, #1
 801e50c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801e510:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801e514:	2200      	movs	r2, #0
 801e516:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801e51a:	4640      	mov	r0, r8
 801e51c:	4649      	mov	r1, r9
 801e51e:	4614      	mov	r4, r2
 801e520:	461d      	mov	r5, r3
 801e522:	f7e2 f869 	bl	80005f8 <__aeabi_dmul>
 801e526:	4602      	mov	r2, r0
 801e528:	460b      	mov	r3, r1
 801e52a:	4630      	mov	r0, r6
 801e52c:	4639      	mov	r1, r7
 801e52e:	f7e1 feab 	bl	8000288 <__aeabi_dsub>
 801e532:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e536:	4606      	mov	r6, r0
 801e538:	460f      	mov	r7, r1
 801e53a:	4620      	mov	r0, r4
 801e53c:	4629      	mov	r1, r5
 801e53e:	f7e1 fea3 	bl	8000288 <__aeabi_dsub>
 801e542:	4602      	mov	r2, r0
 801e544:	460b      	mov	r3, r1
 801e546:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801e54a:	f7e1 fe9d 	bl	8000288 <__aeabi_dsub>
 801e54e:	4642      	mov	r2, r8
 801e550:	464b      	mov	r3, r9
 801e552:	f7e2 f851 	bl	80005f8 <__aeabi_dmul>
 801e556:	4602      	mov	r2, r0
 801e558:	460b      	mov	r3, r1
 801e55a:	4630      	mov	r0, r6
 801e55c:	4639      	mov	r1, r7
 801e55e:	f7e1 fe93 	bl	8000288 <__aeabi_dsub>
 801e562:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801e566:	f7e2 f847 	bl	80005f8 <__aeabi_dmul>
 801e56a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e56e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e572:	4610      	mov	r0, r2
 801e574:	4619      	mov	r1, r3
 801e576:	f7e2 f83f 	bl	80005f8 <__aeabi_dmul>
 801e57a:	a37b      	add	r3, pc, #492	; (adr r3, 801e768 <__ieee754_pow+0x6d0>)
 801e57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e580:	4604      	mov	r4, r0
 801e582:	460d      	mov	r5, r1
 801e584:	f7e2 f838 	bl	80005f8 <__aeabi_dmul>
 801e588:	a379      	add	r3, pc, #484	; (adr r3, 801e770 <__ieee754_pow+0x6d8>)
 801e58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e58e:	f7e1 fe7d 	bl	800028c <__adddf3>
 801e592:	4622      	mov	r2, r4
 801e594:	462b      	mov	r3, r5
 801e596:	f7e2 f82f 	bl	80005f8 <__aeabi_dmul>
 801e59a:	a377      	add	r3, pc, #476	; (adr r3, 801e778 <__ieee754_pow+0x6e0>)
 801e59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5a0:	f7e1 fe74 	bl	800028c <__adddf3>
 801e5a4:	4622      	mov	r2, r4
 801e5a6:	462b      	mov	r3, r5
 801e5a8:	f7e2 f826 	bl	80005f8 <__aeabi_dmul>
 801e5ac:	a374      	add	r3, pc, #464	; (adr r3, 801e780 <__ieee754_pow+0x6e8>)
 801e5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5b2:	f7e1 fe6b 	bl	800028c <__adddf3>
 801e5b6:	4622      	mov	r2, r4
 801e5b8:	462b      	mov	r3, r5
 801e5ba:	f7e2 f81d 	bl	80005f8 <__aeabi_dmul>
 801e5be:	a372      	add	r3, pc, #456	; (adr r3, 801e788 <__ieee754_pow+0x6f0>)
 801e5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5c4:	f7e1 fe62 	bl	800028c <__adddf3>
 801e5c8:	4622      	mov	r2, r4
 801e5ca:	462b      	mov	r3, r5
 801e5cc:	f7e2 f814 	bl	80005f8 <__aeabi_dmul>
 801e5d0:	a36f      	add	r3, pc, #444	; (adr r3, 801e790 <__ieee754_pow+0x6f8>)
 801e5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5d6:	f7e1 fe59 	bl	800028c <__adddf3>
 801e5da:	4622      	mov	r2, r4
 801e5dc:	4606      	mov	r6, r0
 801e5de:	460f      	mov	r7, r1
 801e5e0:	462b      	mov	r3, r5
 801e5e2:	4620      	mov	r0, r4
 801e5e4:	4629      	mov	r1, r5
 801e5e6:	f7e2 f807 	bl	80005f8 <__aeabi_dmul>
 801e5ea:	4602      	mov	r2, r0
 801e5ec:	460b      	mov	r3, r1
 801e5ee:	4630      	mov	r0, r6
 801e5f0:	4639      	mov	r1, r7
 801e5f2:	f7e2 f801 	bl	80005f8 <__aeabi_dmul>
 801e5f6:	4642      	mov	r2, r8
 801e5f8:	4604      	mov	r4, r0
 801e5fa:	460d      	mov	r5, r1
 801e5fc:	464b      	mov	r3, r9
 801e5fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e602:	f7e1 fe43 	bl	800028c <__adddf3>
 801e606:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e60a:	f7e1 fff5 	bl	80005f8 <__aeabi_dmul>
 801e60e:	4622      	mov	r2, r4
 801e610:	462b      	mov	r3, r5
 801e612:	f7e1 fe3b 	bl	800028c <__adddf3>
 801e616:	4642      	mov	r2, r8
 801e618:	4606      	mov	r6, r0
 801e61a:	460f      	mov	r7, r1
 801e61c:	464b      	mov	r3, r9
 801e61e:	4640      	mov	r0, r8
 801e620:	4649      	mov	r1, r9
 801e622:	f7e1 ffe9 	bl	80005f8 <__aeabi_dmul>
 801e626:	2200      	movs	r2, #0
 801e628:	4b68      	ldr	r3, [pc, #416]	; (801e7cc <__ieee754_pow+0x734>)
 801e62a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801e62e:	f7e1 fe2d 	bl	800028c <__adddf3>
 801e632:	4632      	mov	r2, r6
 801e634:	463b      	mov	r3, r7
 801e636:	f7e1 fe29 	bl	800028c <__adddf3>
 801e63a:	9802      	ldr	r0, [sp, #8]
 801e63c:	460d      	mov	r5, r1
 801e63e:	4604      	mov	r4, r0
 801e640:	4602      	mov	r2, r0
 801e642:	460b      	mov	r3, r1
 801e644:	4640      	mov	r0, r8
 801e646:	4649      	mov	r1, r9
 801e648:	f7e1 ffd6 	bl	80005f8 <__aeabi_dmul>
 801e64c:	2200      	movs	r2, #0
 801e64e:	4680      	mov	r8, r0
 801e650:	4689      	mov	r9, r1
 801e652:	4b5e      	ldr	r3, [pc, #376]	; (801e7cc <__ieee754_pow+0x734>)
 801e654:	4620      	mov	r0, r4
 801e656:	4629      	mov	r1, r5
 801e658:	f7e1 fe16 	bl	8000288 <__aeabi_dsub>
 801e65c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801e660:	f7e1 fe12 	bl	8000288 <__aeabi_dsub>
 801e664:	4602      	mov	r2, r0
 801e666:	460b      	mov	r3, r1
 801e668:	4630      	mov	r0, r6
 801e66a:	4639      	mov	r1, r7
 801e66c:	f7e1 fe0c 	bl	8000288 <__aeabi_dsub>
 801e670:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e674:	f7e1 ffc0 	bl	80005f8 <__aeabi_dmul>
 801e678:	4622      	mov	r2, r4
 801e67a:	4606      	mov	r6, r0
 801e67c:	460f      	mov	r7, r1
 801e67e:	462b      	mov	r3, r5
 801e680:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e684:	f7e1 ffb8 	bl	80005f8 <__aeabi_dmul>
 801e688:	4602      	mov	r2, r0
 801e68a:	460b      	mov	r3, r1
 801e68c:	4630      	mov	r0, r6
 801e68e:	4639      	mov	r1, r7
 801e690:	f7e1 fdfc 	bl	800028c <__adddf3>
 801e694:	4606      	mov	r6, r0
 801e696:	460f      	mov	r7, r1
 801e698:	4602      	mov	r2, r0
 801e69a:	460b      	mov	r3, r1
 801e69c:	4640      	mov	r0, r8
 801e69e:	4649      	mov	r1, r9
 801e6a0:	f7e1 fdf4 	bl	800028c <__adddf3>
 801e6a4:	9802      	ldr	r0, [sp, #8]
 801e6a6:	a33c      	add	r3, pc, #240	; (adr r3, 801e798 <__ieee754_pow+0x700>)
 801e6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6ac:	4604      	mov	r4, r0
 801e6ae:	460d      	mov	r5, r1
 801e6b0:	f7e1 ffa2 	bl	80005f8 <__aeabi_dmul>
 801e6b4:	4642      	mov	r2, r8
 801e6b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e6ba:	464b      	mov	r3, r9
 801e6bc:	4620      	mov	r0, r4
 801e6be:	4629      	mov	r1, r5
 801e6c0:	f7e1 fde2 	bl	8000288 <__aeabi_dsub>
 801e6c4:	4602      	mov	r2, r0
 801e6c6:	460b      	mov	r3, r1
 801e6c8:	4630      	mov	r0, r6
 801e6ca:	4639      	mov	r1, r7
 801e6cc:	f7e1 fddc 	bl	8000288 <__aeabi_dsub>
 801e6d0:	a333      	add	r3, pc, #204	; (adr r3, 801e7a0 <__ieee754_pow+0x708>)
 801e6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6d6:	f7e1 ff8f 	bl	80005f8 <__aeabi_dmul>
 801e6da:	a333      	add	r3, pc, #204	; (adr r3, 801e7a8 <__ieee754_pow+0x710>)
 801e6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6e0:	4606      	mov	r6, r0
 801e6e2:	460f      	mov	r7, r1
 801e6e4:	4620      	mov	r0, r4
 801e6e6:	4629      	mov	r1, r5
 801e6e8:	f7e1 ff86 	bl	80005f8 <__aeabi_dmul>
 801e6ec:	4602      	mov	r2, r0
 801e6ee:	460b      	mov	r3, r1
 801e6f0:	4630      	mov	r0, r6
 801e6f2:	4639      	mov	r1, r7
 801e6f4:	f7e1 fdca 	bl	800028c <__adddf3>
 801e6f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e6fa:	4b35      	ldr	r3, [pc, #212]	; (801e7d0 <__ieee754_pow+0x738>)
 801e6fc:	4413      	add	r3, r2
 801e6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e702:	f7e1 fdc3 	bl	800028c <__adddf3>
 801e706:	4604      	mov	r4, r0
 801e708:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e70a:	460d      	mov	r5, r1
 801e70c:	f7e1 ff0a 	bl	8000524 <__aeabi_i2d>
 801e710:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e712:	4b30      	ldr	r3, [pc, #192]	; (801e7d4 <__ieee754_pow+0x73c>)
 801e714:	4413      	add	r3, r2
 801e716:	e9d3 8900 	ldrd	r8, r9, [r3]
 801e71a:	4606      	mov	r6, r0
 801e71c:	460f      	mov	r7, r1
 801e71e:	4622      	mov	r2, r4
 801e720:	462b      	mov	r3, r5
 801e722:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e726:	f7e1 fdb1 	bl	800028c <__adddf3>
 801e72a:	4642      	mov	r2, r8
 801e72c:	464b      	mov	r3, r9
 801e72e:	f7e1 fdad 	bl	800028c <__adddf3>
 801e732:	4632      	mov	r2, r6
 801e734:	463b      	mov	r3, r7
 801e736:	f7e1 fda9 	bl	800028c <__adddf3>
 801e73a:	9802      	ldr	r0, [sp, #8]
 801e73c:	4632      	mov	r2, r6
 801e73e:	463b      	mov	r3, r7
 801e740:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801e744:	f7e1 fda0 	bl	8000288 <__aeabi_dsub>
 801e748:	4642      	mov	r2, r8
 801e74a:	464b      	mov	r3, r9
 801e74c:	f7e1 fd9c 	bl	8000288 <__aeabi_dsub>
 801e750:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e754:	e607      	b.n	801e366 <__ieee754_pow+0x2ce>
 801e756:	f04f 0a01 	mov.w	sl, #1
 801e75a:	e6a5      	b.n	801e4a8 <__ieee754_pow+0x410>
 801e75c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801e7b0 <__ieee754_pow+0x718>
 801e760:	e613      	b.n	801e38a <__ieee754_pow+0x2f2>
 801e762:	bf00      	nop
 801e764:	f3af 8000 	nop.w
 801e768:	4a454eef 	.word	0x4a454eef
 801e76c:	3fca7e28 	.word	0x3fca7e28
 801e770:	93c9db65 	.word	0x93c9db65
 801e774:	3fcd864a 	.word	0x3fcd864a
 801e778:	a91d4101 	.word	0xa91d4101
 801e77c:	3fd17460 	.word	0x3fd17460
 801e780:	518f264d 	.word	0x518f264d
 801e784:	3fd55555 	.word	0x3fd55555
 801e788:	db6fabff 	.word	0xdb6fabff
 801e78c:	3fdb6db6 	.word	0x3fdb6db6
 801e790:	33333303 	.word	0x33333303
 801e794:	3fe33333 	.word	0x3fe33333
 801e798:	e0000000 	.word	0xe0000000
 801e79c:	3feec709 	.word	0x3feec709
 801e7a0:	dc3a03fd 	.word	0xdc3a03fd
 801e7a4:	3feec709 	.word	0x3feec709
 801e7a8:	145b01f5 	.word	0x145b01f5
 801e7ac:	be3e2fe0 	.word	0xbe3e2fe0
 801e7b0:	00000000 	.word	0x00000000
 801e7b4:	3ff00000 	.word	0x3ff00000
 801e7b8:	43400000 	.word	0x43400000
 801e7bc:	0003988e 	.word	0x0003988e
 801e7c0:	000bb679 	.word	0x000bb679
 801e7c4:	0801fdc8 	.word	0x0801fdc8
 801e7c8:	3ff00000 	.word	0x3ff00000
 801e7cc:	40080000 	.word	0x40080000
 801e7d0:	0801fde8 	.word	0x0801fde8
 801e7d4:	0801fdd8 	.word	0x0801fdd8
 801e7d8:	a3b4      	add	r3, pc, #720	; (adr r3, 801eaac <__ieee754_pow+0xa14>)
 801e7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7de:	4640      	mov	r0, r8
 801e7e0:	4649      	mov	r1, r9
 801e7e2:	f7e1 fd53 	bl	800028c <__adddf3>
 801e7e6:	4622      	mov	r2, r4
 801e7e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801e7ec:	462b      	mov	r3, r5
 801e7ee:	4630      	mov	r0, r6
 801e7f0:	4639      	mov	r1, r7
 801e7f2:	f7e1 fd49 	bl	8000288 <__aeabi_dsub>
 801e7f6:	4602      	mov	r2, r0
 801e7f8:	460b      	mov	r3, r1
 801e7fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e7fe:	f7e2 f98b 	bl	8000b18 <__aeabi_dcmpgt>
 801e802:	2800      	cmp	r0, #0
 801e804:	f47f adfe 	bne.w	801e404 <__ieee754_pow+0x36c>
 801e808:	4aa3      	ldr	r2, [pc, #652]	; (801ea98 <__ieee754_pow+0xa00>)
 801e80a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801e80e:	4293      	cmp	r3, r2
 801e810:	f340 810a 	ble.w	801ea28 <__ieee754_pow+0x990>
 801e814:	151b      	asrs	r3, r3, #20
 801e816:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801e81a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801e81e:	fa4a f303 	asr.w	r3, sl, r3
 801e822:	445b      	add	r3, fp
 801e824:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801e828:	4e9c      	ldr	r6, [pc, #624]	; (801ea9c <__ieee754_pow+0xa04>)
 801e82a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801e82e:	4116      	asrs	r6, r2
 801e830:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801e834:	2000      	movs	r0, #0
 801e836:	ea23 0106 	bic.w	r1, r3, r6
 801e83a:	f1c2 0214 	rsb	r2, r2, #20
 801e83e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801e842:	fa4a fa02 	asr.w	sl, sl, r2
 801e846:	f1bb 0f00 	cmp.w	fp, #0
 801e84a:	4602      	mov	r2, r0
 801e84c:	460b      	mov	r3, r1
 801e84e:	4620      	mov	r0, r4
 801e850:	4629      	mov	r1, r5
 801e852:	bfb8      	it	lt
 801e854:	f1ca 0a00 	rsblt	sl, sl, #0
 801e858:	f7e1 fd16 	bl	8000288 <__aeabi_dsub>
 801e85c:	e9cd 0100 	strd	r0, r1, [sp]
 801e860:	4642      	mov	r2, r8
 801e862:	464b      	mov	r3, r9
 801e864:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e868:	f7e1 fd10 	bl	800028c <__adddf3>
 801e86c:	2000      	movs	r0, #0
 801e86e:	a378      	add	r3, pc, #480	; (adr r3, 801ea50 <__ieee754_pow+0x9b8>)
 801e870:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e874:	4604      	mov	r4, r0
 801e876:	460d      	mov	r5, r1
 801e878:	f7e1 febe 	bl	80005f8 <__aeabi_dmul>
 801e87c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e880:	4606      	mov	r6, r0
 801e882:	460f      	mov	r7, r1
 801e884:	4620      	mov	r0, r4
 801e886:	4629      	mov	r1, r5
 801e888:	f7e1 fcfe 	bl	8000288 <__aeabi_dsub>
 801e88c:	4602      	mov	r2, r0
 801e88e:	460b      	mov	r3, r1
 801e890:	4640      	mov	r0, r8
 801e892:	4649      	mov	r1, r9
 801e894:	f7e1 fcf8 	bl	8000288 <__aeabi_dsub>
 801e898:	a36f      	add	r3, pc, #444	; (adr r3, 801ea58 <__ieee754_pow+0x9c0>)
 801e89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e89e:	f7e1 feab 	bl	80005f8 <__aeabi_dmul>
 801e8a2:	a36f      	add	r3, pc, #444	; (adr r3, 801ea60 <__ieee754_pow+0x9c8>)
 801e8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8a8:	4680      	mov	r8, r0
 801e8aa:	4689      	mov	r9, r1
 801e8ac:	4620      	mov	r0, r4
 801e8ae:	4629      	mov	r1, r5
 801e8b0:	f7e1 fea2 	bl	80005f8 <__aeabi_dmul>
 801e8b4:	4602      	mov	r2, r0
 801e8b6:	460b      	mov	r3, r1
 801e8b8:	4640      	mov	r0, r8
 801e8ba:	4649      	mov	r1, r9
 801e8bc:	f7e1 fce6 	bl	800028c <__adddf3>
 801e8c0:	4604      	mov	r4, r0
 801e8c2:	460d      	mov	r5, r1
 801e8c4:	4602      	mov	r2, r0
 801e8c6:	460b      	mov	r3, r1
 801e8c8:	4630      	mov	r0, r6
 801e8ca:	4639      	mov	r1, r7
 801e8cc:	f7e1 fcde 	bl	800028c <__adddf3>
 801e8d0:	4632      	mov	r2, r6
 801e8d2:	463b      	mov	r3, r7
 801e8d4:	4680      	mov	r8, r0
 801e8d6:	4689      	mov	r9, r1
 801e8d8:	f7e1 fcd6 	bl	8000288 <__aeabi_dsub>
 801e8dc:	4602      	mov	r2, r0
 801e8de:	460b      	mov	r3, r1
 801e8e0:	4620      	mov	r0, r4
 801e8e2:	4629      	mov	r1, r5
 801e8e4:	f7e1 fcd0 	bl	8000288 <__aeabi_dsub>
 801e8e8:	4642      	mov	r2, r8
 801e8ea:	4606      	mov	r6, r0
 801e8ec:	460f      	mov	r7, r1
 801e8ee:	464b      	mov	r3, r9
 801e8f0:	4640      	mov	r0, r8
 801e8f2:	4649      	mov	r1, r9
 801e8f4:	f7e1 fe80 	bl	80005f8 <__aeabi_dmul>
 801e8f8:	a35b      	add	r3, pc, #364	; (adr r3, 801ea68 <__ieee754_pow+0x9d0>)
 801e8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8fe:	4604      	mov	r4, r0
 801e900:	460d      	mov	r5, r1
 801e902:	f7e1 fe79 	bl	80005f8 <__aeabi_dmul>
 801e906:	a35a      	add	r3, pc, #360	; (adr r3, 801ea70 <__ieee754_pow+0x9d8>)
 801e908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e90c:	f7e1 fcbc 	bl	8000288 <__aeabi_dsub>
 801e910:	4622      	mov	r2, r4
 801e912:	462b      	mov	r3, r5
 801e914:	f7e1 fe70 	bl	80005f8 <__aeabi_dmul>
 801e918:	a357      	add	r3, pc, #348	; (adr r3, 801ea78 <__ieee754_pow+0x9e0>)
 801e91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e91e:	f7e1 fcb5 	bl	800028c <__adddf3>
 801e922:	4622      	mov	r2, r4
 801e924:	462b      	mov	r3, r5
 801e926:	f7e1 fe67 	bl	80005f8 <__aeabi_dmul>
 801e92a:	a355      	add	r3, pc, #340	; (adr r3, 801ea80 <__ieee754_pow+0x9e8>)
 801e92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e930:	f7e1 fcaa 	bl	8000288 <__aeabi_dsub>
 801e934:	4622      	mov	r2, r4
 801e936:	462b      	mov	r3, r5
 801e938:	f7e1 fe5e 	bl	80005f8 <__aeabi_dmul>
 801e93c:	a352      	add	r3, pc, #328	; (adr r3, 801ea88 <__ieee754_pow+0x9f0>)
 801e93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e942:	f7e1 fca3 	bl	800028c <__adddf3>
 801e946:	4622      	mov	r2, r4
 801e948:	462b      	mov	r3, r5
 801e94a:	f7e1 fe55 	bl	80005f8 <__aeabi_dmul>
 801e94e:	4602      	mov	r2, r0
 801e950:	460b      	mov	r3, r1
 801e952:	4640      	mov	r0, r8
 801e954:	4649      	mov	r1, r9
 801e956:	f7e1 fc97 	bl	8000288 <__aeabi_dsub>
 801e95a:	4604      	mov	r4, r0
 801e95c:	460d      	mov	r5, r1
 801e95e:	4602      	mov	r2, r0
 801e960:	460b      	mov	r3, r1
 801e962:	4640      	mov	r0, r8
 801e964:	4649      	mov	r1, r9
 801e966:	f7e1 fe47 	bl	80005f8 <__aeabi_dmul>
 801e96a:	2200      	movs	r2, #0
 801e96c:	e9cd 0100 	strd	r0, r1, [sp]
 801e970:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801e974:	4620      	mov	r0, r4
 801e976:	4629      	mov	r1, r5
 801e978:	f7e1 fc86 	bl	8000288 <__aeabi_dsub>
 801e97c:	4602      	mov	r2, r0
 801e97e:	460b      	mov	r3, r1
 801e980:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e984:	f7e1 ff62 	bl	800084c <__aeabi_ddiv>
 801e988:	4632      	mov	r2, r6
 801e98a:	4604      	mov	r4, r0
 801e98c:	460d      	mov	r5, r1
 801e98e:	463b      	mov	r3, r7
 801e990:	4640      	mov	r0, r8
 801e992:	4649      	mov	r1, r9
 801e994:	f7e1 fe30 	bl	80005f8 <__aeabi_dmul>
 801e998:	4632      	mov	r2, r6
 801e99a:	463b      	mov	r3, r7
 801e99c:	f7e1 fc76 	bl	800028c <__adddf3>
 801e9a0:	4602      	mov	r2, r0
 801e9a2:	460b      	mov	r3, r1
 801e9a4:	4620      	mov	r0, r4
 801e9a6:	4629      	mov	r1, r5
 801e9a8:	f7e1 fc6e 	bl	8000288 <__aeabi_dsub>
 801e9ac:	4642      	mov	r2, r8
 801e9ae:	464b      	mov	r3, r9
 801e9b0:	f7e1 fc6a 	bl	8000288 <__aeabi_dsub>
 801e9b4:	4602      	mov	r2, r0
 801e9b6:	460b      	mov	r3, r1
 801e9b8:	2000      	movs	r0, #0
 801e9ba:	4939      	ldr	r1, [pc, #228]	; (801eaa0 <__ieee754_pow+0xa08>)
 801e9bc:	f7e1 fc64 	bl	8000288 <__aeabi_dsub>
 801e9c0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801e9c4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801e9c8:	4602      	mov	r2, r0
 801e9ca:	460b      	mov	r3, r1
 801e9cc:	da2f      	bge.n	801ea2e <__ieee754_pow+0x996>
 801e9ce:	4650      	mov	r0, sl
 801e9d0:	ec43 2b10 	vmov	d0, r2, r3
 801e9d4:	f000 f9c0 	bl	801ed58 <scalbn>
 801e9d8:	ec51 0b10 	vmov	r0, r1, d0
 801e9dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e9e0:	f7ff bbf1 	b.w	801e1c6 <__ieee754_pow+0x12e>
 801e9e4:	4b2f      	ldr	r3, [pc, #188]	; (801eaa4 <__ieee754_pow+0xa0c>)
 801e9e6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801e9ea:	429e      	cmp	r6, r3
 801e9ec:	f77f af0c 	ble.w	801e808 <__ieee754_pow+0x770>
 801e9f0:	4b2d      	ldr	r3, [pc, #180]	; (801eaa8 <__ieee754_pow+0xa10>)
 801e9f2:	440b      	add	r3, r1
 801e9f4:	4303      	orrs	r3, r0
 801e9f6:	d00b      	beq.n	801ea10 <__ieee754_pow+0x978>
 801e9f8:	a325      	add	r3, pc, #148	; (adr r3, 801ea90 <__ieee754_pow+0x9f8>)
 801e9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ea02:	f7e1 fdf9 	bl	80005f8 <__aeabi_dmul>
 801ea06:	a322      	add	r3, pc, #136	; (adr r3, 801ea90 <__ieee754_pow+0x9f8>)
 801ea08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea0c:	f7ff bbdb 	b.w	801e1c6 <__ieee754_pow+0x12e>
 801ea10:	4622      	mov	r2, r4
 801ea12:	462b      	mov	r3, r5
 801ea14:	f7e1 fc38 	bl	8000288 <__aeabi_dsub>
 801ea18:	4642      	mov	r2, r8
 801ea1a:	464b      	mov	r3, r9
 801ea1c:	f7e2 f872 	bl	8000b04 <__aeabi_dcmpge>
 801ea20:	2800      	cmp	r0, #0
 801ea22:	f43f aef1 	beq.w	801e808 <__ieee754_pow+0x770>
 801ea26:	e7e7      	b.n	801e9f8 <__ieee754_pow+0x960>
 801ea28:	f04f 0a00 	mov.w	sl, #0
 801ea2c:	e718      	b.n	801e860 <__ieee754_pow+0x7c8>
 801ea2e:	4621      	mov	r1, r4
 801ea30:	e7d4      	b.n	801e9dc <__ieee754_pow+0x944>
 801ea32:	2000      	movs	r0, #0
 801ea34:	491a      	ldr	r1, [pc, #104]	; (801eaa0 <__ieee754_pow+0xa08>)
 801ea36:	f7ff bb8f 	b.w	801e158 <__ieee754_pow+0xc0>
 801ea3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ea3e:	f7ff bb8b 	b.w	801e158 <__ieee754_pow+0xc0>
 801ea42:	4630      	mov	r0, r6
 801ea44:	4639      	mov	r1, r7
 801ea46:	f7ff bb87 	b.w	801e158 <__ieee754_pow+0xc0>
 801ea4a:	4693      	mov	fp, r2
 801ea4c:	f7ff bb98 	b.w	801e180 <__ieee754_pow+0xe8>
 801ea50:	00000000 	.word	0x00000000
 801ea54:	3fe62e43 	.word	0x3fe62e43
 801ea58:	fefa39ef 	.word	0xfefa39ef
 801ea5c:	3fe62e42 	.word	0x3fe62e42
 801ea60:	0ca86c39 	.word	0x0ca86c39
 801ea64:	be205c61 	.word	0xbe205c61
 801ea68:	72bea4d0 	.word	0x72bea4d0
 801ea6c:	3e663769 	.word	0x3e663769
 801ea70:	c5d26bf1 	.word	0xc5d26bf1
 801ea74:	3ebbbd41 	.word	0x3ebbbd41
 801ea78:	af25de2c 	.word	0xaf25de2c
 801ea7c:	3f11566a 	.word	0x3f11566a
 801ea80:	16bebd93 	.word	0x16bebd93
 801ea84:	3f66c16c 	.word	0x3f66c16c
 801ea88:	5555553e 	.word	0x5555553e
 801ea8c:	3fc55555 	.word	0x3fc55555
 801ea90:	c2f8f359 	.word	0xc2f8f359
 801ea94:	01a56e1f 	.word	0x01a56e1f
 801ea98:	3fe00000 	.word	0x3fe00000
 801ea9c:	000fffff 	.word	0x000fffff
 801eaa0:	3ff00000 	.word	0x3ff00000
 801eaa4:	4090cbff 	.word	0x4090cbff
 801eaa8:	3f6f3400 	.word	0x3f6f3400
 801eaac:	652b82fe 	.word	0x652b82fe
 801eab0:	3c971547 	.word	0x3c971547

0801eab4 <__ieee754_sqrt>:
 801eab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eab8:	4955      	ldr	r1, [pc, #340]	; (801ec10 <__ieee754_sqrt+0x15c>)
 801eaba:	ec55 4b10 	vmov	r4, r5, d0
 801eabe:	43a9      	bics	r1, r5
 801eac0:	462b      	mov	r3, r5
 801eac2:	462a      	mov	r2, r5
 801eac4:	d112      	bne.n	801eaec <__ieee754_sqrt+0x38>
 801eac6:	ee10 2a10 	vmov	r2, s0
 801eaca:	ee10 0a10 	vmov	r0, s0
 801eace:	4629      	mov	r1, r5
 801ead0:	f7e1 fd92 	bl	80005f8 <__aeabi_dmul>
 801ead4:	4602      	mov	r2, r0
 801ead6:	460b      	mov	r3, r1
 801ead8:	4620      	mov	r0, r4
 801eada:	4629      	mov	r1, r5
 801eadc:	f7e1 fbd6 	bl	800028c <__adddf3>
 801eae0:	4604      	mov	r4, r0
 801eae2:	460d      	mov	r5, r1
 801eae4:	ec45 4b10 	vmov	d0, r4, r5
 801eae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eaec:	2d00      	cmp	r5, #0
 801eaee:	ee10 0a10 	vmov	r0, s0
 801eaf2:	4621      	mov	r1, r4
 801eaf4:	dc0f      	bgt.n	801eb16 <__ieee754_sqrt+0x62>
 801eaf6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801eafa:	4330      	orrs	r0, r6
 801eafc:	d0f2      	beq.n	801eae4 <__ieee754_sqrt+0x30>
 801eafe:	b155      	cbz	r5, 801eb16 <__ieee754_sqrt+0x62>
 801eb00:	ee10 2a10 	vmov	r2, s0
 801eb04:	4620      	mov	r0, r4
 801eb06:	4629      	mov	r1, r5
 801eb08:	f7e1 fbbe 	bl	8000288 <__aeabi_dsub>
 801eb0c:	4602      	mov	r2, r0
 801eb0e:	460b      	mov	r3, r1
 801eb10:	f7e1 fe9c 	bl	800084c <__aeabi_ddiv>
 801eb14:	e7e4      	b.n	801eae0 <__ieee754_sqrt+0x2c>
 801eb16:	151b      	asrs	r3, r3, #20
 801eb18:	d073      	beq.n	801ec02 <__ieee754_sqrt+0x14e>
 801eb1a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801eb1e:	07dd      	lsls	r5, r3, #31
 801eb20:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801eb24:	bf48      	it	mi
 801eb26:	0fc8      	lsrmi	r0, r1, #31
 801eb28:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801eb2c:	bf44      	itt	mi
 801eb2e:	0049      	lslmi	r1, r1, #1
 801eb30:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801eb34:	2500      	movs	r5, #0
 801eb36:	1058      	asrs	r0, r3, #1
 801eb38:	0fcb      	lsrs	r3, r1, #31
 801eb3a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801eb3e:	0049      	lsls	r1, r1, #1
 801eb40:	2316      	movs	r3, #22
 801eb42:	462c      	mov	r4, r5
 801eb44:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801eb48:	19a7      	adds	r7, r4, r6
 801eb4a:	4297      	cmp	r7, r2
 801eb4c:	bfde      	ittt	le
 801eb4e:	19bc      	addle	r4, r7, r6
 801eb50:	1bd2      	suble	r2, r2, r7
 801eb52:	19ad      	addle	r5, r5, r6
 801eb54:	0fcf      	lsrs	r7, r1, #31
 801eb56:	3b01      	subs	r3, #1
 801eb58:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801eb5c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801eb60:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801eb64:	d1f0      	bne.n	801eb48 <__ieee754_sqrt+0x94>
 801eb66:	f04f 0c20 	mov.w	ip, #32
 801eb6a:	469e      	mov	lr, r3
 801eb6c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801eb70:	42a2      	cmp	r2, r4
 801eb72:	eb06 070e 	add.w	r7, r6, lr
 801eb76:	dc02      	bgt.n	801eb7e <__ieee754_sqrt+0xca>
 801eb78:	d112      	bne.n	801eba0 <__ieee754_sqrt+0xec>
 801eb7a:	428f      	cmp	r7, r1
 801eb7c:	d810      	bhi.n	801eba0 <__ieee754_sqrt+0xec>
 801eb7e:	2f00      	cmp	r7, #0
 801eb80:	eb07 0e06 	add.w	lr, r7, r6
 801eb84:	da42      	bge.n	801ec0c <__ieee754_sqrt+0x158>
 801eb86:	f1be 0f00 	cmp.w	lr, #0
 801eb8a:	db3f      	blt.n	801ec0c <__ieee754_sqrt+0x158>
 801eb8c:	f104 0801 	add.w	r8, r4, #1
 801eb90:	1b12      	subs	r2, r2, r4
 801eb92:	428f      	cmp	r7, r1
 801eb94:	bf88      	it	hi
 801eb96:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801eb9a:	1bc9      	subs	r1, r1, r7
 801eb9c:	4433      	add	r3, r6
 801eb9e:	4644      	mov	r4, r8
 801eba0:	0052      	lsls	r2, r2, #1
 801eba2:	f1bc 0c01 	subs.w	ip, ip, #1
 801eba6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801ebaa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801ebae:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801ebb2:	d1dd      	bne.n	801eb70 <__ieee754_sqrt+0xbc>
 801ebb4:	430a      	orrs	r2, r1
 801ebb6:	d006      	beq.n	801ebc6 <__ieee754_sqrt+0x112>
 801ebb8:	1c5c      	adds	r4, r3, #1
 801ebba:	bf13      	iteet	ne
 801ebbc:	3301      	addne	r3, #1
 801ebbe:	3501      	addeq	r5, #1
 801ebc0:	4663      	moveq	r3, ip
 801ebc2:	f023 0301 	bicne.w	r3, r3, #1
 801ebc6:	106a      	asrs	r2, r5, #1
 801ebc8:	085b      	lsrs	r3, r3, #1
 801ebca:	07e9      	lsls	r1, r5, #31
 801ebcc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801ebd0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801ebd4:	bf48      	it	mi
 801ebd6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801ebda:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801ebde:	461c      	mov	r4, r3
 801ebe0:	e780      	b.n	801eae4 <__ieee754_sqrt+0x30>
 801ebe2:	0aca      	lsrs	r2, r1, #11
 801ebe4:	3815      	subs	r0, #21
 801ebe6:	0549      	lsls	r1, r1, #21
 801ebe8:	2a00      	cmp	r2, #0
 801ebea:	d0fa      	beq.n	801ebe2 <__ieee754_sqrt+0x12e>
 801ebec:	02d6      	lsls	r6, r2, #11
 801ebee:	d50a      	bpl.n	801ec06 <__ieee754_sqrt+0x152>
 801ebf0:	f1c3 0420 	rsb	r4, r3, #32
 801ebf4:	fa21 f404 	lsr.w	r4, r1, r4
 801ebf8:	1e5d      	subs	r5, r3, #1
 801ebfa:	4099      	lsls	r1, r3
 801ebfc:	4322      	orrs	r2, r4
 801ebfe:	1b43      	subs	r3, r0, r5
 801ec00:	e78b      	b.n	801eb1a <__ieee754_sqrt+0x66>
 801ec02:	4618      	mov	r0, r3
 801ec04:	e7f0      	b.n	801ebe8 <__ieee754_sqrt+0x134>
 801ec06:	0052      	lsls	r2, r2, #1
 801ec08:	3301      	adds	r3, #1
 801ec0a:	e7ef      	b.n	801ebec <__ieee754_sqrt+0x138>
 801ec0c:	46a0      	mov	r8, r4
 801ec0e:	e7bf      	b.n	801eb90 <__ieee754_sqrt+0xdc>
 801ec10:	7ff00000 	.word	0x7ff00000

0801ec14 <fabs>:
 801ec14:	ec51 0b10 	vmov	r0, r1, d0
 801ec18:	ee10 2a10 	vmov	r2, s0
 801ec1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ec20:	ec43 2b10 	vmov	d0, r2, r3
 801ec24:	4770      	bx	lr

0801ec26 <finite>:
 801ec26:	ee10 3a90 	vmov	r3, s1
 801ec2a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801ec2e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801ec32:	0fc0      	lsrs	r0, r0, #31
 801ec34:	4770      	bx	lr

0801ec36 <matherr>:
 801ec36:	2000      	movs	r0, #0
 801ec38:	4770      	bx	lr
 801ec3a:	0000      	movs	r0, r0
 801ec3c:	0000      	movs	r0, r0
	...

0801ec40 <nan>:
 801ec40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801ec48 <nan+0x8>
 801ec44:	4770      	bx	lr
 801ec46:	bf00      	nop
 801ec48:	00000000 	.word	0x00000000
 801ec4c:	7ff80000 	.word	0x7ff80000

0801ec50 <rint>:
 801ec50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ec52:	ec51 0b10 	vmov	r0, r1, d0
 801ec56:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801ec5a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801ec5e:	2e13      	cmp	r6, #19
 801ec60:	460b      	mov	r3, r1
 801ec62:	ee10 4a10 	vmov	r4, s0
 801ec66:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801ec6a:	dc56      	bgt.n	801ed1a <rint+0xca>
 801ec6c:	2e00      	cmp	r6, #0
 801ec6e:	da2b      	bge.n	801ecc8 <rint+0x78>
 801ec70:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801ec74:	4302      	orrs	r2, r0
 801ec76:	d023      	beq.n	801ecc0 <rint+0x70>
 801ec78:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801ec7c:	4302      	orrs	r2, r0
 801ec7e:	4254      	negs	r4, r2
 801ec80:	4314      	orrs	r4, r2
 801ec82:	0c4b      	lsrs	r3, r1, #17
 801ec84:	0b24      	lsrs	r4, r4, #12
 801ec86:	045b      	lsls	r3, r3, #17
 801ec88:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801ec8c:	ea44 0103 	orr.w	r1, r4, r3
 801ec90:	460b      	mov	r3, r1
 801ec92:	492f      	ldr	r1, [pc, #188]	; (801ed50 <rint+0x100>)
 801ec94:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 801ec98:	e9d1 6700 	ldrd	r6, r7, [r1]
 801ec9c:	4602      	mov	r2, r0
 801ec9e:	4639      	mov	r1, r7
 801eca0:	4630      	mov	r0, r6
 801eca2:	f7e1 faf3 	bl	800028c <__adddf3>
 801eca6:	e9cd 0100 	strd	r0, r1, [sp]
 801ecaa:	463b      	mov	r3, r7
 801ecac:	4632      	mov	r2, r6
 801ecae:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ecb2:	f7e1 fae9 	bl	8000288 <__aeabi_dsub>
 801ecb6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ecba:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801ecbe:	4639      	mov	r1, r7
 801ecc0:	ec41 0b10 	vmov	d0, r0, r1
 801ecc4:	b003      	add	sp, #12
 801ecc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ecc8:	4a22      	ldr	r2, [pc, #136]	; (801ed54 <rint+0x104>)
 801ecca:	4132      	asrs	r2, r6
 801eccc:	ea01 0702 	and.w	r7, r1, r2
 801ecd0:	4307      	orrs	r7, r0
 801ecd2:	d0f5      	beq.n	801ecc0 <rint+0x70>
 801ecd4:	0852      	lsrs	r2, r2, #1
 801ecd6:	4011      	ands	r1, r2
 801ecd8:	430c      	orrs	r4, r1
 801ecda:	d00b      	beq.n	801ecf4 <rint+0xa4>
 801ecdc:	ea23 0202 	bic.w	r2, r3, r2
 801ece0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801ece4:	2e13      	cmp	r6, #19
 801ece6:	fa43 f306 	asr.w	r3, r3, r6
 801ecea:	bf0c      	ite	eq
 801ecec:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801ecf0:	2400      	movne	r4, #0
 801ecf2:	4313      	orrs	r3, r2
 801ecf4:	4916      	ldr	r1, [pc, #88]	; (801ed50 <rint+0x100>)
 801ecf6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801ecfa:	4622      	mov	r2, r4
 801ecfc:	e9d5 4500 	ldrd	r4, r5, [r5]
 801ed00:	4620      	mov	r0, r4
 801ed02:	4629      	mov	r1, r5
 801ed04:	f7e1 fac2 	bl	800028c <__adddf3>
 801ed08:	e9cd 0100 	strd	r0, r1, [sp]
 801ed0c:	4622      	mov	r2, r4
 801ed0e:	462b      	mov	r3, r5
 801ed10:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ed14:	f7e1 fab8 	bl	8000288 <__aeabi_dsub>
 801ed18:	e7d2      	b.n	801ecc0 <rint+0x70>
 801ed1a:	2e33      	cmp	r6, #51	; 0x33
 801ed1c:	dd07      	ble.n	801ed2e <rint+0xde>
 801ed1e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801ed22:	d1cd      	bne.n	801ecc0 <rint+0x70>
 801ed24:	ee10 2a10 	vmov	r2, s0
 801ed28:	f7e1 fab0 	bl	800028c <__adddf3>
 801ed2c:	e7c8      	b.n	801ecc0 <rint+0x70>
 801ed2e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801ed32:	f04f 32ff 	mov.w	r2, #4294967295
 801ed36:	40f2      	lsrs	r2, r6
 801ed38:	4210      	tst	r0, r2
 801ed3a:	d0c1      	beq.n	801ecc0 <rint+0x70>
 801ed3c:	0852      	lsrs	r2, r2, #1
 801ed3e:	4210      	tst	r0, r2
 801ed40:	bf1f      	itttt	ne
 801ed42:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801ed46:	ea20 0202 	bicne.w	r2, r0, r2
 801ed4a:	4134      	asrne	r4, r6
 801ed4c:	4314      	orrne	r4, r2
 801ed4e:	e7d1      	b.n	801ecf4 <rint+0xa4>
 801ed50:	0801fdf8 	.word	0x0801fdf8
 801ed54:	000fffff 	.word	0x000fffff

0801ed58 <scalbn>:
 801ed58:	b570      	push	{r4, r5, r6, lr}
 801ed5a:	ec55 4b10 	vmov	r4, r5, d0
 801ed5e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801ed62:	4606      	mov	r6, r0
 801ed64:	462b      	mov	r3, r5
 801ed66:	b9aa      	cbnz	r2, 801ed94 <scalbn+0x3c>
 801ed68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801ed6c:	4323      	orrs	r3, r4
 801ed6e:	d03b      	beq.n	801ede8 <scalbn+0x90>
 801ed70:	4b31      	ldr	r3, [pc, #196]	; (801ee38 <scalbn+0xe0>)
 801ed72:	4629      	mov	r1, r5
 801ed74:	2200      	movs	r2, #0
 801ed76:	ee10 0a10 	vmov	r0, s0
 801ed7a:	f7e1 fc3d 	bl	80005f8 <__aeabi_dmul>
 801ed7e:	4b2f      	ldr	r3, [pc, #188]	; (801ee3c <scalbn+0xe4>)
 801ed80:	429e      	cmp	r6, r3
 801ed82:	4604      	mov	r4, r0
 801ed84:	460d      	mov	r5, r1
 801ed86:	da12      	bge.n	801edae <scalbn+0x56>
 801ed88:	a327      	add	r3, pc, #156	; (adr r3, 801ee28 <scalbn+0xd0>)
 801ed8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed8e:	f7e1 fc33 	bl	80005f8 <__aeabi_dmul>
 801ed92:	e009      	b.n	801eda8 <scalbn+0x50>
 801ed94:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801ed98:	428a      	cmp	r2, r1
 801ed9a:	d10c      	bne.n	801edb6 <scalbn+0x5e>
 801ed9c:	ee10 2a10 	vmov	r2, s0
 801eda0:	4620      	mov	r0, r4
 801eda2:	4629      	mov	r1, r5
 801eda4:	f7e1 fa72 	bl	800028c <__adddf3>
 801eda8:	4604      	mov	r4, r0
 801edaa:	460d      	mov	r5, r1
 801edac:	e01c      	b.n	801ede8 <scalbn+0x90>
 801edae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801edb2:	460b      	mov	r3, r1
 801edb4:	3a36      	subs	r2, #54	; 0x36
 801edb6:	4432      	add	r2, r6
 801edb8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801edbc:	428a      	cmp	r2, r1
 801edbe:	dd0b      	ble.n	801edd8 <scalbn+0x80>
 801edc0:	ec45 4b11 	vmov	d1, r4, r5
 801edc4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801ee30 <scalbn+0xd8>
 801edc8:	f000 f83c 	bl	801ee44 <copysign>
 801edcc:	a318      	add	r3, pc, #96	; (adr r3, 801ee30 <scalbn+0xd8>)
 801edce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edd2:	ec51 0b10 	vmov	r0, r1, d0
 801edd6:	e7da      	b.n	801ed8e <scalbn+0x36>
 801edd8:	2a00      	cmp	r2, #0
 801edda:	dd08      	ble.n	801edee <scalbn+0x96>
 801eddc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ede0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ede4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801ede8:	ec45 4b10 	vmov	d0, r4, r5
 801edec:	bd70      	pop	{r4, r5, r6, pc}
 801edee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801edf2:	da0d      	bge.n	801ee10 <scalbn+0xb8>
 801edf4:	f24c 3350 	movw	r3, #50000	; 0xc350
 801edf8:	429e      	cmp	r6, r3
 801edfa:	ec45 4b11 	vmov	d1, r4, r5
 801edfe:	dce1      	bgt.n	801edc4 <scalbn+0x6c>
 801ee00:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801ee28 <scalbn+0xd0>
 801ee04:	f000 f81e 	bl	801ee44 <copysign>
 801ee08:	a307      	add	r3, pc, #28	; (adr r3, 801ee28 <scalbn+0xd0>)
 801ee0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee0e:	e7e0      	b.n	801edd2 <scalbn+0x7a>
 801ee10:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ee14:	3236      	adds	r2, #54	; 0x36
 801ee16:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ee1a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801ee1e:	4620      	mov	r0, r4
 801ee20:	4629      	mov	r1, r5
 801ee22:	2200      	movs	r2, #0
 801ee24:	4b06      	ldr	r3, [pc, #24]	; (801ee40 <scalbn+0xe8>)
 801ee26:	e7b2      	b.n	801ed8e <scalbn+0x36>
 801ee28:	c2f8f359 	.word	0xc2f8f359
 801ee2c:	01a56e1f 	.word	0x01a56e1f
 801ee30:	8800759c 	.word	0x8800759c
 801ee34:	7e37e43c 	.word	0x7e37e43c
 801ee38:	43500000 	.word	0x43500000
 801ee3c:	ffff3cb0 	.word	0xffff3cb0
 801ee40:	3c900000 	.word	0x3c900000

0801ee44 <copysign>:
 801ee44:	ec51 0b10 	vmov	r0, r1, d0
 801ee48:	ee11 0a90 	vmov	r0, s3
 801ee4c:	ee10 2a10 	vmov	r2, s0
 801ee50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801ee54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801ee58:	ea41 0300 	orr.w	r3, r1, r0
 801ee5c:	ec43 2b10 	vmov	d0, r2, r3
 801ee60:	4770      	bx	lr
	...

0801ee64 <_init>:
 801ee64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ee66:	bf00      	nop
 801ee68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ee6a:	bc08      	pop	{r3}
 801ee6c:	469e      	mov	lr, r3
 801ee6e:	4770      	bx	lr

0801ee70 <_fini>:
 801ee70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ee72:	bf00      	nop
 801ee74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ee76:	bc08      	pop	{r3}
 801ee78:	469e      	mov	lr, r3
 801ee7a:	4770      	bx	lr
